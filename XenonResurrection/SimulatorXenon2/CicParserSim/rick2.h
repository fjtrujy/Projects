// imports
void sub_1480B(int pc = 0);
void loc_1480E() { sub_1480B(0x1480e); }
void loc_149B5() { _ASSERT(0); }
void loc_1710E() { _ASSERT(0); }
void loc_17114() { _ASSERT(0); }
void loc_1711A() { _ASSERT(0); }
void loc_17120() { _ASSERT(0); }
void loc_17126() { _ASSERT(0); }
void loc_1712C() { _ASSERT(0); }
void loc_17132() { _ASSERT(0); }
void loc_17138() { _ASSERT(0); }
void loc_1713E() { _ASSERT(0); }
void loc_17144() { _ASSERT(0); }
void loc_1EBD7();
void loc_1EDE7() { _ASSERT(0); }
void loc_1EFF7() { _ASSERT(0); }
void loc_1FF46() { _ASSERT(0); }
void loc_1FF4F() { _ASSERT(0); }
void loc_21D47() { _ASSERT(0); }
void loc_21D50() { _ASSERT(0); }
void loc_23D1A() { _ASSERT(0); }
void loc_23D23() { _ASSERT(0); }
void nullsub_1() { }
void nullsub_2() { _ASSERT(0); }
void nullsub_3() { _ASSERT(0); }
void nullsub_4() { _ASSERT(0); }
void sub_16807();
void loc_166B6();

void sub_10000();
void sub_10067();
void sub_10089();
void sub_10097();
void sub_10101();
void sub_1011C();
void sub_10174();
void sub_1019A();
void sub_10230();
void sub_102A8();
void sub_102D4();
void sub_1034C();
void sub_10373();
void sub_103DD();
void sub_103FD();
void sub_10423();
void sub_104C9();
void start();
void sub_105A3();
void sub_1066E();
void sub_106FE();
void sub_10762();
void sub_1077C();
void sub_1078E();
void sub_107A0();
void sub_107C0();
void sub_107DC();
void sub_107ED();
void sub_1080F();
void sub_10831();
void sub_10853();
void sub_10875();
void sub_10897();
void sub_108B9();
void sub_108DB();
void sub_108FD();
void sub_1091F();
void sub_10941();
void sub_10963();
void sub_10985();
void sub_109A7();
void sub_109C9();
void sub_109EB();
void sub_10A0D();
void sub_10A2F();
void sub_10A51();
void sub_10A73();
void sub_10A95();
void sub_10AD9();
void sub_10AFB();
void loc_10B1D();
void sub_10B3F();
void sub_10B61();
void sub_10B83();
void sub_10BA5();
void sub_10BC7();
void sub_10BE9();
void sub_10C0B();
void sub_10C2D();
void sub_10C4F();
void sub_10C71();
void sub_10C93();
void sub_10CB5();
void sub_10CD7();
void sub_10CF9();
void sub_10D1B();
void sub_10D3D();
void sub_10D5F();
void sub_10D81();
void sub_10DA3();
void sub_10DC5();
void sub_10DE7();
void sub_10E09();
void sub_10E2B();
void sub_10E4D();
void sub_10E6F();
void sub_10E91();
void sub_10EB3();
void sub_10ED5();
void sub_10ED9();
void sub_10EDD();
void sub_10EE1();
void sub_10EE5();
void sub_10EE9();
void loc_10EED();
void sub_10EF1();
void sub_10EF5();
void sub_10F2B();
void sub_10F2F();
void sub_10F5A();
void sub_10F78();
void sub_10F96();
void sub_10FB4();
void sub_10FD2();
void sub_10FF0();
void sub_1100E();
void sub_11022();
void loc_1109A();
void sub_11689();
void sub_116A9();
void sub_116BA();
void sub_11827();
void sub_118F5();
void sub_1193C();
void sub_1195B();
void sub_11A19();
void sub_11A62();
void sub_11A65();
void sub_11AAF();
void sub_11B43();
void sub_11B90();
void sub_11BA2();
void sub_11BB4();
void sub_11BEA();
void sub_11C18();
void loc_11C76();
void sub_11CCC();
void sub_11D1E();
void loc_11DE4();
void sub_11E02();
void sub_11E29();
void sub_11E61();
void sub_11ED3();
void loc_127E7();
void sub_128DF();
void sub_129D7();
void loc_12A4D();
void sub_12A6E();
void locret_12AAF();
void sub_12AB2();
void loc_12ADD();
void sub_12B22();
void loc_12BC5();
void sub_12BCC();
void loc_12C21();
void sub_12C32();
void sub_12CA6();
void loc_12D2A();
void sub_12E73();
void sub_12E84();
void loc_12F08();
void sub_13117();
void loc_13126();
void sub_131B6();
void sub_13246();
void sub_13319();
void sub_13326();
void loc_13360();
void sub_13389();
void sub_13529();
void sub_13589();
void loc_135CE();
void sub_135EB();
void sub_135F2();
void sub_13615();
void sub_13682();
void sub_136FC();
void sub_1370B();
void sub_1371A();
void sub_1373D();
void sub_13760();
void sub_1376F();
void sub_13788();
void sub_137A9();
void sub_137CA();
void sub_137DF();
void loc_13809();
void sub_13998();
void sub_1399C();
void sub_139D3();
void sub_139EE();
void sub_13A33();
void sub_13A36();
void sub_13A39();
void locret_13AA6();
void sub_13AA7();
void sub_13AB2();
void sub_13B55();
void sub_13B76();
void sub_13BDF();
void sub_13C01();
void sub_13C4F();
void sub_13C75();
void sub_14191();
void sub_141A1();
void sub_141B1();
void sub_141E2();
void sub_141FB();
void sub_1421C();
void sub_1426A();
void sub_142AE();
void sub_142EB();
void sub_14311();
void sub_144F3();
void sub_145F4();
void sub_1465C();
void sub_14675();
void sub_1472D();
void sub_14759();
void loc_147A9();
void sub_147E9();
void sub_1480B(int pc);
void sub_14865();
void sub_14871();
void sub_149F1();
void sub_149F9();
void sub_14A06();
void loc_14A48();
void sub_14A69();
void sub_14BC7();
void loc_14BD4();
void sub_14C48();
void sub_14C59();
void sub_14CAD();
void sub_14CFA();
void sub_14D0D(int pc = 0);
void sub_14D38();
void sub_14E12();
void sub_14E29();
void sub_14E78();
void loc_14FC6();
void sub_14FE3();
void sub_15119();
void sub_15154();
void sub_1521A();
void sub_15240();
void sub_15319();
void sub_15369();
void sub_15435();
void sub_15488();
void sub_154DB();
void sub_154FC();
void sub_15510();
void sub_1558E();
void sub_155D0();
void sub_15612();
void sub_1561C();
void sub_15691();
void sub_156B8();
void sub_1576D();
void sub_1577D();
void sub_15787();
void sub_157FA();
void sub_1580D();
void sub_15829();
void sub_15835();
void sub_15863();
void sub_15926();
void sub_15935();
void sub_15950();
void sub_1595D();
void sub_159AA();
void sub_159C8();
void sub_15B0B();
void sub_15B10();
void sub_15B21();
void sub_15C0F();
void sub_15C7C();
void sub_15C8B();
void sub_15CC5();
void loc_15E04();
void sub_15E24();
void sub_15E35();
void sub_15E52();
void sub_15E59();
void sub_15E5E();
void sub_15E7A();
void sub_15E8A();
void sub_15EC3();
void sub_15EEB();
void sub_16058();
void sub_160A5();
void sub_160EF();
void sub_1655B();
void sub_165F6();
void sub_16D22();
void sub_16F00();
void sub_16F7F();
void sub_16FE0();
void loc_1705B();
void sub_170CA();
void sub_170F1();
void sub_1714A();
void sub_1714D();
void sub_171DD();
void sub_172C4();
void sub_17520();
void sub_17569();
void sub_1758F();
void loc_18B81();
void sub_18C5F();
void sub_18C85();
void loc_18CC6();
void sub_18DF0();
void loc_18E72();
void sub_19E89();
void loc_19EB6();
void sub_19F02();
void loc_19F19();
void sub_1A027();
void sub_1A090();
void sub_1A0E5();
void loc_1A1F4();
void sub_1EBD0(int pc = 0);
void sub_1EC6F();
void sub_1EDE0();
void sub_1EE78();
void sub_1EFF0();
void sub_1F085();
void loc_1F290();
void sub_1F2BA();
void sub_1F2D5();
void sub_1F2E4();
void sub_1F2FF();
void sub_1F325();
void sub_1F363();
void sub_1F371();
void sub_1F37A();
void sub_1F383();
void sub_1F38C();
void sub_1F3A7();
void sub_1F3AE();
void sub_1F3B5();
void sub_1F3C7();
void sub_1F3D7();
void sub_1F3EF();
void sub_1F492();
void sub_1F57C();
void sub_1F585();
void sub_1F6F8();
void loc_1F73C();
void sub_1F787();
void loc_1F7C0();
void sub_1F816();
void loc_1F851();
void sub_1F891();
void loc_1F8C1();
void sub_1F909();
void loc_1F93B();
void sub_1F970();
void loc_1F997();
void sub_1F9D4();
void loc_1F9FD();
void sub_1FA27();
void loc_1FA46();
void sub_1FADB();
void loc_1FB1B();
void sub_1FB64();
void loc_1FB9B();
void sub_1FBD8();
void loc_1FC06();
void sub_1FC37();
void loc_1FC5C();
void sub_1FD05();
void loc_1FD3E();
void sub_1FD84();
void loc_1FDB8();
void sub_1FDF2();
void loc_1FE1D();
void sub_1FE4D();
void sub_1FE70();
void loc_1FE85();
void sub_1FEA1();
void sub_1FEDE();
void sub_1FF41();
void sub_203DA();
void sub_20482();
void sub_20568();
void sub_2058D();
void sub_205A9();
void sub_205AE();
void sub_205ED();
void sub_20627();
void sub_20653();
void sub_20708();
void sub_20721();
void sub_20829();
void sub_20854();
void sub_208DC();
void sub_208F9();
void sub_20919();
void sub_2095F();
void sub_20973();
void sub_2098C();
void sub_209A6();
void sub_209E9();
void sub_20A1D();
void sub_20A2E();
void sub_20A39();
void sub_20A3C();
void sub_20A47();
void sub_20A5C();
void sub_20AC0();
void sub_20AD0();
void sub_20B5B();
void sub_20B8A();
void sub_20BBF();
void sub_20BE5();
void sub_20C5E();
void sub_20C7B();
void sub_20CBB();
void sub_20CFE();
void sub_20D18();
void loc_20D45();
void sub_20D87();
void sub_20D8A();
void sub_20F54();
void sub_20F91();
void sub_21090();
void sub_21132();
void sub_211B0();
void sub_211CC();
void sub_2120E();
void loc_2130B();
void sub_2133E();
void sub_2134D();
void sub_2136C();
void sub_2138B();
void sub_214C2();
void sub_214E6();
void sub_2154D();
void sub_21582();
void sub_2159D();
void sub_215BB();
void sub_2160E();
void sub_2162C();
void sub_2167F();
void sub_21696();
void sub_216C0();
void sub_216E8();
void sub_21712();
void sub_21765();
void sub_21781();
void sub_217DB();
void sub_21836();
void sub_2183D();
void sub_21844();
void sub_21870();
void sub_21914();
void sub_2191D();
void sub_21CA2();
void sub_21CDF();
void sub_21D42();
void sub_21F4B();
void sub_21FC9();
void sub_21FF4();
void sub_220D4();
void sub_220DC();
void sub_22152();
void sub_22163();
void sub_22168();
void sub_2217E();
void sub_2219A();
void sub_22232();
void sub_2224B();
void sub_2234E();
void sub_22386();
void sub_22410();
void sub_2242F();
void sub_2244F();
void sub_22490();
void sub_22495();
void sub_224B0();
void sub_224F5();
void sub_22529();
void sub_2253A();
void sub_22545();
void sub_22548();
void sub_22553();
void sub_22568();
void sub_225AC();
void sub_22616();
void sub_22634();
void sub_2264D();
void sub_22651();
void sub_226DE();
void sub_2271E();
void sub_2273E();
void sub_2275C();
void sub_2276F();
void sub_2278D();
void sub_228BD();
void sub_228E5();
void sub_22911();
void sub_22979();
void sub_229C0();
void sub_22A02();
void sub_22CA8();
void sub_22CAC();
void sub_22CBE();
void sub_22CD9();
void sub_22DAE();
void sub_22DDA();
void sub_22DF0();
void sub_22E1C();
void sub_22E5D();
void sub_22E89();
void sub_22EA0();
void sub_22ECA();
void sub_22EE8();
void sub_22EF7();
void sub_22F28();
void sub_22F31();
void sub_22F4F();
void sub_22FAE();
void sub_22FB6();
void sub_22FDF();
void sub_2300D();
void sub_23014();
void sub_2301B();
void sub_23023();
void loc_23030();
void sub_23046();
void sub_23077();
void sub_2312A();
void sub_231A5();
void sub_23294();
void sub_2330D();
void sub_23316();
void sub_23C75();
void sub_23CB2();
void sub_23D15();
void sub_23E4F();
void sub_23ED2();
void sub_2410B();
void sub_2411A();
void sub_2412B();
void sub_24130();
void sub_24144();
void sub_24154();
void sub_24162();
void sub_24178();
void sub_24185();
void sub_241B3();
void sub_24237();
void sub_24250();
void sub_24323();
void sub_24348();
void sub_243D6();
void sub_243F9();
void sub_2441D();
void sub_24475();
void sub_24488();
void sub_244A3();
void sub_244EC();
void sub_24524();
void sub_24535();
void sub_24540();
void sub_24547();
void sub_24552();
void sub_24567();
void sub_245B4();
void sub_245CD();
void sub_24649();
void sub_24679();
void sub_2468C();
void sub_246B1();
void sub_246E5();
void sub_24766();
void sub_2477B();
void sub_247BF();
void sub_247E4();
void sub_2480E();
void sub_24835();
void sub_24997();
void sub_249C3();
void sub_249F4();
void sub_24A2F();
void sub_24AAA();
void sub_24AFC();
void sub_24B90();
void sub_24CD5();
void sub_24D1C();
void sub_24D33();
void sub_24D57();
void loc_24E2D();
void sub_24E8B();
void sub_24EFC();
void sub_24F05();
void sub_24F12();
void sub_115E4();
void sub_11588();

void sub_10000()
{
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _cx = 0x0008;                               //mov cx, 8
    _di = 0x8e58;                               //mov di, 8E58h
    _al = 0xff;                                 //mov al, 0FFh
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _ax = 0x1a00;                               //mov ax, 1A00h
    _interrupt(16);                             //int 10h
    if (_al != 0x1a)                            //jnz short loc_10032
      goto loc_10032;
    if (_bl >= _bh)                             //jnb short loc_1001D
      goto loc_1001D;
    _bl = _bh;                                  //mov bl, bh
loc_1001D:                                      //loc_1001D:
    if (_bl < 0x0b)                             //jb short loc_1002C
      goto loc_1002C;
    if (_bl > 0x0c)                             //ja short loc_1002C
      goto loc_1002C;
    memory(_ds, 0x8E5A) = 0x00;                 //mov byte_3138A, 0
loc_1002C:                                      //loc_1002C:
    memory(_ds, 0x8E58) = 0x00;                 //mov byte_31388, 0
    return;                                     //retn
loc_10032:                                      //loc_10032:
    memory(_ds, 0x8E59) = 0x00;                 //mov byte_31389, 0
    sub_10067();                                //call sub_10067
    sub_10089();                                //call sub_10089
    sub_10097();                                //call sub_10097
    _dx = 0x03b4;                               //mov dx, 3B4h
    sub_10101();                                //call sub_10101
    if (_FIXME_)                                //jb short loc_1005C
      goto loc_1005C;
    _dl = 0xba;                                 //mov dl, 0BAh
    _in(_al, _dx);                              //in al, dx
    _al &= 0x80;                                //and al, 80h
    _ah = _al;                                  //mov ah, al
    _cx = 0x8000;                               //mov cx, 8000h
loc_10052:                                      //loc_10052:
    _in(_al, _dx);                              //in al, dx
    _al &= 0x80;                                //and al, 80h
    if (--_cx && _al == _ah)                    //loope loc_10052
      goto loc_10052;
    if (_al == _ah)                             //jz short loc_10061
      goto loc_10061;
    return;                                     //retn
loc_1005C:                                      //loc_1005C:
    memory(_ds, 0x8E5C) = 0x00;                 //mov byte_3138C, 0
loc_10061:                                      //loc_10061:
    memory(_ds, 0x8E5D) = 0x00;                 //mov byte_3138D, 0
}

void sub_10067()
{
    _bl = 0x10;                                 //mov bl, 10h
    _ah = 0x12;                                 //mov ah, 12h
    _interrupt(16);                             //int 10h
    if (_bl == 0x10)                            //jz short loc_10083
      goto loc_10083;
    _ah = 0x12;                                 //mov ah, 12h
    _bl = 0x10;                                 //mov bl, 10h
    _interrupt(16);                             //int 10h
    if (_bl >= 0x03)                            //jnb short locret_10082
      goto locret_10082;
    memory(_ds, 0x8E5E) = 0x00;                 //mov byte_3138E, 0
locret_10082:                                   //locret_10082:
    return;                                     //retn
loc_10083:                                      //loc_10083:
    memory(_ds, 0x8E5A) = 0x00;                 //mov byte_3138A, 0
}

void sub_10089()
{
    _dx = 0x03d4;                               //mov dx, 3D4h
    sub_10101();                                //call sub_10101
    if (_FIXME_)                                //jnb short locret_10096
      goto locret_10096;
    memory(_ds, 0x8E5B) = 0x00;                 //mov byte_3138B, 0
locret_10096:                                   //locret_10096:
    return;
}

void sub_10097()
{
    _bx = 0xb800;                               //mov bx, 0B800h
    _es = _bx;                                  //mov es, bx
    _di = _di ^ _di;                            //xor di, di
    _push(memory16(_es, 0x0));                  //push word ptr es:0
    memory16(_es, 0x0) = 0x414a;                //mov word ptr es:0, 414Ah
    _interrupt(18);                             //int 12h
    _ax += 0x003f;                              //add ax, 3Fh
    _ax &= 0xffc0;                              //and ax, 0FFC0h
    _ax -= 0x0040;                              //sub ax, 40h
    _cl = 0x06;                                 //mov cl, 6
    _ax <<= _cl;                                //shl ax, cl
    _es = _ax;                                  //mov es, ax
    _dx = _ax;                                  //mov dx, ax
    _ax = 0x414a;                               //mov ax, 414Ah
    _cx = 0x8000;                               //mov cx, 8000h
loc_100C3:                                      //loc_100C3:
    _repne_scasw();                             //repne scasw
    if (_ax == 0)                               //jz short loc_100D6
      goto loc_100D6;
    _es = _bx;                                  //mov es, bx
    _di = _di ^ _di;                            //xor di, di
    memory16(_es, 0x0) = _pop();                //pop word ptr es:0
    memory(_ds, 0x8E58) = 0x00;                 //mov byte_31388, 0
    return;                                     //retn
loc_100D6:                                      //loc_100D6:
    _di -= 0x0002;                              //sub di, 2
    _es = _bx;                                  //mov es, bx
    memory16(_es, 0x0) = 0x4849;                //mov word ptr es:0, 4849h
    _es = _dx;                                  //mov es, dx
    if (memory16(_es, _di) != 0x4849)           //jnz short loc_100F1
      goto loc_100F1;
    memory16(_es, 0x0) = _pop();                //pop word ptr es:0
    return;                                     //retn
loc_100F1:                                      //loc_100F1:
    _es = _bx;                                  //mov es, bx
    memory16(_es, 0x0) = 0x414a;                //mov word ptr es:0, 414Ah
    _es = _dx;                                  //mov es, dx
    _di += 0x0002;                              //add di, 2
    goto loc_100C3;                             //jmp short loc_100C3
}

void sub_10101()
{
    _al = 0x0f;                                 //mov al, 0Fh
    _out(_dx, _al);                             //out dx, al
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _in(_al, _dx);                              //in al, dx
    _ah = _al;                                  //mov ah, al
    _al = 0x66;                                 //mov al, 66h
    _out(_dx, _al);                             //out dx, al
    _cx = 0x0100;                               //mov cx, 100h
loc_1010F:                                      //loc_1010F:
    if (--_cx)                                  //loop loc_1010F
      goto loc_1010F;
    _in(_al, _dx);                              //in al, dx
    _xchg(_al, _ah);                            //xchg al, ah
    _out(_dx, _al);                             //out dx, al
    if (_ah == 0x66)                            //jz short locret_1011B
      goto locret_1011B;
    _flags.carry = true;                        //stc
locret_1011B:                                   //locret_1011B:
    return;
}

void sub_1011C()
{
    _ax = 0x3d00;                               //mov ax, 3D00h
    _interrupt(33);                             //int 21h
    if (!_flags.carry)                          //jnb short loc_10126
      goto loc_10126;
{loc_15E04(); return; };                        //
loc_10126:                                      //loc_10126:
    _push(_ds);                                 //push ds
    _bx = _seg003;                              //mov bx, seg seg003
    _ds = _bx;                                  //mov ds, bx
    memory16(_ds, 0x236C) = _di;                //mov word_279BC, di
    memory16(_ds, 0x236E) = _es;                //mov word_279BE, es
    _es = _bx;                                  //mov es, bx
    memory16(_ds, 0x2370) = _ax;                //mov word_279C0, ax
    _ah = 0x3f;                                 //mov ah, 3Fh
    _bx = memory16(_ds, 0x2370);                //mov bx, word_279C0
    _cx = 0x0200;                               //mov cx, 200h
    _dx = 0x216c;                               //mov dx, 216Ch
    _interrupt(33);                             //int 21h
    if (!_flags.carry)                          //jnb short loc_1014C
      goto loc_1014C;
{loc_15E04(); return; };                        //
loc_1014C:                                      //loc_1014C:
    _ax = memory16(_ds, 0x2177);                //mov ax, word_277C7
    memory16(_ds, 0x0) = _ax;                   //mov word_25650, ax
    _ax = memory16(_ds, 0x2179);                //mov ax, word_277C9
    memory16(_ds, 0x2) = _ax;                   //mov word_25652, ax
    _al = memory(_ds, 0x216C);                  //mov al, byte_277BC
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax += 0x216e;                              //add ax, 216Eh
    memory16(_ds, 0x216A) = _ax;                //mov word_277BA, ax
    sub_1019A();                                //call sub_1019A
    _ah = 0x3e;                                 //mov ah, 3Eh
    _bx = memory16(_ds, 0x2370);                //mov bx, word_279C0
    _interrupt(33);                             //int 21h
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_1011C endp_failed
//    _STOP_("continues");                        //sub_10174 proc near
}

void sub_10174()
{
    _push(_di);                                 //push di
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _di = 0x216c;                               //mov di, 216Ch
    _cx = 0x0100;                               //mov cx, 100h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _bx = memory16(_ds, 0x2370);                //mov bx, word_2A8A0
    _cx = 0x0200;                               //mov cx, 200h
    _dx = 0x216c;                               //mov dx, 216Ch
    _ah = 0x3f;                                 //mov ah, 3Fh
    _interrupt(33);                             //int 21h
    if (!_flags.carry)                          //jnb short loc_10195
      goto loc_10195;
{loc_15E04(); return; };                        //
loc_10195:                                      //loc_10195:
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _di = _pop();                               //pop di
}

void sub_1019A()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _ax = memory16(_ds, 0x0);                   //mov ax, word_28530
    _ax = _ax | memory16(_ds, 0x2);             //or ax, word_28532
    if (_ax != 0)                               //jnz short loc_101A9
      goto loc_101A9;
    goto loc_1022C;                             //jmp loc_1022C
loc_101A9:                                      //loc_101A9:
    sub_10230();                                //call sub_10230
    sub_102A8();                                //call sub_102A8
    _di = 0x0fc4;                               //mov di, 0FC4h
loc_101B2:                                      //loc_101B2:
    _push(_di);                                 //push di
    sub_102D4();                                //call sub_102D4
    _di = _ax;                                  //mov di, ax
    if ((short)_ax >= (short)0x0100)            //jge short loc_101E0
      goto loc_101E0;
    _di = _pop();                               //pop di
    _push(_es);                                 //push es
    _push(_di);                                 //push di
    _les(_di, _ds, 0x236C);           //les di, dword_2A89C
    _stosb<MemAuto, DirAuto>();                 //stosb
    memory16(_ds, 0x236C) = _di;                //mov word ptr dword_2A89C, di
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
    memory(_ds, _di + 4399) = _al;              //mov [di+112Fh], al
    _di += 1;                                   //inc di
    _di &= 0x0fff;                              //and di, 0FFFh
    _flags.carry = memory16(_ds, 0x0) < 0x0001; //sub word_28530, 1
    memory16(_ds, 0x0) -= 0x0001;
    memory16(_ds, 0x2) -= 0x0000 + _flags.carry;//sbb word_28532, 0
    goto loc_1021D;                             //jmp short loc_1021D
loc_101E0:                                      //loc_101E0:
    sub_1034C();                                //call sub_1034C
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _di;                                  //mov si, di
    _si -= _ax;                                 //sub si, ax
    _si -= 1;                                   //dec si
    _si &= 0x0fff;                              //and si, 0FFFh
    _cx -= 0x00fd;                              //sub cx, 0FDh
    _flags.carry = memory16(_ds, 0x0) < _cx;    //sub word_28530, cx
    memory16(_ds, 0x0) -= _cx;
    memory16(_ds, 0x2) -= 0x0000 + _flags.carry;//sbb word_28532, 0
loc_101FC:                                      //loc_101FC:
    _al = memory(_ds, _si + 4399);              //mov al, [si+112Fh]
    memory(_ds, _di + 4399) = _al;              //mov [di+112Fh], al
    _si += 1;                                   //inc si
    _di += 1;                                   //inc di
    _si &= 0x0fff;                              //and si, 0FFFh
    _di &= 0x0fff;                              //and di, 0FFFh
    _push(_es);                                 //push es
    _push(_di);                                 //push di
    _les(_di, _ds, 0x236C);           //les di, dword_2A89C
    _stosb<MemAuto, DirAuto>();                 //stosb
    memory16(_ds, 0x236C) = _di;                //mov word ptr dword_2A89C, di
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
    if (--_cx)                                  //loop loc_101FC
      goto loc_101FC;
loc_1021D:                                      //loc_1021D:
    _ax = memory16(_ds, 0x2);                   //mov ax, word_28532
    _flags.sign = !!(_ax & 0x8000);             //or ax, ax
    _ax |= _ax;
    if (_flags.sign)                            //js short loc_1022C
      goto loc_1022C;
    _ax = _ax | memory16(_ds, 0x0);             //or ax, word_28530
    if (_ax == 0)                               //jz short loc_1022C
      goto loc_1022C;
    goto loc_101B2;                             //jmp short loc_101B2
loc_1022C:                                      //loc_1022C:
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void sub_10230()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _flags.direction = false;                   //cld
    _ax = 0x0001;                               //mov ax, 1
    _cx = 0x013a;                               //mov cx, 13Ah
    _di = 0x0004;                               //mov di, 4
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _ax = 0x04e6;                               //mov ax, 4E6h
    _dx = 0x0000;                               //mov dx, 0
    _cx = 0x013a;                               //mov cx, 13Ah
    _di = 0x0c46;                               //mov di, 0C46h
    _bx = 0x09d2;                               //mov bx, 9D2h
loc_10251:                                      //loc_10251:
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax += 0x0002;                              //add ax, 2
    memory16(_ds, _bx) = _dx;                   //mov [bx], dx
    _bx += 0x0002;                              //add bx, 2
    _dx += 0x0002;                              //add dx, 2
    if (--_cx)                                  //loop loc_10251
      goto loc_10251;
    _si = 0x0000;                               //mov si, 0
    _di = 0x0002;                               //mov di, 2
    _bx = 0x0274;                               //mov bx, 274h
    _cx = 0x0139;                               //mov cx, 139h
loc_1026B:                                      //loc_1026B:
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax = _ax + memory16(_ds, _di + 4);         //add ax, [di+4]
    memory16(_ds, _bx + 4) = _ax;               //mov [bx+4], ax
    memory16(_ds, _bx + 3142) = _si;            //mov [bx+0C46h], si
    memory16(_ds, _si + 1260) = _bx;            //mov [si+4ECh], bx
    memory16(_ds, _di + 1260) = _bx;            //mov [di+4ECh], bx
    _si += 0x0004;                              //add si, 4
    _di += 0x0004;                              //add di, 4
    _bx += 0x0002;                              //add bx, 2
    if (--_cx)                                  //loop loc_1026B
      goto loc_1026B;
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x112C) = _ax;                //mov word_2965C, ax
    memory16(_ds, 0x112C) = _ax;                //mov word_2965C, ax
    memory(_ds, 0x112E) = _al;                  //mov byte_2965E, al
    memory(_ds, 0x112E) = _al;                  //mov byte_2965E, al
    memory16(_ds, 0x4EA) = 0xffff;              //mov word_28A1A, 0FFFFh
    memory16(_ds, 0x9D0) = _ax;                 //mov word_28F00, ax
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void sub_102A8()
{
    _flags.direction = false;                   //cld
    _di = _ds;                                  //mov di, ds
    _es = _di;                                  //mov es, di
    _di = 0x112f;                               //mov di, 112Fh
    _al = 0x00;                                 //mov al, 0
    _bx = 0x000d;                               //mov bx, 0Dh
loc_102B5:                                      //loc_102B5:
    _cx = _bx;                                  //mov cx, bx
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _al += 1;                                   //inc al
    if (_al != 0)                               //jnz short loc_102B5
      goto loc_102B5;
loc_102BD:                                      //loc_102BD:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al += 1;                                   //inc al
    if (_al != 0)                               //jnz short loc_102BD
      goto loc_102BD;
loc_102C2:                                      //loc_102C2:
    _al -= 1;                                   //dec al
    _stosb<MemAuto, DirAuto>();                 //stosb
    if (_al != 0)                               //jnz short loc_102C2
      goto loc_102C2;
    _cx = 0x0080;                               //mov cx, 80h
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _cx = 0x0080;                               //mov cx, 80h
    _al = 0x20;                                 //mov al, 20h
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
}

void sub_102D4()
{
    _si = memory16(_ds, 0x112A);                //mov si, word_2965A
    _dx = memory16(_ds, 0x112C);                //mov dx, word_2965C
    _cl = memory(_ds, 0x112E);                  //mov cl, byte_2965E
    _cx &= 0x00ff;                              //and cx, 0FFh
    goto loc_102F4;                             //jmp short loc_102F4
loc_102E6:                                      //loc_102E6:
    _si >>= 1;                                  //shr si, 1
    _flags.carry = !!(_dx & 0x8000);            //shl dx, 1
    _dx <<= 1;
    _si = _si + 0x0000 + _flags.carry;          //adc si, 0
    _si <<= 1;                                  //shl si, 1
    _si = memory16(_ds, _si + 3142);            //mov si, [si+0C46h]
    _cx -= 1;                                   //dec cx
loc_102F4:                                      //loc_102F4:
    if (_cx == 0)                               //jz short loc_10312
      goto loc_10312;
loc_102F6:                                      //loc_102F6:
    if (_si < 0x04e6)                           //jb short loc_102E6
      goto loc_102E6;
    memory16(_ds, 0x112C) = _dx;                //mov word_2965C, dx
    memory(_ds, 0x112E) = _cl;                  //mov byte_2965E, cl
    _si -= 0x04e6;                              //sub si, 4E6h
    _dx = _si;                                  //mov dx, si
    sub_10373();                                //call sub_10373
    _ax = _dx;                                  //mov ax, dx
    _ax >>= 1;                                  //shr ax, 1
    return;                                     //retn
loc_10312:                                      //loc_10312:
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x216A);                //mov si, word_2A69A
    if ((short)_si < (short)0x236c)             //jl short loc_10323
      goto loc_10323;
    sub_10174();                                //call sub_10174
    _si = 0x216c;                               //mov si, 216Ch
loc_10323:                                      //loc_10323:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    memory16(_ds, 0x216A) = _si;                //mov word_2A69A, si
    _si = _pop();                               //pop si
    _dh = _al;                                  //mov dh, al
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x216A);                //mov si, word_2A69A
    if ((short)_si < (short)0x236c)             //jl short loc_1033E
      goto loc_1033E;
    sub_10174();                                //call sub_10174
    _si = 0x216c;                               //mov si, 216Ch
loc_1033E:                                      //loc_1033E:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    memory16(_ds, 0x216A) = _si;                //mov word_2A69A, si
    _si = _pop();                               //pop si
    _dl = _al;                                  //mov dl, al
    _cl = 0x10;                                 //mov cl, 10h
    goto loc_102F6;                             //jmp short loc_102F6
}

void sub_1034C()
{
    sub_103DD();                                //call sub_103DD
    _si = _ax;                                  //mov si, ax
    _dl = memory(_ds, _si + 9074);              //mov dl, [si+2372h]
    _dh = 0x00;                                 //mov dh, 0
    _cl = 0x06;                                 //mov cl, 6
    _dx <<= _cl;                                //shl dx, cl
    _push(_dx);                                 //push dx
    _cl = memory(_ds, _si + 9330);              //mov cl, [si+2472h]
    _ch = 0x00;                                 //mov ch, 0
    _cx -= 0x0002;                              //sub cx, 2
    sub_103FD();                                //call sub_103FD
    _ax |= _si;                                 //or ax, si
    _rol(_ax, _cl);                             //rol ax, cl
    _ax &= 0x003f;                              //and ax, 3Fh
    _dx = _pop();                               //pop dx
    _ax += _dx;                                 //add ax, dx
}

void sub_10373()
{
    if (memory16(_ds, 0x4E8) < 0x8000)          //jb short loc_1037E
      goto loc_1037E;
    sub_10423();                                //call sub_10423
loc_1037E:                                      //loc_1037E:
    _si = memory16(_ds, _si + 2514);            //mov si, [si+9D2h]
loc_10382:                                      //loc_10382:
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax += 1;                                   //inc ax
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _lea(_di, _ds, _si + 2);                    //lea di, [si+2]
    if (_ax > memory16(_ds, _di + 4))           //ja short loc_10396
      goto loc_10396;
    goto loc_103D2;                             //jmp short loc_103D2
loc_10396:                                      //loc_10396:
    _di += 1;                                   //inc di
    _di += 1;                                   //inc di
    if (_ax > memory16(_ds, _di + 4))           //ja short loc_10396
      goto loc_10396;
    _di -= 1;                                   //dec di
    _di -= 1;                                   //dec di
    _xchg(_ax, memory16(_ds, _di + 4));         //xchg ax, [di+4]
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _bx = memory16(_ds, _si + 3142);            //mov bx, [si+0C46h]
    memory16(_ds, _bx + 1260) = _di;            //mov [bx+4ECh], di
    if (_bx >= 0x04e6)                          //jnb short loc_103BA
      goto loc_103BA;
    memory16(_ds, _bx + 1262) = _di;            //mov [bx+4EEh], di
loc_103BA:                                      //loc_103BA:
    _xchg(_bx, memory16(_ds, _di + 3142));      //xchg bx, [di+0C46h]
    memory16(_ds, _bx + 1260) = _si;            //mov [bx+4ECh], si
    if (_bx >= 0x04e6)                          //jnb short loc_103CC
      goto loc_103CC;
    memory16(_ds, _bx + 1262) = _si;            //mov [bx+4EEh], si
loc_103CC:                                      //loc_103CC:
    memory16(_ds, _si + 3142) = _bx;            //mov [si+0C46h], bx
    _si = _di;                                  //mov si, di
loc_103D2:                                      //loc_103D2:
    _si = memory16(_ds, _si + 1260);            //mov si, [si+4ECh]
    _si |= _si;                                 //or si, si
    if (_si == 0)                               //jz short locret_103DC
      goto locret_103DC;
    goto loc_10382;                             //jmp short loc_10382
locret_103DC:                                   //locret_103DC:
    return;
}

void sub_103DD()
{
    _dx = memory16(_ds, 0x112C);                //mov dx, word_2965C
    if ((char)memory(_ds, 0x112E) > (char)0x08) //jg short loc_103EB
      goto loc_103EB;
    sub_104C9();                                //call sub_104C9
loc_103EB:                                      //loc_103EB:
    _xchg(_dl, _dh);                            //xchg dl, dh
    _ax = _dx;                                  //mov ax, dx
    _dl = _dl ^ _dl;                            //xor dl, dl
    memory16(_ds, 0x112C) = _dx;                //mov word_2965C, dx
    memory(_ds, 0x112E) -= 0x08;                //sub byte_2965E, 8
    _ah = _ah ^ _ah;                            //xor ah, ah
}

void sub_103FD()
{
    _push(_cx);                                 //push cx
    _dx = memory16(_ds, 0x112C);                //mov dx, word_2965C
    if ((char)memory(_ds, 0x112E) > (char)0x08) //jg short loc_1040C
      goto loc_1040C;
    sub_104C9();                                //call sub_104C9
loc_1040C:                                      //loc_1040C:
    _cx = _pop();                               //pop cx
    _ax = _dx;                                  //mov ax, dx
    _dx <<= _cl;                                //shl dx, cl
    memory16(_ds, 0x112C) = _dx;                //mov word_2965C, dx
    memory(_ds, 0x112E) -= _cl;                 //sub byte_2965E, cl
    _dx = 0xffff;                               //mov dx, 0FFFFh
    _dx >>= _cl;                                //shr dx, cl
    _dx = (~_dx);                               //not dx
    _ax &= _dx;                                 //and ax, dx
}

void sub_10423()
{
    _push(_si);                                 //push si
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _si = _si ^ _si;                            //xor si, si
    _di = _si;                                  //mov di, si
loc_1042C:                                      //loc_1042C:
    if (memory16(_ds, _si + 3142) < 0x04e6)     //jb short loc_10449
      goto loc_10449;
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax += 1;                                   //inc ax
    _ax >>= 1;                                  //shr ax, 1
    memory16(_ds, _di + 4) = _ax;               //mov [di+4], ax
    _ax = memory16(_ds, _si + 3142);            //mov ax, [si+0C46h]
    memory16(_ds, _di + 3142) = _ax;            //mov [di+0C46h], ax
    _di += 1;                                   //inc di
    _di += 1;                                   //inc di
loc_10449:                                      //loc_10449:
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (_si < 0x04e6)                           //jb short loc_1042C
      goto loc_1042C;
    _si = _si ^ _si;                            //xor si, si
    _di = 0x0274;                               //mov di, 274h
loc_10456:                                      //loc_10456:
    _bx = _si;                                  //mov bx, si
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax = _ax + memory16(_ds, _bx + 4);         //add ax, [bx+4]
    memory16(_ds, _di + 4) = _ax;               //mov [di+4], ax
    _bx = _di;                                  //mov bx, di
loc_10468:                                      //loc_10468:
    _bx -= 1;                                   //dec bx
    _bx -= 1;                                   //dec bx
    if (_ax < memory16(_ds, _bx + 4))           //jb short loc_10468
      goto loc_10468;
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _cx = _di;                                  //mov cx, di
    _cx -= _bx;                                 //sub cx, bx
    _cx >>= 1;                                  //shr cx, 1
    _flags.direction = true;                    //std
    _push(_cx);                                 //push cx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _lea(_si, _ds, _di + 4);                    //lea si, [di+4]
    _di = _si;                                  //mov di, si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    memory16(_ds, _bx + 4) = _ax;               //mov [bx+4], ax
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _cx = _pop();                               //pop cx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _lea(_si, _ds, _di + 3142);                 //lea si, [di+0C46h]
    _di = _si;                                  //mov di, si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    memory16(_ds, _bx + 3142) = _si;            //mov [bx+0C46h], si
    _si += 0x0004;                              //add si, 4
    _di += 0x0002;                              //add di, 2
    if (_di < 0x04e6)                           //jb short loc_10456
      goto loc_10456;
    _si = _si ^ _si;                            //xor si, si
loc_104AD:                                      //loc_104AD:
    _di = memory16(_ds, _si + 3142);            //mov di, [si+0C46h]
    memory16(_ds, _di + 1260) = _si;            //mov [di+4ECh], si
    if (_di >= 0x04e6)                          //jnb short loc_104BF
      goto loc_104BF;
    memory16(_ds, _di + 1262) = _si;            //mov [di+4EEh], si
loc_104BF:                                      //loc_104BF:
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (_si < 0x04e6)                           //jb short loc_104AD
      goto loc_104AD;
    _si = _pop();                               //pop si
}

void sub_104C9()
{
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x216A);                //mov si, word_2A69A
    if ((short)_si < (short)0x236c)             //jl short loc_104DA
      goto loc_104DA;
    sub_10174();                                //call sub_10174
    _si = 0x216c;                               //mov si, 216Ch
loc_104DA:                                      //loc_104DA:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    memory16(_ds, 0x216A) = _si;                //mov word_2A69A, si
    _si = _pop();                               //pop si
    _cl = 0x08;                                 //mov cl, 8
    _cl = _cl - memory(_ds, 0x112E);            //sub cl, byte_2965E
    _ax <<= _cl;                                //shl ax, cl
    _dx |= _ax;                                 //or dx, ax
    memory(_ds, 0x112E) += 0x08;                //add byte_2965E, 8
}

void start()
{
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _flags.direction = false;                   //cld
    memory16(_ds, 0x8E6A) = _sp;                //mov word_3139A, sp
    sub_105A3();                                //call sub_105A3
    memory16(_ds, 0x8E6C) = 0x0000;             //mov word_3139C, 0
    sub_107ED();                                //call sub_107ED
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    memory16(_ds, 0x8E8A) = 0x0000;             //mov word_313BA, 0
    _push(_es);                                 //push es
    _ax = _ax ^ _ax;                            //xor ax, ax
    _es = _ax;                                  //mov es, ax
    _flags.interrupt = false;                   //cli
//    memory16(_es, 0x200) = _STOP_;              //mov word ptr es:200h, offset sub_24B90
//    memory16(_es, 0x202) = _seg002;             //mov word ptr es:202h, seg seg002
    _flags.interrupt = true;                    //sti
    _es = _pop();                               //pop es
    _ah = 0x22;                                 //mov ah, 22h
    _al = 0x16;                                 //mov al, 16h
    _interrupt(128);                            //int 80h
    sub_15E8A();                                //call sub_15E8A
    memory16(_ds, 0x3048) = 0x0000;             //mov word_2B578, 0
loc_1053B:                                      //loc_1053B:
//    if ((short)memory16(_ds, 0x3048) < (short)0x0028)//jl short loc_1053B
//      goto loc_1053B;
    sub_15E5E();                                //call sub_15E5E
    sub_15C8B();                                //call sub_15C8B
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    sub_13C75();                                //call sub_13C75
loc_1054F:                                      //loc_1054F:
    if (memory16(_ds, 0x3044) != 0x0004)        //jnz short loc_10585
      goto loc_10585;
    _dx = 0x03b8;                               //mov dx, 3B8h
    _al = 0x00;                                 //mov al, 0
    _out(_dx, _al);                             //out dx, al
    _dx = 0x03b4;                               //mov dx, 3B4h
    _si = 0x2ee0;                               //mov si, 2EE0h
    _cx = 0x0009;                               //mov cx, 9
loc_10565:                                      //loc_10565:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _out(_dx, _ax);                             //out dx, ax
    if (--_cx)                                  //loop loc_10565
      goto loc_10565;
    _push(_es);                                 //push es
    _ax = 0xb000;                               //mov ax, 0B000h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x4000;                               //mov cx, 4000h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
    _dx = 0x03b8;                               //mov dx, 3B8h
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx = 0x03bf;                               //mov dx, 3BFh
    _al = 0x00;                                 //mov al, 0
    _out(_dx, _al);                             //out dx, al
loc_10585:                                      //loc_10585:
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    sub_15EC3();                                //call sub_15EC3
    sub_15E7A();                                //call sub_15E7A
    _ax = 0x0003;                               //mov ax, 3
    if (memory16(_ds, 0x3044) != 0x0004)        //jnz short loc_1059C
      goto loc_1059C;
    _ax = 0x0007;                               //mov ax, 7
loc_1059C:                                      //loc_1059C:
    _interrupt(16);                             //int 10h
    _ax = 0x4c00;                               //mov ax, 4C00h
    _interrupt(33);                             //int 21h
}

void sub_105A3()
{
    memory(_ds, 0x8F57) = 0x00;                 //mov byte_31487, 0
    sub_10000();                                //call sub_10000
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _ax = 0x0004;                               //mov ax, 4
    if (memory(_ds, 0x8E59) != 0x00)            //jnz short loc_105DA
      goto loc_105DA;
    _ax = 0x0003;                               //mov ax, 3
    if (memory(_ds, 0x8E5A) != 0x00)            //jnz short loc_105DA
      goto loc_105DA;
    _ax = 0x0002;                               //mov ax, 2
    if (memory(_ds, 0x8E58) != 0x00)            //jnz short loc_105DA
      goto loc_105DA;
    _ax = 0x0000;                               //mov ax, 0
    if (memory(_ds, 0x8E5D) != 0x00)            //jnz short loc_105DA
      goto loc_105DA;
    _ax = 0x0001;                               //mov ax, 1
loc_105DA:                                      //loc_105DA:
    memory16(_ds, 0x3044) = _ax;                //mov word_2B574, ax
    _ah = 0x0f;                                 //mov ah, 0Fh
    _interrupt(16);                             //int 10h
    memory(_ds, 0x2EF3) = _bh;                  //mov byte_2B423, bh
    memory(_ds, 0x2EF4) = _al;                  //mov byte_2B424, al
    memory(_ds, 0x2EF5) = _ah;                  //mov byte_2B425, ah
    _ah = 0x01;                                 //mov ah, 1
    _ch = 0x20;                                 //mov ch, 20h
    _cl = 0x20;                                 //mov cl, 20h
    _interrupt(16);                             //int 10h
loc_105F4:                                      //loc_105F4:
    _ax = 0x0600;                               //mov ax, 600h
    _bh = _bh ^ _bh;                            //xor bh, bh
    _cx = _cx ^ _cx;                            //xor cx, cx
    _dl = memory(_ds, 0x2EF5);                  //mov dl, byte_2B425
    _dl -= 1;                                   //dec dl
    _dh = 0x18;                                 //mov dh, 18h
    _interrupt(16);                             //int 10h
loc_10605:                                      //loc_10605:
    sub_106FE();                                //call sub_106FE
loc_10608:                                      //loc_10608:
    _ah = _ah ^ _ah;                            //xor ah, ah
    //__sync = true; _sync(); __sync = false;
    _interrupt(22);                             //int 16h
    if (_ah == 0x1c)                            //jz short loc_10657
      goto loc_10657;
    if (_ah == 0x41)                            //jz short loc_10652
      goto loc_10652;
    if (_ah == 0x39)                            //jz short loc_10631
      goto loc_10631;
    if (_ah == 0x50)                            //jz short loc_10631
      goto loc_10631;
    if (_ah == 0x4d)                            //jz short loc_10631
      goto loc_10631;
    if (_ah == 0x48)                            //jz short loc_10644
      goto loc_10644;
    if (_ah == 0x4b)                            //jz short loc_10644
      goto loc_10644;
    goto loc_10608;                             //jmp short loc_10608
loc_10631:                                      //loc_10631:
    memory16(_ds, 0x3044) += 1;                 //inc word_2B574
    if ((short)memory16(_ds, 0x3044) < (short)0x0006)//jl short loc_10605
      goto loc_10605;
    memory16(_ds, 0x3044) = 0x0000;             //mov word_2B574, 0
    goto loc_10605;                             //jmp short loc_10605
loc_10644:                                      //loc_10644:
    memory16(_ds, 0x3044) -= 1;                 //dec word_2B574
    if ((short)memory16(_ds, 0x3044) >= 0)      //jns short loc_10605
      goto loc_10605;
    memory16(_ds, 0x3044) = 0x0005;             //mov word_2B574, 5
    goto loc_10605;                             //jmp short loc_10605
loc_10652:                                      //loc_10652:
    memory(_ds, 0x8F57) = 0xff;                 //mov byte_31487, 0FFh
loc_10657:                                      //loc_10657:
    if (memory16(_ds, 0x3044) != 0x0005)        //jnz short loc_10663
      goto loc_10663;
    sub_1066E();                                //call sub_1066E
    goto loc_105F4;                             //jmp short loc_105F4
loc_10663:                                      //loc_10663:
    _ax = memory16(_ds, 0x3044);                //mov ax, word_2B574
    _bx = 0x2ef8;                               //mov bx, 2EF8h
    _xlat();                                    //xlat
    memory16(_ds, 0x3044) = _ax;                //mov word_2B574, ax
}

void sub_1066E()
{
    _ax = 0x0600;                               //mov ax, 600h
    _bh = _bh ^ _bh;                            //xor bh, bh
    _cx = _cx ^ _cx;                            //xor cx, cx
    _dl = memory(_ds, 0x2EF5);                  //mov dl, byte_2B425
    _dl -= 1;                                   //dec dl
    _dh = 0x18;                                 //mov dh, 18h
    _interrupt(16);                             //int 10h
    _si = 0x2f9a;                               //mov si, 2F9Ah
    _cx = 0x0006;                               //mov cx, 6
loc_10685:                                      //loc_10685:
    _push(_cx);                                 //push cx
    _dl = _dl ^ _dl;                            //xor dl, dl
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _dh = _al;                                  //mov dh, al
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(16);                             //int 10h
loc_10693:                                      //loc_10693:
    _ax = 0x0920;                               //mov ax, 920h
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x07;                                 //mov bl, 7
    _cx = 0x0001;                               //mov cx, 1
    _interrupt(16);                             //int 10h
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_106B2
      goto loc_106B2;
    _ah = 0x0e;                                 //mov ah, 0Eh
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x07;                                 //mov bl, 7
    _interrupt(16);                             //int 10h
    goto loc_10693;                             //jmp short loc_10693
loc_106B2:                                      //loc_106B2:
    _ah = _ah ^ _ah;                            //xor ah, ah
    _interrupt(22);                             //int 16h
    memory(_ds, _si) = _ah;                     //mov [si], ah
    _si += 1;                                   //inc si
    _ah = _ah ^ 0x80;                           //xor ah, 80h
    memory(_ds, _si) = _ah;                     //mov [si], ah
    _si += 1;                                   //inc si
    if ((char)_al >= (char)0x20)                //jge short loc_106E0
      goto loc_106E0;
    _push(_ax);                                 //push ax
    _ax = 0x0920;                               //mov ax, 920h
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x07;                                 //mov bl, 7
    _cx = 0x0001;                               //mov cx, 1
    _interrupt(16);                             //int 10h
    _ax = 0x0e5e;                               //mov ax, 0E5Eh
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x0f;                                 //mov bl, 0Fh
    _interrupt(16);                             //int 10h
    _ax = _pop();                               //pop ax
    _al += 0x41;                                //add al, 41h
loc_106E0:                                      //loc_106E0:
    _push(_ax);                                 //push ax
    _ax = 0x0920;                               //mov ax, 920h
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x07;                                 //mov bl, 7
    _cx = 0x0001;                               //mov cx, 1
    _interrupt(16);                             //int 10h
    _ax = _pop();                               //pop ax
    _ah = 0x0e;                                 //mov ah, 0Eh
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _bl = 0x0f;                                 //mov bl, 0Fh
    _interrupt(16);                             //int 10h
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_10685
      goto loc_10685;
}

void sub_106FE()
{
    _si = 0x2efd;                               //mov si, 2EFDh
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_10703:                                      //loc_10703:
    _bl = 0x07;                                 //mov bl, 7
    if (_cx != memory16(_ds, 0x3044))           //jnz short loc_10716
      goto loc_10716;
    _bl = 0x1f;                                 //mov bl, 1Fh
    if (memory(_ds, 0x2EF4) != 0x07)            //jnz short loc_10716
      goto loc_10716;
    _bl = 0xf0;                                 //mov bl, 0F0h
loc_10716:                                      //loc_10716:
    memory(_ds, 0x2EF7) = _bl;                  //mov byte_2B427, bl
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short locret_10760
      goto locret_10760;
    _al = _al - memory(_ds, 0x2EF5);            //sub al, byte_2B425
    _al = -_al;                                 //neg al
    _al >>= 1;                                  //shr al, 1
    memory(_ds, 0x2EF2) = _al;                  //mov byte_2B422, al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_ds, 0x2EF6) = _al;                  //mov byte_2B426, al
    _push(_cx);                                 //push cx
loc_1072F:                                      //loc_1072F:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1075C
      goto loc_1075C;
    _ah = 0x02;                                 //mov ah, 2
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _dh = memory(_ds, 0x2EF6);                  //mov dh, byte_2B426
    _dl = memory(_ds, 0x2EF2);                  //mov dl, byte_2B422
    _interrupt(16);                             //int 10h
    memory(_ds, 0x2EF2) += 1;                   //inc byte_2B422
    _al = memory(_ds, _si - 1);                 //mov al, [si-1]
    _ah = 0x09;                                 //mov ah, 9
    _bl = memory(_ds, 0x2EF7);                  //mov bl, byte_2B427
    _bh = memory(_ds, 0x2EF3);                  //mov bh, byte_2B423
    _cx = 0x0001;                               //mov cx, 1
    _interrupt(16);                             //int 10h
    goto loc_1072F;                             //jmp short loc_1072F
loc_1075C:                                      //loc_1075C:
    _cx = _pop();                               //pop cx
    _cx += 1;                                   //inc cx
    goto loc_10703;                             //jmp short loc_10703
locret_10760:                                   //locret_10760:
    return;
}

void sub_10762()
{
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    memory16(_ds, _si + 10) = _si;              //mov [si+0Ah], si
    memory16(_ds, _si + 8) = _si;               //mov [si+8], si
    memory16(_ds, _si + 2) = 0x0761;            //mov word ptr [si+2], 761h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x0761;            //mov word ptr [si+6], 761h
}

void sub_1077C()
{
    _push(_bx);                                 //push bx
    _bx = memory16(_ds, _di + 10);              //mov bx, [di+0Ah]
    memory16(_ds, _di + 10) = _si;              //mov [di+0Ah], si
    memory16(_ds, _si + 10) = _bx;              //mov [si+0Ah], bx
    memory16(_ds, _si + 8) = _di;               //mov [si+8], di
    memory16(_ds, _bx + 8) = _si;               //mov [bx+8], si
    _bx = _pop();                               //pop bx
}

void sub_1078E()
{
    _push(_bx);                                 //push bx
    _bx = memory16(_ds, _di + 8);               //mov bx, [di+8]
    memory16(_ds, _di + 8) = _si;               //mov [di+8], si
    memory16(_ds, _si + 8) = _bx;               //mov [si+8], bx
    memory16(_ds, _si + 10) = _di;              //mov [si+0Ah], di
    memory16(_ds, _bx + 10) = _si;              //mov [bx+0Ah], si
    _bx = _pop();                               //pop bx
}

void sub_107A0()
{
    _push(_di);                                 //push di
    _push(_bx);                                 //push bx
    _di = memory16(_ds, _si + 8);               //mov di, [si+8]
    _bx = memory16(_ds, _si + 10);              //mov bx, [si+0Ah]
    memory16(_ds, _di + 10) = _bx;              //mov [di+0Ah], bx
    memory16(_ds, _bx + 8) = _di;               //mov [bx+8], di
    _bx = memory16(_ds, 0x8E7C);                //mov bx, word_313AC
    memory16(_ds, _si + 8) = _bx;               //mov [si+8], bx
    memory16(_ds, 0x8E7C) = _si;                //mov word_313AC, si
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    _bx = _pop();                               //pop bx
    _di = _pop();                               //pop di
}

void sub_107C0()
{
    memory16(_ds, _si) = 0x0004;                //mov word ptr [si], 4
    memory16(_ds, _si + 2) = 0x0f2b;            //mov word ptr [si+2], 0F2Bh
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x0761;            //mov word ptr [si+6], 761h
    memory(_ds, _si + 38) = 0x00;               //mov byte ptr [si+26h], 0
    memory(_ds, _si + 74) = 0x00;               //mov byte ptr [si+4Ah], 0
}

void sub_107DC()
{
    _push(_di);                                 //push di
    _push(_bx);                                 //push bx
    _di = memory16(_ds, _si + 8);               //mov di, [si+8]
    _bx = memory16(_ds, _si + 10);              //mov bx, [si+0Ah]
    memory16(_ds, _di + 10) = _bx;              //mov [di+0Ah], bx
    memory16(_ds, _bx + 8) = _di;               //mov [bx+8], di
    _bx = _pop();                               //pop bx
    _di = _pop();                               //pop di
}

void sub_107ED()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _indirectCall(_seg000, memory16(_seg000, _bp+0x7FB));
    //_STOP_("call dword ptr cs:[bp+7FBh]");      //call dword ptr cs:[bp+7FBh]
}

void sub_1080F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_1081D[bp]
    sub_1F3EF();
}

void sub_10831()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_1083F[bp]
    sub_1F492();
}

void sub_10853()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10861[bp]
    sub_1F57C();
}

void sub_10875()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10883[bp]
    sub_1F585();
}

void sub_10897()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_108A5[bp]
    sub_1FEA1();
}

void sub_108B9()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_108C7[bp]
    sub_1FF41();
}

void sub_108DB()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_108E9[bp]
    loc_1FF46();
}

void sub_108FD()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_1090B[bp]
    loc_1FF4F();
}

void sub_1091F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_1092D[bp]
    sub_203DA();
}

void sub_10941()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_1094F[bp]
    sub_1EBD0();
}

void sub_10963()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10971[bp]
    loc_1EBD7();
}

void sub_10985()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10993[bp]
    sub_20482();
}

void sub_109A7()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_109B5[bp]
    sub_20568();
}

void sub_109C9()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_109D7[bp]
    sub_2058D();
}

void sub_109EB()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_109F9[bp]
    sub_2058D();
}

void sub_10A0D()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10A1B[bp]
    sub_205A9();
}

void sub_10A2F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10A3D[bp]
    __sync = true;  sub_205AE(); __sync = false;
}

void sub_10A51()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10A5F[bp]
    __sync = true;  sub_205AE(); __sync = false;
}

void sub_10A73()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10A81[bp]
    sub_205ED();
}

void sub_10A95()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10AA3[bp]
    sub_20653();
}

void sub_10AD9()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10AE7[bp]
    sub_20973();
}

void sub_10AFB()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10B09[bp]
    sub_2098C();
}

void loc_10B1D()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10B2B[bp]
    sub_209A6();
}

void sub_10B3F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10B4D[bp]
    sub_209E9();
}

void sub_10B61()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10B6F[bp]
    sub_20A2E();
}

void sub_10B83()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10B91[bp]
    sub_20A39();
}

void sub_10BA5()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10BB3[bp]
    sub_20AD0();
}

void sub_10BC7()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10BD5[bp]
    sub_20B5B();
}

void sub_10BE9()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10BF7[bp]
    sub_20B8A();
}

void sub_10C0B()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10C19[bp]
    sub_20BE5();
}

void sub_10C2D()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10C3B[bp]
    sub_20C5E();
}

void sub_10C4F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10C5D[bp]
    sub_20C7B();
}

void sub_10C71()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10C7F[bp]
    sub_20D18();
}

void sub_10C93()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10CA1[bp]
    sub_20D8A();
}

void sub_10CB5()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10CC3[bp]
    sub_20F54();
}

void sub_10CD7()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10CE5[bp]
    sub_21090();
}

void sub_10CF9()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10D07[bp]
    sub_21132();
}

void sub_10D1B()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10D29[bp]
    sub_211CC();
}

void sub_10D3D()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10D4B[bp]
    sub_2120E();
}

void sub_10D5F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10D6D[bp]
    sub_1F3C7();
}

void sub_10D81()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10D8F[bp]
    sub_1F3D7();
}

void sub_10DA3()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10DB1[bp]
    nullsub_1();
}

void sub_10DC5()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10DD3[bp]
    sub_1F325();
}

void sub_10DE7()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10DF5[bp]
    sub_1F3A7();
}

void sub_10E09()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10E17[bp]
    sub_1F3AE();
}

void sub_10E2B()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10E39[bp]
    sub_1F3B5();
}

void sub_10E4D()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10E5B[bp]
    sub_20854();
}

void sub_10E6F()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10E7D[bp]
    sub_208DC();
}

void sub_10E91()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10E9F[bp]
    sub_208F9();
}

void sub_10EB3()
{
    _bp = memory16(_ds, 0x3044);                //mov bp, word_2B574
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ASSERT(_bp == 12);                         //call cs:off_10EC1[bp]
    sub_1F2FF();
}

void sub_10ED5()
{
    sub_1421C();                                //call sub_1421C
}

void sub_10ED9()
{
    sub_14191();                                //call sub_14191
}

void sub_10EDD()
{
    sub_11CCC();                                //call sub_11CCC
}

void sub_10EE1()
{
    sub_13A36();                                //call sub_13A36
}

void sub_10EE5()
{
    sub_15835();                                //call sub_15835
}

void sub_10EE9()
{
    sub_1561C();                                //call sub_1561C
}

void loc_10EED()
{
    sub_15829();                                //call sub_15829
}

void sub_10EF1()
{
    sub_160A5();                                //call sub_160A5
}

void sub_10EF5()
{
    _push(_es);                                 //push es
    _push(_cx);                                 //push cx
    _push(_si);                                 //push si
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _cx = _seg007;                              //mov cx, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_10F0E
      goto loc_10F0E;
    _cx = _seg008;                              //mov cx, seg seg008
    _si -= 1;                                   //dec si
loc_10F0E:                                      //loc_10F0E:
    _es = _cx;                                  //mov es, cx
    _ax = _ax - memory16(_es, _si);             //sub ax, es:[si]
    _bx = _bx - memory16(_es, _si + 2);         //sub bx, es:[si+2]
    _ax <<= 1;                                  //shl ax, 1
    _bx <<= 1;                                  //shl bx, 1
    _ax = _ax + memory16(_es, _si + 4);         //add ax, es:[si+4]
    _bx = _bx + memory16(_es, _si + 6);         //add bx, es:[si+6]
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_bx, 1);                               //sar bx, 1
    _si = _pop();                               //pop si
    _cx = _pop();                               //pop cx
    _es = _pop();                               //pop es
}

void sub_10F2B()
{
    sub_107A0();                                //call sub_107A0
}

void sub_10F2F()
{
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    if ((short)_ax < (short)memory16(_ds, 0xFCE2))//jl short loc_10F57
      goto loc_10F57;
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    if ((short)_ax > (short)memory16(_ds, 0xFCEA))//jg short loc_10F57
      goto loc_10F57;
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    if ((short)_ax < (short)memory16(_ds, 0xFCE6))//jl short loc_10F57
      goto loc_10F57;
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    if ((short)_ax > (short)memory16(_ds, 0xFCEE))//jg short loc_10F57
      goto loc_10F57;
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    _flags.zero = false;
    return;                                     //retn
loc_10F57:                                      //loc_10F57:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
}

void sub_10F5A()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 3948));           //push word ptr cs:[bx+0F6Ch]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10F5A endp_failed
//    _STOP_("continues");                        //db 84h, 62h, 0A8h, 7Ah, 0FAh, 99h, 54h, 0B...
    sub_10F78();
}

void sub_10F78()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 3978));           //push word ptr cs:[bx+0F8Ah]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10F78 endp_failed
//    _STOP_("continues");                        //db 8Fh, 75h, 1, 8Eh, 4Eh, 0ACh, 9Fh, 0C7h,...
    _indirectCall(_seg000, _pop());
}

void sub_10F96()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 4008));           //push word ptr cs:[bx+0FA8h]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10F96 endp_failed
//    _STOP_("continues");                        //db 4Ah, 71h, 0A7h, 8Ch, 4Bh, 0ACh, 9Ch, 0C...
    int k = _pop(); _push(k); _ASSERT(k == 0x714A || k == 0x8ca7); // check zero!
    _indirectCall(_cs, _pop());
}

void sub_10FB4()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 4038));           //push word ptr cs:[bx+0FC6h]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10FB4 endp_failed
//    _STOP_("continues");                        //db 0F1h, 70h, 0CAh, 80h, 0CCh, 0ABh, 71h, ...
    _indirectCall(_cs, _pop());
}

void sub_10FD2()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 4068));           //push word ptr cs:[bx+0FE4h]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10FD2 endp_failed
//    _STOP_("continues");                        //db 0EFh, 6Eh, 79h, 7Fh, 0AAh, 9Dh, 0EFh, 0...
    _indirectCall(_cs, _pop());
}

void sub_10FF0() // shop check
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E74) = _bx;                //mov word_313A4, bx
    _bx = memory16(_ds, 0x991C);                //mov bx, word_31E4C
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_cs, _bx + 4098));           //push word ptr cs:[bx+1002h]
    _bx = memory16(_ds, 0x8E74);                //mov bx, word_313A4
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_10FF0 endp_failed
//    _STOP_("continues");                        //db 5Bh, 65h, 32h, 7Fh, 99h, 9Ah, 55h, 0B5h...
    int k = _pop(); _push(k); _ASSERT(0x655b == k || 0x7f32 == k);
    _indirectCall(_seg000, _pop());
}

void sub_1100E()
{
    _bp = 0x9138;                               //mov bp, 9138h
    _cx = 0x0004;                               //mov cx, 4
loc_11014:                                      //loc_11014:
    if (memory16(_ds, _bp + 0) == 0x0000)       //jz short locret_11021
    {
        _flags.zero = true;
      goto locret_11021;
    }
    _bp += 0x0004;                              //add bp, 4
    if (--_cx)                                  //loop loc_11014
      goto loc_11014;
    _cx -= 1;                                   //dec cx
    _flags.zero = false;
locret_11021:                                   //locret_11021:
    return;
}

void sub_11022()
{
    if (memory16(_ds, 0x8E7C) == 0x0000)        //jz short loc_11041
      goto loc_11041;
    _si = memory16(_ds, 0x8E7C);                //mov si, word_313AC
    _push(memory16(_ds, _si + 8));              //push word ptr [si+8]
    memory16(_ds, 0x8E7C) = _pop();             //pop word_313AC
loc_11034:                                      //loc_11034:
    memory(_ds, _si + 38) = 0x00;               //mov byte ptr [si+26h], 0
    memory(_ds, _si + 74) = 0x00;               //mov byte ptr [si+4Ah], 0
    memory(_ds, _si + 75) = 0x00;               //mov byte ptr [si+4Bh], 0
    return;                                     //retn
loc_11041:                                      //loc_11041:
    _si = 0x9096;                               //mov si, 9096h
loc_11044:                                      //loc_11044:
    _si = memory16(_ds, _si + 10);              //mov si, [si+0Ah]
    if (memory16(_ds, _si) == 0x0004)           //jz short loc_1106D
      goto loc_1106D;
    if (memory16(_ds, _si) == 0x000c)           //jz short loc_1106D
      goto loc_1106D;
    if (memory16(_ds, _si) == 0x0010)           //jz short loc_1106D
      goto loc_1106D;
    if (memory16(_ds, _si) != 0x0000)           //jnz short loc_11044
      goto loc_11044;
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    if (memory16(_ds, _si) != 0x0000)           //jnz short loc_1106D
      goto loc_1106D;
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    if (memory16(_ds, _si) == 0x0000)           //jz short loc_11072
      goto loc_11072;
loc_1106D:                                      //loc_1106D:
    sub_107DC();                                //call sub_107DC
    goto loc_11034;                             //jmp short loc_11034
loc_11072:                                      //loc_11072:
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
loc_11076:                                      //loc_11076:
    if ((short)memory16(_ds, _si) >= (short)0x00c8)//jge short loc_1106D
      goto loc_1106D;
    if (memory16(_ds, _si) == 0x0004)           //jz short loc_1106D
      goto loc_1106D;
    _si = memory16(_ds, _si + 10);              //mov si, [si+0Ah]
    if (memory16(_ds, _si) != 0x0000)           //jnz short loc_11076
      goto loc_11076;
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    goto loc_1106D;                             //jmp short loc_1106D
}

void loc_1109A()
{
    sub_141A1();                                //call sub_141A1
    _cx = 0x0005;                               //mov cx, 5
loc_110A0:                                      //loc_110A0:
    _di = memory16(_ds, 0x9054);                //mov di, word_31584
loc_110A4:                                      //loc_110A4:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_110D7
      goto loc_110D7;
    if (memory16(_ds, _di) == 0x00b8)           //jz short loc_110D0
      goto loc_110D0;
    if ((short)memory16(_ds, _di + 44) < 0 /*CHECK*/)//js short loc_110D0
      goto loc_110D0;
    if ((short)memory16(_ds, _di + 40) >= (short)0x0140)
      goto loc_110D0;
    if ((short)memory16(_ds, _di + 46) < 0 /*CHECK*/)//js short loc_110D0
      goto loc_110D0;
    if ((short)memory16(_ds, _di + 42) >= (short)0x00c0)
      goto loc_110D0;
    _ax -= 1;                                   //dec ax
    if ((short)_ax >= 0)                        //jns short loc_110D0
      goto loc_110D0;
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
    return;                                     //retn
loc_110D0:                                      //loc_110D0:
    _si = _di;                                  //mov si, di
    sub_11689();                                //call sub_11689
    goto loc_110A4;                             //jmp short loc_110A4
loc_110D7:                                      //loc_110D7:
    if (--_cx)                                  //loop loc_110A0
      goto loc_110A0;
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
    _di = 0x904a;                               //mov di, 904Ah
    return;                                     //retn
    _STOP_("db 18h, 48h, 1, 0, 0B4h, 48h, 1, 0, 5Ah, 4...");
    _STOP_("db 48h, 1, 3 dup(0), 0E2h, 41h, 0E0h, 10h,...");
    _STOP_("db 6Ah, 4Ah, 1, 0, 0D4h, 4Ah, 1, 0, 6Ah, 4...");
    _STOP_("db 0E2h, 41h, 0F6h, 10h, 0E0h, 0A0h, 1, 0,...");
    _STOP_("db 0, 40h, 0A2h, 1, 0, 0F0h, 0A2h, 1, 3 du...");
    _STOP_("db 0Ch, 11h, 8Eh, 5Ah, 1, 0, 3Eh, 5Bh, 1, ...");
    _STOP_("db 1, 0, 9Eh, 5Ch, 1, 0, 4Eh, 5Dh, 1, 0, 0...");
    _STOP_("db 0, 0AEh, 5Eh, 1, 0, 5Eh, 5Fh, 1, 3 dup(...");
    _STOP_("db 22h, 11h, 0BEh, 9Ah, 2, 0, 4Eh, 9Dh, 2,...");
    _STOP_("db 41h, 48h, 11h, 58h, 0A6h, 2 dup(0), 0Eh...");
    _STOP_("db 0B4h, 6Ch, 1, 0, 5Ah, 6Dh, 1, 2 dup(0),...");
    _STOP_("db 0E2h, 41h, 5Ah, 11h, 0E4h, 8Ch, 1, 0, 4...");
    _STOP_("db 0F4h, 8Dh, 1, 0, 0A4h, 8Eh, 1, 0, 54h, ...");
    _STOP_("db 90h, 1, 3 dup(0), 0E2h, 41h, 70h, 11h, ...");
    _STOP_("db 0, 56h, 6Fh, 1, 0, 6, 70h, 1, 0, 0B6h, ...");
    _STOP_("db 71h, 1, 0, 16h, 72h, 1, 0, 0C6h, 72h, 1...");
    _STOP_("db 1, 3 dup(0), 0E2h, 41h, 8Eh, 11h, 78h, ...");
    _STOP_("db 0Eh, 1, 0, 0C4h, 0Eh, 1, 0, 6Ah, 0Fh, 1...");
    _STOP_("db 1, 0, 0B6h, 10h, 1, 0, 5Ch, 11h, 1, 0, ...");
    _STOP_("db 0A8h, 12h, 1, 0, 4Eh, 13h, 1, 0, 0F4h, ...");
    _STOP_("db 14h, 1, 0, 40h, 15h, 1, 0, 0E6h, 15h, 1...");
    _STOP_("db 41h, 0B4h, 11h, 34h, 41h, 1, 0, 0B2h, 4...");
    _STOP_("db 42h, 1, 0, 0AEh, 42h, 1, 0, 2Ch, 43h, 1...");
    _STOP_("db 1, 0, 28h, 44h, 1, 0, 0A6h, 44h, 1, 0, ...");
    _STOP_("db 0, 0A2h, 45h, 1, 0, 20h, 46h, 1, 0, 9Eh...");
    _STOP_("db 1Ch, 47h, 1, 0, 9Ah, 47h, 1, 3 dup(0), ...");
    _STOP_("db 11h, 28h, 0, 1, 0, 60h, 0, 1, 0, 0E8h, ...");
    _STOP_("db 2 dup(1), 0, 48h, 2, 1, 0, 0F8h, 2, 1, ...");
    _STOP_("db 41h, 8Ch, 16h, 1, 0, 7Ch, 19h, 1, 0, 4C...");
    _STOP_("db 6Ch, 23h, 1, 0, 0ECh, 27h, 1, 3 dup(0),...");
    _STOP_("db 16h, 1, 0, 4, 18h, 1, 0, 7Ch, 19h, 1, 0...");
    _STOP_("db 1, 0, 4Ch, 1Eh, 1, 0, 0DCh, 20h, 1, 0, ...");
    _STOP_("db 0, 0FCh, 25h, 1, 0, 0ECh, 27h, 2 dup(0)...");
    _STOP_("db 2, 0, 0CEh, 0A3h, 1, 0, 6, 0A4h, 1, 0, ...");
    _STOP_("db 0, 0Ch, 0A5h, 1, 0, 0A8h, 0A5h, 1, 3 du...");
    _STOP_("db 0CCh, 0A6h, 1, 0, 48h, 0A9h, 1, 3 dup(0...");
    _STOP_("db 0A4h, 12h, 0D8h, 44h, 0B0h, 46h, 8, 49h...");
    _STOP_("db 47h, 0B6h, 49h, 0C4h, 45h, 0DCh, 47h, 7...");
    _STOP_("db 46h, 6Ah, 48h, 22h, 4Bh, 0D6h, 86h, 1, ...");
    _STOP_("db 1, 0, 4, 88h, 1, 0, 96h, 88h, 1, 0, 26h...");
    _STOP_("db 26h, 86h, 1, 0, 0D6h, 86h, 1, 0, 86h, 8...");
    _STOP_("db 88h, 1, 0, 96h, 88h, 1, 3 dup(0), 0E2h,...");
    _STOP_("db 4Ch, 93h, 2 dup(0), 0FCh, 93h, 1, 0, 0A...");
    _STOP_("db 3Eh");                           //db 3Eh
    _STOP_("db 95h, 1, 0, 0DAh, 95h, 1, 3 dup(0), 0E2h...");
    _STOP_("db 12h, 4Ch, 93h, 1, 0, 0FCh, 93h, 1, 0, 0...");
    _STOP_("db 0, 3Eh, 95h, 1, 0, 0DAh, 95h, 1, 3 dup(...");
    _STOP_("db 12h, 13h, 0A6h, 84h, 2, 0, 6, 85h, 2, 0...");
    _STOP_("db 0, 0C6h, 85h, 2, 3 dup(0), 0E2h, 41h, 2...");
    _STOP_("db 8Bh, 2, 0, 0D4h, 8Bh, 2, 0, 5Ch, 8Ch, 2...");
    _STOP_("db 41h, 42h, 13h, 3Ch, 89h, 2, 0, 0ECh, 89...");
    _STOP_("db 8Ah, 2, 3 dup(0), 0E2h, 41h, 54h, 13h, ...");
    _STOP_("db 0, 64h, 91h, 1, 0, 0Ah, 92h, 1, 0, 0A6h...");
    _STOP_("db 0E2h, 41h, 66h, 13h, 0E2h, 7Ah, 0Ah, 0,...");
    _STOP_("db 0, 86h, 7Ah, 1, 3 dup(0), 0E2h, 41h, 80...");
    _STOP_("db 7Ch, 0Ah, 0, 2Ah, 7Bh, 1, 0, 0BCh, 7Bh,...");
    _STOP_("db 0E2h, 41h, 92h, 13h, 78h, 7Dh, 0Ah, 0, ...");
    _STOP_("db 0, 18h, 7Dh, 1, 3 dup(0), 0E2h, 41h, 0A...");
    _STOP_("db 7Eh, 0Ah, 0, 0D8h, 7Dh, 1, 0, 6Ah, 7Eh,...");
    _STOP_("db 0E2h, 41h, 0B6h, 13h, 22h, 80h, 0Ah, 0,...");
    _STOP_("db 0, 0C6h, 7Fh, 1, 3 dup(0), 0E2h, 41h, 0...");
    _STOP_("db 81h, 0Ah, 0, 6Ah, 80h, 1, 0, 0FCh, 80h,...");
    _STOP_("db 0E2h, 41h, 0DAh, 13h, 0B8h, 82h, 0Ah, 0...");
    _STOP_("db 1, 0, 58h, 82h, 1, 3 dup(0), 0E2h, 41h,...");
    _STOP_("db 84h, 0Ah, 0, 18h, 83h, 1, 0, 0AAh, 83h,...");
    _STOP_("db 0E2h, 41h, 0FEh, 13h, 26h, 74h, 1, 0, 0...");
    _STOP_("db 0, 7Ch, 75h, 1, 0, 2Ch, 76h, 1, 0, 0C8h...");
    _STOP_("db 64h, 77h, 1, 0, 0ECh, 77h, 1, 0, 74h, 7...");
    _STOP_("db 79h, 1, 3 dup(0), 0E2h, 41h, 0Ch, 14h, ...");
    _STOP_("db 0, 3Ch, 34h, 1, 0, 0E2h, 34h, 1, 0, 88h...");
    _STOP_("db 2Eh, 36h, 1, 0, 0D4h, 36h, 1, 0, 7Ah, 3...");
    _STOP_("db 32h, 3, 3 dup(0), 0E2h, 41h, 36h, 14h, ...");
    _STOP_("db 0, 0C6h, 38h, 1, 0, 6Ch, 39h, 1, 0, 12h...");
    _STOP_("db 0B8h, 3Ah, 1, 0, 5Eh, 3Bh, 1, 0, 4, 3Ch...");
    _STOP_("db 32h, 3, 3 dup(0), 0E2h, 41h, 5Ch, 14h, ...");
    _STOP_("db 0, 0Ch, 2Fh, 1, 0, 0B2h, 2Fh, 1, 0, 58h...");
    _STOP_("db 0FEh, 30h, 1, 0, 0A4h, 31h, 1, 0, 4Ah, ...");
    _STOP_("db 32h, 3, 3 dup(0), 0E2h, 41h, 82h, 14h, ...");
    _STOP_("db 0, 82h, 2Ah, 1, 0, 28h, 2Bh, 1, 0, 0CEh...");
    _STOP_("db 74h, 2Ch, 1, 0, 1Ah, 2Dh, 1, 0, 0C0h, 2...");
    _STOP_("db 32h, 3, 3 dup(0), 0E2h, 41h, 0A8h, 14h,...");
    _STOP_("db 0, 50h, 3Dh, 1, 0, 0F6h, 3Dh, 1, 0, 9Ch...");
    _STOP_("db 42h, 3Fh, 1, 0, 0E8h, 3Fh, 1, 0, 8Eh, 4...");
    _STOP_("db 32h, 3, 3 dup(0), 0E2h, 41h, 0CEh, 14h,...");
    _STOP_("db 0, 0EEh, 50h, 1, 0, 9Eh, 51h, 1, 0, 4Eh...");
    _STOP_("db 0FEh, 52h, 1, 0, 4Eh, 52h, 1, 0, 9Eh, 5...");
    _STOP_("db 50h, 1, 3 dup(0), 0E2h, 41h, 0F4h, 14h,...");
    _STOP_("db 0, 5Eh, 54h, 1, 0, 0Eh, 55h, 1, 0, 0BEh...");
    _STOP_("db 6Eh, 56h, 1, 0, 0BEh");          //db 6Eh, 56h, 1, 0, 0BEh
    _STOP_("byte_1152F db 55h, 1, 0, 0Eh, 55h, 1, 0, 5...");
    _STOP_("db 41h, 1Ah, 15h, 1Eh, 57h, 1, 0, 0CEh, 57...");
    _STOP_("db 58h, 1, 0, 2Eh, 59h, 1, 0, 0DEh, 59h, 1...");
    _STOP_("db 1, 0, 7Eh, 58h, 1, 0, 0CEh, 57h, 1, 3 d...");
    _STOP_("db 41h, 40h, 15h, 0C0h, 96h, 2 dup(0), 70h...");
    _STOP_("db 0E4h, 97h, 1, 0, 62h, 98h, 1, 0, 0EAh, ...");
    _STOP_("db 99h, 1, 0, 18h, 9Ah, 1, 3 dup(0), 0E2h,...");
    _STOP_("db 56h, 51h, 8Bh, 0C8h, 0E8h, 93h, 0FAh, 5...");
    _STOP_("db 90h, 0E8h, 0E6h, 0F1h, 5Fh, 0C7h, 4, 0C...");
    _STOP_("db 2, 98h, 39h, 0C7h, 44h, 4, 53h, 8, 8Bh,...");
    _STOP_("db 0F7h, 2Bh, 3, 0C1h, 89h, 44h, 12h, 8Bh,...");
    _STOP_("db 0EDh, 2Bh, 3, 0C3h, 89h, 44h, 16h, 2Eh,...");
    _STOP_("db 89h, 44h, 0Ch, 2Eh, 8Bh, 46h, 2, 89h, 4...");
    _STOP_("db 0C5h, 4, 89h, 6Ch, 10h, 83h, 0EDh, 4, 8...");
    _STOP_("db 49h, 79h, 0B3h, 5Eh, 0C7h, 6, 88h, 8Eh,...");
    _STOP_("db 6, 8Ah, 8Eh, 6, 0, 0C3h, 56h, 0E8h, 3Ah...");
    _STOP_("db 96h, 90h, 0E8h, 0A0h, 0F1h, 0BFh, 0F2h,...");
    _STOP_("db 60h, 0, 0C7h, 44h, 2, 0DFh, 28h, 0C7h, ...");
    _STOP_("db 8, 2Eh, 8Bh, 5, 89h, 44h, 0Ch, 2Eh, 8Bh...");
    _STOP_("db 44h, 0Eh, 83h, 0C7h, 4, 89h, 7Ch, 10h, ...");
    _STOP_("db 0E8h, 89h, 2Bh, 5, 0Ah, 0, 89h, 44h, 12...");
    _STOP_("db 0, 0E8h, 7Dh, 2Bh, 5, 6, 0, 89h, 44h, 1...");
    _STOP_("db 1Ah, 7, 0, 0FFh, 6, 64h, 91h, 0E8h, 0EC...");
    _STOP_("db 96h, 90h, 0E8h, 52h, 0F1h, 0BFh, 0B4h, ...");
    _STOP_("db 18h, 0, 0C7h, 44h, 2, 0DFh, 28h, 0C7h, ...");
    _STOP_("db 8, 2Eh, 8Bh, 5, 89h, 44h, 0Ch, 2Eh, 8Bh...");
    _STOP_("db 44h, 0Eh, 83h, 0C7h, 4, 89h, 7Ch, 10h, ...");
    _STOP_("db 0E8h, 3Bh, 2Bh, 5, 0Ah, 0, 89h, 44h, 12...");
    _STOP_("db 0, 0E8h, 2Fh, 2Bh, 5, 6, 0, 89h, 44h, 1...");
    _STOP_("db 1Ah, 7, 0, 0FFh, 6, 64h, 91h, 49h, 78h,...");
    _STOP_("db 0FFh, 5Eh, 0C3h");               //db 0FFh, 5Eh, 0C3h
}

void sub_11689()
{
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    if (memory(_ds, _si + 38) == 0x00)          //jz short locret_116A8
      goto locret_116A8;
    _di = memory16(_ds, _si + 68);              //mov di, [si+44h]
loc_11695:                                      //loc_11695:
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    if (memory16(_ds, _di) == 0x0000)           //jz short locret_116A8
      goto locret_116A8;
    if (memory(_ds, _di + 38) == 0x00)          //jz short locret_116A8
      goto locret_116A8;
    if (_si == memory16(_ds, _di + 68))         //jz short loc_11695
      goto loc_11695;
locret_116A8:                                   //locret_116A8:
    return;
}

void sub_116A9()
{
    sub_10E6F();                                //call sub_10E6F
    memory16(_ds, 0x8E7A) = memory16(_ds, 0x8E7A) ^ 0x0001;
    sub_10E6F();                                //call sub_10E6F
    memory16(_ds, 0x8E7A) = memory16(_ds, 0x8E7A) ^ 0x0001;
}

void sub_116BA()
{
    WORD _cs = _seg000;

    _si = 0x8fb2;                               //mov si, 8FB2h
    sub_10762();                                //call sub_10762
    _si = 0x8ffe;                               //mov si, 8FFEh
    sub_10762();                                //call sub_10762
    _si = 0x904a;                               //mov si, 904Ah
    sub_10762();                                //call sub_10762
    _si = 0x9096;                               //mov si, 9096h
    sub_10762();                                //call sub_10762
    _si = 0x90e2;                               //mov si, 90E2h
    sub_10762();                                //call sub_10762
    _si = 0x9f00;                               //mov si, 9F00h
    _di = 0x8fb2;                               //mov di, 8FB2h
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _si) = 0x0008;                //mov word ptr [si], 8
    memory16(_ds, _si + 2) = 0x4311;            //mov word ptr [si+2], 4311h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory16(_ds, _si + 12) = 0x077a;           //mov word ptr [si+0Ch], 77Ah
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    memory16(_ds, _si + 18) = 0x00a0;           //mov word ptr [si+12h], 0A0h
    memory16(_ds, _si + 22) = 0x00b0;           //mov word ptr [si+16h], 0B0h
    _bx = 0x3292;                               //mov bx, 3292h
    _cx = 0x0004;                               //mov cx, 4
loc_11709:                                      //loc_11709:
    sub_11022();                                //call sub_11022
    _di = 0x8fb2;                               //mov di, 8FB2h
    sub_1078E();                                //call sub_1078E
    memory16(_ds, _si) = 0x00c4;                //mov word ptr [si], 0C4h
    memory16(_ds, _si + 2) = 0x4759;            //mov word ptr [si+2], 4759h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    _di = memory16(_ds, _bx);                   //mov di, [bx]
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0004;                              //add di, 4
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    memory16(_ds, _si + 18) = 0x00a0;           //mov word ptr [si+12h], 0A0h
    memory16(_ds, _si + 22) = 0x00b0;           //mov word ptr [si+16h], 0B0h
    _ax = _cx;                                  //mov ax, cx
    _ax -= 1;                                   //dec ax
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    if (--_cx)                                  //loop loc_11709
      goto loc_11709;
    memory16(_ds, 0x9134) = 0x0000;             //mov word_31664, 0
    memory16(_ds, 0x914C) = 0x0000;             //mov word_3167C, 0
    memory16(_ds, 0x9138) = 0x0000;             //mov word_31668, 0
    memory16(_ds, 0x913C) = 0x0000;             //mov word_3166C, 0
    memory16(_ds, 0x9140) = 0x0000;             //mov word_31670, 0
    memory16(_ds, 0x9144) = 0x0000;             //mov word_31674, 0
    memory16(_ds, 0x9148) = 0x0000;             //mov word_31678, 0
    sub_12BCC();                                //call sub_12BCC
    _cx = 0x000e;                               //mov cx, 0Eh
    _di = 0x916a;                               //mov di, 916Ah
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    sub_135EB();                                //call sub_135EB
    memory16(_ds, 0x912E) = 0x0008;             //mov word_3165E, 8
    memory16(_ds, 0x9130) = 0x0008;             //mov word_31660, 8
    memory16(_ds, 0x9132) = 0x0001;             //mov word_31662, 1
    memory16(_ds, 0x8E7E) = 0x0000;             //mov word_313AE, 0
    memory16(_ds, 0x9150) = 0x0000;             //mov word_31680, 0
    memory16(_ds, 0x8E80) = 0x0000;             //mov word_313B0, 0
    memory16(_ds, 0x8E82) = 0x0000;             //mov word_313B2, 0
    memory16(_ds, 0x9152) = 0x0000;             //mov word_31682, 0
    memory16(_ds, 0x9154) = 0x0000;             //mov word_31684, 0
    memory16(_ds, 0x9156) = 0x0000;             //mov word_31686, 0
    memory16(_ds, 0x9158) = 0x0000;             //mov word_31688, 0
    memory16(_ds, 0x915E) = 0x0000;             //mov word_3168E, 0
    memory16(_ds, 0x9160) = 0x0000;             //mov word_31690, 0
    memory16(_ds, 0x8E84) = 0x0000;             //mov word_313B4, 0
    memory16(_ds, 0x9162) = 0x0000;             //mov word_31692, 0
    _di = 0x921c;                               //mov di, 921Ch
    _cx = 0x0007;                               //mov cx, 7
    _al = _al ^ _al;                            //xor al, al
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    memory16(_ds, 0x9164) = 0x0000;             //mov word_31694, 0
    memory16(_ds, 0x9186) = 0x0027;             //mov word_316B6, 27h
    memory16(_ds, 0x9188) = 0x0000;             //mov word_316B8, 0
    memory(_ds, 0x9223) = 0x00;                 //mov byte_31753, 0
    memory(_ds, 0x9224) = 0x00;                 //mov byte_31754, 0
    memory16(_ds, 0x918A) = 0x00ff;             //mov word_316BA, 0FFh
    memory16(_ds, 0x918C) = 0x0001;             //mov word_316BC, 1
    memory(_ds, 0x9225) = 0x00;                 //mov byte_31755, 0
    memory16(_ds, 0x91B0) = 0x0003;             //mov word_316E0, 3
    sub_10E91();                                //call sub_10E91
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    sub_10BA5();                                //call sub_10BA5
}

void sub_11827()
{
    memory(_ds, 0x8F5C) = 0x00;                 //mov byte_3148C, 0
    memory(_ds, 0x8F5D) = 0xff;                 //mov byte_3148D, 0FFh
    memory16(_ds, 0x991E) = 0x0008;             //mov word_31E4E, 8
    memory16(_ds, 0x991A) = 0x0001;             //mov word_31E4A, 1
    memory16(_ds, 0x8E7A) = 0x0000;             //mov word_313AA, 0
    memory(_ds, 0x8F5E) = 0x00;                 //mov byte_3148E, 0
    if (memory16(_ds, 0x8E70) != 0x0002)        //jnz short loc_11854
      goto loc_11854;
    memory(_ds, 0x8F5E) = 0xff;                 //mov byte_3148E, 0FFh
loc_11854:                                      //loc_11854:
    memory(_ds, 0x8F5F) = 0x00;                 //mov byte_3148F, 0
    memory(_ds, 0x8F60) = 0x00;                 //mov byte_31490, 0
    sub_109A7();                                //call sub_109A7
    sub_10A73();                                //call sub_10A73
    memory(_ds, 0x8F61) = 0x00;                 //mov byte_31491, 0
    _si = 0x9f4c;                               //mov si, 9F4Ch
    _cx = 0x009e;                               //mov cx, 9Eh
    memory16(_ds, 0x8E7C) = _si;                //mov word_313AC, si
loc_11873:                                      //loc_11873:
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    _lea(_di, _ds, _si + 76);                   //lea di, [si+4Ch]
    memory16(_ds, _si + 8) = _di;               //mov [si+8], di
    _si = _di;                                  //mov si, di
    if (--_cx)                                  //loop loc_11873
      goto loc_11873;
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    memory16(_ds, _si + 8) = 0x0000;            //mov word ptr [si+8], 0
    _di = 0x9c80;                               //mov di, 9C80h
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _cx = 0x0140;                               //mov cx, 140h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    sub_116A9();                                //call sub_116A9
    sub_116BA();                                //call sub_116BA
    if (memory(_ds, 0x8F5E) == 0x00)            //jz short loc_118AD
      goto loc_118AD;
    sub_11A19();                                //call sub_11A19
    sub_116BA();                                //call sub_116BA
    sub_11A19();                                //call sub_11A19
    goto locret_118BC;                          //jmp short locret_118BC
loc_118AD:                                      //loc_118AD:
    sub_11A19();                                //call sub_11A19
    memory16(_ds, 0x918A) = 0x0000;             //mov word_316BA, 0
    sub_10E91();                                //call sub_10E91
    sub_11A19();                                //call sub_11A19
locret_118BC:                                   //locret_118BC:
    return;
}

void sub_118F5()
{
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    if (memory16(_ds, 0x9162) == 0x0000)        //jz short loc_11903
      goto loc_11903;
    sub_1472D();                                //call sub_1472D
loc_11903:                                      //loc_11903:
    _ax = memory16(_ds, 0x91A6);                //mov ax, word_316D6
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    sub_1371A();                                //call sub_1371A
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    sub_1371A();                                //call sub_1371A
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_1371A();                                //call sub_1371A
loc_11922:                                      //loc_11922:
    _si = memory16(_ds, 0x9008);                //mov si, word_31538
    if (memory16(_ds, _si) == 0x0000)           //jz short loc_11930
      goto loc_11930;
    sub_137A9();                                //call sub_137A9
    goto loc_11922;                             //jmp short loc_11922
loc_11930:                                      //loc_11930:
    _di = 0x9c80;                               //mov di, 9C80h
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _cx = 0x0140;                               //mov cx, 140h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
}

void sub_1193C()
{
    _si = 0x916a;                               //mov si, 916Ah
    _cx = 0x0007;                               //mov cx, 7
loc_11942:                                      //loc_11942:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (!(_bx & _bx))                           //jz short loc_11958
      goto loc_11958;
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _push(_ax);                                 //push ax
    _ax = _bx;                                  //mov ax, bx
    sub_129D7();                                //call sub_129D7
    _ax = _pop();                               //pop ax
    memory16(_ds, _di + 52) = _ax;              //mov [di+34h], ax
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
loc_11958:                                      //loc_11958:
    if (--_cx)                                  //loop loc_11942
      goto loc_11942;
}

void sub_1195B()
{
    _si = 0x9f00;                               //mov si, 9F00h
    memory(_ds, 0x9224) = 0x00;                 //mov byte_31754, 0
    _ax = memory16(_ds, 0x91A2);                //mov ax, word_316D2
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    memory16(_ds, _si + 22) = 0x00b0;           //mov word ptr [si+16h], 0B0h
    _ax = memory16(_ds, 0x91A6);                //mov ax, word_316D6
    memory16(_ds, 0x9190) = _ax;                //mov word_316C0, ax
    memory16(_ds, 0x91AA) = _ax;                //mov word_316DA, ax
    _ax += 1;                                   //inc ax
    memory16(_ds, 0x9192) = _ax;                //mov word_316C2, ax
    _ax += 0x00bf;                              //add ax, 0BFh
    memory16(_ds, 0x9194) = _ax;                //mov word_316C4, ax
    _ax = memory16(_ds, 0x91A6);                //mov ax, word_316D6
    _ax &= 0x000f;                              //and ax, 0Fh
    memory16(_ds, 0x9196) = _ax;                //mov word_316C6, ax
    _ax = memory16(_ds, 0x91A6);                //mov ax, word_316D6
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _dx = 0x0028;                               //mov dx, 28h
    _ax = _dx * _al;                            //mul dx
    memory16(_ds, 0x918E) = _ax;                //mov word_316BE, ax
    sub_1193C();                                //call sub_1193C
    _ax = memory16(_ds, 0x9166);                //mov ax, word_31696
    memory16(_ds, 0x915A) = _ax;                //mov word_3168A, ax
    _ax = memory16(_ds, 0x9168);                //mov ax, word_31698
    memory16(_ds, 0x915C) = _ax;                //mov word_3168C, ax
    _di = 0x8e8c;                               //mov di, 8E8Ch
    _cx = 0x0010;                               //mov cx, 10h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    memory16(_ds, 0x8E80) = 0x0000;             //mov word_313B0, 0
    memory16(_ds, 0x8E7E) = 0x0000;             //mov word_313AE, 0
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    memory16(_ds, 0x919E) = 0x0000;             //mov word_316CE, 0
    _di = 0x8ebc;                               //mov di, 8EBCh
    _cx = 0x0004;                               //mov cx, 4
loc_119D3:                                      //loc_119D3:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_119D3
      goto loc_119D3;
    _di = 0x8ecc;                               //mov di, 8ECCh
    _cx = 0x0011;                               //mov cx, 11h
loc_119E3:                                      //loc_119E3:
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_119E3
      goto loc_119E3;
    _push(_si);                                 //push si
    _ax = memory16(_ds, 0x8E7A);                //mov ax, word_313AA
    _al += 0x31;                                //add al, 31h
    memory(_ds, 0x3727) = _al;                  //mov byte_2BC57, al
    _si = 0x3715;                               //mov si, 3715h
    memory(_ds, 0x374E) = 0xff;                 //mov byte_2BC7E, 0FFh
    sub_15926();                                //call sub_15926
    memory(_ds, 0x374E) = 0x00;                 //mov byte_2BC7E, 0
    sub_10D5F();                                //call sub_10D5F
    _si = _pop();                               //pop si
    if (memory16(_ds, 0x9162) == 0x0000)        //jz short locret_11A18
      goto locret_11A18;
    sub_12B22();                                //call sub_12B22
locret_11A18:                                   //locret_11A18:
    return;
}

void sub_11A19()
{
    _si = 0xce80;                               //mov si, 0CE80h
    _di = 0x8fb2;                               //mov di, 8FB2h
    _cx = 0x0146;                               //mov cx, 146h
loc_11A22:                                      //loc_11A22:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    memory16(_ds, _si - 2) = _bx;               //mov [si-2], bx
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_11A22
      goto loc_11A22;
    _si = 0x9f00;                               //mov si, 9F00h
    _di = 0x8f62;                               //mov di, 8F62h
    _cx = 0x004c;                               //mov cx, 4Ch
loc_11A34:                                      //loc_11A34:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _di);                     //mov ah, [di]
    memory(_ds, _si - 1) = _ah;                 //mov [si-1], ah
    _stosb<MemAuto, DirAuto>();                 //stosb
    if (--_cx)                                  //loop loc_11A34
      goto loc_11A34;
    _si = 0x0000;                               //mov si, 0
    _di = 0x0000;                               //mov di, 0
    _cx = 0x1770;                               //mov cx, 1770h
    _ax = _seg003;                              //mov ax, seg seg003
    _es = _ax;                                  //mov es, ax
loc_11A4B:                                      //loc_11A4B:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = memory16(_es, _di);                   //mov bx, es:[di]
    memory16(_ds, _si - 2) = _bx;               //mov [si-2], bx
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_11A4B
      goto loc_11A4B;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    memory16(_ds, 0x8E7A) = memory16(_ds, 0x8E7A) ^ 0x0001;
    sub_10F5A();                                //call sub_10F5A
}

void sub_11A62()
{
    sub_118F5();                                //call sub_118F5
//    _STOP_("sp-trace-fail");                    //sub_11A62 endp_failed
//    _STOP_("continues");                        //sub_11A65 proc near
    sub_11A65();
}

void sub_11A65()
{
    _bx = memory16(_ds, 0x8E7A);                //mov bx, word_313AA
    if (memory(_ds, _bx + -28835) == 0x00)      //jz short loc_11A8E
      goto loc_11A8E;
    _bx = _bx ^ 0x0001;                         //xor bx, 1
    if (memory(_ds, _bx + -28835) == 0x00)      //jz short loc_11A84
      goto loc_11A84;
    if (memory(_ds, _bx + -28833) != 0x00)      //jnz short loc_11A84
      goto loc_11A84;
    sub_11A19();                                //call sub_11A19
loc_11A84:                                      //loc_11A84:
    sub_1195B();                                //call sub_1195B
    memory16(_ds, 0x991E) = 0x0008;             //mov word_31E4E, 8
    return;                                     //retn
loc_11A8E:                                      //loc_11A8E:
    sub_11A19();                                //call sub_11A19
    _bx = memory16(_ds, 0x8E7A);                //mov bx, word_313AA
    if (memory(_ds, _bx + -28833) == 0x00)      //jz short loc_11A84
      goto loc_11A84;
    memory(_ds, 0x8F61) = 0xff;                 //mov byte_31491, 0FFh
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_11A84
      goto loc_11A84;
    memory(_ds, 0x8FB0) = 0xff;                 //mov byte_314E0, 0FFh
    goto loc_11A84;                             //jmp short loc_11A84
}

void sub_11AAF()
{
    memory16(_ds, 0x918E) = 0x2d00;             //mov word_316BE, 2D00h
    memory16(_ds, 0x9196) = 0x0000;             //mov word_316C6, 0
    memory16(_ds, 0x9190) = 0x1200;             //mov word_316C0, 1200h
    memory16(_ds, 0x9192) = 0x7fee;             //mov word_316C2, 7FEEh
    memory16(_ds, 0x9194) = 0x7fee;             //mov word_316C4, 7FEEh
    memory16(_ds, 0x91AE) = 0x0010;             //mov word_316DE, 10h
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, 0x91A2) = _ax;                //mov word_316D2, ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, 0x91A4) = _ax;                //mov word_316D4, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0x91A6) = _ax;                //mov word_316D6, ax
    _ax = memory16(_ds, 0x915A);                //mov ax, word_3168A
    memory16(_ds, 0x9166) = _ax;                //mov word_31696, ax
    _ax = memory16(_ds, 0x915C);                //mov ax, word_3168C
    memory16(_ds, 0x9168) = _ax;                //mov word_31698, ax
    memory16(_ds, 0x9198) = 0x0001;             //mov word_316C8, 1
    memory16(_ds, 0x919A) = 0x0000;             //mov word_316CA, 0
    memory16(_ds, 0x919E) = 0x0000;             //mov word_316CE, 0
    sub_10F78();                                //call sub_10F78
    memory16(_ds, 0x91A0) = 0x0000;             //mov word_316D0, 0
    memory16(_ds, 0x8E7E) = 0x0000;             //mov word_313AE, 0
    memory16(_ds, 0x919C) = 0x0000;             //mov word_316CC, 0
    memory16(_ds, 0x915A) = 0x0000;             //mov word_3168A, 0
    memory16(_ds, 0x915C) = 0x0000;             //mov word_3168C, 0
    memory16(_ds, 0x9166) = 0x0000;             //mov word_31696, 0
    memory16(_ds, 0x9168) = 0x0000;             //mov word_31698, 0
    memory16(_ds, 0x9164) = 0x0000;             //mov word_31694, 0
    memory16(_ds, 0x91AC) = 0x0001;             //mov word_316DC, 1
    memory16(_ds, 0x91B2) = 0x0000;             //mov word_316E2, 0
}

void sub_11B43()
{
    _si = 0x0000;                               //mov si, 0
    _di = 0x0000;                               //mov di, 0
    _cx = 0x1770;                               //mov cx, 1770h
    _ax = _seg003;                              //mov ax, seg seg003
    _es = _ax;                                  //mov es, ax
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    memory16(_ds, 0x8F32) = 0x0000;             //mov word_31462, 0
    memory16(_ds, 0x8E86) = 0x0000;             //mov word_313B6, 0
    _di = 0x8e8c;                               //mov di, 8E8Ch
    _cx = 0x0010;                               //mov cx, 10h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    memory(_ds, 0x8FB0) = 0x00;                 //mov byte_314E0, 0
    memory(_ds, 0x8F59) = 0x00;                 //mov byte_31489, 0
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    sub_11AAF();                                //call sub_11AAF
    if (memory16(_ds, 0x8E70) != 0x0002)        //jnz short locret_11B8F
      goto locret_11B8F;
    sub_11A19();                                //call sub_11A19
    sub_11AAF();                                //call sub_11AAF
    sub_11A19();                                //call sub_11A19
locret_11B8F:                                   //locret_11B8F:
    return;
}

void sub_11B90()
{
    if ((short)_bx >= 0)                        //jns short sub_11BA2
    {
        sub_11BA2();
        return;
      //_STOP_("goto loc_11BA2");
    }
    _bx = -_bx;                                 //neg bx
    sub_11BA2();                                //call sub_11BA2
    _ax -= 0x0004;                              //sub ax, 4
    _ax = -_ax;                                 //neg ax
    _ax &= 0x0007;                              //and ax, 7
}

void sub_11BA2()
{
    if ((short)_ax >= 0)                        //jns short sub_11BB4
    {
        sub_11BB4();
        return;
      //_STOP_("goto loc_11BB4");
    }
    _ax = -_ax;                                 //neg ax
    sub_11BB4();                                //call sub_11BB4
    _ax -= 0x0008;                              //sub ax, 8
    _ax = -_ax;                                 //neg ax
    _ax &= 0x0007;                              //and ax, 7
}

void sub_11BB4()
{
    if (!(_ax & _ax))                           //jz short loc_11BCF
      goto loc_11BCF;
    if (!(_bx & _bx))                           //jz short loc_11BE2
      goto loc_11BE2;
    if (_ax == _bx)                             //jz short loc_11BE6
      goto loc_11BE6;
    if ((short)_ax > (short)_bx)                //jg short loc_11BD3
      goto loc_11BD3;
    _ax >>= 1;                                  //shr ax, 1
    _dx = _ax;                                  //mov dx, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _div(_bx);                                  //div bx
    if ((short)_ax >= (short)0x3504)            //jge short loc_11BE6
      goto loc_11BE6;
loc_11BCF:                                      //loc_11BCF:
    _ax = 0x0004;                               //mov ax, 4
    return;                                     //retn
loc_11BD3:                                      //loc_11BD3:
    _bx >>= 1;                                  //shr bx, 1
    _dx = _bx;                                  //mov dx, bx
    _bx = _ax;                                  //mov bx, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _div(_bx);                                  //div bx
    if ((short)_ax >= (short)0x3504)            //jge short loc_11BE6
      goto loc_11BE6;
loc_11BE2:                                      //loc_11BE2:
    _ax = 0x0002;                               //mov ax, 2
    return;                                     //retn
loc_11BE6:                                      //loc_11BE6:
    _ax = 0x0003;                               //mov ax, 3
}

void sub_11BEA()
{
    _push(_si);                                 //push si
    _si += 0x0028;                              //add si, 28h
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    memory16(_ds, 0x8EB4) = _ax;                //mov word_313E4, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    memory16(_ds, 0x8EB6) = _ax;                //mov word_313E6, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    memory16(_ds, 0x8EB8) = _ax;                //mov word_313E8, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    memory16(_ds, 0x8EBA) = _ax;                //mov word_313EA, ax
    _di = memory16(_ds, 0x9054);                //mov di, word_31584
    sub_11C18();                                //call sub_11C18
    if (!_flags.zero)                                //jnz short loc_11C16
      goto loc_11C16;
    sub_10F96();                                //call sub_10F96
loc_11C16:                                      //loc_11C16:
    _si = _pop();                               //pop si
}

void sub_11C18()
{
loc_11C18:
    if (memory16(_ds, _di) == 0x0000)           //jz short locret_11C4E
    {
        _flags.zero = true;
      goto locret_11C4E;
    }
    _ax = memory16(_ds, _di + 40);              //mov ax, [di+28h]
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_ds, _di + 42);              //mov ax, [di+2Ah]
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, _di + 44);              //mov ax, [di+2Ch]
    memory16(_ds, 0xFCFA) = _ax;                //mov word_3822A, ax
    _ax = memory16(_ds, _di + 46);              //mov ax, [di+2Eh]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    sub_10F2F();                                //call sub_10F2F
    if (!_flags.zero)                                //jnz short loc_11C48
      goto loc_11C48;
    if (memory16(_ds, _di) != 0x00b8)           //jnz short loc_11C43
      goto loc_11C43;
    _di = memory16(_ds, _di + 70);              //mov di, [di+46h]
loc_11C43:                                      //loc_11C43:
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_11C18;                             //jmp short sub_11C18
loc_11C48:                                      //loc_11C48:
    if (memory16(_ds, _di) == 0x00b8)           //jz short loc_11C43
      goto loc_11C43;
    _flags.zero = false;
locret_11C4E:                                   //locret_11C4E:
    return;
}

void loc_11C76()
{
loc_11C76:
    WORD _cs = _seg000;

    sub_11C18();                                //call sub_11C18
    if (_FIXME_)                                //jz short loc_11CC1
      goto loc_11CC1;
    memory16(_ds, 0xFCC6) = _si;                //mov word_381F6, si
    _si = _di;                                  //mov si, di
    sub_11689();                                //call sub_11689
    _push(_di);                                 //push di
    _ax = memory16(_cs, 0x1CCA);                //mov ax, cs:word_11CCA
    _di = _si;                                  //mov di, si
    _si = memory16(_ds, 0xFCC6);                //mov si, word_381F6
    _push(memory16(_ds, 0xFCE2));               //push word_38212
    _push(memory16(_ds, 0xFCE6));               //push word_38216
    _push(memory16(_ds, 0xFCEA));               //push word_3821A
    _push(memory16(_ds, 0xFCEE));               //push word_3821E
    sub_13A36();                                //call sub_13A36
    memory16(_ds, 0xFCEE) = _pop();             //pop word_3821E
    memory16(_ds, 0xFCEA) = _pop();             //pop word_3821A
    memory16(_ds, 0xFCE6) = _pop();             //pop word_38216
    memory16(_ds, 0xFCE2) = _pop();             //pop word_38212
    _di = _pop();                               //pop di
    if (memory16(_ds, _di) == 0x0004)           //jz short locret_11CC9
      goto locret_11CC9;
    if (memory16(_ds, 0x9164) != 0x0000)        //jnz short locret_11CC9
      goto locret_11CC9;
    goto loc_11C76;                             //jmp short loc_11C76
loc_11CC1:                                      //loc_11CC1:
    sub_10F96();                                //call sub_10F96
    if (_FIXME_)                                //jz short locret_11CC9
      goto locret_11CC9;
{sub_13A36(); return; };                        //
locret_11CC9:                                   //locret_11CC9:
    return;                                     //retn
    _STOP_("word_11CCA dw 0");                  //word_11CCA dw 0
}

void sub_11CCC() // boundary check collision
{
    _di = memory16(_ds, 0x9054);                //mov di, word_31584
    memory16(_ds, 0x8EB4) = _ax;                //mov word_313E4, ax
    memory16(_ds, 0x8EB8) = _ax;                //mov word_313E8, ax
    memory16(_ds, 0x8EB6) = _bx;                //mov word_313E6, bx
    memory16(_ds, 0x8EBA) = _bx;                //mov word_313EA, bx
loc_11CDE:                                      //loc_11CDE:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_11D0C
      goto loc_11D0C;
    
    
//    _flags.zero = true; return; //ggg
    __debugRect((short)memory16(_ds, _di + 40), (short)memory16(_ds, _di + 42),
                (short)memory16(_ds, _di + 44), (short)memory16(_ds, _di + 46));
    __debugPoint(_ax, _bx);
    
    if ((short)_ax < (short)memory16(_ds, _di + 40))//jl short loc_11CFE
      goto loc_11CFE;
    if ((short)_ax > (short)memory16(_ds, _di + 44))//jg short loc_11CFE
      goto loc_11CFE;
    if ((short)_bx < (short)memory16(_ds, _di + 42))//jl short loc_11CFE
      goto loc_11CFE;
    if ((short)_bx > (short)memory16(_ds, _di + 46))//jg short loc_11CFE
      goto loc_11CFE;
    if (memory16(_ds, _di) == 0x00b8)           //jz short loc_11D07
      goto loc_11D07;
    _flags.zero = false;
    return;                                     //retn
loc_11CFE:                                      //loc_11CFE:
    if (memory16(_ds, _di) != 0x00b8)           //jnz short loc_11D07
      goto loc_11D07;
    _di = memory16(_ds, _di + 70);              //mov di, [di+46h]
loc_11D07:                                      //loc_11D07:
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_11CDE;                             //jmp short loc_11CDE
loc_11D0C:                                      //loc_11D0C:
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    memory16(_ds, 0xFCE6) = _bx;                //mov word_38216, bx
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    memory16(_ds, 0xFCEE) = _bx;                //mov word_3821E, bx
    sub_10F96();                                //call sub_10F96
}

void sub_11D1E()
{
    _push(_si);                                 //push si
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _dx = _dx + memory16(_ds, 0x9196);          //add dx, word_316C6
    _bx = _dx;                                  //mov bx, dx
    _bx &= 0x000f;                              //and bx, 0Fh
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax &= 0x00fe;                              //and ax, 0FEh
    _si += _ax;                                 //add si, ax
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _si += _ax;                                 //add si, ax
    _dx = 0x0004;                               //mov dx, 4
    _di = 0x9920;                               //mov di, 9920h
    _push(_bx);                                 //push bx
    sub_11E02();                                //call sub_11E02
    _bx = _pop();                               //pop bx
    _di = 0x9922;                               //mov di, 9922h
    _push(_bx);                                 //push bx
    sub_11E02();                                //call sub_11E02
    _bx = _pop();                               //pop bx
    _di = 0x9924;                               //mov di, 9924h
    _push(_bx);                                 //push bx
    sub_11E02();                                //call sub_11E02
    _bx = _pop();                               //pop bx
    _di -= 0x0004;                              //sub di, 4
    _si += 0x0022;                              //add si, 22h
    _cx += _bx;                                 //add cx, bx
    _flags.carry2 = (short)_cx <= 0x0010;
    _cx -= 0x0010;                              //sub cx, 10h
    if (_flags.carry2)                                //jle short loc_11D97
      goto loc_11D97;
loc_11D71:                                      //loc_11D71:
    _bx = _bx ^ _bx;                            //xor bx, bx
    _push(_di);                                 //push di
    sub_11E02();                                //call sub_11E02
    _di = _pop();                               //pop di
    _bx = _bx ^ _bx;                            //xor bx, bx
    _di += 0x0002;                              //add di, 2
    _push(_di);                                 //push di
    sub_11E02();                                //call sub_11E02
    _di = _pop();                               //pop di
    _bx = _bx ^ _bx;                            //xor bx, bx
    _di += 0x0002;                              //add di, 2
    _push(_di);                                 //push di
    sub_11E02();                                //call sub_11E02
    _di = _pop();                               //pop di
    _di += 0x005c;                              //add di, 5Ch
    _si += 0x0022;                              //add si, 22h
    _flags.carry2 = (short)_cx > 0x0010;
    _cx -= 0x0010;                              //sub cx, 10h
    if (_flags.carry2)                                //jg short loc_11D71
      goto loc_11D71;
loc_11D97:                                      //loc_11D97:
    _si = _pop();                               //pop si
}

void loc_11DE4()
{
loc_11DE4:
    _bx = _bx ^ _bx;                            //xor bx, bx
    _push(_di);                                 //push di
    sub_11E02();                                //call sub_11E02
    _di = _pop();                               //pop di
    _bx = _bx ^ _bx;                            //xor bx, bx
    _di += 0x0002;                              //add di, 2
    _push(_di);                                 //push di
    sub_11E02();                                //call sub_11E02
    _di = _pop();                               //pop di
    _di -= 0x0002;                              //sub di, 2
    _si += 0x0024;                              //add si, 24h
    _cx -= 0x0010;                              //sub cx, 10h
    if (_FIXME_)                                //jg short loc_11DE4
      goto loc_11DE4;
loc_11E00:                                      //loc_11E00:
    _si = _pop();                               //pop si
}

void sub_11E02()
{
    _push(_cx);                                 //push cx
    _push(_bx);                                 //push bx
    _bx -= 0x0010;                              //sub bx, 10h
    _bx = -_bx;                                 //neg bx
    if ((short)_cx <= (short)_bx)               //jle short loc_11E0F
      goto loc_11E0F;
    _cx = _bx;                                  //mov cx, bx
loc_11E0F:                                      //loc_11E0F:
    _bx = _pop();                               //pop bx
    if (!(_cx & _cx))                           //jz short loc_11E27
      goto loc_11E27;
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _si = 0x5538;                               //mov si, 5538h
    _ax >>= 1;                                  //shr ax, 1
    _si += _ax;                                 //add si, ax
    _si += _bx;                                 //add si, bx
    _si += _bx;                                 //add si, bx
loc_11E21:                                      //loc_11E21:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _dx;                                 //add di, dx
    if (--_cx)                                  //loop loc_11E21
      goto loc_11E21;
    _si = _pop();                               //pop si
loc_11E27:                                      //loc_11E27:
    _cx = _pop();                               //pop cx
}

void sub_11E29()
{
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax -= 0x000e;                              //sub ax, 0Eh
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx -= 0x000e;                              //sub dx, 0Eh
    _bx = _ax;                                  //mov bx, ax
    _bx &= 0x000f;                              //and bx, 0Fh
    _bx <<= 1;                                  //shl bx, 1
    _push(memory16(_ds, _bx + 12954));          //push word ptr [bx+329Ah]
    _cx = 0x0019;                               //mov cx, 19h
    sub_11D1E();                                //call sub_11D1E
    _di = _pop();                               //pop di
    _push(_si);                                 //push si
    _si = 0x9920;                               //mov si, 9920h
    _cx = 0x004b;                               //mov cx, 4Bh
loc_11E4E:                                      //loc_11E4E:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ax = _ax & memory16(_ds, _di);             //and ax, [di]
    if (_ax != 0)                               //jnz short loc_11E5C
      goto loc_11E5C;
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_11E4E
      goto loc_11E4E;
    _si = _pop();                               //pop si
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
    return;                                     //retn
loc_11E5C:                                      //loc_11E5C:
    _si = _pop();                               //pop si
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    _flags.zero = false;
}

void loc_11E98()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8E88) = _dx;                //mov word_313B8, dx
    memory16(_ds, _si + 2) = 0x28df;            //mov word ptr [si+2], 28DFh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _bx = memory16(_ds, _bx);                   //mov bx, [bx]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    memory16(_ds, _si + 26) = 0x0007;           //mov word ptr [si+1Ah], 7
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_11E61()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _ax = memory16(_ds, _di + 34);              //mov ax, [di+22h]
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = 0x31fe;                               //mov bx, 31FEh
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    _bx += 0x0002;                              //add bx, 2
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _ax <<= 1;                                  //shl ax, 1
    _dx = 0x000e;                               //mov dx, 0Eh
    _bp = 0x31d8;                               //mov bp, 31D8h
    _bp += _ax;                                 //add bp, ax
    if (!(memory16(_ds, _bp + 0) & 0x0001))     //jz short loc_11E98
      goto loc_11E98;
    _dx = 0x000e;                               //mov dx, 0Eh
loc_11E98:                                      //loc_11E98:
    memory16(_ds, 0x8E88) = _dx;                //mov word_313B8, dx
    memory16(_ds, _si + 2) = 0x28df;            //mov word ptr [si+2], 28DFh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _bx = memory16(_ds, _bx);                   //mov bx, [bx]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    memory16(_ds, _si + 26) = 0x0007;           //mov word ptr [si+1Ah], 7
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_11ED3()
{
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, _di) = 0x0014;                //mov word ptr [di], 14h
    memory16(_ds, _di + 2) = 0x1f4d;            //mov word ptr [di+2], 1F4Dh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 12) = _bp;              //mov [di+0Ch], bp
    memory16(_ds, _di + 14) = 0x0000;           //mov word ptr [di+0Eh], 0
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    memory16(_ds, _di + 22) = _bx;              //mov [di+16h], bx
    memory16(_ds, _di + 28) = _cx;              //mov [di+1Ch], cx
    memory16(_ds, _di + 66) = _dx;              //mov [di+42h], dx
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 44) = 0x03e8;           //mov word ptr [di+2Ch], 3E8h
}

void loc_127E7()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x8F38);                //mov ax, word_31468
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    if ((short)_ax >= 0)                        //jns short loc_127F1
      goto loc_127F1;
    _ax = -_ax;                                 //neg ax
loc_127F1:                                      //loc_127F1:
    if ((short)_ax >= (short)0x0020)            //jge short loc_12805
      goto loc_12805;
    _ax = memory16(_ds, 0x8F3A);                //mov ax, word_3146A
    _ax = _ax - memory16(_ds, _si + 22);        //sub ax, [si+16h]
    if ((short)_ax >= 0)                        //jns short loc_12800
      goto loc_12800;
    _ax = -_ax;                                 //neg ax
loc_12800:                                      //loc_12800:
    if ((short)_ax < (short)0x0020)             //jl short locret_12869
      goto locret_12869;
loc_12805:                                      //loc_12805:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x8F38) = _ax;                //mov word_31468, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0x8F3A) = _ax;                //mov word_3146A, ax
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    _bp = memory16(_ds, _si + 16);              //mov bp, [si+10h]
    _bp -= 0x0004;                              //sub bp, 4
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    memory16(_ds, _di + 52) = _ax;              //mov [di+34h], ax
    _ax = memory16(_ds, 0x8E86);                //mov ax, word_313B6
    _ax += 1;                                   //inc ax
    memory16(_ds, 0x8E86) = _ax;                //mov word_313B6, ax
    _ax = -_ax;                                 //neg ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, _di + 26) = _ax;              //mov [di+1Ah], ax
locret_12869:                                   //locret_12869:
    return;                                     //retn
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    if ((short)_ax <= (short)0x0008)            //jle short loc_12878
      goto loc_12878;
    _ax = 0x0008;                               //mov ax, 8
loc_12878:                                      //loc_12878:
    if ((short)_ax >= (short)0xfff8)            //jge short loc_12880
      goto loc_12880;
    _ax = 0xfff8;                               //mov ax, 0FFF8h
loc_12880:                                      //loc_12880:
    memory16(_ds, _si + 18) += _ax;             //add [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    _ax = _ax - memory16(_ds, _si + 22);        //sub ax, [si+16h]
    if ((short)_ax <= (short)0x0008)            //jle short loc_12894
      goto loc_12894;
    _ax = 0x0008;                               //mov ax, 8
loc_12894:                                      //loc_12894:
    if ((short)_ax >= (short)0xfff8)            //jge short loc_1289C
      goto loc_1289C;
    _ax = 0xfff8;                               //mov ax, 0FFF8h
loc_1289C:                                      //loc_1289C:
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    if (_ax != memory16(_ds, _si + 18))         //jnz short locret_128B7
      goto locret_128B7;
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    if (_ax != memory16(_ds, _si + 22))         //jnz short locret_128B7
      goto locret_128B7;
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
locret_128B7:                                   //locret_128B7:
    return;                                     //retn
    if (memory(_ds, 0x9224) == 0x00)            //jz short loc_128C2
      goto loc_128C2;
    _STOP_("goto loc_13A2F");                   //jmp loc_13A2F
loc_128C2:                                      //loc_128C2:
    sub_141B1();                                //call sub_141B1
    memory16(_ds, _si + 22) -= 0x000a;          //sub word ptr [si+16h], 0Ah
    if ((short)memory16(_ds, _si + 22) >= 0)    //jns short loc_128CF
      goto loc_128CF;
    sub_107C0();                                //call sub_107C0
    return;                                     //retn
loc_128CF:                                      //loc_128CF:
    sub_13589();                                //call sub_13589
    sub_11BEA();                                //call sub_11BEA
    if (_FIXME_)                                //jz short locret_128DE
      goto locret_128DE;
    _ax = memory16(_cs, 0x13DA4);               //mov ax, word ptr cs:unk_13DA4
{sub_13A36(); return; };                        //
locret_128DE:                                   //locret_128DE:
    return;
}

void sub_128DF()
{
    WORD _cs = _seg000;

    sub_141B1();                                //call sub_141B1
    if (memory16(_ds, _si + 26) == 0x0000)      //jz short loc_128FE
      goto loc_128FE;
    if ((short)memory16(_ds, _si + 26) >= 0 /*CHECK*/)
      goto loc_1291F;
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax &= 0x0003;                              //and ax, 3
    if (_ax != 0)                               //jnz short loc_1295E
      goto loc_1295E;
    memory16(_ds, _si + 28) += 1;               //inc word ptr [si+1Ch]
    memory16(_ds, _si + 28) &= 0x0007;          //and word ptr [si+1Ch], 7
    goto loc_1295E;                             //jmp short loc_1295E
loc_128FE:                                      //loc_128FE:
    memory16(_ds, _si + 22) += 0x0008;          //add word ptr [si+16h], 8
    if ((short)memory16(_ds, _si + 22) < (short)0x00c8)
      goto loc_12976;
    if (memory16(_ds, 0x9164) == 0x0000)        //jz short loc_1291B
      goto loc_1291B;
    memory16(_ds, 0x9164) -= 1;                 //dec word_31694
    if (memory16(_ds, 0x9164) != 0)             //jnz short loc_1291B
      goto loc_1291B;
    memory(_ds, 0x8FB0) = 0xff;                 //mov byte_314E0, 0FFh
loc_1291B:                                      //loc_1291B:
    sub_107C0();                                //call sub_107C0
    return;                                     //retn
loc_1291F:                                      //loc_1291F:
    memory16(_ds, _si + 26) &= 0x0007;          //and word ptr [si+1Ah], 7
    if (memory16(_ds, _si + 26) != 0)           //jnz short loc_12937
      goto loc_12937;
    _ax = 0x00a0;                               //mov ax, 0A0h
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    _bx = 0x0064;                               //mov bx, 64h
    _bx = _bx - memory16(_ds, _si + 22);        //sub bx, [si+16h]
    sub_11B90();                                //call sub_11B90
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
loc_12937:                                      //loc_12937:
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    _ax = 0x00a0;                               //mov ax, 0A0h
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    //_ax = _ax * _al;                            //imul ax
    _imul(_ax);
    _bx = _ax;                                  //mov bx, ax
    _cx = _dx;                                  //mov cx, dx
    _ax = 0x0064;                               //mov ax, 64h
    _ax = _ax - memory16(_ds, _si + 22);        //sub ax, [si+16h]
    //_ax = _ax * _al;                            //imul ax
    _imul(_ax);
    _flags.carry = (_ax + _bx) >= 0x10000;      //add ax, bx
    _ax += _bx;
    _dx = _dx + _cx + _flags.carry;             //adc dx, cx
    if (_dx != 0)                                //jnz short loc_1295E
      goto loc_1295E;
    if (_ax >= 0x0190)                          //jnb short loc_1295E
      goto loc_1295E;
    memory16(_ds, _si + 26) = 0xffde;           //mov word ptr [si+1Ah], 0FFDEh
loc_1295E:                                      //loc_1295E:
    _bx = memory16(_ds, _si + 28);              //mov bx, [si+1Ch]
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx &= 0x001c;                              //and bx, 1Ch
    _ax = memory16(_ds, _bx + 12728);           //mov ax, [bx+31B8h]
    memory16(_ds, _si + 18) += _ax;             //add [si+12h], ax
    _ax = memory16(_ds, _bx + 12730);           //mov ax, [bx+31BAh]
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
loc_12976:                                      //loc_12976:
    sub_13589();                                //call sub_13589
    sub_142AE();                                //call sub_142AE
    if (_flags.zero)                                //jz short locret_129B4
      goto locret_129B4;
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _dx = 0x0064;                               //mov dx, 64h
    if (_ax == 0x0018)                          //jz short loc_12990
      goto loc_12990;
    _dx = 0x0032;                               //mov dx, 32h
    if (_ax != 0x0060)                          //jnz short loc_129B5
      goto loc_129B5;
loc_12990:                                      //loc_12990:
    _flags.carry = (memory16(_ds, 0x915A) + _dx) >= 0x10000;
    memory16(_ds, 0x915A) += _dx;
    memory16(_ds, 0x915C) = memory16(_ds, 0x915C) + 0x0000 + _flags.carry;
    memory16(_ds, 0x8E88) = 0x0004;             //mov word_313B8, 4
    if (memory16(_ds, 0x9164) == 0x0000)        //jz short loc_129B1
      goto loc_129B1;
    memory16(_ds, 0x9164) -= 1;                 //dec word_31694
    if (memory16(_ds, 0x9164) != 0)             //jnz short loc_129B1
      goto loc_129B1;
    memory(_ds, 0x8FB0) = 0xff;                 //mov byte_314E0, 0FFh
loc_129B1:                                      //loc_129B1:
    sub_107C0();                                //call sub_107C0
locret_129B4:                                   //locret_129B4:
    return;                                     //retn
loc_129B5:                                      //loc_129B5:
    _push(memory16(_ds, _si + 34));             //push word ptr [si+22h]
    sub_107C0();                                //call sub_107C0
    _bx = _pop();                               //pop bx
    _bx <<= 1;                                  //shl bx, 1
    _di = memory16(_ds, _bx + 12760);           //mov di, [bx+31D8h]
    _ax = 0x000f;                               //mov ax, 0Fh
    if (!(_di & 0x0001))                        //jz short loc_129CF
      goto loc_129CF;
    _di -= 1;                                   //dec di
    _ax = 0x000f;                               //mov ax, 0Fh
loc_129CF:                                      //loc_129CF:
    memory16(_ds, 0x8E88) = _ax;                //mov word_313B8, ax
    _push(_si);                                 //push si
    _indirectCall(_cs, _di);                    //call di
    _si = _pop();                               //pop si
}

void sub_129D7()
{
    if (_ax != 0x0044)                          //jnz short loc_129DF
      goto loc_129DF;
    _STOP_("goto loc_1308C");                   //jmp loc_1308C  --level2
loc_129DF:                                      //loc_129DF:
    if (_ax != 0x0098)                          //jnz short loc_129E7
      goto loc_129E7;
{sub_12CA6(); return; };                        //
loc_129E7:                                      //loc_129E7:
    if (_ax != 0x0034)                          //jnz short loc_129EF
      goto loc_129EF;
{sub_13246(); return; };                        //
loc_129EF:                                      //loc_129EF:
    if (_ax != 0x002c)                          //jnz short loc_129F7
      goto loc_129F7;
{sub_12E84(); return; };                        //
loc_129F7:                                      //loc_129F7:
    if (_ax != 0x0020)                          //jnz short loc_129FF
      goto loc_129FF;
{sub_131B6(); return; };                        //
loc_129FF:                                      //loc_129FF:
    if (_ax != 0x004c)                          //jnz short loc_12A07
      goto loc_12A07;
{loc_12F08(); return; };                        //
loc_12A07:                                      //loc_12A07:
    if (_ax != 0x003c)                          //jnz short loc_12A0F
      goto loc_12A0F;
    _STOP_("goto loc_13004");                   //jmp loc_13004
loc_12A0F:                                      //loc_12A0F:
    if (_ax != 0x0038)                          //jnz short loc_12A17
      goto loc_12A17;
    _STOP_("goto loc_12F7C");                   //jmp loc_12F7C
loc_12A17:                                      //loc_12A17:
    if (_ax != 0x00c0)                          //jnz short loc_12A1F
      goto loc_12A1F;
{sub_12C32(); return; };                        //
loc_12A1F:                                      //loc_12A1F:
    if (_ax != 0x0090)                          //jnz short loc_12A27
      goto loc_12A27;
{loc_13126(); return; };                        //
loc_12A27:                                      //loc_12A27:
    if (_ax != 0x0048)                          //jnz short loc_12A2F
      goto loc_12A2F;
    _STOP_("goto loc_12D86");                   //jmp loc_12D86
loc_12A2F:                                      //loc_12A2F:
    if (_ax != 0x00b0)                          //jnz short loc_12A37
      goto loc_12A37;
    _STOP_("goto loc_12DF0");                   //jmp loc_12DF0
loc_12A37:                                      //loc_12A37:
    if (_ax != 0x0028)                          //jnz short loc_12A3F
      goto loc_12A3F;
{loc_12D2A(); return; };                        //
loc_12A3F:                                      //loc_12A3F:
    if (_ax != 0x0094)                          //jnz short locret_12A47
      goto locret_12A47;
{sub_12BCC(); return; };                        //
locret_12A47:                                   //locret_12A47:
    return;
}

void loc_12A4D()
{
loc_12A4D:
    memory16(_ds, 0x8E88) = 0x0012;             //mov word_313B8, 12h
    if ((short)memory16(_ds, 0x9186) <= (short)0x0027)
      goto loc_12A60;
    memory16(_ds, 0x9186) = 0x0027;             //mov word_316B6, 27h
loc_12A60:                                      //loc_12A60:
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    return;                                     //retn
    memory16(_ds, 0x9186) += 0x0028;            //add word_316B6, 28h
    goto loc_12A4D;                             //jmp short loc_12A4D
}

void sub_12A6E()
{
    _di = 0x9134;                               //mov di, 9134h
    _bp = _di;                                  //mov bp, di
    _ax = 0x007f;                               //mov ax, 7Fh
    _cx = 0x0007;                               //mov cx, 7
loc_12A79:                                      //loc_12A79:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_12A91
      goto loc_12A91;
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _dx = memory16(_ds, _bx + 52);              //mov dx, [bx+34h]
    if (_dx == memory16(_ds, _bx + 36))         //jz short loc_12A91
      goto loc_12A91;
    if ((short)_dx >= (short)_ax)               //jge short loc_12A91
      goto loc_12A91;
    _ax = _dx;                                  //mov ax, dx
    _bp = _di;                                  //mov bp, di
loc_12A91:                                      //loc_12A91:
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_12A79
      goto loc_12A79;
    if (_ax == 0x007f)                          //jz short locret_12AA2
      goto locret_12AA2;
    _di = memory16(_ds, _bp + 2);               //mov di, ds:[bp+2]
    memory16(_ds, _di + 52) += 1;               //inc word ptr [di+34h]
locret_12AA2:                                   //locret_12AA2:
    return;
}

void locret_12AAF()
{
    return;                                     //retn
}

void sub_12AB2()
{
    if (memory16(_ds, 0x915E) == 0x0002)        //jz short locret_12ABD
      goto locret_12ABD;
    memory16(_ds, 0x915E) += 1;                 //inc word_3168E
locret_12ABD:                                   //locret_12ABD:
    return;
}

void loc_12ADD()
{
loc_12ADD:
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    if (!(_ax & _ax))                           //jz short loc_12AFE
      goto loc_12AFE;
    _si = _di;                                  //mov si, di
    sub_11689();                                //call sub_11689
    _push(_di);                                 //push di
    if (_ax == 0x0050)                          //jz short loc_12AFB
      goto loc_12AFB;
    if (_ax == 0x0054)                          //jz short loc_12AFB
      goto loc_12AFB;
    _di = _si;                                  //mov di, si
    _si = 0x8ffe;                               //mov si, 8FFEh
    sub_13A33();                                //call sub_13A33
loc_12AFB:                                      //loc_12AFB:
    _di = _pop();                               //pop di
    goto loc_12ADD;                             //jmp short loc_12ADD
loc_12AFE:                                      //loc_12AFE:
    _di = memory16(_ds, 0x90A0);                //mov di, word_315D0
loc_12B02:                                      //loc_12B02:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_12B17
      goto loc_12B17;
    _push(memory16(_ds, _di + 10));             //push word ptr [di+0Ah]
    if (memory16(_ds, _di) != 0x0014)           //jnz short loc_12B14
      goto loc_12B14;
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
loc_12B14:                                      //loc_12B14:
    _di = _pop();                               //pop di
    goto loc_12B02;                             //jmp short loc_12B02
loc_12B17:                                      //loc_12B17:
    _di = 0x8e8c;                               //mov di, 8E8Ch
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x0010;                               //mov cx, 10h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
}

void sub_12B22()
{
    _ax = memory16(_ds, 0x9008);                //mov ax, word_31538
    memory16(_ds, 0x91B4) = _ax;                //mov word_316E4, ax
    _ax = memory16(_ds, 0x9006);                //mov ax, word_31536
    memory16(_ds, 0x91B6) = _ax;                //mov word_316E6, ax
    _di = 0x9134;                               //mov di, 9134h
    _bx = 0x91b8;                               //mov bx, 91B8h
    _cx = 0x000e;                               //mov cx, 0Eh
loc_12B37:                                      //loc_12B37:
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _bx += 0x0002;                              //add bx, 2
    memory16(_ds, _di) = 0x0000;                //mov word ptr [di], 0
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_12B37
      goto loc_12B37;
    _si = 0x8ffe;                               //mov si, 8FFEh
    sub_10762();                                //call sub_10762
    sub_12BCC();                                //call sub_12BCC
    sub_13246();                                //call sub_13246
    sub_13246();                                //call sub_13246
    sub_131B6();                                //call sub_131B6
    memory16(_ds, _di + 52) = 0x0002;           //mov word ptr [di+34h], 2
    sub_131B6();                                //call sub_131B6
    memory16(_ds, _di + 52) = 0x0002;           //mov word ptr [di+34h], 2
    sub_12E84();                                //call sub_12E84
    memory16(_ds, _di + 52) = 0x0002;           //mov word ptr [di+34h], 2
    sub_12CA6();                                //call sub_12CA6
    memory16(_ds, _di + 52) = 0x0002;           //mov word ptr [di+34h], 2
    sub_12C32();                                //call sub_12C32
    memory16(_ds, _di + 52) = 0x0002;           //mov word ptr [di+34h], 2
}

void loc_12BC5()
{
    memory16(_ds, 0x9188) += 0x00aa;            //add word_316B8, 0AAh
}

void sub_12BCC()
{
    if (memory16(_ds, 0x9134) == 0x0000)        //jz short loc_12BDC
      goto loc_12BDC;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x9136);                //mov si, word_31666
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12BDC:                                      //loc_12BDC:
    memory16(_ds, 0x9134) = 0x0094;             //mov word_31664, 94h
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, 0x9136) = _si;                //mov word_31666, si
    memory16(_ds, _si) = 0x0094;                //mov word ptr [si], 94h
    memory16(_ds, _si + 2) = 0x37df;            //mov word ptr [si+2], 37DFh
    memory16(_ds, _si + 6) = 0x9134;            //mov word ptr [si+6], 9134h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0002;           //mov word ptr [si+24h], 2
    memory16(_ds, _si + 54) = 0x0001;           //mov word ptr [si+36h], 1
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x0008;             //mov word_31660, 8
}

void loc_12C21()
{
    _di = memory16(_ds, 0x9136);                //mov di, word_31666
    _ax = memory16(_ds, _di + 36);              //mov ax, [di+24h]
    if ((short)_ax <= (short)memory16(_ds, _di + 52))//jle short locret_12C30
      goto locret_12C30;
    memory16(_ds, _di + 52) += 1;               //inc word ptr [di+34h]
locret_12C30:                                   //locret_12C30:
    return;
}

void sub_12C32()
{
    if (memory16(_ds, 0x9134) == 0x00c0)        //jz short loc_12C21
      _STOP_("goto loc_12C21");
    if (memory16(_ds, 0x9134) == 0x0000)        //jz short loc_12C4A
      goto loc_12C4A;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x9136);                //mov si, word_31666
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12C4A:                                      //loc_12C4A:
    memory16(_ds, 0x9134) = 0x00c0;             //mov word_31664, 0C0h
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, 0x9136) = _si;                //mov word_31666, si
    memory16(_ds, _si) = 0x00c0;                //mov word ptr [si], 0C0h
    memory16(_ds, _si + 2) = 0x20f7;            //mov word ptr [si+2], 20F7h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory16(_ds, _si + 6) = 0x9134;            //mov word ptr [si+6], 9134h
    memory16(_ds, _si + 12) = 0xa658;           //mov word ptr [si+0Ch], 0A658h
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0002;           //mov word ptr [si+24h], 2
    memory16(_ds, _si + 54) = 0x000e;           //mov word ptr [si+36h], 0Eh
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x0008;             //mov word_31660, 8
}

void sub_12CA6()
{
    if (memory16(_ds, 0x914C) == 0x0098)        //jz short loc_12D19
      goto loc_12D19;
    if (memory16(_ds, 0x914C) == 0x0000)        //jz short loc_12CBE
      goto loc_12CBE;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x914E);                //mov si, word_3167E
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12CBE:                                      //loc_12CBE:
    if (memory16(_ds, 0x9148) != 0x0044)        //jnz short loc_12CD4
      goto loc_12CD4;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x914A);                //mov si, word_3167A
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x0000;             //mov word_31678, 0
loc_12CD4:                                      //loc_12CD4:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, 0x914C) = 0x0098;             //mov word_3167C, 98h
    memory16(_ds, 0x914E) = _si;                //mov word_3167E, si
    memory16(_ds, _si) = 0x0098;                //mov word ptr [si], 98h
    memory16(_ds, _si + 2) = 0x3801;            //mov word ptr [si+2], 3801h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x914c;            //mov word ptr [si+6], 914Ch
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0002;           //mov word ptr [si+24h], 2
    memory16(_ds, _si + 54) = 0x000a;           //mov word ptr [si+36h], 0Ah
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x0008;             //mov word_31660, 8
    return;                                     //retn
loc_12D19:                                      //loc_12D19:
    _di = memory16(_ds, 0x914E);                //mov di, word_3167E
    _ax = memory16(_ds, _di + 36);              //mov ax, [di+24h]
    if ((short)_ax <= (short)memory16(_ds, _di + 52))//jle short locret_12D28
      goto locret_12D28;
    memory16(_ds, _di + 52) += 1;               //inc word ptr [di+34h]
locret_12D28:                                   //locret_12D28:
    return;
}

void loc_12D2A()
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x914C) == 0x0028)        //jz short loc_12D19
      _STOP_("goto loc_12D19");
    if (memory16(_ds, 0x914C) == 0x0000)        //jz short loc_12D41
      goto loc_12D41;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x914E);                //mov si, word_3167E
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12D41:                                      //loc_12D41:
    memory16(_ds, 0x914C) = 0x0028;             //mov word_3167C, 28h
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, 0x914E) = _si;                //mov word_3167E, si
    memory16(_ds, _si) = 0x009c;                //mov word ptr [si], 9Ch
    memory16(_ds, _si + 2) = 0x3872;            //mov word ptr [si+2], 3872h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x914c;            //mov word ptr [si+6], 914Ch
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0000;           //mov word ptr [si+24h], 0
    memory16(_ds, _si + 54) = 0x0015;           //mov word ptr [si+36h], 15h
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x000c;             //mov word_31660, 0Ch
    return;                                     //retn
loc_12D86:                                      //loc_12D86:
    if (memory16(_ds, 0x9148) != 0x0048)        //jnz short loc_12D90
      goto loc_12D90;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_12D90:                                      //loc_12D90:
    if (memory16(_ds, 0x914C) == 0x0048)        //jz short loc_12D19
      _STOP_("goto loc_12D19");
    _bx = 0x9148;                               //mov bx, 9148h
    if (memory16(_ds, _bx) == 0x0000)           //jz short loc_12DAF
      goto loc_12DAF;
    _bx = 0x914c;                               //mov bx, 914Ch
    if (memory16(_ds, _bx) == 0x0000)           //jz short loc_12DAF
      goto loc_12DAF;
    _push(_si);                                 //push si
    _si = memory16(_ds, _bx + 2);               //mov si, [bx+2]
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12DAF:                                      //loc_12DAF:
    memory16(_ds, _bx) = 0x0048;                //mov word ptr [bx], 48h
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _bx + 2) = _si;               //mov [bx+2], si
    memory16(_ds, _si) = 0x00a0;                //mov word ptr [si], 0A0h
    memory16(_ds, _si + 2) = 0x3900;            //mov word ptr [si+2], 3900h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = _bx;               //mov [si+6], bx
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0000;           //mov word ptr [si+24h], 0
    memory16(_ds, _si + 54) = 0x0017;           //mov word ptr [si+36h], 17h
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x001e;             //mov word_31660, 1Eh
    return;                                     //retn
loc_12DF0:                                      //loc_12DF0:
    if (memory16(_ds, 0x9134) != 0x00b0)        //jnz short loc_12DFB
      goto loc_12DFB;
{loc_12C21(); return; };                        //
loc_12DFB:                                      //loc_12DFB:
    if (memory16(_ds, 0x9134) == 0x0000)        //jz short loc_12E0B
      goto loc_12E0B;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x9136);                //mov si, word_31666
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_12E0B:                                      //loc_12E0B:
    memory16(_ds, 0x9134) = 0x00b0;             //mov word_31664, 0B0h
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    memory16(_ds, 0x9136) = _si;                //mov word_31666, si
    memory16(_ds, _si) = 0x00b0;                //mov word ptr [si], 0B0h
    memory16(_ds, _si + 2) = 0x213c;            //mov word ptr [si+2], 213Ch
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory16(_ds, _si + 6) = 0x9134;            //mov word ptr [si+6], 9134h
    _bp = 0x110c;                               //mov bp, 110Ch
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
    memory16(_ds, _si + 36) = 0x0002;           //mov word ptr [si+24h], 2
    memory16(_ds, _si + 54) = 0x0014;           //mov word ptr [si+36h], 14h
    memory16(_ds, _si + 72) = 0xffff;           //mov word ptr [si+48h], 0FFFFh
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9130) = 0x0008;             //mov word_31660, 8
}

void sub_12E73()
{
    if (memory16(_ds, 0x9148) == 0x0000)        //jz short locret_12E83
      goto locret_12E83;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x914A);                //mov si, word_3167A
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
locret_12E83:                                   //locret_12E83:
    return;
}

void sub_12E84()
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x9148) == 0x002c)        //jz short loc_12EF8
      goto loc_12EF8;
    sub_12E73();                                //call sub_12E73
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x002c;             //mov word_31678, 2Ch
    memory16(_ds, 0x914A) = _di;                //mov word_3167A, di
    memory16(_ds, _di) = 0x002c;                //mov word ptr [di], 2Ch
    memory16(_ds, _di + 2) = 0x221a;            //mov word ptr [di+2], 221Ah
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x9148;            //mov word ptr [di+6], 9148h
    _bp = 0x115a;                               //mov bp, 115Ah
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0002;           //mov word ptr [di+24h], 2
    memory16(_ds, _di + 54) = 0x0013;           //mov word ptr [di+36h], 13h
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
    return;                                     //retn
loc_12EF8:                                      //loc_12EF8:
    _di = memory16(_ds, 0x914A);                //mov di, word_3167A
    _ax = memory16(_ds, _di + 36);              //mov ax, [di+24h]
    if ((short)_ax <= (short)memory16(_ds, _di + 52))//jle short locret_12F07
      goto locret_12F07;
    memory16(_ds, _di + 52) += 1;               //inc word ptr [di+34h]
locret_12F07:                                   //locret_12F07:
    return;
}

void loc_12F08()
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x9148) == 0x004c)        //jz short loc_12EF8
      _STOP_("goto loc_12EF8");
    sub_12E73();                                //call sub_12E73
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x004c;             //mov word_31678, 4Ch
    memory16(_ds, 0x914A) = _di;                //mov word_3167A, di
    memory16(_ds, _di) = 0x004c;                //mov word ptr [di], 4Ch
    memory16(_ds, _di + 2) = 0x229b;            //mov word ptr [di+2], 229Bh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x9148;            //mov word ptr [di+6], 9148h
    _bp = 0x140c;                               //mov bp, 140Ch
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0000;           //mov word ptr [di+24h], 0
    memory16(_ds, _di + 54) = 0x000b;           //mov word ptr [di+36h], 0Bh
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
    return;                                     //retn
loc_12F7C:                                      //loc_12F7C:
    if (memory16(_ds, 0x9148) != 0x0038)        //jnz short loc_12F86
      goto loc_12F86;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_12F86:                                      //loc_12F86:
    if (memory16(_ds, 0x9148) != 0x003c)        //jnz short loc_12F90
      goto loc_12F90;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_12F90:                                      //loc_12F90:
    sub_12E73();                                //call sub_12E73
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x0038;             //mov word_31678, 38h
    memory16(_ds, 0x914A) = _di;                //mov word_3167A, di
    memory16(_ds, _di) = 0x0038;                //mov word ptr [di], 38h
    memory16(_ds, _di + 2) = 0x2697;            //mov word ptr [di+2], 2697h
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x9148;            //mov word ptr [di+6], 9148h
    _bp = 0x1342;                               //mov bp, 1342h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0001;           //mov word ptr [di+24h], 1
    memory16(_ds, _di + 54) = 0x0009;           //mov word ptr [di+36h], 9
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
    memory16(_ds, 0x8F38) = 0xff9c;             //mov word_31468, 0FF9Ch
    return;                                     //retn
loc_13004:                                      //loc_13004:
    if (memory16(_ds, 0x9148) != 0x0038)        //jnz short loc_1300E
      goto loc_1300E;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_1300E:                                      //loc_1300E:
    if (memory16(_ds, 0x9148) != 0x003c)        //jnz short loc_13018
      goto loc_13018;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_13018:                                      //loc_13018:
    sub_12E73();                                //call sub_12E73
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x003c;             //mov word_31678, 3Ch
    memory16(_ds, 0x914A) = _di;                //mov word_3167A, di
    memory16(_ds, _di) = 0x003c;                //mov word ptr [di], 3Ch
    memory16(_ds, _di + 2) = 0x2697;            //mov word ptr [di+2], 2697h
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x9148;            //mov word ptr [di+6], 9148h
    _bp = 0x1354;                               //mov bp, 1354h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax += 0x0019;                              //add ax, 19h
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0001;           //mov word ptr [di+34h], 1
    memory16(_ds, _di + 36) = 0x0001;           //mov word ptr [di+24h], 1
    memory16(_ds, _di + 54) = 0x000d;           //mov word ptr [di+36h], 0Dh
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
    memory16(_ds, 0x8F38) = 0xff9c;             //mov word_31468, 0FF9Ch
    return;                                     //retn
}

void loc_1308C() {
    WORD _cs = _seg000;

loc_1308C:                                      //loc_1308C:
    if (memory16(_ds, 0x9148) != 0x0044)        //jnz short loc_13096
      goto loc_13096;
    _STOP_("goto loc_12EF8");                   //jmp loc_12EF8
loc_13096:                                      //loc_13096:
    if (memory16(_ds, 0x914C) != 0x0098)        //jnz short loc_130AD
      goto loc_130AD;
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x914E);                //mov si, word_3167E
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
    memory16(_ds, 0x914C) = 0x0000;             //mov word_3167C, 0
loc_130AD:                                      //loc_130AD:
    sub_12E73();                                //call sub_12E73
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, 0x9148) = 0x0044;             //mov word_31678, 44h
    memory16(_ds, 0x914A) = _di;                //mov word_3167A, di
    memory16(_ds, _di) = 0x0044;                //mov word ptr [di], 44h
    memory16(_ds, _di + 2) = 0x3835;            //mov word ptr [di+2], 3835h
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x9148;            //mov word ptr [di+6], 9148h
    _bp = 0x12f8;                               //mov bp, 12F8h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0002;           //mov word ptr [di+24h], 2
    memory16(_ds, _di + 54) = 0x0008;           //mov word ptr [di+36h], 8
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
}

void sub_13117()
{
    sub_1100E();                                //call sub_1100E
    if (!_flags.zero)                                //jnz short loc_13122
      goto loc_13122;
    _ax = 0xffff;                               //mov ax, 0FFFFh
    return;                                     //retn
loc_13122:                                      //loc_13122:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
}

void loc_13126()
{
    WORD _cs = _seg000;

    _ax = 0x0090;                               //mov ax, 90h
    sub_13117();                                //call sub_13117
    if (_FIXME_)                                //jnz short loc_13131
      goto loc_13131;
    goto loc_131B3;                             //jmp loc_131B3
loc_13131:                                      //loc_13131:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, _bp + 0) = 0x0090;            //mov word ptr ds:[bp+0], 90h
    memory16(_ds, _bp + 2) = _di;               //mov ds:[bp+2], di
    memory16(_ds, _di) = 0x0090;                //mov word ptr [di], 90h
    memory16(_ds, _di + 2) = 0x250b;            //mov word ptr [di+2], 250Bh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = _bp;               //mov [di+6], bp
    _cx -= 1;                                   //dec cx
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _bp = 0x30a8;                               //mov bp, 30A8h
    _bp += _cx;                                 //add bp, cx
    _ax = memory16(_ds, _bp + 0);               //mov ax, ds:[bp+0]
    memory16(_ds, _di + 48) = _ax;              //mov [di+30h], ax
    _ax = memory16(_ds, _bp + 2);               //mov ax, ds:[bp+2]
    memory16(_ds, _di + 50) = _ax;              //mov [di+32h], ax
    _bp = 0x1566;                               //mov bp, 1566h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax + memory16(_ds, _di + 48);        //add ax, [di+30h]
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax = _ax + memory16(_ds, _di + 50);        //add ax, [di+32h]
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0000;           //mov word ptr [di+24h], 0
    memory16(_ds, _di + 54) = 0x0011;           //mov word ptr [di+36h], 11h
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
loc_131B3:                                      //loc_131B3:
{sub_13319(); return; };                        //
}

void sub_131B6()
{
    WORD _cs = _seg000;

    _ax = 0x0020;                               //mov ax, 20h
    sub_13117();                                //call sub_13117
    if (_FIXME_)                                //jnz short loc_131C1
      goto loc_131C1;
    goto loc_13243;                             //jmp loc_13243
loc_131C1:                                      //loc_131C1:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, _bp + 0) = 0x0020;            //mov word ptr ds:[bp+0], 20h
    memory16(_ds, _bp + 2) = _di;               //mov ds:[bp+2], di
    memory16(_ds, _di) = 0x0020;                //mov word ptr [di], 20h
    memory16(_ds, _di + 2) = 0x237e;            //mov word ptr [di+2], 237Eh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = _bp;               //mov [di+6], bp
    _cx -= 1;                                   //dec cx
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _bp = 0x30a8;                               //mov bp, 30A8h
    _bp += _cx;                                 //add bp, cx
    _ax = memory16(_ds, _bp + 0);               //mov ax, ds:[bp+0]
    memory16(_ds, _di + 48) = _ax;              //mov [di+30h], ax
    _ax = memory16(_ds, _bp + 2);               //mov ax, ds:[bp+2]
    memory16(_ds, _di + 50) = _ax;              //mov [di+32h], ax
    _bp = 0x118e;                               //mov bp, 118Eh
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax + memory16(_ds, _di + 48);        //add ax, [di+30h]
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax = _ax + memory16(_ds, _di + 50);        //add ax, [di+32h]
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0002;           //mov word ptr [di+24h], 2
    memory16(_ds, _di + 54) = 0x0012;           //mov word ptr [di+36h], 12h
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
loc_13243:                                      //loc_13243:
{sub_13319(); return; };                        //
}

void sub_13246()
{
    WORD _cs = _seg000;

    _ax = 0x0034;                               //mov ax, 34h
    sub_13117();                                //call sub_13117
    if (!_flags.zero)                                //jnz short loc_13251
      goto loc_13251;
{sub_13319(); return; };                        //
loc_13251:                                      //loc_13251:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x8ffe;                               //mov di, 8FFEh
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, _bp + 0) = 0x0034;            //mov word ptr ds:[bp+0], 34h
    memory16(_ds, _bp + 2) = _di;               //mov ds:[bp+2], di
    memory16(_ds, _di) = 0x0034;                //mov word ptr [di], 34h
    memory16(_ds, _di + 2) = 0x246d;            //mov word ptr [di+2], 246Dh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = _bp;               //mov [di+6], bp
    _cx -= 1;                                   //dec cx
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _bp = 0x30a8;                               //mov bp, 30A8h
    _bp += _cx;                                 //add bp, cx
    _ax = memory16(_ds, _bp + 0);               //mov ax, ds:[bp+0]
    memory16(_ds, _di + 48) = _ax;              //mov [di+30h], ax
    _ax = memory16(_ds, _bp + 2);               //mov ax, ds:[bp+2]
    memory16(_ds, _di + 50) = _ax;              //mov [di+32h], ax
    _bp = 0x12da;                               //mov bp, 12DAh
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax + memory16(_ds, _di + 48);        //add ax, [di+30h]
    memory16(_ds, _di + 18) = _ax;              //mov [di+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax = _ax + memory16(_ds, _di + 50);        //add ax, [di+32h]
    memory16(_ds, _di + 22) = _ax;              //mov [di+16h], ax
    memory16(_ds, _di + 52) = 0x0000;           //mov word ptr [di+34h], 0
    memory16(_ds, _di + 36) = 0x0000;           //mov word ptr [di+24h], 0
    memory16(_ds, _di + 54) = 0x000f;           //mov word ptr [di+36h], 0Fh
    memory16(_ds, _di + 72) = 0xffff;           //mov word ptr [di+48h], 0FFFFh
    if (memory16(_ds, _di + 48) == 0x0000)      //jz short sub_13319
      _STOP_("goto loc_13319");
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1078E();                                //call sub_1078E
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x0040;                //mov word ptr [si], 40h
    memory16(_ds, _si + 2) = 0x21e9;            //mov word ptr [si+2], 21E9h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    _bp = 0x1366;                               //mov bp, 1366h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    memory16(_ds, _si + 28) = _di;              //mov [si+1Ch], di
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _si = _pop();                               //pop si
    _STOP_("sp-trace-fail");                    //sub_13246 endp_failed
    _STOP_("continues");                        //sub_13319 proc near
}

void sub_13319()
{
    if (memory16(_ds, 0x9134) != 0x0000)        //jnz short locret_13325
      goto locret_13325;
    _push(_di);                                 //push di
    sub_12BCC();                                //call sub_12BCC
    _di = _pop();                               //pop di
locret_13325:                                   //locret_13325:
    return;
}

void sub_13326()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
    _push(_di);                                 //push di
    memory16(_ds, 0x8E8A) = 0x0006;             //mov word_313BA, 6
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _si) = 0x000c;                //mov word ptr [si], 0Ch
    memory16(_ds, _si + 2) = 0x3998;            //mov word ptr [si+2], 3998h
    memory16(_ds, _si + 4) = _dx;               //mov [si+4], dx
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    memory16(_ds, _si + 22) = _bx;              //mov [si+16h], bx
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void loc_13360()
{
    _bx = 0x3377;                               //mov bx, 3377h
    sub_13389();                                //call sub_13389
    _ax = memory16(_ds, _si + 66);              //mov ax, [si+42h]
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, _si + 66) = 0x0003;           //mov word ptr [si+42h], 3
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    return;                                     //retn
    _STOP_("db 64h, 3 dup(0), 0Bh, 48h, 53h, 8, 61h, 1...");
    _STOP_("db 6 dup(0)");                      //db 6 dup(0)
}

void sub_13389()
{
    WORD _cs = _seg000;

    _di = _si;                                  //mov di, si
    _cx = memory16(_ds, _di + 4);               //mov cx, [di+4]
    memory16(_ds, 0xFCFA) = 0x0000;             //mov word_3822A, 0
    if (_cx == 0)                               //jcxz short loc_13398
      goto loc_13398;
    goto loc_1339B;                             //jmp short loc_1339B
loc_13398:                                      //loc_13398:
    goto locret_13528;                          //jmp locret_13528
loc_1339B:                                      //loc_1339B:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _bp = _bx;                                  //mov bp, bx
    memory16(_ds, 0xFCDA) = _si;                //mov word_3820A, si
loc_133AC:                                      //loc_133AC:
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _ax = memory16(_cs, _bp + 4);               //mov ax, cs:[bp+4]
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    _ax = memory16(_cs, _bp + 6);               //mov ax, cs:[bp+6]
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _ax = memory16(_cs, _bp + 8);               //mov ax, cs:[bp+8]
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _push(_bx);                                 //push bx
    _bx = memory16(_cs, _bp + 10);              //mov bx, cs:[bp+0Ah]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0002;                              //add bx, 2
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    _bx = _pop();                               //pop bx
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    memory16(_ds, _si + 20) = 0x0000;           //mov word ptr [si+14h], 0
    memory16(_ds, _si + 22) = 0x0000;           //mov word ptr [si+16h], 0
    memory16(_ds, _si + 24) = 0x0000;           //mov word ptr [si+18h], 0
    memory16(_ds, _si + 28) = 0x0000;           //mov word ptr [si+1Ch], 0
    memory16(_ds, _si + 30) = 0x0000;           //mov word ptr [si+1Eh], 0
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 52) = _ax;              //mov [si+34h], ax
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    if ((short)memory16(_ds, _di + 8) >= (short)0x0064)
      goto loc_13426;
    memory16(_ds, 0xFCFA) = -memory16(_ds, 0xFCFA);//neg word_3822A
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    memory16(_ds, 0xFCFA) = -memory16(_ds, 0xFCFA);//neg word_3822A
    memory16(_ds, _si + 18) = 0x0000;           //mov word ptr [si+12h], 0
loc_13426:                                      //loc_13426:
    if (_si == memory16(_ds, 0xFCDA))           //jz short loc_13433
      goto loc_13433;
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 26) -= _ax;             //sub [si+1Ah], ax
loc_13433:                                      //loc_13433:
    _push(_bx);                                 //push bx
    _bx = memory16(_ds, _di + 6);               //mov bx, [di+6]
    _bx -= 1;                                   //dec bx
    _bx <<= 1;                                  //shl bx, 1
    _bx = memory16(_ds, _bx + -8656);           //mov bx, [bx-21D0h]
    memory16(_ds, _si + 56) = _bx;              //mov [si+38h], bx
    if (memory16(_ds, _bx) != 0x000a)           //jnz short loc_13461
      goto loc_13461;
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _bx + 4);               //mov ax, [bx+4]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    if ((short)memory16(_ds, _di + 8) < (short)0x0064)
      goto loc_1345E;
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 18) += _ax;             //add [si+12h], ax
loc_1345E:                                      //loc_1345E:
    _bx += 0x0006;                              //add bx, 6
loc_13461:                                      //loc_13461:
    memory16(_ds, _si + 58) = _bx;              //mov [si+3Ah], bx
    _bx = _pop();                               //pop bx
    _ax = memory16(_ds, _di + 12);              //mov ax, [di+0Ch]
    memory16(_ds, _si + 66) = _ax;              //mov [si+42h], ax
    _ax = memory16(_ds, _di + 10);              //mov ax, [di+0Ah]
    _xchg(_al, _ah);                            //xchg al, ah
    memory16(_ds, _si + 72) = _ax;              //mov [si+48h], ax
    sub_14191();                                //call sub_14191
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    _ax = memory16(_ds, 0x8E78);                //mov ax, word_313A8
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    _ax = memory16(_ds, 0x8EB2);                //mov ax, word_313E2
    memory16(_ds, _si + 54) = _ax;              //mov [si+36h], ax
    _al = memory(_cs, _bp + 14);                //mov al, cs:[bp+0Eh]
    memory(_ds, _si + 39) = _al;                //mov [si+27h], al
    if (memory(_ds, _si + 39) != 0x00)          //jnz short loc_1349E
      goto loc_1349E;
    _ax = memory16(_ds, 0x8E76);                //mov ax, word_313A6
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    _ax = memory16(_ds, 0x8EB0);                //mov ax, word_313E0
    memory16(_ds, _si + 54) = _ax;              //mov [si+36h], ax
loc_1349E:                                      //loc_1349E:
    _al = memory(_cs, _bp + 15);                //mov al, cs:[bp+0Fh]
    memory(_ds, _si + 38) = _al;                //mov [si+26h], al
    sub_13589();                                //call sub_13589
    _ax = memory16(_ds, 0xFCDA);                //mov ax, word_3820A
    memory16(_ds, _si + 68) = _ax;              //mov [si+44h], ax
    _bp += 0x0010;                              //add bp, 10h
    if (memory16(_cs, _bp + 0) == 0x0000)       //jz short loc_134C8
      goto loc_134C8;
    _push(_di);                                 //push di
    _di = _si;                                  //mov di, si
    sub_11022();                                //call sub_11022
    memory16(_ds, _di + 70) = _si;              //mov [di+46h], si
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    goto loc_133AC;                             //jmp loc_133AC
loc_134C8:                                      //loc_134C8:
    _ax = memory16(_ds, _di + 8);               //mov ax, [di+8]
loc_134CB:                                      //loc_134CB:
    if ((short)_ax < (short)0x0064)             //jl short loc_134D5
      goto loc_134D5;
    _ax -= 0x0064;                              //sub ax, 64h
    goto loc_134CB;                             //jmp short loc_134CB
loc_134D5:                                      //loc_134D5:
    memory16(_ds, 0xFCFA) += _ax;               //add word_3822A, ax
    memory16(_ds, _si + 70) = 0x0000;           //mov word ptr [si+46h], 0
    if (--_cx)                                  //loop loc_134E2
      goto loc_134E2;
    goto loc_134E5;                             //jmp short loc_134E5
loc_134E2:                                      //loc_134E2:
    goto loc_1339B;                             //jmp loc_1339B
loc_134E5:                                      //loc_134E5:
    _ax = memory16(_ds, 0x8EB2);                //mov ax, word_313E2
    if (memory(_ds, _si + 39) != 0x00)          //jnz short loc_134F1
      goto loc_134F1;
    _ax = memory16(_ds, 0x8EB0);                //mov ax, word_313E0
loc_134F1:                                      //loc_134F1:
    _bx = 0x8e8c;                               //mov bx, 8E8Ch
    _cx = 0x0008;                               //mov cx, 8
loc_134F7:                                      //loc_134F7:
    if (_ax == memory16(_ds, _bx))              //jz short loc_13502
      goto loc_13502;
    _bx += 0x0004;                              //add bx, 4
    if (--_cx)                                  //loop loc_134F7
      goto loc_134F7;
    goto loc_1350A;                             //jmp short loc_1350A
loc_13502:                                      //loc_13502:
    _ax = memory16(_ds, _di + 4);               //mov ax, [di+4]
    memory16(_ds, _bx + 2) += _ax;              //add [bx+2], ax
    goto locret_13528;                          //jmp short locret_13528
loc_1350A:                                      //loc_1350A:
    _bx = 0x8e8c;                               //mov bx, 8E8Ch
    _cx = 0x0008;                               //mov cx, 8
loc_13510:                                      //loc_13510:
    if (memory16(_ds, _bx) == 0x0000)           //jz short loc_1351C
      goto loc_1351C;
    _bx += 0x0004;                              //add bx, 4
    if (--_cx)                                  //loop loc_13510
      goto loc_13510;
    goto locret_13528;                          //jmp short locret_13528
loc_1351C:                                      //loc_1351C:
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _ax = memory16(_ds, _di + 4);               //mov ax, [di+4]
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    memory16(_ds, 0x91AC) += 1;                 //inc word_316DC
locret_13528:                                   //locret_13528:
    return;
}

void sub_13529()
{
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    goto loc_13541;                             //jmp short loc_13541
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x90e2;                               //mov di, 90E2h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
loc_13541:                                      //loc_13541:
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    memory16(_ds, _si + 2) = _bx;               //mov [si+2], bx
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    _bx = memory16(_ds, _di + 8);               //mov bx, [di+8]
    _bx -= 0x0008;                              //sub bx, 8
    memory16(_ds, _si + 18) = _bx;              //mov [si+12h], bx
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx &= 0x00fe;                              //and bx, 0FEh
    _ax = memory16(_ds, _di + 10);              //mov ax, [di+0Ah]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _dx = 0x0028;                               //mov dx, 28h
    _ax = _dx * _al;                            //mul dx
    _ax += _bx;                                 //add ax, bx
    memory16(_ds, _si + 56) = _ax;              //mov [si+38h], ax
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    memory16(_ds, _si + 34) = 0x0000;           //mov word ptr [si+22h], 0
}

void sub_13589()
{
    _push(_es);                                 //push es
    _push(_di);                                 //push di
    _di = memory16(_ds, _si + 12);              //mov di, [si+0Ch]
    _di -= 0x0008;                              //sub di, 8
    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_di & 0x0001))                        //jz short loc_1359E
      goto loc_1359E;
    _di -= 1;                                   //dec di
    _ax = _seg008;                              //mov ax, seg seg008
loc_1359E:                                      //loc_1359E:
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax = _ax + memory16(_es, _di);             //add ax, es:[di]
    _ax = _ax - memory16(_es, _di + 8);         //sub ax, es:[di+8]
    memory16(_ds, _si + 40) = _ax;              //mov [si+28h], ax
    _ax = _ax + memory16(_es, _di + 4);         //add ax, es:[di+4]
    _ax -= 1;                                   //dec ax
    memory16(_ds, _si + 44) = _ax;              //mov [si+2Ch], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax + memory16(_es, _di + 2);         //add ax, es:[di+2]
    _ax = _ax - memory16(_es, _di + 10);        //sub ax, es:[di+0Ah]
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax = _ax + memory16(_es, _di + 6);         //add ax, es:[di+6]
    _ax -= 1;                                   //dec ax
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
}

void loc_135CE()
{
    _ax = memory16(_ds, _si + 8);               //mov ax, [si+8]
    memory16(_ds, 0x91A2) = _ax;                //mov word_316D2, ax
    _ax = memory16(_ds, _si + 10);              //mov ax, [si+0Ah]
    memory16(_ds, 0x91A4) = _ax;                //mov word_316D4, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_ds, 0x91A6) = _ax;                //mov word_316D6, ax
    _ax = memory16(_ds, 0x915A);                //mov ax, word_3168A
    memory16(_ds, 0x9166) = _ax;                //mov word_31696, ax
    _ax = memory16(_ds, 0x915C);                //mov ax, word_3168C
    memory16(_ds, 0x9168) = _ax;                //mov word_31698, ax
}

void sub_135EB()
{
    if (memory16(_ds, 0x9162) != 0x0000)        //jnz short locret_13614
      _STOP_("goto locret_13614");
//    _STOP_("sp-trace-fail");                    //sub_135EB endp_failed
//    _STOP_("continues");                        //sub_135F2 proc near
    sub_135F2();
}

void sub_135F2()
{
    _di = 0x9134;                               //mov di, 9134h
    _si = 0x916a;                               //mov si, 916Ah
    _cx = 0x0007;                               //mov cx, 7
loc_135FB:                                      //loc_135FB:
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    if (!(_ax & _ax))                           //jz short loc_13609
      goto loc_13609;
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _ax = memory16(_ds, _bx + 52);              //mov ax, [bx+34h]
loc_13609:                                      //loc_13609:
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    _si += 0x0004;                              //add si, 4
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_135FB
      goto loc_135FB;
locret_13614:                                   //locret_13614:
    return;
}

void sub_13615()
{
    _si = 0xd274;                               //mov si, 0D274h
    _bx = memory16(_ds, 0x9192);                //mov bx, word_316C2
    _cx = memory16(_ds, 0x9190);                //mov cx, word_316C0
loc_13620:                                      //loc_13620:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    if ((short)_ax < 0)                         //js short loc_13643
      goto loc_13643;
    if ((short)_bx <= (short)_ax)               //jle short loc_1363E
      goto loc_1363E;
    if ((short)_cx > (short)_ax)                //jg short loc_1363E
      goto loc_1363E;
    _bx = memory16(_ds, _si + 2);               //mov bx, [si+2]
    _push(_si);                                 //push si
    sub_10FB4();                                //call sub_10FB4
    _si = _pop();                               //pop si
    _bx = memory16(_ds, 0x9192);                //mov bx, word_316C2
    _cx = memory16(_ds, 0x9190);                //mov cx, word_316C0
loc_1363E:                                      //loc_1363E:
    _si += 0x000e;                              //add si, 0Eh
    goto loc_13620;                             //jmp short loc_13620
loc_13643:                                      //loc_13643:
    if ((short)_cx >= (short)_bx)               //jge short locret_13681
      goto locret_13681;
    memory16(_ds, 0x9192) = _cx;                //mov word_316C2, cx
    _si = 0xda9e;                               //mov si, 0DA9Eh
    _bx = memory16(_ds, 0x9194);                //mov bx, word_316C4
    _cx = memory16(_ds, 0x9190);                //mov cx, word_316C0
loc_13656:                                      //loc_13656:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    if ((short)_ax < 0)                         //js short loc_13679
      goto loc_13679;
    if ((short)_bx <= (short)_ax)               //jle short loc_13674
      goto loc_13674;
    if ((short)_cx > (short)_ax)                //jg short loc_13674
      goto loc_13674;
    _bx = memory16(_ds, _si + 2);               //mov bx, [si+2]
    _push(_si);                                 //push si
    sub_10FD2();                                //call sub_10FD2
    _si = _pop();                               //pop si
    _bx = memory16(_ds, 0x9194);                //mov bx, word_316C4
    _cx = memory16(_ds, 0x9190);                //mov cx, word_316C0
loc_13674:                                      //loc_13674:
    _si += 0x000e;                              //add si, 0Eh
    goto loc_13656;                             //jmp short loc_13656
loc_13679:                                      //loc_13679:
    if ((short)_cx >= (short)_bx)               //jge short locret_13681
      goto locret_13681;
    memory16(_ds, 0x9194) = _cx;                //mov word_316C4, cx
locret_13681:                                   //locret_13681:
    return;
}

void sub_13682()
{
    _si = memory16(_ds, 0x8FBC);                //mov si, word_314EC
    sub_136FC();                                //call sub_136FC
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_136FC();                                //call sub_136FC
    _si = memory16(_ds, 0x9008);                //mov si, word_31538
    _al = memory(_ds, 0x8F5B);                  //mov al, byte_3148B
    memory(_ds, 0x8FAE) = _al;                  //mov byte_314DE, al
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    sub_136FC();                                //call sub_136FC
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    sub_136FC();                                //call sub_136FC
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    sub_136FC();                                //call sub_136FC
    _si = memory16(_ds, 0x8FBC);                //mov si, word_314EC
    sub_1370B();                                //call sub_1370B
    _si = memory16(_ds, 0x9008);                //mov si, word_31538
    sub_1370B();                                //call sub_1370B
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_1370B();                                //call sub_1370B
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    sub_1370B();                                //call sub_1370B
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    sub_1370B();                                //call sub_1370B
    _si = 0x8e8c;                               //mov si, 8E8Ch
    _cx = 0x0008;                               //mov cx, 8
loc_136D9:                                      //loc_136D9:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    if (!(_ax & _ax))                           //jz short loc_136F6
      goto loc_136F6;
    _di = memory16(_ds, 0x9054);                //mov di, word_31584
loc_136E3:                                      //loc_136E3:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_136F2
      goto loc_136F2;
    if (_ax == memory16(_ds, _di + 54))         //jz short loc_136F6
      goto loc_136F6;
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_136E3;                             //jmp short loc_136E3
loc_136F2:                                      //loc_136F2:
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
loc_136F6:                                      //loc_136F6:
    _si += 0x0004;                              //add si, 4
    if (--_cx)                                  //loop loc_136D9
      goto loc_136D9;
}

void sub_136FC()
{
loc_136FC:
    if (memory16(_ds, _si) == 0x0000)           //jz short locret_1370A
      goto locret_1370A;
    _push(memory16(_ds, _si + 10));             //push word ptr [si+0Ah]
    _indirectCall(_ds, memory16(_ds, _si + 2));                //call word ptr [si+2]
    _si = _pop();                               //pop si
    goto loc_136FC;                             //jmp short sub_136FC
locret_1370A:                                   //locret_1370A:
    return;
}

void sub_1370B()
{
loc_1370B:
    if (memory16(_ds, _si) == 0x0000)           //jz short locret_13719
      goto locret_13719;
    _push(memory16(_ds, _si + 10));             //push word ptr [si+0Ah]
    _indirectCall(_ds, memory16(_ds, _si + 4));                //call word ptr [si+4]
    _si = _pop();                               //pop si
    goto loc_1370B;                             //jmp short sub_1370B
locret_13719:                                   //locret_13719:
    return;
}

void sub_1371A()
{
loc_1371A:
    if (memory16(_ds, _si) == 0x0000)           //jz short locret_1373C
      goto locret_1373C;
    _push(memory16(_ds, _si + 10));             //push word ptr [si+0Ah]
    if (memory(_ds, _si + 74) != 0x00)          //jnz short loc_1372D
      goto loc_1372D;
    sub_107A0();                                //call sub_107A0
    goto loc_13739;                             //jmp short loc_13739
loc_1372D:                                      //loc_1372D:
    if (memory(_ds, _si + 75) != 0x00)          //jnz short loc_13739
      goto loc_13739;
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, _si + 22) -= _ax;             //sub [si+16h], ax
loc_13739:                                      //loc_13739:
    _si = _pop();                               //pop si
    goto loc_1371A;                             //jmp short sub_1371A
locret_1373C:                                   //locret_1373C:
    return;
}

void sub_1373D()
{
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_13743:                                      //loc_13743:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    if (!(_ax & _ax))                           //jz short loc_1375B
      goto loc_1375B;
    if (_ax == 0x0050)                          //jz short loc_13754
      goto loc_13754;
    if (_ax == 0x0054)                          //jz short loc_13754
      goto loc_13754;
    _cx += 1;                                   //inc cx
loc_13754:                                      //loc_13754:
    sub_11689();                                //call sub_11689
    _si = _di;                                  //mov si, di
    goto loc_13743;                             //jmp short loc_13743
loc_1375B:                                      //loc_1375B:
    memory16(_ds, 0x8F32) = _cx;                //mov word_31462, cx
}

void sub_13760()
{
loc_13760:
    if (memory16(_ds, _si) == 0x0000)           //jz short locret_1376E
      goto locret_1376E;
    _push(memory16(_ds, _si + 10));             //push word ptr [si+0Ah]
    sub_107A0();                                //call sub_107A0
    _si = _pop();                               //pop si
    goto loc_13760;                             //jmp short sub_13760
locret_1376E:                                   //locret_1376E:
    return;
}

void sub_1376F()
{
    _di = memory16(_ds, 0x90A0);                //mov di, word_315D0
loc_13773:                                      //loc_13773:
    if (memory16(_ds, _di) == 0x0000)           //jz short locret_13787
      goto locret_13787;
    if (memory16(_ds, _di) != 0x0040)           //jnz short loc_13782
      goto loc_13782;
    if (_si == memory16(_ds, _di + 28))         //jz short locret_13787
      goto locret_13787;
loc_13782:                                      //loc_13782:
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_13773;                             //jmp short loc_13773
locret_13787:                                   //locret_13787:
    return;
}

void sub_13788()
{
    _push(_di);                                 //push di
    if (memory16(_ds, _si) != 0x0034)           //jnz short loc_1379D
      goto loc_1379D;
    sub_1376F();                                //call sub_1376F
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_1379D
      goto loc_1379D;
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
loc_1379D:                                      //loc_1379D:
    _di = memory16(_ds, _si + 6);               //mov di, [si+6]
    memory16(_ds, _di) = 0x0000;                //mov word ptr [di], 0
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_137A9()
{
    _push(_di);                                 //push di
    if (memory16(_ds, _si) != 0x0034)           //jnz short loc_137BE
      goto loc_137BE;
    sub_1376F();                                //call sub_1376F
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_137BE
      goto loc_137BE;
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107A0();                                //call sub_107A0
    _si = _pop();                               //pop si
loc_137BE:                                      //loc_137BE:
    _di = memory16(_ds, _si + 6);               //mov di, [si+6]
    memory16(_ds, _di) = 0x0000;                //mov word ptr [di], 0
    sub_107A0();                                //call sub_107A0
    _di = _pop();                               //pop di
}

void sub_137CA()
{
    sub_141B1();                                //call sub_141B1
    _di = memory16(_ds, _si + 68);              //mov di, [si+44h]
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
{sub_13589(); return; };                        //
}

void sub_137DF() // fire
{
    if (memory16(_ds, 0x8E80) == 0x0000)        //jz short loc_137E7
      goto loc_137E7;
    return;                                     //retn
loc_137E7:                                      //loc_137E7:
    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_13800
      goto locret_13800;
    _ax = 0x0000;                               //mov ax, 0
    _bx = 0xfff7;                               //mov bx, 0FFF7h
    _cx = 0x0000;                               //mov cx, 0
    _dx = 0xfffa;                               //mov dx, 0FFFAh
    _bp = 0x12b8;                               //mov bp, 12B8h
    sub_145F4();                                //call sub_145F4
locret_13800:                                   //locret_13800:
    return;
}

void loc_13809()
{
    WORD _cs = _seg000;

    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_13834
      goto locret_13834;
    _ax = 0xfff7;                               //mov ax, 0FFF7h
    _bx = 0x0000;                               //mov bx, 0
    _cx = 0xfffe;                               //mov cx, 0FFFEh
    _dx = 0xfffd;                               //mov dx, 0FFFDh
    _bp = 0x12b2;                               //mov bp, 12B2h
    sub_145F4();                                //call sub_145F4
    _ax = 0x0009;                               //mov ax, 9
    _bx = 0x0000;                               //mov bx, 0
    _cx = 0x0002;                               //mov cx, 2
    _dx = 0xfffd;                               //mov dx, 0FFFDh
    _bp = 0x12be;                               //mov bp, 12BEh
    sub_145F4();                                //call sub_145F4
locret_13834:                                   //locret_13834:
    return;                                     //retn
    sub_141B1();                                //call sub_141B1
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    if (memory16(_ds, 0x991E) == 0x0000)        //jz short loc_1384E
      goto loc_1384E;
{loc_147A9(); return; };                        //
loc_1384E:                                      //loc_1384E:
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_13871
      goto locret_13871;
    memory16(_ds, _si + 14) = 0x0001;           //mov word ptr [si+0Eh], 1
    _ax = 0x0000;                               //mov ax, 0
    _bx = 0x0009;                               //mov bx, 9
    _cx = 0x0000;                               //mov cx, 0
    _dx = 0x0012;                               //mov dx, 12h
    _bp = 0x12c4;                               //mov bp, 12C4h
    sub_145F4();                                //call sub_145F4
locret_13871:                                   //locret_13871:
    return;                                     //retn
    if (memory16(_ds, 0x8E80) == 0x0000)        //jz short loc_1387A
      goto loc_1387A;
    return;                                     //retn
loc_1387A:                                      //loc_1387A:
    if ((short)memory16(_ds, _si + 72) < 0 /*CHECK*/)//js short loc_13883
      goto loc_13883;
    memory16(_ds, _si + 72) -= 1;               //dec word ptr [si+48h]
loc_13883:                                      //loc_13883:
    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_138FF
      goto locret_138FF;
    if ((short)memory16(_ds, _si + 72) >= 0 /*CHECK*/)
      goto locret_138FF;
    _di = memory16(_ds, 0x90A0);                //mov di, word_315D0
loc_13894:                                      //loc_13894:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_138A3
      goto loc_138A3;
    if (memory16(_ds, _di) == 0x0028)           //jz short locret_138FF
      goto locret_138FF;
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_13894;                             //jmp short loc_13894
loc_138A3:                                      //loc_138A3:
    memory16(_ds, _si + 72) = 0x000f;           //mov word ptr [si+48h], 0Fh
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = 0x1170;                               //mov di, 1170h
    memory16(_ds, _si) = 0x0028;                //mov word ptr [si], 28h
    memory16(_ds, _si + 2) = 0x262d;            //mov word ptr [si+2], 262Dh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0004;                              //add di, 4
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    _ax -= 0x000c;                              //sub ax, 0Ch
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax += 0x0004;                              //add ax, 4
    _ax = -_ax;                                 //neg ax
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    memory16(_ds, _si + 72) = 0x0006;           //mov word ptr [si+48h], 6
    _si = _pop();                               //pop si
locret_138FF:                                   //locret_138FF:
    return;                                     //retn
    if (memory16(_ds, 0x8E80) == 0x0000)        //jz short loc_13908
      goto loc_13908;
    return;                                     //retn
loc_13908:                                      //loc_13908:
    if ((short)memory16(_ds, _si + 72) < 0 /*CHECK*/)//js short loc_13911
      goto loc_13911;
    memory16(_ds, _si + 72) -= 1;               //dec word ptr [si+48h]
loc_13911:                                      //loc_13911:
    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_13997
      goto locret_13997;
    if ((short)memory16(_ds, _si + 72) >= 0 /*CHECK*/)
      goto locret_13997;
    _di = memory16(_ds, 0x90A0);                //mov di, word_315D0
loc_13922:                                      //loc_13922:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_13931
      goto loc_13931;
    if (memory16(_ds, _di) == 0x0048)           //jz short locret_13997
      goto locret_13997;
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_13922;                             //jmp short loc_13922
loc_13931:                                      //loc_13931:
    memory16(_ds, _si + 72) = 0x0012;           //mov word ptr [si+48h], 12h
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    _push(_si);                                 //push si
    _ax = 0x0007;                               //mov ax, 7
loc_13940:                                      //loc_13940:
    _push(_ax);                                 //push ax
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _bx = _pop();                               //pop bx
    _push(_bx);                                 //push bx
    _bx <<= 1;                                  //shl bx, 1
    _di = memory16(_ds, _bx + 12874);           //mov di, [bx+324Ah]
    memory16(_ds, _si) = 0x0048;                //mov word ptr [si], 48h
    memory16(_ds, _si + 2) = 0x1ff3;            //mov word ptr [si+2], 1FF3h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0004;                              //add di, 4
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 34) = 0x0000;           //mov word ptr [si+22h], 0
    memory16(_ds, _si + 26) = 0x000d;           //mov word ptr [si+1Ah], 0Dh
    _ax = _pop();                               //pop ax
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax -= 0x0002;                              //sub ax, 2
    if ((short)_ax >= 0)                        //jns short loc_13940
      goto loc_13940;
    _si = _pop();                               //pop si
locret_13997:                                   //locret_13997:
    return;
}

void sub_13998()
{
    sub_141B1();                                //call sub_141B1
}

void sub_1399C()
{
    if (memory(_ds, 0x9224) == 0x00)            //jz short loc_139A6
      goto loc_139A6;
    _STOP_("goto loc_13A2F");                   //jmp loc_13A2F
loc_139A6:                                      //loc_139A6:
    sub_141B1();                                //call sub_141B1
    if (memory16(_ds, _si) == 0x0004)           //jz short nullsub_5
      _STOP_("goto nullsub_5");
    _dx = memory16(_ds, _si + 28);              //mov dx, [si+1Ch]
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x0006;                               //mov cx, 6
loc_139B6:                                      //loc_139B6:
    _sar(_dx, 1);                               //sar dx, 1
    _rcr(_ax, 1);                               //rcr ax, 1
    if (--_cx)                                  //loop loc_139B6
      goto loc_139B6;
    _flags.carry = (memory16(_ds, _si + 20) + _ax) >= 0x10000;
    memory16(_ds, _si + 20) += _ax;
    memory16(_ds, _si + 18) = memory16(_ds, _si + 18) + _dx + _flags.carry;
    if (memory16(_ds, _si + 18) >= 0x0140)      //jnb short loc_139CF
      goto loc_139CF;
    memory16(_ds, _si + 22) -= 0x000c;          //sub word ptr [si+16h], 0Ch
    if ((short)memory16(_ds, _si + 22) >= 0)    //jns short sub_139D3
      _STOP_("goto loc_139D3");
loc_139CF:                                      //loc_139CF:
    sub_107C0();                                //call sub_107C0
}

void sub_139D3()
{
    WORD _cs = _seg000;

    if (memory16(_ds, _si + 34) == 0x0000)      //jz short nullsub_5
      _STOP_("goto nullsub_5");
    sub_13589();                                //call sub_13589
    sub_11BEA();                                //call sub_11BEA
    if (_FIXME_)                                //jz short nullsub_5
      _STOP_("goto nullsub_5");
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    _ax = _ax + memory16(_cs, 0x3DAC);          //add ax, cs:word_13DAC
    sub_107C0();                                //call sub_107C0
{sub_13A36(); return; };                        //
}

void sub_139EE() // collision
{
    WORD _cs = _seg000;

    if (memory(_ds, 0x9224) != 0x00)            //jnz short loc_13A2F
      goto loc_13A2F;
    sub_141B1();                                //call sub_141B1
    _ax = memory16(_ds, _si + 28);              //mov ax, [si+1Ch]
    memory16(_ds, _si + 18) += _ax;             //add [si+12h], ax
    if (memory16(_ds, _si + 18) >= 0x0138)      //jnb short loc_13A12
      goto loc_13A12;
    _ax = memory16(_ds, _si + 32);              //mov ax, [si+20h]
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    if (memory16(_ds, _si + 22) < 0x00c0)       //jb short loc_13A16
      goto loc_13A16;
loc_13A12:                                      //loc_13A12:
    sub_107C0();                                //call sub_107C0
    return;                                     //retn
loc_13A16:                                      //loc_13A16:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    sub_11CCC();                                //call sub_11CCC
    if (_flags.zero)                                //jz short locret_13A2E
      goto locret_13A2E; // hit test
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    _ax = _ax + memory16(_cs, 0x3DAA);          //add ax, cs:word_13DAA
    sub_107C0();                                //call sub_107C0
{sub_13A36(); return; };                        //
locret_13A2E:                                   //locret_13A2E:
    return;                                     //retn
loc_13A2F:                                      //loc_13A2F:
    sub_107C0();                                //call sub_107C0
}

void sub_13A33()
{
    _ax = 0x007f;                               //mov ax, 7Fh
//    _STOP_("sp-trace-fail");                    //sub_13A33 endp_failed
//    _STOP_("continues");                        //sub_13A36 proc near
    sub_13A36();
}

void sub_13A36()
{
    _indirectCall(_seg000, memory16(_ds, _di+6));
//    _STOP_("goto word ptr [di+6]");             //jmp word ptr [di+6]
}

void sub_13A39()
{
    _push(_di);                                 //push di
    _di = memory16(_ds, _di + 68);              //mov di, [di+44h]
    _bx = _di;                                  //mov bx, di
loc_13A3F:                                      //loc_13A3F:
    memory16(_ds, _bx + 4) = 0x08b9;            //mov word ptr [bx+4], 8B9h
    if (memory16(_ds, _bx + 70) == 0x0000)      //jz short loc_13A4F
      goto loc_13A4F;
    _bx = memory16(_ds, _bx + 70);              //mov bx, [bx+46h]
    goto loc_13A3F;                             //jmp short loc_13A3F
loc_13A4F:                                      //loc_13A4F:
    _flags.carry2 = memory16(_ds, _di + 36) > _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //ja short loc_13A8C
      goto loc_13A8C;
    _push(memory16(_ds, _di + 70));             //push word ptr [di+46h]
loc_13A57:                                      //loc_13A57:
    _bx = _pop();                               //pop bx
    if (!(_bx & _bx))                           //jz short loc_13A89
      goto loc_13A89;
    if ((char)memory(_ds, _bx + 38) < 0 /*CHECK*/)//js short loc_13A7D
      goto loc_13A7D;
    _push(_bx);                                 //push bx
    _push(_si);                                 //push si
    _si = _bx;                                  //mov si, bx
    sub_10EF5();                                //call sub_10EF5
    _si = _pop();                               //pop si
    _bp = 0x1230;                               //mov bp, 1230h
    if (memory(_ds, _di + 39) == 0x00)          //jz short loc_13A76
      goto loc_13A76;
    _bp = 0x124c;                               //mov bp, 124Ch
loc_13A76:                                      //loc_13A76:
    _dx = 0x0853;                               //mov dx, 853h
    sub_13326();                                //call sub_13326
    _bx = _pop();                               //pop bx
loc_13A7D:                                      //loc_13A7D:
    _push(memory16(_ds, _bx + 70));             //push word ptr [bx+46h]
    _push(_si);                                 //push si
    _si = _bx;                                  //mov si, bx
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
    goto loc_13A57;                             //jmp short loc_13A57
loc_13A89:                                      //loc_13A89:
    sub_13AB2();                                //call sub_13AB2
loc_13A8C:                                      //loc_13A8C:
    _di = _pop();                               //pop di
}

void locret_13AA6()
{
}

void sub_13AA7()
{
    memory16(_ds, _di + 4) = 0x08b9;            //mov word ptr [di+4], 8B9h
    _flags.carry2 = memory16(_ds, _di + 36) <= _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //jbe short sub_13AB2
    {
//      _STOP_("goto loc_13AB2");
        sub_13AB2();
    }
}

void sub_13AB2()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_10EF5();                                //call sub_10EF5
    _si = _pop();                               //pop si
    _bp = 0x1230;                               //mov bp, 1230h
    if (memory(_ds, _di + 39) == 0x00)          //jz short loc_13AC5
      goto loc_13AC5;
    _bp = 0x124c;                               //mov bp, 124Ch
loc_13AC5:                                      //loc_13AC5:
    _dx = 0x0853;                               //mov dx, 853h
    sub_13326();                                //call sub_13326
    _ax = memory16(_ds, _di + 54);              //mov ax, [di+36h]
    if (!(_ax & _ax))                           //jz short loc_13B41
      goto loc_13B41;
    _bx = 0x8e8c;                               //mov bx, 8E8Ch
    _cx = 0x0008;                               //mov cx, 8
loc_13AD8:                                      //loc_13AD8:
    if (_ax == memory16(_ds, _bx))              //jz short loc_13AE3
      goto loc_13AE3;
    _bx += 0x0004;                              //add bx, 4
    if (--_cx)                                  //loop loc_13AD8
      goto loc_13AD8;
    goto loc_13B41;                             //jmp short loc_13B41
loc_13AE3:                                      //loc_13AE3:
    memory16(_ds, _bx + 2) -= 1;                //dec word ptr [bx+2]
    if (memory16(_ds, _bx + 2) != 0)            //jnz short loc_13B41
      goto loc_13B41;
    memory16(_ds, _bx) = 0x0000;                //mov word ptr [bx], 0
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _bx = 0x11f2;                               //mov bx, 11F2h
    memory16(_ds, _si) = 0x0060;                //mov word ptr [si], 60h
    if (memory(_ds, _di + 39) == 0x00)          //jz short loc_13B0C
      goto loc_13B0C;
    _bx = 0x11b4;                               //mov bx, 11B4h
    memory16(_ds, _si) = 0x0018;                //mov word ptr [si], 18h
loc_13B0C:                                      //loc_13B0C:
    memory16(_ds, _si + 26) = 0x0007;           //mov word ptr [si+1Ah], 7
    memory16(_ds, _si + 2) = 0x28df;            //mov word ptr [si+2], 28DFh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    sub_14191();                                //call sub_14191
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _si = _pop();                               //pop si
loc_13B41:                                      //loc_13B41:
    _ax = memory16(_ds, _di + 52);              //mov ax, [di+34h]
    _flags.carry = (memory16(_ds, 0x9152) + _ax) >= 0x10000;
    memory16(_ds, 0x9152) += _ax;
    memory16(_ds, 0x9154) = memory16(_ds, 0x9154) + 0x0000 + _flags.carry;
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_13B55()
{
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_10EF5();                                //call sub_10EF5
    _si = _pop();                               //pop si
    _dx = 0x0853;                               //mov dx, 853h
    _bp = 0x1230;                               //mov bp, 1230h
    if (memory(_ds, _di + 39) == 0x00)          //jz short loc_13B6B
      goto loc_13B6B;
    _bp = 0x124c;                               //mov bp, 124Ch
loc_13B6B:                                      //loc_13B6B:
    sub_13326();                                //call sub_13326
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_13B76()
{
    WORD _cs = _seg000;

    memory16(_ds, _di + 4) = 0x3bdf;            //mov word ptr [di+4], 3BDFh
    _flags.carry2 = memory16(_ds, _di + 36) <= _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //jbe short loc_13B81
      goto loc_13B81;
    return;                                     //retn
loc_13B81:                                      //loc_13B81:
    _ax = memory16(_ds, _di + 52);              //mov ax, [di+34h]
    _flags.carry = (memory16(_ds, 0x9152) + _ax) >= 0x10000;
    memory16(_ds, 0x9152) += _ax;
    memory16(_ds, 0x9154) = memory16(_ds, 0x9154) + 0x0000 + _flags.carry;
    _ax = memory16(_ds, _di + 48);              //mov ax, [di+30h]
    _ax += 1;                                   //inc ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax = _ax + memory16(_ds, _di + 18);        //add ax, [di+12h]
    _bx = memory16(_ds, _di + 50);              //mov bx, [di+32h]
    _bx += 1;                                   //inc bx
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx = _bx + memory16(_ds, _di + 22);        //add bx, [di+16h]
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    _bp = 0x124c;                               //mov bp, 124Ch
    _dx = 0x0853;                               //mov dx, 853h
    sub_13326();                                //call sub_13326
    _push(_si);                                 //push si
    _bx = memory16(_ds, _di + 56);              //mov bx, [di+38h]
    _bp = memory16(_ds, _di + 16);              //mov bp, [di+10h]
    _si = memory16(_ds, _di + 50);              //mov si, [di+32h]
loc_13BBE:                                      //loc_13BBE:
    _cx = memory16(_ds, _di + 48);              //mov cx, [di+30h]
    _cx += 1;                                   //inc cx
    _lea(_dx, _ds, _bx + 40);                   //lea dx, [bx+28h]
loc_13BC5:                                      //loc_13BC5:
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _bx += 0x0002;                              //add bx, 2
    _bp += 0x0002;                              //add bp, 2
    if (--_cx)                                  //loop loc_13BC5
      goto loc_13BC5;
    _bx = _dx;                                  //mov bx, dx
    _si -= 1;                                   //dec si
    if ((short)_si >= 0)                        //jns short loc_13BBE
      goto loc_13BBE;
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_13BDF()
{
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    _ax = memory16(_ds, _si + 48);              //mov ax, [si+30h]
    _ax += 1;                                   //inc ax
    _bx = memory16(_ds, _si + 50);              //mov bx, [si+32h]
    _bx += 1;                                   //inc bx
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _cx >>= 1;                                  //shr cx, 1
    _push(_si);                                 //push si
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    sub_10963();                                //call sub_10963
    _si = _pop();                               //pop si
}

void sub_13C01()
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x9164) != 0x0000)        //jnz short locret_13C4E
      goto locret_13C4E;
    memory(_ds, 0x9224) = 0xff;                 //mov byte_31754, 0FFh
    memory16(_ds, 0x9186) = 0x0000;             //mov word_316B6, 0
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    memory16(_ds, 0x8E88) = 0x0006;             //mov word_313B8, 6
    memory16(_ds, 0x8E8A) = 0x0006;             //mov word_313BA, 6
    memory16(_ds, 0x8E80) = 0x0001;             //mov word_313B0, 1
    memory16(_ds, 0x8E84) = 0x0000;             //mov word_313B4, 0
    _bp = 0x1264;                               //mov bp, 1264h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, 0x9F0C) = _ax;                //mov word_3243C, ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, 0x9F0E) = _ax;                //mov word_3243E, ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, 0x9F10) = _bp;                //mov word_32440, bp
    memory16(_ds, 0x9F04) = 0x0853;             //mov word_32434, 853h
locret_13C4E:                                   //locret_13C4E:
    return;
}

void sub_13C4F()
{
    if (memory(_ds, 0x8F56) != 0x00)            //jnz short locret_13C74
      goto locret_13C74;
    if (memory16(_ds, 0x9164) != 0x0000)        //jnz short locret_13C74
      goto locret_13C74;
    if (memory(_ds, 0x9223) == 0x00)            //jz short loc_13C66
      goto loc_13C66;
    _ax >>= 1;                                  //shr ax, 1
loc_13C66:                                      //loc_13C66:
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    memory16(_ds, 0x9186) -= _ax;               //sub word_316B6, ax
    if (memory16(_ds, 0x9186) > 0)                                //ja short locret_13C74
      goto locret_13C74;
    sub_13C01();                                //call sub_13C01
locret_13C74:                                   //locret_13C74:
    return;
}

void sub_13C75()
{
    WORD _cs = _seg000;

    sub_16058();                                //call sub_16058
    memory(_ds, 0x8F54) = 0x00;                 //mov byte_31484, 0
    memory16(_ds, 0x8E6E) = 0x0001;             //mov word_3139E, 1
    memory(_ds, 0x8F55) = 0x00;                 //mov byte_31485, 0
    memory(_ds, 0x8F56) = 0x00;                 //mov byte_31486, 0
    memory16(_ss, 16) = 0x00bf;                 //mov word ptr ss:byte_447B0+10h, 0BFh
    sub_1426A();                                //call sub_1426A
    memory16(_ds, 0x8E70) = 0x0001;             //mov word_313A0, 1
loc_13C9D:                                      //loc_13C9D:
    _sp = memory16(_ds, 0x8E6A);                //mov sp, word_3139A
    sub_10D5F();                                //call sub_10D5F
    memory(_ds, 0x8F58) = 0x00;                 //mov byte_31488, 0
    memory(_ds, 0x8F59) = 0x00;                 //mov byte_31489, 0
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    memory16(_ds, 0x8E8A) = 0x0000;             //mov word_313BA, 0
    sub_15863();                                //call sub_15863
    sub_15B21();                                //call sub_15B21
    sub_10D5F();                                //call sub_10D5F
    memory16(_ds, 0x991C) = 0x0001;             //mov word_31E4C, 1
    memory(_ds, 0x3550) = 0x31;                 //mov byte_2BA80, 31h
    sub_15CC5();                                //call sub_15CC5
    sub_11827();                                //call sub_11827
    sub_11B43();                                //call sub_11B43
    memory(_ds, 0x3727) = 0x31;                 //mov byte_2BC57, 31h
    if (memory(_ds, 0x8F5D) != 0x00)            //jnz short loc_13CED
      goto loc_13CED;
    memory(_ds, 0x3727) = 0x32;                 //mov byte_2BC57, 32h
loc_13CED:                                      //loc_13CED:
    _si = 0x3715;                               //mov si, 3715h
    memory(_ds, 0x374E) = 0xff;                 //mov byte_2BC7E, 0FFh
    sub_15926();                                //call sub_15926
    memory(_ds, 0x374E) = 0x00;                 //mov byte_2BC7E, 0
    sub_10D5F();                                //call sub_10D5F
    if (memory(_ds, 0x8F54) == 0x00)            //jz short loc_13D0D
      goto loc_13D0D;
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
loc_13D0D:                                      //loc_13D0D:
    sub_10985();                                //call sub_10985
    sub_1080F();                                //call sub_1080F
    sub_10A2F();                                //call sub_10A2F
    sub_10E2B();                                //call sub_10E2B
    sub_10D81();                                //call sub_10D81
    memory(_ds, 0x8F59) = 0x00;                 //mov byte_31489, 0
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
loc_13D26:                                      //loc_13D26:
    memory16(_ds, 0x919C) += 1;                 //inc word_316CC
    _ax = memory16(_ds, 0x919C);                //mov ax, word_316CC
    _ax &= 0x0003;                              //and ax, 3
    if (_ax != 0)                               //jnz short loc_13D47
      goto loc_13D47;
    _ax = memory16(_ds, 0x91AC);                //mov ax, word_316DC
    memory16(_ds, 0x8EB0) = _ax;                //mov word_313E0, ax
    _ax = memory16(_ds, 0x91AC);                //mov ax, word_316DC
    memory16(_ds, 0x8EB2) = _ax;                //mov word_313E2, ax
    memory16(_ds, 0x8EB2) += 1;                 //inc word_313E2
    memory16(_ds, 0x91AC) += 0x0002;            //add word_316DC, 2
loc_13D47:                                      //loc_13D47:
    sub_10985();                                //call sub_10985
    memory16(_ds, 0x919A) = 0x0001;             //mov word_316CA, 1
    sub_10E4D();                                //call sub_10E4D
    sub_10BA5();                                //call sub_10BA5
    sub_1373D();                                //call sub_1373D
    sub_10FF0();                                //call sub_10FF0
    sub_13682();                                //call sub_13682
    sub_1080F();                                //call sub_1080F
    sub_14675();                                //call sub_14675
    sub_10A95();                                //call sub_10A95
    sub_13615();                                //call sub_13615
    _al = memory(_ds, 0x8F58);                  //mov al, byte_31488
    if (_al & _al)                              //jnz short loc_13D75
      goto loc_13D75;
    goto loc_13E1A;                             //jmp loc_13E1A
loc_13D75:                                      //loc_13D75:
    memory(_ds, 0x8F58) = 0x00;                 //mov byte_31488, 0
    _si = 0x3d8f;                               //mov si, 3D8Fh
    memory(_cs, 0x3D9B) = _al;                  //mov cs:byte_13D9B, al
loc_13D81:                                      //loc_13D81:
    if (_al == memory(_cs, _si))              //jz short loc_13D8B
      goto loc_13D8B;
    _si += 0x0003;                              //add si, 3
    goto loc_13D81;                             //jmp short loc_13D81
loc_13D8B:                                      //loc_13D8B:
    _STOP_("goto word ptr cs:[si+1]");          //jmp word ptr cs:[si+1]
    _STOP_("db 19h");                           //db 19h
    _STOP_("db 1Ch");                           //db 1Ch
    _STOP_("db  17h");                          //db  17h
    _STOP_("byte_13D9B db 0");                  //byte_13D9B db 0
    _STOP_("db 9");                             //db 9
    _STOP_("unk_13DA4 db    2");                //unk_13DA4 db    2
    _STOP_("word_13DAA dw 1");                  //word_13DAA dw 1
    _STOP_("word_13DAC dw 1");                  //word_13DAC dw 1
    _ax = _ax + memory16(_ds, _bx + _si);       //add ax, [bx+si]
    memory(_ds, _bx + _si) |= _al;              //or [bx+si], al
    _al += 0x00;                                //add al, 0
loc_13DB4:                                      //loc_13DB4:
    _al = memory(_ds, 0x8F57);                  //mov al, byte_31487
    memory(_ds, 0x8F56) = memory(_ds, 0x8F56) ^ _al;//xor byte_31486, al
    goto loc_13E1A;                             //jmp short loc_13E1A
loc_13DBD:                                      //loc_13DBD:
    if (memory(_ds, 0x9224) != 0x00)            //jnz short loc_13E1A
      goto loc_13E1A;
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_13DF0
      goto loc_13DF0;
    if (memory16(_ds, 0x9160) == 0x0000)        //jz short loc_13E1A
      goto loc_13E1A;
    memory16(_ds, 0x8E82) = 0x0001;             //mov word_313B2, 1
    memory16(_ds, 0x8E88) = 0x0018;             //mov word_313B8, 18h
    memory16(_ds, 0x8E80) = 0x0001;             //mov word_313B0, 1
    memory16(_ds, 0x9160) -= 1;                 //dec word_31690
    memory16(_ds, 0x8E84) = 0x0088;             //mov word_313B4, 88h
    goto loc_13E1A;                             //jmp short loc_13E1A
loc_13DF0:                                      //loc_13DF0:
    memory16(_ds, 0x8E84) = 0x0001;             //mov word_313B4, 1
    goto loc_13E1A;                             //jmp short loc_13E1A
loc_13DF8:                                      //loc_13DF8:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
loc_13DFD:                                      //loc_13DFD:
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_13E10
      goto loc_13E10;
    if (memory(_ds, 0x8F58) != 0x00)            //jnz short loc_13E10
      goto loc_13E10;
    sub_160A5();                                //call sub_160A5
    goto loc_13DFD;                             //jmp short loc_13DFD
loc_13E10:                                      //loc_13E10:
    memory(_ds, 0x8F58) = 0x00;                 //mov byte_31488, 0
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
loc_13E1A:                                      //loc_13E1A:
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _ax = memory16(_ds, 0x919A);                //mov ax, word_316CA
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    if (_ax == memory16(_ds, 0x918C))           //jz short loc_13E46
      goto loc_13E46;
    memory16(_ds, 0x91A0) += 1;                 //inc word_316D0
    if ((short)memory16(_ds, 0x91A0) < (short)0x0023)//jl short loc_13E4C
      goto loc_13E4C;
    memory16(_ds, 0xFCE2) <<= 1;                //shl word_38212, 1
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0x919A) = _ax;                //mov word_316CA, ax
    goto loc_13E4C;                             //jmp short loc_13E4C
loc_13E46:                                      //loc_13E46:
    memory16(_ds, 0x91A0) = 0x0000;             //mov word_316D0, 0
loc_13E4C:                                      //loc_13E4C:
    _ax = memory16(_ds, 0x9196);                //mov ax, word_316C6
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, 0x918E);                //mov ax, word_316BE
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0xFCEE) -= _ax;               //sub word_3821E, ax
    _ax = memory16(_ds, 0x91A8);                //mov ax, word_316D8
    if ((short)memory16(_ds, 0xFCEE) >= (short)_ax)//jge short loc_13E82
      goto loc_13E82;
    _ax = memory16(_ds, 0x91A8);                //mov ax, word_316D8
    memory16(_ds, 0xFCEE) -= _ax;               //sub word_3821E, ax
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, 0x91A8);                //mov ax, word_316D8
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
loc_13E82:                                      //loc_13E82:
    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    if ((short)memory16(_ds, 0xFCEE) <= (short)_ax)//jle short loc_13E9F
      goto loc_13E9F;
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
loc_13E9F:                                      //loc_13E9F:
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    if ((short)memory16(_ds, 0xFCE6) < 0)       //js short loc_13EBB
      goto loc_13EBB;
    if ((short)memory16(_ds, 0xFCE6) < (short)0x0010)//jl short loc_13EC5
      goto loc_13EC5;
    memory16(_ds, 0xFCE6) -= 0x0010;            //sub word_38216, 10h
    memory16(_ds, 0xFCEA) += 0x0028;            //add word_3821A, 28h
    goto loc_13EC5;                             //jmp short loc_13EC5
loc_13EBB:                                      //loc_13EBB:
    memory16(_ds, 0xFCE6) += 0x0010;            //add word_38216, 10h
    memory16(_ds, 0xFCEA) -= 0x0028;            //sub word_3821A, 28h
loc_13EC5:                                      //loc_13EC5:
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0x9198) = _ax;                //mov word_316C8, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x9196) = _ax;                //mov word_316C6, ax
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    memory16(_ds, 0x918E) = _ax;                //mov word_316BE, ax
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, 0x9190) = _ax;                //mov word_316C0, ax
    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    if (memory16(_ds, 0xFCFE) != _ax)           //jnz short loc_13EED
      goto loc_13EED;
    if (memory(_ds, 0x8F59) & 0x02)             //jnz short loc_13EF4
      goto loc_13EF4;
loc_13EED:                                      //loc_13EED:
    _ax = memory16(_ds, 0x91AE);                //mov ax, word_316DE
    memory16(_ds, 0xFCEE) += _ax;               //add word_3821E, ax
loc_13EF4:                                      //loc_13EF4:
    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    if ((short)memory16(_ds, 0xFCEE) > (short)_ax)//jg short loc_13F03
      goto loc_13F03;
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, 0x91AA) = _ax;                //mov word_316DA, ax
loc_13F03:                                      //loc_13F03:
    sub_10A2F();                                //call sub_10A2F
    sub_10D81();                                //call sub_10D81
    if (memory(_ds, 0x8F5C) != 0x00)            //jnz short loc_13F13
      goto loc_13F13;
    goto loc_13FAA;                             //jmp loc_13FAA
loc_13F13:                                      //loc_13F13:
    memory(_ds, 0x8F5C) = 0x00;                 //mov byte_3148C, 0
    memory16(_ds, 0x9132) = 0x0001;             //mov word_31662, 1
    memory16(_ds, 0x9186) = 0x0027;             //mov word_316B6, 27h
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
    memory16(_ds, 0x918A) -= 1;                 //dec word_316BA
    sub_10E91();                                //call sub_10E91
    if (memory16(_ds, 0x918A) != 0x0000)        //jnz short loc_13F9A
      goto loc_13F9A;
    sub_10D5F();                                //call sub_10D5F
    sub_159C8();                                //call sub_159C8
    sub_10D5F();                                //call sub_10D5F
    memory16(_ds, 0x91B0) -= 1;                 //dec word_316E0
    if (memory16(_ds, 0x91B0) == 0)             //jz short loc_13F7B
      goto loc_13F7B;
    sub_15C0F();                                //call sub_15C0F
    if (_FIXME_)                                //jz short loc_13F7B
      goto loc_13F7B;
    memory16(_ds, 0x918A) = 0x0003;             //mov word_316BA, 3
    sub_10E91();                                //call sub_10E91
    memory16(_ds, 0x9152) = 0x0000;             //mov word_31682, 0
    memory16(_ds, 0x9154) = 0x0000;             //mov word_31684, 0
    _di = 0x921c;                               //mov di, 921Ch
    _cx = 0x0007;                               //mov cx, 7
    _al = _al ^ _al;                            //xor al, al
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    memory16(_ds, 0x9156) = 0x0000;             //mov word_31686, 0
    memory16(_ds, 0x9158) = 0x0000;             //mov word_31688, 0
    sub_10E6F();                                //call sub_10E6F
    goto loc_13F9A;                             //jmp short loc_13F9A
loc_13F7B:                                      //loc_13F7B:
    _si = 0x3729;                               //mov si, 3729h
    _cx = 0x001e;                               //mov cx, 1Eh
    sub_15926();                                //call sub_15926
    _bx = memory16(_ds, 0x8E7A);                //mov bx, word_313AA
    memory(_ds, _bx + -28835) = 0x00;           //mov byte ptr [bx-70A3h], 0
    _bx = _bx ^ 0x0001;                         //xor bx, 1
    if (memory(_ds, _bx + -28835) != 0x00)      //jnz short loc_13F9A
      goto loc_13F9A;
    goto loc_13C9D;                             //jmp loc_13C9D
loc_13F9A:                                      //loc_13F9A:
    sub_11A62();                                //call sub_11A62
    if (memory(_ds, 0x8F54) == 0x00)            //jz short loc_13FAA
      goto loc_13FAA;
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
loc_13FAA:                                      //loc_13FAA:
    if (memory16(_ds, 0x9164) == 0x0000)        //jz short loc_13FB4
      goto loc_13FB4;
    goto loc_13D26;                             //jmp loc_13D26
loc_13FB4:                                      //loc_13FB4:
    if (memory(_ds, 0x8FB0) != 0x00)            //jnz short loc_13FC8
      goto loc_13FC8; // enter shop
    if (memory(_ds, 0x8F61) == 0x00)            //jz short loc_13FC5
      goto loc_13FC5;
    goto loc_140A7;                             //jmp loc_140A7
loc_13FC5:                                      //loc_13FC5:
    goto loc_13D26;                             //jmp loc_13D26
loc_13FC8:                                      //loc_13FC8:
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    if ((short)memory16(_ds, 0x9190) > (short)0x01e0)//jg short loc_1400D
      goto loc_1400D;
    _ax = memory16(_ds, 0x8EAC);                //mov ax, word_313DC
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x8F4A) = _ax;                //mov word_3147A, ax
    memory16(_ds, 0xFCE6) += 0x0190;            //add word_38216, 190h
    if (memory16(_ds, 0x915C) != 0x0000)        //jnz short loc_1403E
      goto loc_1403E;
    _ax = memory16(_ds, 0x915A);                //mov ax, word_3168A
    if ((short)memory16(_ds, 0xFCE6) <= (short)_ax)//jle short loc_1403E
      goto loc_1403E;
    sub_14191();                                //call sub_14191
    _ax &= 0x0003;                              //and ax, 3
    _dx = 0x0032;                               //mov dx, 32h
    _ax = _dx * _al;                            //mul dx
    memory16(_ds, 0xFCE6) += _ax;               //add word_38216, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x915A) = _ax;                //mov word_3168A, ax
    goto loc_1403E;                             //jmp short loc_1403E
loc_1400D:                                      //loc_1400D:
    _ax = memory16(_ds, 0x8EAE);                //mov ax, word_313DE
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x8F4A) = _ax;                //mov word_3147A, ax
    if (memory16(_ds, 0x915C) != 0x0000)        //jnz short loc_1403E
      goto loc_1403E;
    _ax = memory16(_ds, 0x915A);                //mov ax, word_3168A
    if ((short)memory16(_ds, 0xFCE6) <= (short)_ax)//jle short loc_1403E
      goto loc_1403E;
    sub_14191();                                //call sub_14191
    _ax &= 0x0003;                              //and ax, 3
    _dx = 0x0032;                               //mov dx, 32h
    _ax = _dx * _al;                            //mul dx
    memory16(_ds, 0xFCE6) += _ax;               //add word_38216, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x915A) = _ax;                //mov word_3168A, ax
loc_1403E:                                      //loc_1403E:
    memory(_ds, 0x9223) = 0x00;                 //mov byte_31753, 0
    memory(_ds, 0x8FB1) = 0x00;                 //mov byte_314E1, 0
    if ((short)memory16(_ds, 0x9190) > (short)0x03c0)//jg short loc_14078
      goto loc_14078;
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14078
      goto loc_14078;
    memory(_ds, 0x8FB1) = 0xff;                 //mov byte_314E1, 0FFh
    if (memory16(_ds, 0x8E70) != 0x0002)        //jnz short loc_14078
      goto loc_14078;
    _bx = memory16(_ds, 0x8E7A);                //mov bx, word_313AA
    _bx = _bx ^ 0x0001;                         //xor bx, 1
    if (memory(_ds, _bx + -28835) == 0x00)      //jz short loc_14078
      goto loc_14078;
    if (memory(_ds, _bx + -28833) == 0x00)      //jz short loc_1407E
      goto loc_1407E;
loc_14078:                                      //loc_14078:
    sub_14A69();                                //call sub_14A69
    sub_10E91();                                //call sub_10E91
loc_1407E:                                      //loc_1407E:
    memory(_ds, 0x8FB0) = 0x00;                 //mov byte_314E0, 0
    if (memory16(_ds, 0x9162) == 0x0000)        //jz short loc_1408D
      goto loc_1408D;
    sub_12B22();                                //call sub_12B22
loc_1408D:                                      //loc_1408D:
    if (memory(_ds, 0x8F61) != 0x00)            //jnz short loc_140A7
      goto loc_140A7;
    if (memory(_ds, 0x8F54) != 0x00)            //jnz short loc_1409E
      goto loc_1409E;
    goto loc_13D26;                             //jmp loc_13D26
loc_1409E:                                      //loc_1409E:
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
    goto loc_13D26;                             //jmp loc_13D26
loc_140A7:                                      //loc_140A7:
    memory(_ds, 0x8F61) = 0x00;                 //mov byte_31491, 0
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_140CB
      goto loc_140CB;
loc_140B3:                                      //loc_140B3:
    _si = memory16(_ds, 0x9008);                //mov si, word_31538
    if (memory16(_ds, _si) == 0x0000)           //jz short loc_140C1
      goto loc_140C1;
    sub_137A9();                                //call sub_137A9
    goto loc_140B3;                             //jmp short loc_140B3
loc_140C1:                                      //loc_140C1:
    sub_13319();                                //call sub_13319
    sub_135EB();                                //call sub_135EB
    memory16(_ds, 0x91B0) += 1;                 //inc word_316E0
loc_140CB:                                      //loc_140CB:
    _bx = memory16(_ds, 0x8E7A);                //mov bx, word_313AA
    _bx = _bx ^ 0x0001;                         //xor bx, 1
    if (memory(_ds, _bx + -28835) == 0x00)      //jz short loc_14116
      goto loc_14116;
    if (memory(_ds, _bx + -28833) != 0x00)      //jnz short loc_14116
      goto loc_14116;
    _bx = _bx ^ 0x0001;                         //xor bx, 1
    memory(_ds, _bx + -28833) = 0xff;           //mov byte ptr [bx-70A1h], 0FFh
    sub_118F5();                                //call sub_118F5
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_13760();                                //call sub_13760
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    sub_13760();                                //call sub_13760
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    sub_13760();                                //call sub_13760
    sub_11A65();                                //call sub_11A65
    if (memory(_ds, 0x8F54) != 0x00)            //jnz short loc_1410D
      goto loc_1410D;
    goto loc_13D26;                             //jmp loc_13D26
loc_1410D:                                      //loc_1410D:
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
    goto loc_13D26;                             //jmp loc_13D26
loc_14116:                                      //loc_14116:
    sub_10D5F();                                //call sub_10D5F
    sub_118F5();                                //call sub_118F5
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_13760();                                //call sub_13760
    _si = memory16(_ds, 0x90EC);                //mov si, word_3161C
    sub_13760();                                //call sub_13760
    _si = memory16(_ds, 0x90A0);                //mov si, word_315D0
    sub_13760();                                //call sub_13760
    memory16(_ds, 0x991C) += 1;                 //inc word_31E4C
    if ((short)memory16(_ds, 0x991C) < (short)0x0006)//jl short loc_14146
      goto loc_14146;
    memory16(_ds, 0x991C) = 0x0001;             //mov word_31E4C, 1
    memory16(_ds, 0x991A) += 1;                 //inc word_31E4A
loc_14146:                                      //loc_14146:
    _ax = memory16(_ds, 0x991C);                //mov ax, word_31E4C
    _ax += 0x0030;                              //add ax, 30h
    memory(_ds, 0x3550) = _al;                  //mov byte_2BA80, al
    sub_15CC5();                                //call sub_15CC5
    sub_1193C();                                //call sub_1193C
    if (memory16(_ds, 0x9162) == 0x0000)        //jz short loc_1415F
      goto loc_1415F;
    sub_12B22();                                //call sub_12B22
loc_1415F:                                      //loc_1415F:
    sub_11B43();                                //call sub_11B43
    memory(_ds, 0x8F5F) = 0x00;                 //mov byte_3148F, 0
    memory(_ds, 0x8F60) = 0x00;                 //mov byte_31490, 0
    sub_11A62();                                //call sub_11A62
    sub_10985();                                //call sub_10985
    sub_1080F();                                //call sub_1080F
    sub_10A2F();                                //call sub_10A2F
    sub_10E2B();                                //call sub_10E2B
    sub_10D81();                                //call sub_10D81
    if (memory(_ds, 0x8F54) != 0x00)            //jnz short loc_14188
      goto loc_14188;
    goto loc_13D26;                             //jmp loc_13D26
loc_14188:                                      //loc_14188:
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
    goto loc_13D26;                             //jmp loc_13D26
}

void sub_14191()
{
    _push(_dx);                                 //push dx
    _ax = 0x6255;                               //mov ax, 6255h
    _ax = memory16(_ds, 0x304A) * _al;          //mul word_2B57A
    _ax += 0x3619;                              //add ax, 3619h
    memory16(_ds, 0x304A) = _ax;                //mov word_2B57A, ax
    _dx = _pop();                               //pop dx
}

void sub_141A1()
{
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _push(_ax);                                 //push ax
    sub_14191();                                //call sub_14191
    _dx = _dx ^ _dx;                            //xor dx, dx
    _cx = _pop();                               //pop cx
    _div(_cx);                                  //div cx
    _ax = _dx;                                  //mov ax, dx
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
}

void sub_141B1() // animation
{
    WORD _cs = _seg000;

    memory16(_ds, _si + 14) -= 1;               //dec word ptr [si+0Eh]
    if ((short)memory16(_ds, _si + 14) < 0)     //js short loc_141DC
      goto loc_141DC;
    if (memory16(_ds, _si + 14) != 0)           //jnz short locret_141DB
      goto locret_141DB;
    _di = memory16(_ds, _si + 16);              //mov di, [si+10h]
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    _di += 0x0002;                              //add di, 2
    if (_ax & _ax)                              //jnz short loc_141CC
      goto loc_141CC;
    _di += 0x0002;                              //add di, 2
    //_STOP_("goto word ptr cs:[di-2]");          //jmp word ptr cs:[di-2]
    _indirectCall(_cs, memory16(_cs, _di-2));
    return;
loc_141CC:                                      //loc_141CC:
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
locret_141DB:                                   //locret_141DB:
    return;                                     //retn
loc_141DC:                                      //loc_141DC:
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
}

void sub_141E2()
{
    WORD _cs = _seg000;

    _di = memory16(_cs, _di);                   //mov di, cs:[di]
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
}

void sub_141FB()
{
    if (memory(_ds, _si + 38) != 0x00)          //jnz short loc_14205
      goto loc_14205;
    sub_107C0();                                //call sub_107C0
    return;                                     //retn
loc_14205:                                      //loc_14205:
    _push(_si);                                 //push si
    _si = memory16(_ds, _si + 68);              //mov si, [si+44h]
    _push(memory16(_ds, _si + 70));             //push word ptr [si+46h]
loc_1420C:                                      //loc_1420C:
    _si = _pop();                               //pop si
    if (!(_si & _si))                           //jz short loc_14219
      goto loc_14219;
    _push(memory16(_ds, _si + 70));             //push word ptr [si+46h]
    sub_107C0();                                //call sub_107C0
    goto loc_1420C;                             //jmp short loc_1420C
loc_14219:                                      //loc_14219:
    _si = _pop();                               //pop si
}

void sub_1421C()
{
    _si = 0x9a40;                               //mov si, 9A40h
    _dx = _ax;                                  //mov dx, ax
    _cl = 0x03;                                 //mov cl, 3
    _dx <<= _cl;                                //shl dx, cl
    _bx = _ax;                                  //mov bx, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 12422);           //mov ax, [bx+3086h]
    _cx = 0x0030;                               //mov cx, 30h
    _bp = _dx;                                  //mov bp, dx
loc_14232:                                      //loc_14232:
    _bx = memory16(_ds, _si + 4);               //mov bx, [si+4]
    _flags.sign = (short)(_bx + _dx) < 0;       //add bx, dx
    _bx += _dx;
    if (!_flags.sign)                           //jns short loc_14247
      goto loc_14247;
loc_14239:                                      //loc_14239:
    memory16(_ds, _si) -= 1;                    //dec word ptr [si]
    if ((short)memory16(_ds, _si) >= 0)         //jns short loc_14241
      goto loc_14241;
    memory16(_ds, _si) = 0x00bf;                //mov word ptr [si], 0BFh
loc_14241:                                      //loc_14241:
    _flags.sign = (short)(_bx + 0x0180) < 0;    //add bx, 180h
    _bx += 0x0180;
    if (_flags.sign)                            //js short loc_14239
      goto loc_14239;
loc_14247:                                      //loc_14247:
    if ((short)_bx < (short)0x0180)             //jl short loc_1425F
      goto loc_1425F;
    memory16(_ds, _si) += 1;                    //inc word ptr [si]
    if ((short)memory16(_ds, _si) < (short)0x00c0)//jl short loc_14259
      goto loc_14259;
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
loc_14259:                                      //loc_14259:
    _bx -= 0x0180;                              //sub bx, 180h
    goto loc_14247;                             //jmp short loc_14247
loc_1425F:                                      //loc_1425F:
    memory16(_ds, _si + 4) = _bx;               //mov [si+4], bx
    _si += 0x0006;                              //add si, 6
    _dx += _bp;                                 //add dx, bp
    if (--_cx)                                  //loop loc_14232
      goto loc_14232;
}

void sub_1426A()
{
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
loc_14270:                                      //loc_14270:
    _ax = 0x00c0;                               //mov ax, 0C0h
    sub_141A1();                                //call sub_141A1
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _ax = 0x0028;                               //mov ax, 28h
    if (memory16(_ds, 0x3044) == 0x0000)        //jz short loc_1429D
      goto loc_1429D;
    if (memory16(_ds, 0x3044) == 0x0003)        //jz short loc_1429D
      goto loc_1429D;
    _ax = 0x0050;                               //mov ax, 50h
    if (memory16(_ds, 0x3044) == 0x0002)        //jz short loc_1429D
      goto loc_1429D;
    if (memory16(_ds, 0x3044) == 0x0004)        //jz short loc_1429D
      goto loc_1429D;
    _ax = 0x00a0;                               //mov ax, 0A0h
loc_1429D:                                      //loc_1429D:
    sub_141A1();                                //call sub_141A1
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    memory16(_ds, _si + 4) = 0x0000;            //mov word ptr [si+4], 0
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_14270
      goto loc_14270;
}

void sub_142AE()
{
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_142E8
      goto loc_142E8;
    _ax = memory16(_ds, _si + 40);              //mov ax, [si+28h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 42);              //mov ax, [si+2Ah]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, _si + 44);              //mov ax, [si+2Ch]
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    _ax = memory16(_ds, _si + 46);              //mov ax, [si+2Eh]
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    _ax = memory16(_ds, 0x9F28);                //mov ax, word_32458
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_ds, 0x9F2A);                //mov ax, word_3245A
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, 0x9F2C);                //mov ax, word_3245C
    memory16(_ds, 0xFCFA) = _ax;                //mov word_3822A, ax
    _ax = memory16(_ds, 0x9F2E);                //mov ax, word_3245E
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
{sub_10F2F(); return; };                        //
loc_142E8:                                      //loc_142E8:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
}

void sub_142EB()
{
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_1430E
      goto loc_1430E;
    if ((short)_ax < (short)memory16(_ds, 0x9F28))//jl short loc_1430E
      goto loc_1430E;
    if ((short)_ax > (short)memory16(_ds, 0x9F2C))//jg short loc_1430E
      goto loc_1430E;
    if ((short)_bx < (short)memory16(_ds, 0x9F2A))//jl short loc_1430E
      goto loc_1430E;
    if ((short)_bx > (short)memory16(_ds, 0x9F2E))//jg short loc_1430E
      goto loc_1430E;
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    return;                                     //retn
loc_1430E:                                      //loc_1430E:
    _ax = _ax ^ _ax;                            //xor ax, ax
}

void sub_14311()
{
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    if (memory(_ds, 0x9224) == 0x00)            //jz short loc_1433E
      goto loc_1433E;
    memory16(_ds, 0x919A) = 0x0000;             //mov word_316CA, 0
    sub_141B1();                                //call sub_141B1
    if (memory16(_ds, _si + 14) != 0x0000)      //jnz short locret_1433D
      goto locret_1433D;
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    if ((short)memory16(_ds, 0x991E) < (short)0x0010)//jl short locret_1433D
      goto locret_1433D;
    memory(_ds, 0x8F5C) = 0xff;                 //mov byte_3148C, 0FFh
locret_1433D:                                   //locret_1433D:
    return;                                     //retn
loc_1433E:                                      //loc_1433E:
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_143B6
      goto loc_143B6;
    if (memory16(_ds, 0x9150) != 0x0000)        //jnz short loc_14356
      goto loc_14356;
    sub_13589();                                //call sub_13589
    sub_11BEA();                                //call sub_11BEA
    if (!_flags.zero)                                //jnz short loc_14381
      goto loc_14381;
    goto loc_143B6;                             //jmp short loc_143B6
loc_14356:                                      //loc_14356:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax -= 0x0040;                              //sub ax, 40h
    memory16(_ds, _si + 40) = _ax;              //mov [si+28h], ax
    _ax += 0x0080;                              //add ax, 80h
    memory16(_ds, _si + 44) = _ax;              //mov [si+2Ch], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax -= 0x0040;                              //sub ax, 40h
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax += 0x0080;                              //add ax, 80h
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    sub_11BEA();                                //call sub_11BEA
    if (_FIXME_)                                //jz short loc_1437C
      goto loc_1437C;
    sub_13A33();                                //call sub_13A33
loc_1437C:                                      //loc_1437C:
    sub_13589();                                //call sub_13589
    goto loc_143B6;                             //jmp short loc_143B6
loc_14381:                                      //loc_14381:
    if (memory16(_ds, 0x9188) != 0x0000)        //jnz short loc_143A9
      goto loc_143A9;
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_143B6
      goto loc_143B6;
    memory16(_ds, _si + 4) = 0x08b9;            //mov word ptr [si+4], 8B9h
    _ax = 0x0008;                               //mov ax, 8
    if (memory(_ds, _di + 39) == 0x00)          //jz short loc_1439E
      goto loc_1439E;
    _ax = 0x0010;                               //mov ax, 10h
loc_1439E:                                      //loc_1439E:
    sub_13C4F();                                //call sub_13C4F
    if (memory(_ds, 0x9224) == 0x00)            //jz short loc_143A9
      goto loc_143A9;
    return;                                     //retn
loc_143A9:                                      //loc_143A9:
    if (memory16(_ds, _di) == 0x0050)           //jz short loc_143B6
      goto loc_143B6;
    if (memory16(_ds, _di) == 0x0054)           //jz short loc_143B6
      goto loc_143B6;
    sub_13A33();                                //call sub_13A33
loc_143B6:                                      //loc_143B6:
    if (memory16(_ds, 0x8E7E) == 0x0000)        //jz short loc_14430
      goto loc_14430;
    if ((short)memory16(_ds, 0x8E7E) >= 0 /*CHECK*/)//jns short loc_143D7
      goto loc_143D7;
    sub_11E29();                                //call sub_11E29
    if (!_flags.zero)                                //jnz short loc_143CC
      goto loc_143CC;
    memory16(_ds, 0x8E7E) = 0x0000;             //mov word_313AE, 0
    goto loc_14430;                             //jmp short loc_14430
loc_143CC:                                      //loc_143CC:
    if (memory16(_ds, 0x8E7E) != 0xffef)        //jnz short loc_143D7
      goto loc_143D7;
    sub_13C01();                                //call sub_13C01
    return;                                     //retn
loc_143D7:                                      //loc_143D7:
    memory16(_ds, 0x8E7E) -= 1;                 //dec word_313AE
    _ax = memory16(_ds, 0x918C);                //mov ax, word_316BC
    memory16(_ds, 0x919A) = _ax;                //mov word_316CA, ax
    _ax = memory16(_ds, 0x8ED2);                //mov ax, word_31402
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    _bx = memory16(_ds, 0x8ED4);                //mov bx, word_31404
    memory16(_ds, _si + 18) = _bx;              //mov [si+12h], bx
    _ax = _ax + memory16(_ds, 0x8ED6);          //add ax, word_31406
    if ((short)_ax <= (short)0x00b0)            //jle short loc_14402
      goto loc_14402;
    _ax -= 0x00b0;                              //sub ax, 0B0h
    memory16(_ds, 0x919A) -= _ax;               //sub word_316CA, ax
    _ax = 0x00b0;                               //mov ax, 0B0h
loc_14402:                                      //loc_14402:
    if ((short)_ax >= (short)0x0010)            //jge short loc_14411
      goto loc_14411;
    _ax -= 0x0010;                              //sub ax, 10h
    memory16(_ds, 0x919A) -= _ax;               //sub word_316CA, ax
    _ax = 0x0010;                               //mov ax, 10h
loc_14411:                                      //loc_14411:
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _push(_si);                                 //push si
    _si = 0x8ed2;                               //mov si, 8ED2h
    _di = 0x8ecc;                               //mov di, 8ECCh
    _cx = 0x0030;                               //mov cx, 30h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si = _pop();                               //pop si
    if (memory16(_ds, 0x8E7E) != 0x0000)        //jnz short loc_14483
      goto loc_14483;
    memory16(_ds, 0x8E7E) = 0xffff;             //mov word_313AE, 0FFFFh
    goto loc_14483;                             //jmp short loc_14483
loc_14430:                                      //loc_14430:
    sub_144F3();                                //call sub_144F3
    _push(_si);                                 //push si
    _si = 0x8f2a;                               //mov si, 8F2Ah
    _di = 0x8f30;                               //mov di, 8F30h
    _cx = 0x0030;                               //mov cx, 30h
    _flags.direction = true;                    //std
    _rep_movsw<MemAuto, MemAuto, DirBackward>();    //rep movsw
    _flags.direction = false;                   //cld
    _si = _pop();                               //pop si
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0x8ECC) = _ax;                //mov word_313FC, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x8ECE) = _ax;                //mov word_313FE, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0x8ED0) = _ax;                //mov word_31400, ax
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_14483
      goto loc_14483;
    if ((short)memory16(_ds, 0x8E7E) < 0 /*CHECK*/)//js short loc_14483
      goto loc_14483;
    sub_11E29();                                //call sub_11E29
    if (_flags.zero)                                //jz short loc_14483
      goto loc_14483;
    _ax = memory16(_ds, 0x8E6E);                //mov ax, word_3139E
    memory16(_ds, 0x8E7E) = _ax;                //mov word_313AE, ax
    memory16(_ds, 0x919E) = 0x0000;             //mov word_316CE, 0
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    _ax = _ax + memory16(_ds, 0x91AE);          //add ax, word_316DE
    if ((short)_ax <= (short)memory16(_ds, 0x91AA))//jle short loc_14483
      goto loc_14483;
    memory16(_ds, 0x91AA) = _ax;                //mov word_316DA, ax
loc_14483:                                      //loc_14483:
    _push(_si);                                 //push si
    _si = 0x8ec0;                               //mov si, 8EC0h
    _di = 0x8ebc;                               //mov di, 8EBCh
    _cx = 0x0004;                               //mov cx, 4
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si = _pop();                               //pop si
    _ax = memory16(_ds, 0x8F34);                //mov ax, word_31464
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_ds, 0x8F36);                //mov ax, word_31466
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _bx = memory16(_ds, 0x8E80);                //mov bx, word_313B0
    if (_bx & _bx)                              //jnz short loc_144B4
      goto loc_144B4;
    _bx = memory16(_ds, 0x919E);                //mov bx, word_316CE
    _bx += 0x0006;                              //add bx, 6
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 12364);           //mov ax, [bx+304Ch]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    return;                                     //retn
loc_144B4:                                      //loc_144B4:
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 12888);           //mov ax, [bx+3258h]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, 0x8E82);                //mov ax, word_313B2
    _ax = _ax + memory16(_ds, 0x8E80);          //add ax, word_313B0
    memory16(_ds, 0x8E80) = _ax;                //mov word_313B0, ax
    if (_ax == 0)                               //jz short loc_144E6
      goto loc_144E6;
    if (_ax != 0x0004)                          //jnz short locret_144E5
      goto locret_144E5;
    if (memory16(_ds, 0x8E82) != 0x0000)        //jnz short loc_144DF
      goto loc_144DF;
    memory16(_ds, _si + 4) = 0x0897;            //mov word ptr [si+4], 897h
loc_144DF:                                      //loc_144DF:
    memory16(_ds, 0x8E82) = 0x0000;             //mov word_313B2, 0
locret_144E5:                                   //locret_144E5:
    return;                                     //retn
loc_144E6:                                      //loc_144E6:
    memory16(_ds, 0x8E82) = 0x0000;             //mov word_313B2, 0
    memory16(_ds, 0x8E7E) = 0xfff1;             //mov word_313AE, 0FFF1h
}

void sub_144F3()
{
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x8F34) = _ax;                //mov word_31464, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0x8F36) = _ax;                //mov word_31466, ax
    if (memory(_ds, 0x8F59) & 0x04)             //jnz short loc_14518
      goto loc_14518;
    if (memory(_ds, 0x8F59) & 0x08)             //jnz short loc_14532
      goto loc_14532;
    _ax = memory16(_ds, 0x919E);                //mov ax, word_316CE
    if (!(_ax & _ax))                           //jz short loc_1454A
      goto loc_1454A;
    if ((short)_ax < 0)                         //js short loc_14546
      goto loc_14546;
    goto loc_1452C;                             //jmp short loc_1452C
loc_14518:                                      //loc_14518:
    if ((short)memory16(_ds, 0x919E) <= (short)0x0000)
      goto loc_14525;
    memory16(_ds, 0x919E) = 0x0000;             //mov word_316CE, 0
loc_14525:                                      //loc_14525:
    if ((short)memory16(_ds, 0x919E) <= (short)0xfffa)
      goto loc_1454A;
loc_1452C:                                      //loc_1452C:
    memory16(_ds, 0x919E) -= 1;                 //dec word_316CE
    goto loc_1454A;                             //jmp short loc_1454A
loc_14532:                                      //loc_14532:
    if ((short)memory16(_ds, 0x919E) >= (short)0x0000)
      goto loc_1453F;
    memory16(_ds, 0x919E) = 0x0000;             //mov word_316CE, 0
loc_1453F:                                      //loc_1453F:
    if ((short)memory16(_ds, 0x919E) >= (short)0x0006)
      goto loc_1454A;
loc_14546:                                      //loc_14546:
    memory16(_ds, 0x919E) += 1;                 //inc word_316CE
loc_1454A:                                      //loc_1454A:
    _ax = memory16(_ds, 0x918C);                //mov ax, word_316BC
    memory16(_ds, 0x919A) = _ax;                //mov word_316CA, ax
    if (!(memory(_ds, 0x8F59) & 0x01))          //jz short loc_14576
      goto loc_14576;
    if ((short)memory16(_ds, _si + 22) <= (short)0x0010)
      goto loc_14569;
    memory16(_ds, _si + 22) -= 0x0003;          //sub word ptr [si+16h], 3
    _ax = memory16(_ds, 0x915E);                //mov ax, word_3168E
    memory16(_ds, _si + 22) -= _ax;             //sub [si+16h], ax
    goto loc_14576;                             //jmp short loc_14576
loc_14569:                                      //loc_14569:
    memory16(_ds, _si + 22) = 0x0010;           //mov word ptr [si+16h], 10h
    memory16(_ds, 0x919A) = 0x0001;             //mov word_316CA, 1
    goto loc_145A4;                             //jmp short loc_145A4
loc_14576:                                      //loc_14576:
    if (!(memory(_ds, 0x8F59) & 0x02))          //jz short loc_145A4
      goto loc_145A4;
    if ((short)memory16(_ds, _si + 22) >= (short)0x00b0)
      goto loc_14590;
    memory16(_ds, _si + 22) += 0x0003;          //add word ptr [si+16h], 3
    _ax = memory16(_ds, 0x915E);                //mov ax, word_3168E
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    goto loc_145A4;                             //jmp short loc_145A4
loc_14590:                                      //loc_14590:
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    if (_ax == memory16(_ds, 0x91AA))           //jz short loc_145A4
      goto loc_145A4;
    memory16(_ds, 0x919A) = 0xffff;             //mov word_316CA, 0FFFFh
    memory16(_ds, _si + 22) = 0x00b0;           //mov word ptr [si+16h], 0B0h
loc_145A4:                                      //loc_145A4:
    _ax = memory16(_ds, 0x919E);                //mov ax, word_316CE
    if (!(_ax & _ax))                           //jz short loc_145C3
      goto loc_145C3;
    if ((short)_ax < 0)                         //js short loc_145B9
      goto loc_145B9;
    if (!(memory(_ds, 0x8F59) & 0x08))          //jz short loc_145C3
      goto loc_145C3;
    _ax = 0x0006;                               //mov ax, 6
    goto loc_145C3;                             //jmp short loc_145C3
loc_145B9:                                      //loc_145B9:
    if (!(memory(_ds, 0x8F59) & 0x04))          //jz short loc_145C3
      goto loc_145C3;
    _ax = 0xfffa;                               //mov ax, 0FFFAh
loc_145C3:                                      //loc_145C3:
    if (memory16(_ds, 0x915E) != 0x0000)        //jnz short loc_145CC
      goto loc_145CC;
    _sar(_ax, 1);                               //sar ax, 1
loc_145CC:                                      //loc_145CC:
    if ((short)memory16(_ds, 0x915E) < (short)0x0002)//jl short loc_145D9
      goto loc_145D9;
    _bx = _ax;                                  //mov bx, ax
    _sar(_bx, 1);                               //sar bx, 1
    _ax += _bx;                                 //add ax, bx
loc_145D9:                                      //loc_145D9:
    memory16(_ds, _si + 18) += _ax;             //add [si+12h], ax
    if ((short)memory16(_ds, _si + 18) >= (short)0x0010)
      goto loc_145E7;
    memory16(_ds, _si + 18) = 0x0010;           //mov word ptr [si+12h], 10h
loc_145E7:                                      //loc_145E7:
    if ((short)memory16(_ds, _si + 18) <= (short)0x012e)
      goto locret_145F3;
    memory16(_ds, _si + 18) = 0x012e;           //mov word ptr [si+12h], 12Eh
locret_145F3:                                   //locret_145F3:
    return;
}

void sub_145F4() /// new fire
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x8E88) != 0x0000)        //jnz short loc_14601
      goto loc_14601;
    memory16(_ds, 0x8E88) = 0x0002;             //mov word_313B8, 2
loc_14601:                                      //loc_14601:
    if (memory16(_ds, _si + 52) == 0x0000)      //jz short loc_14613
      goto loc_14613;
    if (memory16(_ds, _si + 52) == 0x0001)      //jz short loc_14610
      goto loc_14610;
    _bp += 0x0002;                              //add bp, 2
loc_14610:                                      //loc_14610:
    _bp += 0x0002;                              //add bp, 2
loc_14613:                                      //loc_14613:
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    memory16(_ds, _di + 28) = _ax;              //mov [di+1Ch], ax
    memory16(_ds, _di + 32) = _bx;              //mov [di+20h], bx
    _cx = _cx + memory16(_ds, 0x9F12);          //add cx, word_32442
    memory16(_ds, _di + 18) = _cx;              //mov [di+12h], cx
    _dx = _dx + memory16(_ds, 0x9F16);          //add dx, word_32446
    memory16(_ds, _di + 22) = _dx;              //mov [di+16h], dx
    memory16(_ds, _di) = 0x0010;                //mov word ptr [di], 10h
    memory16(_ds, _di + 2) = 0x39ee;            //mov word ptr [di+2], 39EEh
    memory16(_ds, _di + 4) = 0x091f;            //mov word ptr [di+4], 91Fh
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
//    if (_ax == 0x4546)
//    {
//        __fireptr = _di+40;
//        std::cout << "fire " << (int)(_di+12) << "\n";
//    }
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    memory16(_ds, _di + 14) = 0x0000;           //mov word ptr [di+0Eh], 0
    memory16(_ds, _di + 26) = 0x0000;           //mov word ptr [di+1Ah], 0
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    memory16(_ds, _di + 52) = _ax;              //mov [di+34h], ax
    _di = _pop();                               //pop di
}

void sub_1465C()
{
    _dx += 1;                                   //inc dx
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _ax = 0x000a;                               //mov ax, 0Ah
    _ax = _cx * _al;                            //mul cx
    _cx = _pop();                               //pop cx
    _div(_cx);                                  //div cx
    _si = _ax;                                  //mov si, ax
    _si <<= 1;                                  //shl si, 1
    _si = memory16(_ds, _si + 12898);           //mov si, [si+3262h]
    _cx = _pop();                               //pop cx
    _dx = _bx;                                  //mov dx, bx
{sub_10875(); return; };                        //
}

void sub_14675()
{
    if (memory16(_ds, 0x8E80) != 0x0000)        //jnz short loc_14690
      goto loc_14690;
    if (memory(_ds, 0x9224) != 0x00)            //jnz short loc_14690
      goto loc_14690;
    if (memory16(_ds, 0x991E) == 0x0000)        //jz short loc_1469B
      goto loc_1469B;
    memory16(_ds, 0x991E) -= 1;                 //dec word_31E4E
    goto loc_1469B;                             //jmp short loc_1469B
loc_14690:                                      //loc_14690:
    if (memory16(_ds, 0x991E) == 0x0010)        //jz short loc_1469B
      goto loc_1469B;
    memory16(_ds, 0x991E) += 1;                 //inc word_31E4E
loc_1469B:                                      //loc_1469B:
    if (memory16(_ds, 0x9150) == 0x0000)        //jz short loc_146B6
      goto loc_146B6;
    memory16(_ds, 0x9150) -= 1;                 //dec word_31680
    _dx = 0x00dd;                               //mov dx, 0DDh
    _cx = memory16(_ds, 0x9150);                //mov cx, word_31680
    _ax = 0x0126;                               //mov ax, 126h
    _bx = 0x0008;                               //mov bx, 8
    sub_1465C();                                //call sub_1465C
loc_146B6:                                      //loc_146B6:
    if (memory16(_ds, 0x8E84) == 0x0000)        //jz short loc_146E4
      goto loc_146E4;
    memory16(_ds, 0x8E84) -= 1;                 //dec word_313B4
    _dx = 0x0088;                               //mov dx, 88h
    _cx = memory16(_ds, 0x8E84);                //mov cx, word_313B4
    _ax = 0x0098;                               //mov ax, 98h
    _bx = 0x0008;                               //mov bx, 8
    sub_1465C();                                //call sub_1465C
    if (memory16(_ds, 0x8E84) != 0x0000)        //jnz short loc_146E4
      goto loc_146E4;
    memory16(_ds, 0x8E82) = 0xffff;             //mov word_313B2, 0FFFFh
    memory16(_ds, 0x8E88) = 0x0018;             //mov word_313B8, 18h
loc_146E4:                                      //loc_146E4:
    if (memory16(_ds, 0x9162) == 0x0000)        //jz short loc_14709
      goto loc_14709;
    memory16(_ds, 0x9162) -= 1;                 //dec word_31692
    _dx = 0x00aa;                               //mov dx, 0AAh
    _cx = memory16(_ds, 0x9162);                //mov cx, word_31692
    _ax = 0x0098;                               //mov ax, 98h
    _bx = 0x00a0;                               //mov bx, 0A0h
    sub_1465C();                                //call sub_1465C
    if (memory16(_ds, 0x9162) != 0x0000)        //jnz short loc_14709
      goto loc_14709;
    sub_1472D();                                //call sub_1472D
loc_14709:                                      //loc_14709:
    if (memory(_ds, 0x8F59) & 0x80)             //jnz short loc_14717
      goto loc_14717;
    _ax = memory16(_ds, 0x9130);                //mov ax, word_31660
    memory16(_ds, 0x912E) = _ax;                //mov word_3165E, ax
    return;                                     //retn
loc_14717:                                      //loc_14717:
    _ax = memory16(_ds, 0x9132);                //mov ax, word_31662
    memory16(_ds, 0x912E) -= _ax;               //sub word_3165E, ax
    if (memory16(_ds, 0x912E) > 0)                                //jg short locret_1472C
      goto locret_1472C;
    _ax = memory16(_ds, 0x9130);                //mov ax, word_31660
    memory16(_ds, 0x912E) += _ax;               //add word_3165E, ax
    memory(_ds, 0x8F5B) = 0xff;                 //mov byte_3148B, 0FFh
locret_1472C:                                   //locret_1472C:
    return;
}

void sub_1472D()
{
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x9008);                //mov si, word_31538
loc_14732:                                      //loc_14732:
    if (memory16(_ds, _si) == 0x0000)           //jz short loc_14740
      goto loc_14740;
    _push(memory16(_ds, _si + 10));             //push word ptr [si+0Ah]
    sub_137A9();                                //call sub_137A9
    _si = _pop();                               //pop si
    goto loc_14732;                             //jmp short loc_14732
loc_14740:                                      //loc_14740:
    _ax = memory16(_ds, 0x91B4);                //mov ax, word_316E4
    memory16(_ds, 0x9008) = _ax;                //mov word_31538, ax
    _ax = memory16(_ds, 0x91B6);                //mov ax, word_316E6
    memory16(_ds, 0x9006) = _ax;                //mov word_31536, ax
    _si = 0x91b8;                               //mov si, 91B8h
    _di = 0x9134;                               //mov di, 9134h
    _cx = 0x000e;                               //mov cx, 0Eh
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si = _pop();                               //pop si
}

void sub_14759()
{
    sub_141B1();                                //call sub_141B1
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _bx = memory16(_ds, 0x919E);                //mov bx, word_316CE
    if ((short)_bx >= 0)                        //jns short loc_14769
      goto loc_14769;
    _bx = -_bx;                                 //neg bx
loc_14769:                                      //loc_14769:
    _bx <<= 1;                                  //shl bx, 1
    if (!(memory16(_ds, _si + 34) & 0x0001))    //jz short loc_14775
      goto loc_14775;
    _bx += 0x000e;                              //add bx, 0Eh
loc_14775:                                      //loc_14775:
    _ax = _ax + memory16(_ds, _bx + 12918);     //add ax, [bx+3276h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    if (memory16(_ds, 0x8E80) == 0x0000)        //jz short loc_1478F
      goto loc_1478F;
    return;                                     //retn
loc_1478F:                                      //loc_1478F:
    if ((short)memory16(_ds, _si + 34) < (short)0x0002)
      goto loc_147A2;
loc_1479A:                                      //loc_1479A:
    if (!(memory(_ds, 0x8F59) & 0x02))          //jz short locret_147A1
      goto locret_147A1;
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
locret_147A1:                                   //locret_147A1:
    return;                                     //retn
loc_147A2:                                      //loc_147A2:
    goto loc_1479A;                             //jmp short loc_1479A
}

void loc_147A9()
{
    if (memory16(_ds, 0x991E) != 0x0010)        //jnz short loc_147B6
      goto loc_147B6;
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    return;                                     //retn
loc_147B6:                                      //loc_147B6:
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    sub_10EF5();                                //call sub_10EF5
    _cx = _ax;                                  //mov cx, ax
    _di = _bx;                                  //mov di, bx
    _push(_si);                                 //push si
    _si = 0x9f00;                               //mov si, 9F00h
    sub_10EF5();                                //call sub_10EF5
    _si = _pop();                               //pop si
    _cx -= _ax;                                 //sub cx, ax
    _di -= _bx;                                 //sub di, bx
    _bp = _ax;                                  //mov bp, ax
    _ax = memory16(_ds, 0x991E);                //mov ax, word_31E4E
    //_ax = _cx * _al;                            //imul cx
    _imul(_cx);
    _ax += _bp;                                 //add ax, bp
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x991E);                //mov ax, word_31E4E
    //_ax = _di * _al;                            //imul di
    _imul(_di);
    _ax += _bx;                                 //add ax, bx
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    return;                                     //retn
    _STOP_("word_147E5 dw 0");                  //word_147E5 dw 0
    _STOP_("word_147E7 dw 0");                  //word_147E7 dw 0
}

void sub_147E9()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x304A);                //mov ax, word_2B57A
    memory16(_cs, 0x47E5) = _ax;                //mov cs:word_147E5, ax
{sub_1480B(); return; };                        //
    _ax = memory16(_ds, 0x304A);                //mov ax, word_2B57A
    memory16(_cs, 0x47E7) = _ax;                //mov cs:word_147E7, ax
    _ax = memory16(_cs, 0x47E5);                //mov ax, cs:word_147E5
    memory16(_ds, 0x304A) = _ax;                //mov word_2B57A, ax
    sub_1480B();                                //call sub_1480B
    _ax = memory16(_cs, 0x47E7);                //mov ax, cs:word_147E7
    memory16(_ds, 0x304A) = _ax;                //mov word_2B57A, ax
}

void sub_1480B(int pc)
{
    if (pc == 0x1480e)
        goto loc_1480E;
    
    sub_141B1();                                //call sub_141B1
loc_1480E:                                      //loc_1480E:
    sub_14865();                                //call sub_14865
    if (memory16(_ds, _si) == 0x0004)           //jz short locret_14864
      goto locret_14864;
    if (memory(_ds, _si + 73) == 0x00)          //jz short locret_14864
      goto locret_14864;
    _al = memory(_ds, _si + 73);                //mov al, [si+49h]
loc_1481F:                                      //loc_1481F:
    if (_al < 0x64)                             //jb short loc_14827
      goto loc_14827;
    _al -= 0x64;                                //sub al, 64h
    goto loc_1481F;                             //jmp short loc_1481F
loc_14827:                                      //loc_14827:
    _flags.carry = (memory(_ds, _si + 72) + _al) >= 0x100;
    memory(_ds, _si + 72) += _al;
    if (!_flags.carry)                          //jnb short locret_14864
      goto locret_14864;
    sub_14191();                                //call sub_14191
    _al &= 0x3f;                                //and al, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    if (memory(_ds, _si + 73) >= 0x64)          //jnb short loc_14842
      goto loc_14842;
    sub_14191();                                //call sub_14191
    _ax &= 0x0007;                              //and ax, 7
    goto loc_14852;                             //jmp short loc_14852
loc_14842:                                      //loc_14842:
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    _dx = memory16(_ds, 0x9F16);                //mov dx, word_32446
    _dx = _dx - memory16(_ds, _si + 22);        //sub dx, [si+16h]
    sub_11B90();                                //call sub_11B90
loc_14852:                                      //loc_14852:
    _cx = _ax;                                  //mov cx, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _dx = 0x0006;                               //mov dx, 6
    _bp = memory16(_ds, 0x8E72);                //mov bp, word_313A2
    sub_11ED3();                                //call sub_11ED3
locret_14864:                                   //locret_14864:
    return;
}

void sub_14865()
{
    sub_14871();                                //call sub_14871
    if (memory16(_ds, _si) == 0x0004)           //jz short locret_14870
      goto locret_14870;
{sub_13589(); return; };                        //
locret_14870:                                   //locret_14870:
    return;
}

void sub_14871()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, _si + 66);              //mov ax, [si+42h]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    if (!(_ax & _ax))                           //jz short locret_1489D
      goto locret_1489D;
    if (memory16(_ds, _si + 26) != 0x0000)      //jnz short loc_14884
      goto loc_14884;
    goto loc_1499F;                             //jmp loc_1499F
loc_14884:                                      //loc_14884:
    if ((short)memory16(_ds, _si + 26) >= 0 /*CHECK*/)
      goto loc_1489E;
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    memory16(_ds, 0xFCFE) += _ax;               //add word_3822E, ax
    if ((short)memory16(_ds, 0xFCFE) <= (short)0x0000)
      goto loc_14897;
    goto loc_1499F;                             //jmp loc_1499F
loc_14897:                                      //loc_14897:
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
locret_1489D:                                   //locret_1489D:
    return;                                     //retn
loc_1489E:                                      //loc_1489E:
    _di = 0x6116;                               //mov di, 6116h
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 20);              //mov ax, [si+14h]
    memory16(_ds, 0xFCE4) = _ax;                //mov word_38214, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, _si + 24);              //mov ax, [si+18h]
    memory16(_ds, 0xFCE8) = _ax;                //mov word_38218, ax
    _ax = memory16(_ds, _si + 28);              //mov ax, [si+1Ch]
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    _ax = memory16(_ds, _si + 30);              //mov ax, [si+1Eh]
    memory16(_ds, 0xFCF0) = _ax;                //mov word_38220, ax
    _ax = memory16(_ds, _si + 60);              //mov ax, [si+3Ch]
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_ds, _si + 62);              //mov ax, [si+3Eh]
    memory16(_ds, 0xFCF4) = _ax;                //mov word_38224, ax
    _ax = memory16(_ds, _si + 64);              //mov ax, [si+40h]
    _cwd();                                     //cwd
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    memory16(_ds, 0xFCF8) = _dx;                //mov word_38228, dx
    goto loc_1492D;                             //jmp short loc_1492D
loc_148DE:                                      //loc_148DE:
    _bx = memory16(_ds, 0xFCEE);                //mov bx, word_3821E
    _ah = memory(_cs, _bx + _di);               //mov ah, cs:[bx+di]
    _cwd();                                     //cwd
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = (memory(_ds, 0xFCE9) + _ah) >= 0x100;
    memory(_ds, 0xFCE9) += _ah;
    memory16(_ds, 0xFCE6) = memory16(_ds, 0xFCE6) + _dx + _flags.carry;
    _ah = memory(_cs, _bx + _di + 64);          //mov ah, cs:[bx+di+40h]
    _cwd();                                     //cwd
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = (memory(_ds, 0xFCE5) + _ah) >= 0x100;
    memory(_ds, 0xFCE5) += _ah;
    memory16(_ds, 0xFCE2) = memory16(_ds, 0xFCE2) + _dx + _flags.carry;
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222

    _flags.carry = (memory16(_ds, 0xFCF0) + _ax) >= 0x10000;

    memory16(_ds, 0xFCF0) += _ax;               //add word_38220, ax
    _ax = memory16(_ds, 0xFCF4);                //mov ax, word_38224
    memory16(_ds, 0xFCEE) = memory16(_ds, 0xFCEE) + _ax + _flags.carry;
    memory16(_ds, 0xFCEE) &= 0x00ff;            //and word_3821E, 0FFh
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    
    _flags.carry = (memory16(_ds, 0xFCF3) + _ax) >= 0x10000;
    
    memory16(_ds, 0xFCF2) += _ax;               //add word_38222, ax
    _ax = memory16(_ds, 0xFCF8);                //mov ax, word_38228
    memory16(_ds, 0xFCF4) = memory16(_ds, 0xFCF4) + _ax + _flags.carry;
    
loc_1492D:                                      //loc_1492D:
    memory16(_ds, 0xFCFE) -= 1;                 //dec word_3822E
    if ((short)memory16(_ds, 0xFCFE) < 0)       //js short loc_1496E
      goto loc_1496E;
    memory16(_ds, _si + 26) -= 1;               //dec word ptr [si+1Ah]
    if ((short)memory16(_ds, _si + 26) >= 0)    //jns short loc_148DE
      goto loc_148DE;
    memory16(_ds, 0xFCFE) += 1;                 //inc word_3822E
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE4);                //mov ax, word_38214
    memory16(_ds, _si + 20) = _ax;              //mov [si+14h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, 0xFCE8);                //mov ax, word_38218
    memory16(_ds, _si + 24) = _ax;              //mov [si+18h], ax
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax = memory16(_ds, 0xFCF0);                //mov ax, word_38220
    memory16(_ds, _si + 30) = _ax;              //mov [si+1Eh], ax
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    _ax = memory16(_ds, 0xFCF4);                //mov ax, word_38224
    memory16(_ds, _si + 62) = _ax;              //mov [si+3Eh], ax
    goto loc_1499F;                             //jmp short loc_1499F
loc_1496E:                                      //loc_1496E:
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE4);                //mov ax, word_38214
    memory16(_ds, _si + 20) = _ax;              //mov [si+14h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, 0xFCE8);                //mov ax, word_38218
    memory16(_ds, _si + 24) = _ax;              //mov [si+18h], ax
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax = memory16(_ds, 0xFCF0);                //mov ax, word_38220
    memory16(_ds, _si + 30) = _ax;              //mov [si+1Eh], ax
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    _ax = memory16(_ds, 0xFCF4);                //mov ax, word_38224
    memory16(_ds, _si + 62) = _ax;              //mov [si+3Eh], ax
    return;                                     //retn
loc_1499F:                                      //loc_1499F:
    _di = memory16(_ds, _si + 58);              //mov di, [si+3Ah]
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    switch (_bx)                                //jmp cs:off_149A9[bx]
    {
      case 0: goto loc_149B5;
      case 2: goto loc_14A06;
      case 4: goto loc_14A36;
//      case 6: goto loc_14A4F;
      case 8: goto loc_149F9;
//      case 10: goto loc_149F1;
      default:
        _ASSERT(0);
    }
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  36h");                          //db  36h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db 0F9h");                          //db 0F9h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db 0F1h");                          //db 0F1h
    _STOP_("db  49h");                          //db  49h
loc_149B5:                                      //loc_149B5:
    _ax = memory16(_ds, _si + 54);              //mov ax, [si+36h]
    if (!(_ax & _ax))                           //jz short loc_149D6
      goto loc_149D6;
    _di = 0x8e8c;                               //mov di, 8E8Ch
    _cx = 0x0008;                               //mov cx, 8
loc_149C2:                                      //loc_149C2:
    if (_ax == memory16(_ds, _di))              //jz short loc_149CD
      goto loc_149CD;
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_149C2
      goto loc_149C2;
    goto loc_149D6;                             //jmp short loc_149D6
loc_149CD:                                      //loc_149CD:
    memory16(_ds, _di) = 0x0000;                //mov word ptr [di], 0
    memory16(_ds, _di + 2) = 0x0000;            //mov word ptr [di+2], 0
loc_149D6:                                      //loc_149D6:
    if (memory(_ds, _si + 38) != 0x00)          //jnz short loc_149E0
      goto loc_149E0;
    sub_107C0();                                //call sub_107C0
    return;                                     //retn
loc_149E0:                                      //loc_149E0:
    _di = memory16(_ds, _si + 68);              //mov di, [si+44h]
loc_149E3:                                      //loc_149E3:
    _push(memory16(_ds, _di + 70));             //push word ptr [di+46h]
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _di = _pop();                               //pop di
    if (_di & _di)                              //jnz short loc_149E3
      goto loc_149E3;
    return;

loc_14A06:
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    memory16(_ds, _si + 30) = 0x0000;           //mov word ptr [si+1Eh], 0
    _ax = memory16(_ds, _di + 4);               //mov ax, [di+4]
    _cwd();                                     //cwd
    _dl = _ah;                                  //mov dl, ah
    _ah = _al;                                  //mov ah, al
    _al = _al ^ _al;                            //xor al, al
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    memory16(_ds, _si + 62) = _dx;              //mov [si+3Eh], dx
    _ax = memory16(_ds, _di + 6);               //mov ax, [di+6]
    memory16(_ds, _si + 64) = _ax;              //mov [si+40h], ax
    _ax = memory16(_ds, _di + 8);               //mov ax, [di+8]
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    _di += 0x000a;                              //add di, 0Ah
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    goto loc_1489E;                   //jmp loc_1489E
    
loc_14A36:
        _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
        _di += 0x0004;                              //add di, 4
        memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _flags.carry2 = (short)memory16(_ds, 0xFCFE) <= (short)_ax;
        memory16(_ds, 0xFCFE) -= _ax;               //sub word_3822E, ax
        if (_flags.carry2)                                //jle short loc_14A48
          goto loc_14A48;
        goto loc_1499F;                   //jmp loc_1499F
    loc_14A48:                                      //loc_14A48:
        _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
        memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    return;
    
loc_149F9:
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _di += _ax;                                 //add di, ax
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    goto loc_1499F;                   //jmp short loc_1499F

}

void sub_149F1()
{
    _di += 0x0006;                              //add di, 6
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _STOP_("goto loc_1499F");                   //jmp short loc_1499F
}

void sub_149F9()
{
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _di += _ax;                                 //add di, ax
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _STOP_("goto loc_1499F");                   //jmp short loc_1499F
}

void sub_14A06()
{
    _ASSERT(0);
}

void loc_14A48()
{
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    return;                                     //retn
loc_14A4F:                                      //loc_14A4F:
    sub_14191();                                //call sub_14191
    _ax &= 0x000e;                              //and ax, 0Eh
    _bx = _ax;                                  //mov bx, ax
    _dx = memory16(_ds, _bx + _di + 2);         //mov dx, [bx+di+2]
    if ((short)_dx < 0)                         //js short loc_14A4F
      goto loc_14A4F;
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _di += _dx;                                 //add di, dx
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _STOP_("goto loc_1499F");                   //jmp loc_1499F
}

void sub_14A69()
{
    memory16(_ss, 16) = 0x00c7;                 //mov word ptr ss:byte_447B0+10h, 0C7h
    sub_10BC7();                                //call sub_10BC7
    sub_10D5F();                                //call sub_10D5F
    sub_10C0B();                                //call sub_10C0B
    memory(_ds, 0x3ADE) = 0xff;                 //mov byte_2C00E, 0FFh
    memory(_ds, 0x3ADF) = 0xff;                 //mov byte_2C00F, 0FFh
    memory(_ds, 0x3AE0) = 0x00;                 //mov byte_2C010, 0
    memory16(_ds, 0x3816) = 0x0000;             //mov word_2BD46, 0
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_14A94:                                      //loc_14A94:
    memory16(_ds, _si) = 0xfff7;                //mov word ptr [si], 0FFF7h
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_14A94
      goto loc_14A94;
    memory16(_ds, 0x8F3C) = 0x0030;             //mov word_3146C, 30h
    memory16(_ds, 0x8F3E) = 0x0044;             //mov word_3146E, 44h
    memory16(_ds, 0x8F40) = 0x0000;             //mov word_31470, 0
    memory16(_ds, 0x8F42) = 0x0000;             //mov word_31472, 0
    memory16(_ds, 0x8F44) = 0x0004;             //mov word_31474, 4
    sub_15488();                                //call sub_15488
    memory16(_ds, 0x8F42) = 0x0001;             //mov word_31472, 1
    memory16(_ds, 0x8F44) = 0x0004;             //mov word_31474, 4
    sub_15488();                                //call sub_15488
    sub_1577D();                                //call sub_1577D
    sub_15612();                                //call sub_15612
    sub_10A51();                                //call sub_10A51
    sub_15612();                                //call sub_15612
    sub_10E09();                                //call sub_10E09
    sub_10D81();                                //call sub_10D81
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    sub_14BC7();                                //call sub_14BC7
    memory16(_ds, 0x8E88) = 0x0007;             //mov word_313B8, 7
    sub_14C59();                                //call sub_14C59
    if (memory(_ds, 0x8FB1) == 0x00)            //jz short loc_14AFD
      goto loc_14AFD;
    sub_14E12();                                //call sub_14E12
    goto loc_14B00;                             //jmp short loc_14B00
loc_14AFD:                                      //loc_14AFD:
    sub_15119();                                //call sub_15119
loc_14B00:                                      //loc_14B00:
    sub_1558E();                                //call sub_1558E
    sub_15510();                                //call sub_15510
    sub_1576D();                                //call sub_1576D
    if (memory(_ds, 0x8FB1) == 0x00)            //jz short loc_14B13
      goto loc_14B13;
{loc_14BD4(); return; };                        //
loc_14B13:                                      //loc_14B13:
    _si = 0x3da6;                               //mov si, 3DA6h
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14B3E
      goto loc_14B3E;
    _si = 0x3e82;                               //mov si, 3E82h
    sub_15787();                                //call sub_15787
    _cx = 0x0011;                               //mov cx, 11h
    sub_154FC();                                //call sub_154FC
    sub_1576D();                                //call sub_1576D
    _si = 0x3ea6;                               //mov si, 3EA6h
    sub_15787();                                //call sub_15787
    _cx = 0x0011;                               //mov cx, 11h
    sub_154FC();                                //call sub_154FC
    sub_1576D();                                //call sub_1576D
    _si = 0x3eb9;                               //mov si, 3EB9h
loc_14B3E:                                      //loc_14B3E:
    sub_15787();                                //call sub_15787
    sub_15154();                                //call sub_15154
    sub_155D0();                                //call sub_155D0
    memory(_ds, 0x3ADE) = 0x00;                 //mov byte_2C00E, 0
    memory16(_ds, 0x8F42) = 0x0001;             //mov word_31472, 1
    memory16(_ds, 0x8F44) = 0x0004;             //mov word_31474, 4
    sub_15488();                                //call sub_15488
    sub_14D38();                                //call sub_14D38
    sub_1558E();                                //call sub_1558E
    sub_1576D();                                //call sub_1576D
    _si = 0x3dc4;                               //mov si, 3DC4h
    sub_15787();                                //call sub_15787
    sub_14E78();                                //call sub_14E78
    sub_155D0();                                //call sub_155D0
    memory16(_ds, 0x8E88) = 0x0007;             //mov word_313B8, 7
    sub_14CAD();                                //call sub_14CAD
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    sub_10A51();                                //call sub_10A51
    sub_14BC7();                                //call sub_14BC7
    sub_15612();                                //call sub_15612
    sub_10A51();                                //call sub_10A51
    sub_15612();                                //call sub_15612
loc_14B8E:                                      //loc_14B8E:
    sub_10D5F();                                //call sub_10D5F
    sub_10BE9();                                //call sub_10BE9
    memory16(_ss, 16) = 0x00bf;                 //mov word ptr ss:byte_447B0+10h, 0BFh
    sub_13319();                                //call sub_13319
    sub_135F2();                                //call sub_135F2
    if (memory(_ds, 0x8F61) != 0x00)            //jnz short loc_14BC0
      goto loc_14BC0;
    _ax = memory16(_ds, 0x3048);                //mov ax, word_2B578
loc_14BAB:                                      //loc_14BAB:
//    if (_ax == memory16(_ds, 0x3048))           //jz short loc_14BAB
//      goto loc_14BAB;
    sub_10985();                                //call sub_10985
    sub_1080F();                                //call sub_1080F
    sub_10A51();                                //call sub_10A51
    sub_10E2B();                                //call sub_10E2B
    sub_10D81();                                //call sub_10D81
loc_14BC0:                                      //loc_14BC0:
    memory16(_ds, 0x91B2) = 0x000c;             //mov word_316E2, 0Ch
}

void sub_14BC7()
{
    _ax = memory16(_ds, 0x3046);                //mov ax, word_2B576
    _ax += 0x0009;                              //add ax, 9
//loc_14BCD:                                      //loc_14BCD:
//    if (_ax != memory16(_ds, 0x3046))           //jnz short loc_14BCD
//      goto loc_14BCD;
}

void loc_14BD4()
{
    _si = 0x3796;                               //mov si, 3796h
    sub_15787();                                //call sub_15787
    _cx = 0x001e;                               //mov cx, 1Eh
    sub_14C48();                                //call sub_14C48
    _si = 0x37b1;                               //mov si, 37B1h
    sub_15787();                                //call sub_15787
    _cx = 0x001e;                               //mov cx, 1Eh
    sub_14C48();                                //call sub_14C48
    sub_1576D();                                //call sub_1576D
    _si = 0x37d8;                               //mov si, 37D8h
    sub_15787();                                //call sub_15787
    _cx = 0x0011;                               //mov cx, 11h
    sub_14C48();                                //call sub_14C48
    sub_155D0();                                //call sub_155D0
    memory16(_ds, 0x8E88) = 0x0007;             //mov word_313B8, 7
    sub_14CAD();                                //call sub_14CAD
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    sub_10A51();                                //call sub_10A51
    sub_14BC7();                                //call sub_14BC7
    sub_15612();                                //call sub_15612
    sub_10A51();                                //call sub_10A51
    sub_15612();                                //call sub_15612
    sub_10D5F();                                //call sub_10D5F
    memory16(_ds, 0x8E88) = 0x0000;             //mov word_313B8, 0
    _cx = 0x0096;                               //mov cx, 96h
loc_14C28:                                      //loc_14C28:
    _push(_cx);                                 //push cx
    sub_10C4F();                                //call sub_10C4F
    sub_10A51();                                //call sub_10A51
    sub_10E2B();                                //call sub_10E2B
    sub_10D81();                                //call sub_10D81
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_14C28
      goto loc_14C28;
    sub_10D5F();                                //call sub_10D5F
    _cx = 0x0050;                               //mov cx, 50h
loc_14C3E:                                      //loc_14C3E:
    _push(_cx);                                 //push cx
    sub_10A51();                                //call sub_10A51
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_14C3E
      goto loc_14C3E;
    _STOP_("goto loc_14B8E");                   //jmp loc_14B8E
}

void sub_14C48()
{
loc_14C48:
    _push(_cx);                                 //push cx
    sub_10C93();                                //call sub_10C93
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10A51();                                //call sub_10A51
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop sub_14C48
      goto loc_14C48;
}

void sub_14C59()
{
loc_14C59:
    sub_10A51();                                //call sub_10A51
    if (memory16(_ds, 0x8F3C) == 0x0000)        //jz short loc_14C7C
      goto loc_14C7C;
    memory16(_ds, 0x8F3C) -= 0x0004;            //sub word_3146C, 4
    if ((short)memory16(_ds, 0x8F3C) < 0)       //js short loc_14C6C
      goto loc_14C6C;
    if (memory16(_ds, 0x8F3C) != 0)             //jnz short loc_14C7C
      goto loc_14C7C;
loc_14C6C:                                      //loc_14C6C:
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x01;                                 //mov al, 1
    _interrupt(128);                            //int 80h
    memory16(_ds, 0x8F3C) = 0x0000;             //mov word_3146C, 0
loc_14C7C:                                      //loc_14C7C:
    if (memory16(_ds, 0x8F3E) == 0x0000)        //jz short loc_14C92
      goto loc_14C92;
    memory16(_ds, 0x8F3E) -= 0x0004;            //sub word_3146E, 4
    if (memory16(_ds, 0x8F3E) == 0)             //jz short loc_14C92
      goto loc_14C92;
    if ((short)memory16(_ds, 0x8F3E) >= 0)      //jns short loc_14C92
      goto loc_14C92;
    memory16(_ds, 0x8F3E) = 0x0000;             //mov word_3146E, 0
loc_14C92:                                      //loc_14C92:
    sub_15612();                                //call sub_15612
    sub_14CFA();                                //call sub_14CFA
    sub_14D0D();                                //call sub_14D0D
    if (memory16(_ds, 0x8F3C) != 0x0000)        //jnz short sub_14C59
      goto loc_14C59;
    if (memory16(_ds, 0x8F3E) != 0x0000)        //jnz short sub_14C59
      goto loc_14C59;
    sub_10C71();                                //call sub_10C71
}

void sub_14CAD()
{
    sub_10C71();                                //call sub_10C71
loc_14CB0:                                      //loc_14CB0:
    sub_10A51();                                //call sub_10A51
    if (memory16(_ds, 0x8F3E) == 0x0044)        //jz short loc_14CCC
      goto loc_14CCC;
    memory16(_ds, 0x8F3E) += 0x0004;            //add word_3146E, 4
    if ((short)memory16(_ds, 0x8F3E) <= (short)0x0044)
      goto loc_14CCC;
    memory16(_ds, 0x8F3E) = 0x0044;             //mov word_3146E, 44h
loc_14CCC:                                      //loc_14CCC:
    if (memory16(_ds, 0x8F3C) == 0x0030)        //jz short loc_14CE5
      goto loc_14CE5;
    memory16(_ds, 0x8F3C) += 0x0004;            //add word_3146C, 4
    if ((short)memory16(_ds, 0x8F3C) <= (short)0x0030)
      goto loc_14CE5;
    memory16(_ds, 0x8F3C) = 0x0030;             //mov word_3146C, 30h
loc_14CE5:                                      //loc_14CE5:
    sub_15612();                                //call sub_15612
    sub_14D0D();                                //call sub_14D0D
    sub_14CFA();                                //call sub_14CFA
    if (memory16(_ds, 0x8F3E) != 0x0044)        //jnz short loc_14CB0
      goto loc_14CB0;
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
}

void sub_14CFA()
{
    _dx = 0x0004;                               //mov dx, 4
    _si = 0xb144;                               //mov si, 0B144h
    if (!(memory16(_ds, 0x8F3C) & 0x0004))      //jz short loc_14D1E
    {sub_14D0D(0x14D1E); return;}
    _si = 0xb1ae;                               //mov si, 0B1AEh
    {sub_14D0D(0x14D1E); return;}                   //jmp short loc_14D1E
}

void sub_14D0D(int pc)
{
    if (pc == 0x14D1E)
        goto loc_14D1E;
    
    _dx = 0x006d;                               //mov dx, 6Dh
    _si = 0xb144;                               //mov si, 0B144h
    if (!(memory16(_ds, 0x8F3E) & 0x0004))      //jz short loc_14D1E
      goto loc_14D1E;
    _si = 0xb1ae;                               //mov si, 0B1AEh
loc_14D1E:                                      //loc_14D1E:
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _cx = 0x00e2;                               //mov cx, 0E2h
    sub_10C2D();                                //call sub_10C2D
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _cx = 0x0102;                               //mov cx, 102h
    sub_10C2D();                                //call sub_10C2D
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = 0x0122;                               //mov cx, 122h
{sub_10C2D(); return; };                        //
}

void sub_14D38()
{
    _bx = memory16(_ds, 0x3816);                //mov bx, word_2BD46
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 14544);           //mov ax, [bx+38D0h]
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14D4B
      goto loc_14D4B;
    _ax >>= 1;                                  //shr ax, 1
loc_14D4B:                                      //loc_14D4B:
    _cwd();                                     //cwd
    if ((short)_dx < (short)memory16(_ds, 0x915C))//jl short loc_14D60
      goto loc_14D60;
    if (_dx != memory16(_ds, 0x915C))           //jnz short loc_14D5A
      goto loc_14D5A;
    if (_ax <= memory16(_ds, 0x915A))           //jbe short loc_14D60
      goto loc_14D60;
loc_14D5A:                                      //loc_14D5A:
    memory16(_ds, 0x3816) = 0x0000;             //mov word_2BD46, 0
loc_14D60:                                      //loc_14D60:
    _si = 0x3cb6;                               //mov si, 3CB6h
    _bp = memory16(_ds, 0x3816);                //mov bp, word_2BD46
    _bp += 0x0002;                              //add bp, 2
    _bx = _bp;                                  //mov bx, bp
    _bx -= 1;                                   //dec bx
    _bx <<= 1;                                  //shl bx, 1
    _di = 0x38d0;                               //mov di, 38D0h
    _di += _bx;                                 //add di, bx
    _bx += 0x389a;                              //add bx, 389Ah
loc_14D78:                                      //loc_14D78:
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14D83
      goto loc_14D83;
    _ax >>= 1;                                  //shr ax, 1
loc_14D83:                                      //loc_14D83:
    if ((short)_ax > (short)memory16(_ds, 0x8F4A))//jg short loc_14DA2
      goto loc_14DA2;
    _cwd();                                     //cwd
    if ((short)_dx > (short)memory16(_ds, 0x915C))//jg short loc_14DA2
      goto loc_14DA2;
    if (_dx != memory16(_ds, 0x915C))           //jnz short loc_14D98
      goto loc_14D98;
    if (_ax > memory16(_ds, 0x915A))            //ja short loc_14DA2
      goto loc_14DA2;
loc_14D98:                                      //loc_14D98:
    memory16(_ds, _si + 6) = _bp;               //mov [si+6], bp
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, _si + 8) = _ax;               //mov [si+8], ax
    goto loc_14DAC;                             //jmp short loc_14DAC
loc_14DA2:                                      //loc_14DA2:
    memory16(_ds, _si + 6) = 0x001a;            //mov word ptr [si+6], 1Ah
    memory16(_ds, _si + 8) = 0x3ae8;            //mov word ptr [si+8], 3AE8h
loc_14DAC:                                      //loc_14DAC:
    _bp += 1;                                   //inc bp
    _di += 0x0002;                              //add di, 2
    _bx += 0x0002;                              //add bx, 2
    _si += 0x000c;                              //add si, 0Ch
    if (_bp == 0x001a)                          //jz short loc_14DF5
      goto loc_14DF5;
    if ((short)_si < (short)0x3d9a)             //jl short loc_14D78
      goto loc_14D78;
    if ((short)_si > (short)0x3d9a)             //jg short locret_14E11
      goto locret_14E11;
    if (memory16(_ds, 0x3816) != 0x0000)        //jnz short loc_14DEA
      goto loc_14DEA;
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14DD5
      goto loc_14DD5;
    _ax >>= 1;                                  //shr ax, 1
loc_14DD5:                                      //loc_14DD5:
    if ((short)_ax > (short)memory16(_ds, 0x8F4A))//jg short loc_14DA2
      goto loc_14DA2;
    _cwd();                                     //cwd
    if ((short)_dx > (short)memory16(_ds, 0x915C))//jg short loc_14DA2
      goto loc_14DA2;
    if (_dx != memory16(_ds, 0x915C))           //jnz short loc_14DEA
      goto loc_14DEA;
    if (_ax > memory16(_ds, 0x915A))            //ja short loc_14DA2
      goto loc_14DA2;
loc_14DEA:                                      //loc_14DEA:
    memory16(_ds, _si + 6) = 0x001b;            //mov word ptr [si+6], 1Bh
    memory16(_ds, _si + 8) = 0x3ae2;            //mov word ptr [si+8], 3AE2h
    return;                                     //retn
loc_14DF5:                                      //loc_14DF5:
    if (_si == 0x3d9a)                          //jz short loc_14E05
      goto loc_14E05;
    memory16(_ds, _si + 6) = 0x0000;            //mov word ptr [si+6], 0
    _si += 0x000c;                              //add si, 0Ch
    goto loc_14DF5;                             //jmp short loc_14DF5
loc_14E05:                                      //loc_14E05:
    if (memory16(_ds, 0x3816) != 0x0000)        //jnz short loc_14DEA
      goto loc_14DEA;
    memory16(_ds, _si + 6) = 0x0000;            //mov word ptr [si+6], 0
locret_14E11:                                   //locret_14E11:
    return;
}

void sub_14E12()
{
    _si = 0x3cb6;                               //mov si, 3CB6h
loc_14E15:                                      //loc_14E15:
    memory16(_ds, _si + 6) = 0x001a;            //mov word ptr [si+6], 1Ah
    memory16(_ds, _si + 8) = 0x3ae8;            //mov word ptr [si+8], 3AE8h
    _si += 0x000c;                              //add si, 0Ch
    if ((short)_si < (short)0x3d9a)             //jl short loc_14E15
      goto loc_14E15;
}

void sub_14E29()
{
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_14E2F:                                      //loc_14E2F:
    _ax = memory16(_ds, _si + 6);               //mov ax, [si+6]
    if (!(_ax & _ax))                           //jz short loc_14E72
      goto loc_14E72;
    if (_ax != 0x001b)                          //jnz short loc_14E43
      goto loc_14E43;
    if (memory16(_ds, _si - 6) == 0x001a)       //jz short loc_14E68
      goto loc_14E68;
    goto loc_14E72;                             //jmp short loc_14E72
loc_14E43:                                      //loc_14E43:
    if ((short)_ax >= (short)0x001a)            //jge short loc_14E72
      goto loc_14E72;
    _bx = _ax;                                  //mov bx, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 14542);           //mov ax, [bx+38CEh]
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_14E59
      goto loc_14E59;
    _ax >>= 1;                                  //shr ax, 1
loc_14E59:                                      //loc_14E59:
    _cwd();                                     //cwd
    if ((short)_dx < (short)memory16(_ds, 0x915C))//jl short loc_14E72
      goto loc_14E72;
    if (_dx != memory16(_ds, 0x915C))           //jnz short loc_14E68
      goto loc_14E68;
    if (_ax <= memory16(_ds, 0x915A))           //jbe short loc_14E72
      goto loc_14E72;
loc_14E68:                                      //loc_14E68:
    memory16(_ds, _si + 6) = 0x001a;            //mov word ptr [si+6], 1Ah
    memory16(_ds, _si + 8) = 0x3ae8;            //mov word ptr [si+8], 3AE8h
loc_14E72:                                      //loc_14E72:
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_14E2F
      goto loc_14E2F;
}

void sub_14E78()
{
    memory16(_ds, 0x8F42) = 0x0000;             //mov word_31472, 0
    memory16(_ds, 0x8F44) = 0x0000;             //mov word_31474, 0
    memory16(_ds, 0x3818) = 0xffff;             //mov word_2BD48, 0FFFFh
    sub_15435();                                //call sub_15435
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
loc_14E93:                                      //loc_14E93:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    sub_15369();                                //call sub_15369
    if (memory16(_ds, 0x8F44) == 0x0004)        //jz short loc_14F20
      goto loc_14F20;
    _ax = memory16(_ds, 0x8F42);                //mov ax, word_31472
    _bx = memory16(_ds, 0x8F44);                //mov bx, word_31474
    if (_ax != memory16(_ds, 0x3818))           //jnz short loc_14EB5
      goto loc_14EB5;
    if (_bx == memory16(_ds, 0x381A))           //jz short loc_14F27
      goto loc_14F27;
loc_14EB5:                                      //loc_14EB5:
    _dx = _bx;                                  //mov dx, bx
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx += _dx;                                 //add bx, dx
    _ax += _bx;                                 //add ax, bx
    _bx = 0x000c;                               //mov bx, 0Ch
    _ax = _bx * _al;                            //mul bx
    _si = 0x3cb6;                               //mov si, 3CB6h
    _si += _ax;                                 //add si, ax
    _ax = memory16(_ds, _si + 6);               //mov ax, [si+6]
    if (!(_ax & _ax))                           //jz short loc_14E93
      goto loc_14E93;
    if (_ax == 0x001a)                          //jz short loc_14EF3
      goto loc_14EF3;
    if (_ax == 0x001b)                          //jz short loc_14F04
      goto loc_14F04;
    _ax = memory16(_ds, 0x8F42);                //mov ax, word_31472
    memory16(_ds, 0x3818) = _ax;                //mov word_2BD48, ax
    _ax = memory16(_ds, 0x8F44);                //mov ax, word_31474
    memory16(_ds, 0x381A) = _ax;                //mov word_2BD4A, ax
    _push(_si);                                 //push si
    _ax = memory16(_ds, _si + 6);               //mov ax, [si+6]
    sub_15319();                                //call sub_15319
    _si = _pop();                               //pop si
    sub_1521A();                                //call sub_1521A
    goto loc_14E93;                             //jmp short loc_14E93
loc_14EF3:                                      //loc_14EF3:
    sub_1576D();                                //call sub_1576D
    _si = 0x392b;                               //mov si, 392Bh
    sub_15787();                                //call sub_15787
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
    goto loc_14E93;                             //jmp short loc_14E93
loc_14F04:                                      //loc_14F04:
    _ax = memory16(_ds, 0x3816);                //mov ax, word_2BD46
    _ax += 0x0013;                              //add ax, 13h
    if ((short)_ax < (short)0x0019)             //jl short loc_14F11
      goto loc_14F11;
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_14F11:                                      //loc_14F11:
    memory16(_ds, 0x3816) = _ax;                //mov word_2BD46, ax
    sub_14D38();                                //call sub_14D38
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
    goto loc_14E93;                             //jmp loc_14E93
loc_14F20:                                      //loc_14F20:
    if (memory16(_ds, 0x8F42) == 0x0000)        //jz short loc_14F92
      goto loc_14F92;
loc_14F27:                                      //loc_14F27:
    memory16(_ds, 0x3818) = 0xffff;             //mov word_2BD48, 0FFFFh
    if ((short)memory16(_ds, 0x39B2) >= 0 /*CHECK*/)//jns short loc_14F37
      goto loc_14F37;
    goto loc_14E93;                             //jmp loc_14E93
loc_14F37:                                      //loc_14F37:
    sub_14FE3();                                //call sub_14FE3
    if (_flags.zero)                                //jz short loc_14F80
      goto loc_14F80;
    sub_1576D();                                //call sub_1576D
    _si = 0x3952;                               //mov si, 3952h
    sub_15787();                                //call sub_15787
    _ax = memory16(_ds, 0x39B2);                //mov ax, word_2BEE2
    _cwd();                                     //cwd
    _flags.carry = memory16(_ds, 0x915A) < _ax; //sub word_3168A, ax
    memory16(_ds, 0x915A) -= _ax;
    memory16(_ds, 0x915C) -= _dx + _flags.carry;//sbb word_3168C, dx
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    _bx = memory16(_ds, _si + 6);               //mov bx, [si+6]
    _bx <<= 1;                                  //shl bx, 1
    _indirectCall(_ds, _bx + 14362);            //call word ptr [bx+381Ah]
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
    sub_1577D();                                //call sub_1577D
    sub_14E29();                                //call sub_14E29
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    if (memory16(_ds, _si + 6) != 0x0002)       //jnz short loc_14F77
      goto loc_14F77;
    goto loc_14E93;                             //jmp loc_14E93
loc_14F77:                                      //loc_14F77:
    _si = 0x3967;                               //mov si, 3967h
    sub_15787();                                //call sub_15787
    goto loc_14E93;                             //jmp loc_14E93
loc_14F80:                                      //loc_14F80:
    sub_1576D();                                //call sub_1576D
    _si = 0x3902;                               //mov si, 3902h
    sub_15787();                                //call sub_15787
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
    goto loc_14E93;                             //jmp loc_14E93
loc_14F92:                                      //loc_14F92:
    sub_15488();                                //call sub_15488
}

void loc_14FC6()
{
    _bx = _ax;                                  //mov bx, ax
    _bx >>= 1;                                  //shr bx, 1
    _si = memory16(_ds, _bx + 16086);           //mov si, [bx+3ED6h]
    sub_15787();                                //call sub_15787
    memory(_ds, 0x3AE0) = 0x00;                 //mov byte_2C010, 0
    return;                                     //retn
    memory16(_ds, 0x9150) = 0x00dc;             //mov word_31680, 0DCh
    return;                                     //retn
    memory16(_ds, 0x918A) += 1;                 //inc word_316BA
}

void sub_14FE3()
{
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    _bx = memory16(_ds, _si + 6);               //mov bx, [si+6]
    if (_bx != 0x0003)                          //jnz short loc_14FF2
      goto loc_14FF2;
    goto loc_150B4;                             //jmp loc_150B4
loc_14FF2:                                      //loc_14FF2:
    if (_bx != 0x0004)                          //jnz short loc_14FFA
      goto loc_14FFA;
    goto loc_150BD;                             //jmp loc_150BD
loc_14FFA:                                      //loc_14FFA:
    if (_bx != 0x0007)                          //jnz short loc_15002
      goto loc_15002;
    goto loc_150BD;                             //jmp loc_150BD
loc_15002:                                      //loc_15002:
    if (_bx != 0x0005)                          //jnz short loc_1500A
      goto loc_1500A;
    goto loc_150C6;                             //jmp loc_150C6
loc_1500A:                                      //loc_1500A:
    if (_bx != 0x0006)                          //jnz short loc_15012
      goto loc_15012;
    goto loc_150CF;                             //jmp loc_150CF
loc_15012:                                      //loc_15012:
    if (_bx != 0x000c)                          //jnz short loc_1501A
      goto loc_1501A;
    goto loc_150D8;                             //jmp loc_150D8
loc_1501A:                                      //loc_1501A:
    if (_bx != 0x0010)                          //jnz short loc_15022
      goto loc_15022;
    goto loc_150F5;                             //jmp loc_150F5
loc_15022:                                      //loc_15022:
    if (_bx != 0x0016)                          //jnz short loc_1502A
      goto loc_1502A;
    goto loc_150FE;                             //jmp loc_150FE
loc_1502A:                                      //loc_1502A:
    if (_bx != 0x0018)                          //jnz short loc_15032
      goto loc_15032;
    goto loc_15107;                             //jmp loc_15107
loc_15032:                                      //loc_15032:
    if (_bx != 0x0019)                          //jnz short loc_1503A
      goto loc_1503A;
    goto loc_15110;                             //jmp loc_15110
loc_1503A:                                      //loc_1503A:
    _al = memory(_ds, _bx + 14413);             //mov al, [bx+384Dh]
    if (_al & 0x01)                             //jnz short loc_1508E
      goto loc_1508E;
    if (_al & 0x02)                             //jnz short loc_150A8
      goto loc_150A8;
    if (_al & 0x04)                             //jnz short loc_15074
      goto loc_15074;
    if (!(_al & 0x10))                          //jz short loc_1505E
      goto loc_1505E;
    if (memory16(_ds, 0x914C) == 0x0000)        //jz short loc_150B0
      goto loc_150B0;
    if (memory16(_ds, 0x9148) == 0x0000)        //jz short loc_150B0
      goto loc_150B0;
    goto loc_150AD;                             //jmp short loc_150AD
loc_1505E:                                      //loc_1505E:
    if (!(_al & 0x08))                          //jz short loc_150B0
      goto loc_150B0;
    if (memory16(_ds, 0x914C) == 0x0000)        //jz short loc_150B0
      goto loc_150B0;
    _di = memory16(_ds, 0x914E);                //mov di, word_3167E
    if (_bx == memory16(_ds, _di + 54))         //jz short loc_15084
      goto loc_15084;
    goto loc_150AD;                             //jmp short loc_150AD
loc_15074:                                      //loc_15074:
    if (memory16(_ds, 0x9148) == 0x0000)        //jz short loc_150B0
      goto loc_150B0;
    _di = memory16(_ds, 0x914A);                //mov di, word_3167A
    if (_bx != memory16(_ds, _di + 54))         //jnz short loc_150AD
      goto loc_150AD;
loc_15084:                                      //loc_15084:
    _ax = memory16(_ds, _di + 52);              //mov ax, [di+34h]
    if (_ax != memory16(_ds, _di + 36))         //jnz short loc_150B0
      goto loc_150B0;
    goto loc_150AD;                             //jmp short loc_150AD
loc_1508E:                                      //loc_1508E:
    _di = memory16(_ds, 0x9136);                //mov di, word_31666
    if (_bx == memory16(_ds, _di + 54))         //jz short loc_15084
      goto loc_15084;
    if (memory16(_ds, 0x9134) == 0x0000)        //jz short loc_150B0
      goto loc_150B0;
    if (memory16(_ds, 0x9134) == 0x0094)        //jz short loc_150B0
      goto loc_150B0;
    goto loc_150AD;                             //jmp short loc_150AD
loc_150A8:                                      //loc_150A8:
    sub_1100E();                                //call sub_1100E
    if (_FIXME_)                                //jz short loc_150B0
      goto loc_150B0;
loc_150AD:                                      //loc_150AD:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
    return;                                     //retn
loc_150B0:                                      //loc_150B0:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    _flags.zero = false;
    return;                                     //retn
loc_150B4:                                      //loc_150B4:
    if (memory16(_ds, 0x915E) == 0x0002)        //jz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_150BD:                                      //loc_150BD:
    if (memory16(_ds, 0x9186) == 0x0027)        //jz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_150C6:                                      //loc_150C6:
    if (memory16(_ds, 0x9132) == 0x0003)        //jz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_150CF:                                      //loc_150CF:
    if (memory16(_ds, 0x9162) != 0x0000)        //jnz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_150D8:                                      //loc_150D8:
    _di = 0x9134;                               //mov di, 9134h
    _cx = 0x0007;                               //mov cx, 7
loc_150DE:                                      //loc_150DE:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_150EE
      goto loc_150EE;
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _ax = memory16(_ds, _bx + 52);              //mov ax, [bx+34h]
    if (_ax != memory16(_ds, _bx + 36))         //jnz short loc_150B0
      goto loc_150B0;
loc_150EE:                                      //loc_150EE:
    _di += 0x0006;                              //add di, 6
    if (--_cx)                                  //loop loc_150DE
      goto loc_150DE;
    goto loc_150AD;                             //jmp short loc_150AD
loc_150F5:                                      //loc_150F5:
    if (memory16(_ds, 0x9160) != 0x0000)        //jnz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_150FE:                                      //loc_150FE:
    if (memory16(_ds, 0x918A) == 0x0009)        //jz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_15107:                                      //loc_15107:
    if (memory(_ds, 0x9223) != 0x00)            //jnz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
loc_15110:                                      //loc_15110:
    if (memory16(_ds, 0x9150) != 0x0000)        //jnz short loc_150AD
      goto loc_150AD;
    goto loc_150B0;                             //jmp short loc_150B0
}

void sub_15119()
{
    _si = 0x3cb6;                               //mov si, 3CB6h
    _di = memory16(_ds, 0x9008);                //mov di, word_31538
loc_15120:                                      //loc_15120:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_15145
      goto loc_15145;
    if (memory16(_ds, _di) == 0x0094)           //jz short loc_15140
      goto loc_15140;
    _bx = memory16(_ds, _di + 54);              //mov bx, [di+36h]
    memory16(_ds, _si + 6) = _bx;               //mov [si+6], bx
    memory16(_ds, _si + 10) = _di;              //mov [si+0Ah], di
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 14488);           //mov ax, [bx+3898h]
    memory16(_ds, _si + 8) = _ax;               //mov [si+8], ax
    _si += 0x000c;                              //add si, 0Ch
loc_15140:                                      //loc_15140:
    _di = memory16(_ds, _di + 10);              //mov di, [di+0Ah]
    goto loc_15120;                             //jmp short loc_15120
loc_15145:                                      //loc_15145:
    memory16(_ds, _si + 6) = 0x0000;            //mov word ptr [si+6], 0
    _si += 0x000c;                              //add si, 0Ch
    if ((short)_si <= (short)0x3d9a)            //jle short loc_15145
      goto loc_15145;
}

void sub_15154()
{
    memory16(_ds, 0x8F42) = 0x0000;             //mov word_31472, 0
    memory16(_ds, 0x8F44) = 0x0000;             //mov word_31474, 0
    memory16(_ds, 0x3818) = 0xffff;             //mov word_2BD48, 0FFFFh
    sub_15435();                                //call sub_15435
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
loc_1516F:                                      //loc_1516F:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    sub_15369();                                //call sub_15369
    if (memory16(_ds, 0x8F44) == 0x0004)        //jz short loc_151D5
      goto loc_151D5;
    _ax = memory16(_ds, 0x8F42);                //mov ax, word_31472
    _bx = memory16(_ds, 0x8F44);                //mov bx, word_31474
    if (_ax != memory16(_ds, 0x3818))           //jnz short loc_15191
      goto loc_15191;
    if (_bx == memory16(_ds, 0x381A))           //jz short loc_151DC
      goto loc_151DC;
loc_15191:                                      //loc_15191:
    _dx = _bx;                                  //mov dx, bx
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx += _dx;                                 //add bx, dx
    _ax += _bx;                                 //add ax, bx
    _bx = 0x000c;                               //mov bx, 0Ch
    _ax = _bx * _al;                            //mul bx
    _si = 0x3cb6;                               //mov si, 3CB6h
    _si += _ax;                                 //add si, ax
    _ax = memory16(_ds, _si + 6);               //mov ax, [si+6]
    if (!(_ax & _ax))                           //jz short loc_1516F
      goto loc_1516F;
    _ax = memory16(_ds, 0x8F42);                //mov ax, word_31472
    memory16(_ds, 0x3818) = _ax;                //mov word_2BD48, ax
    _ax = memory16(_ds, 0x8F44);                //mov ax, word_31474
    memory16(_ds, 0x381A) = _ax;                //mov word_2BD4A, ax
    _push(_si);                                 //push si
    _ax = memory16(_ds, _si + 6);               //mov ax, [si+6]
    _si = memory16(_ds, _si + 10);              //mov si, [si+0Ah]
    memory(_ds, 0x3AE1) = 0xff;                 //mov byte_2C011, 0FFh
    _bx = memory16(_ds, _si + 52);              //mov bx, [si+34h]
    sub_15319();                                //call sub_15319
    _si = _pop();                               //pop si
    sub_15240();                                //call sub_15240
    memory(_ds, 0x3AE1) = 0x00;                 //mov byte_2C011, 0
    goto loc_1516F;                             //jmp short loc_1516F
loc_151D5:                                      //loc_151D5:
    if (memory16(_ds, 0x8F42) == 0x0000)        //jz short loc_15216
      goto loc_15216;
loc_151DC:                                      //loc_151DC:
    memory16(_ds, 0x3818) = 0xffff;             //mov word_2BD48, 0FFFFh
    _ax = memory16(_ds, 0x39B2);                //mov ax, word_2BEE2
    if ((short)_ax < 0)                         //js short loc_1516F
      goto loc_1516F;
    _cwd();                                     //cwd
    _flags.carry = (memory16(_ds, 0x915A) + _ax) >= 0x10000;
    memory16(_ds, 0x915A) += _ax;
    memory16(_ds, 0x915C) = memory16(_ds, 0x915C) + _dx + _flags.carry;
    memory16(_ds, 0x39B2) = 0xffff;             //mov word_2BEE2, 0FFFFh
    sub_1577D();                                //call sub_1577D
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    memory16(_ds, _si + 6) = 0x0000;            //mov word ptr [si+6], 0
    _si = memory16(_ds, _si + 10);              //mov si, [si+0Ah]
    sub_13788();                                //call sub_13788
    sub_1576D();                                //call sub_1576D
    _si = 0x3980;                               //mov si, 3980h
    sub_15787();                                //call sub_15787
    goto loc_1516F;                             //jmp loc_1516F
loc_15216:                                      //loc_15216:
    sub_15488();                                //call sub_15488
}

void sub_1521A()
{
    memory16(_ds, 0x39B4) = _si;                //mov word_2BEE4, si
    _si = 0x3ac2;                               //mov si, 3AC2h
    sub_15787();                                //call sub_15787
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    _bx = memory16(_ds, _si + 6);               //mov bx, [si+6]
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 14542);           //mov ax, [bx+38CEh]
    if (memory16(_ds, 0x991C) != 0x0005)        //jnz short loc_1523A
      goto loc_1523A;
    _ax >>= 1;                                  //shr ax, 1
loc_1523A:                                      //loc_1523A:
    memory16(_ds, 0x39B2) = _ax;                //mov word_2BEE2, ax
{sub_157FA(); return; };                        //
}

void sub_15240()
{
    memory16(_ds, 0x39B4) = _si;                //mov word_2BEE4, si
    memory16(_ds, 0x3C9A) = 0x00f7;             //mov word_2C1CA, 0F7h
    memory16(_ds, 0x3C9C) = 0x0078;             //mov word_2C1CC, 78h
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
loc_15256:                                      //loc_15256:
    sub_10A51();                                //call sub_10A51
    sub_10C93();                                //call sub_10C93
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_154DB();                                //call sub_154DB
    memory16(_ds, 0x3C9C) -= 0x0002;            //sub word_2C1CC, 2
    if ((short)memory16(_ds, 0x3C9C) > (short)0x0068)//jg short loc_15256
      goto loc_15256;
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf470;             //mov word_2C1CE, 0F470h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf990;             //mov word_2C1CE, 0F990h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf470;             //mov word_2C1CE, 0F470h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf990;             //mov word_2C1CE, 0F990h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
    _cx = 0x0003;                               //mov cx, 3
    sub_154FC();                                //call sub_154FC
loc_152D7:                                      //loc_152D7:
    sub_10A51();                                //call sub_10A51
    sub_10C93();                                //call sub_10C93
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_154DB();                                //call sub_154DB
    memory16(_ds, 0x3C9C) += 0x0002;            //add word_2C1CC, 2
    if ((short)memory16(_ds, 0x3C9C) < (short)0x0080)//jl short loc_152D7
      goto loc_152D7;
    _si = 0x3ab4;                               //mov si, 3AB4h
    sub_15787();                                //call sub_15787
    _si = memory16(_ds, 0x39B4);                //mov si, word_2BEE4
    _bx = memory16(_ds, _si + 6);               //mov bx, [si+6]
    _bx <<= 1;                                  //shl bx, 1
    _bx = memory16(_ds, _bx + 14542);           //mov bx, [bx+38CEh]
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    _ax = 0x07d0;                               //mov ax, 7D0h
    _ax = memory16(_ds, _di + 52) * _al;        //mul word ptr [di+34h]
    _ax += _bx;                                 //add ax, bx
    _ax >>= 1;                                  //shr ax, 1
    memory16(_ds, 0x39B2) = _ax;                //mov word_2BEE2, ax
{sub_157FA(); return; };                        //
}

void sub_15319()
{
    _push(_bx);                                 //push bx
    _push(_ax);                                 //push ax
    sub_1576D();                                //call sub_1576D
    _bx = _pop();                               //pop bx
    _push(_bx);                                 //push bx
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 14438);           //mov si, [bx+3866h]
    sub_15787();                                //call sub_15787
    _ax = _pop();                               //pop ax
    _bx = _pop();                               //pop bx
    if (memory(_ds, 0x3ADE) == 0x00)            //jz short locret_15368
      goto locret_15368;
    if (_ax == 0x0001)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x0013)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x0012)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x0008)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x000a)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x000e)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x0009)                          //jz short loc_1535C
      goto loc_1535C;
    if (_ax == 0x000d)                          //jz short loc_1535C
      goto loc_1535C;
    goto locret_15368;                          //jmp short locret_15368
loc_1535C:                                      //loc_1535C:
    _push(_bx);                                 //push bx
    _si = 0x3ad4;                               //mov si, 3AD4h
    sub_15787();                                //call sub_15787
    _ax = _pop();                               //pop ax
    _ax += 1;                                   //inc ax
    sub_157FA();                                //call sub_157FA
locret_15368:                                   //locret_15368:
    return;
}

void sub_15369()
{
loc_15369:
    if (memory16(_ds, 0x3ADC) == 0x0000)        //jz short loc_15377
      goto loc_15377;
    memory16(_ds, 0x3ADC) -= 1;                 //dec word_2C00C
    goto loc_15416;                             //jmp loc_15416
loc_15377:                                      //loc_15377:
    if (memory(_ds, 0x8F5B) == 0x00)            //jz short loc_15381
      goto loc_15381;
    goto loc_15429;                             //jmp loc_15429
loc_15381:                                      //loc_15381:
    if (memory(_ds, 0x8F59) != 0x00)            //jnz short loc_1538B
      goto loc_1538B;
    goto loc_15416;                             //jmp loc_15416
loc_1538B:                                      //loc_1538B:
    memory16(_ds, 0x8E88) = 0x0008;             //mov word_313B8, 8
    memory16(_ds, 0x3ADC) = 0x0004;             //mov word_2C00C, 4
    sub_15488();                                //call sub_15488
    if (!(memory(_ds, 0x8F59) & 0x04))          //jz short loc_153C5
      goto loc_153C5;
    if (memory16(_ds, 0x8F44) != 0x0004)        //jnz short loc_153B7
      goto loc_153B7;
loc_153A8:                                      //loc_153A8:
    _ax = _ax ^ _ax;                            //xor ax, ax
    if (memory16(_ds, 0x8F42) != 0x0000)        //jnz short loc_153B2
      goto loc_153B2;
    _ax += 1;                                   //inc ax
loc_153B2:                                      //loc_153B2:
    memory16(_ds, 0x8F42) = _ax;                //mov word_31472, ax
    goto loc_15413;                             //jmp short loc_15413
loc_153B7:                                      //loc_153B7:
    memory16(_ds, 0x8F42) -= 1;                 //dec word_31472
    if ((short)memory16(_ds, 0x8F42) >= 0)      //jns short loc_15413
      goto loc_15413;
    memory16(_ds, 0x8F42) = 0x0004;             //mov word_31472, 4
    goto loc_15413;                             //jmp short loc_15413
loc_153C5:                                      //loc_153C5:
    if (!(memory(_ds, 0x8F59) & 0x08))          //jz short loc_153E6
      goto loc_153E6;
    if (memory16(_ds, 0x8F44) == 0x0004)        //jz short loc_153A8
      goto loc_153A8;
    memory16(_ds, 0x8F42) += 1;                 //inc word_31472
    if ((short)memory16(_ds, 0x8F42) <= (short)0x0004)
      goto loc_15413;
    memory16(_ds, 0x8F42) = 0x0000;             //mov word_31472, 0
    goto loc_15413;                             //jmp short loc_15413
loc_153E6:                                      //loc_153E6:
    if (!(memory(_ds, 0x8F59) & 0x01))          //jz short loc_153FB
      goto loc_153FB;
    memory16(_ds, 0x8F44) -= 1;                 //dec word_31474
    if ((short)memory16(_ds, 0x8F44) >= 0)      //jns short loc_15413
      goto loc_15413;
    memory16(_ds, 0x8F44) = 0x0004;             //mov word_31474, 4
    goto loc_15413;                             //jmp short loc_15413
loc_153FB:                                      //loc_153FB:
    if (!(memory(_ds, 0x8F59) & 0x02))          //jz short loc_15413
      goto loc_15413;
    memory16(_ds, 0x8F44) += 1;                 //inc word_31474
    if ((short)memory16(_ds, 0x8F44) <= (short)0x0004)
      goto loc_15413;
    memory16(_ds, 0x8F44) = 0x0000;             //mov word_31474, 0
loc_15413:                                      //loc_15413:
    sub_15435();                                //call sub_15435
loc_15416:                                      //loc_15416:
    sub_10C93();                                //call sub_10C93
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10A51();                                //call sub_10A51
    memory16(_ds, 0x919C) += 1;                 //inc word_316CC
    goto loc_15369;                             //jmp sub_15369
loc_15429:                                      //loc_15429:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    memory16(_ds, 0x8E88) = 0x0009;             //mov word_313B8, 9
}

void sub_15435()
{
    _bx = memory16(_ds, 0x8F44);                //mov bx, word_31474
    if (_bx == 0x0004)                          //jz short loc_15465
      goto loc_15465;
    _bp = _bx;                                  //mov bp, bx
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx += _bp;                                 //add bx, bp
    _bx = _bx + memory16(_ds, 0x8F42);          //add bx, word_31472
    _ax = 0x000c;                               //mov ax, 0Ch
    _ax = _bx * _al;                            //mul bx
    _bx = _ax;                                  //mov bx, ax
    _cx = memory16(_ds, _bx + 15544);           //mov cx, [bx+3CB8h]
    _dx = memory16(_ds, _bx + 15546);           //mov dx, [bx+3CBAh]
    _cx += 0x000a;                              //add cx, 0Ah
    _dx += 0x001f;                              //add dx, 1Fh
    _si = 0xb282;                               //mov si, 0B282h
{sub_10C2D(); return; };                        //
loc_15465:                                      //loc_15465:
    _cx = 0x0004;                               //mov cx, 4
    _si = 0xdde0;                               //mov si, 0DDE0h
    if (memory16(_ds, 0x8F42) == 0x0000)        //jz short loc_15482
      goto loc_15482;
    _cx = 0x002d;                               //mov cx, 2Dh
    _si = 0xe1e8;                               //mov si, 0E1E8h
    if (memory(_ds, 0x3ADE) != 0x00)            //jnz short loc_15482
      goto loc_15482;
    _si = 0xdfe4;                               //mov si, 0DFE4h
loc_15482:                                      //loc_15482:
    _dx = 0x00a8;                               //mov dx, 0A8h
{sub_10C2D(); return; };                        //
}

void sub_15488()
{
    _bx = memory16(_ds, 0x8F44);                //mov bx, word_31474
    if (_bx == 0x0004)                          //jz short loc_154B8
      goto loc_154B8;
    _ax = _bx;                                  //mov ax, bx
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx += _ax;                                 //add bx, ax
    _bx = _bx + memory16(_ds, 0x8F42);          //add bx, word_31472
    _ax = 0x000c;                               //mov ax, 0Ch
    _ax = _bx * _al;                            //mul bx
    _bx = _ax;                                  //mov bx, ax
    _cx = memory16(_ds, _bx + 15544);           //mov cx, [bx+3CB8h]
    _dx = memory16(_ds, _bx + 15546);           //mov dx, [bx+3CBAh]
    _cx += 0x000a;                              //add cx, 0Ah
    _dx += 0x001f;                              //add dx, 1Fh
    _si = 0xb218;                               //mov si, 0B218h
{sub_10C2D(); return; };                        //
loc_154B8:                                      //loc_154B8:
    _cx = 0x0004;                               //mov cx, 4
    _si = 0xe3ec;                               //mov si, 0E3ECh
    if (memory16(_ds, 0x8F42) == 0x0000)        //jz short loc_154D5
      goto loc_154D5;
    _cx = 0x002d;                               //mov cx, 2Dh
    _si = 0xe7f4;                               //mov si, 0E7F4h
    if (memory(_ds, 0x3ADE) != 0x00)            //jnz short loc_154D5
      goto loc_154D5;
    _si = 0xe5f0;                               //mov si, 0E5F0h
loc_154D5:                                      //loc_154D5:
    _dx = 0x00a8;                               //mov dx, 0A8h
{sub_10C2D(); return; };                        //
}

void sub_154DB()
{
    _push(memory16(_ss, 16));                   //push word ptr ss:byte_447B0+10h
    memory16(_ss, 16) = 0x0068;                 //mov word ptr ss:byte_447B0+10h, 68h
    _cx = memory16(_ds, 0x3C9A);                //mov cx, word_2C1CA
    _dx = memory16(_ds, 0x3C9C);                //mov dx, word_2C1CC
    _si = memory16(_ds, 0x3C9E);                //mov si, word_2C1CE
    sub_10875();                                //call sub_10875
    memory16(_ss, 16) = _pop();                 //pop word ptr ss:byte_447B0+10h
}

void sub_154FC()
{
loc_154FC:
    _push(_cx);                                 //push cx
    sub_10A51();                                //call sub_10A51
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    sub_154DB();                                //call sub_154DB
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop sub_154FC
      goto loc_154FC;
}

void sub_15510()
{
    memory16(_ds, 0x3C9A) = 0x0106;             //mov word_2C1CA, 106h
    memory16(_ds, 0x3C9C) = 0x0088;             //mov word_2C1CC, 88h
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
loc_15522:                                      //loc_15522:
    sub_10A51();                                //call sub_10A51
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    sub_154DB();                                //call sub_154DB
    if (memory16(_ds, 0x3C9A) == 0x011c)        //jz short loc_15545
      goto loc_15545;
    memory16(_ds, 0x3C9A) += 0x0002;            //add word_2C1CA, 2
    memory16(_ds, 0x3C9C) -= 0x0002;            //sub word_2C1CC, 2
    goto loc_15522;                             //jmp short loc_15522
loc_15545:                                      //loc_15545:
    memory16(_ds, 0x3C9E) = 0xf990;             //mov word_2C1CE, 0F990h
    _cx = 0x0006;                               //mov cx, 6
    sub_154FC();                                //call sub_154FC
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    memory16(_ds, 0x8E88) = 0x0008;             //mov word_313B8, 8
    memory(_ds, 0x3ADF) = 0x00;                 //mov byte_2C00F, 0
    memory16(_ds, 0x3C9E) = 0xf700;             //mov word_2C1CE, 0F700h
    _cx = 0x0006;                               //mov cx, 6
    sub_154FC();                                //call sub_154FC
loc_1556C:                                      //loc_1556C:
    sub_10A51();                                //call sub_10A51
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    sub_154DB();                                //call sub_154DB
    memory16(_ds, 0x3C9A) -= 0x0002;            //sub word_2C1CA, 2
    memory16(_ds, 0x3C9C) += 0x0002;            //add word_2C1CC, 2
    if ((short)memory16(_ds, 0x3C9A) > (short)0x0106)//jg short loc_1556C
      goto loc_1556C;
}

void sub_1558E()
{
loc_1558E:
    sub_10A51();                                //call sub_10A51
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_15597:                                      //loc_15597:
    memory16(_ds, _si) += 1;                    //inc word ptr [si]
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_15597
      goto loc_15597;
    if (memory16(_ds, 0x3CB6) == 0x0000)        //jz short loc_155AD
      goto loc_155AD;
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    goto loc_1558E;                             //jmp short sub_1558E
loc_155AD:                                      //loc_155AD:
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_155B3:                                      //loc_155B3:
    memory16(_ds, _si) = 0x0001;                //mov word ptr [si], 1
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_155B3
      goto loc_155B3;
    _cx = 0x0005;                               //mov cx, 5
    _push(_cx);                                 //push cx
    goto loc_155C6;                             //jmp short loc_155C6
loc_155C2:                                      //loc_155C2:
    _push(_cx);                                 //push cx
    sub_10A51();                                //call sub_10A51
loc_155C6:                                      //loc_155C6:
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_155C2
      goto loc_155C2;
}

void sub_155D0()
{
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_155D6:                                      //loc_155D6:
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_155D6
      goto loc_155D6;
loc_155DF:                                      //loc_155DF:
    sub_10A51();                                //call sub_10A51
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_155E8:                                      //loc_155E8:
    memory16(_ds, _si) -= 1;                    //dec word ptr [si]
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_155E8
      goto loc_155E8;
    if (memory16(_ds, 0x3CB6) == 0xfff7)        //jz short loc_155FE
      goto loc_155FE;
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    goto loc_155DF;                             //jmp short loc_155DF
loc_155FE:                                      //loc_155FE:
    _cx = 0x000b;                               //mov cx, 0Bh
    _push(_cx);                                 //push cx
    goto loc_15608;                             //jmp short loc_15608
loc_15604:                                      //loc_15604:
    _push(_cx);                                 //push cx
    sub_10A51();                                //call sub_10A51
loc_15608:                                      //loc_15608:
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_15604
      goto loc_15604;
}

void sub_15612()
{
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    sub_10CB5();                                //call sub_10CB5
}

void sub_1561C()
{
    if (memory(_ds, 0x3ADF) != 0x00)            //jnz short loc_15632
      goto loc_15632;
    if (memory(_ds, 0x3AE0) != 0x00)            //jnz short loc_1563E
      goto loc_1563E;
    sub_14191();                                //call sub_14191
    _ax &= 0x2654;                              //and ax, 2654h
    if (_ax != 0)                               //jnz short loc_15655
      goto loc_15655;
loc_15632:                                      //loc_15632:
    _cx = 0x0107;                               //mov cx, 107h
    _dx = 0x0029;                               //mov dx, 29h
    _si = 0xea9e;                               //mov si, 0EA9Eh
    sub_10875();                                //call sub_10875
loc_1563E:                                      //loc_1563E:
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = 0x0029;                               //mov dx, 29h
    _si = 0xe9f8;                               //mov si, 0E9F8h
    sub_10875();                                //call sub_10875
    if (memory(_ds, 0x3AE0) == 0x00)            //jz short loc_15655
      goto loc_15655;
    memory(_ds, 0x3AE0) -= 1;                   //dec byte_2C010
loc_15655:                                      //loc_15655:
    if (memory(_ds, 0x3ADF) != 0x00)            //jnz short locret_15690
      goto locret_15690;
    if ((char)memory(_ds, 0x3AE1) < 0 /*CHECK*/)//js short loc_15684
      goto loc_15684;
    if (memory(_ds, 0x3AE1) == 0x00)            //jz short loc_1566B
      goto loc_1566B;
    memory(_ds, 0x3AE1) -= 1;                   //dec byte_2C011
    goto loc_15678;                             //jmp short loc_15678
loc_1566B:                                      //loc_1566B:
    sub_14191();                                //call sub_14191
    _ax &= 0x2654;                              //and ax, 2654h
    if (_ax != 0)                               //jnz short locret_15690
      goto locret_15690;
    memory(_ds, 0x3AE1) = 0x08;                 //mov byte_2C011, 8
loc_15678:                                      //loc_15678:
    _cx = 0x0107;                               //mov cx, 107h
    _dx = 0x0023;                               //mov dx, 23h
    _si = 0xebea;                               //mov si, 0EBEAh
    sub_10875();                                //call sub_10875
loc_15684:                                      //loc_15684:
    _cx = 0x00f5;                               //mov cx, 0F5h
    _dx = 0x0023;                               //mov dx, 23h
    _si = 0xeb44;                               //mov si, 0EB44h
    sub_10875();                                //call sub_10875
locret_15690:                                   //locret_15690:
    return;
}

void sub_15691()
{
    _si = 0x3cb6;                               //mov si, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_15697:                                      //loc_15697:
    if (memory16(_ds, _si + 6) != 0x0000)       //jnz short loc_156A3
      goto loc_156A3;
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    goto loc_156B2;                             //jmp short loc_156B2
loc_156A3:                                      //loc_156A3:
    memory16(_ds, _si) -= 1;                    //dec word ptr [si]
    if ((short)memory16(_ds, _si) > 0)          //jg short loc_156B2
      goto loc_156B2;
    sub_14191();                                //call sub_14191
    _ax &= 0x00ff;                              //and ax, 0FFh
    _ax += 0x0014;                              //add ax, 14h
    memory16(_ds, _si) = _ax;                   //mov [si], ax
loc_156B2:                                      //loc_156B2:
    _si += 0x000c;                              //add si, 0Ch
    if (--_cx)                                  //loop loc_15697
      goto loc_15697;
}

void sub_156B8()
{
    _di = 0x3cb6;                               //mov di, 3CB6h
    _cx = 0x0014;                               //mov cx, 14h
loc_156BE:                                      //loc_156BE:
    _push(_cx);                                 //push cx
    if ((short)memory16(_ds, _di) > (short)0x0000)//jg short loc_156EC
      goto loc_156EC;
    if (memory16(_ds, _di) == 0xfff8)           //jz short loc_156D4
      goto loc_156D4;
    sub_10CD7();                                //call sub_10CD7
    if (memory16(_ds, _di) != 0x0000)           //jnz short loc_156D4
      goto loc_156D4;
    goto loc_15761;                             //jmp loc_15761
loc_156D4:                                      //loc_156D4:
    _push(_di);                                 //push di
    _cx = memory16(_ds, _di + 2);               //mov cx, [di+2]
    _dx = memory16(_ds, _di + 4);               //mov dx, [di+4]
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    _bx += 0x0009;                              //add bx, 9
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 15520);           //mov si, [bx+3CA0h]
    sub_10875();                                //call sub_10875
    _di = _pop();                               //pop di
    goto loc_15761;                             //jmp short loc_15761
loc_156EC:                                      //loc_156EC:
    if ((short)memory16(_ds, _di) > (short)0x0002)//jg short loc_15705
      goto loc_15705;
    if (memory16(_ds, _di) != 0x0002)           //jnz short loc_15700
      goto loc_15700;
    if ((short)memory16(_ds, 0x8E88) >= 0 /*CHECK*/)//jns short loc_15700
      goto loc_15700;
    memory16(_ds, 0x8E8A) = 0x0000;             //mov word_313BA, 0
loc_15700:                                      //loc_15700:
    sub_10CD7();                                //call sub_10CD7
    goto loc_15761;                             //jmp short loc_15761
loc_15705:                                      //loc_15705:
    _bx = _pop();                               //pop bx
    _push(_bx);                                 //push bx
    _bx &= 0x0001;                              //and bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 15538);           //mov si, [bx+3CB2h]
    _cx = memory16(_ds, _di + 2);               //mov cx, [di+2]
    _dx = memory16(_ds, _di + 4);               //mov dx, [di+4]
    _push(_di);                                 //push di
    sub_10875();                                //call sub_10875
    _di = _pop();                               //pop di
    _bx = memory16(_ds, _di + 8);               //mov bx, [di+8]
    _si = memory16(_ds, _bx);                   //mov si, [bx]
    _bx += 0x0002;                              //add bx, 2
    if (_si & _si)                              //jnz short loc_1572E
      goto loc_1572E;
    _bx = memory16(_ds, _bx);                   //mov bx, [bx]
    _si = memory16(_ds, _bx);                   //mov si, [bx]
    _bx += 0x0002;                              //add bx, 2
loc_1572E:                                      //loc_1572E:
    memory16(_ds, _di + 8) = _bx;               //mov [di+8], bx
    _cx = memory16(_ds, _di + 2);               //mov cx, [di+2]
    _dx = memory16(_ds, _di + 4);               //mov dx, [di+4]
    _push(_es);                                 //push es
    _ax = _seg007;                              //mov ax, seg seg007
    _es = _ax;                                  //mov es, ax
    _cx = _cx + memory16(_es, _si);             //add cx, es:[si]
    _dx = _dx + memory16(_es, _si + 2);         //add dx, es:[si+2]
    _ax = memory16(_es, _si + 4);               //mov ax, es:[si+4]
    _ax >>= 1;                                  //shr ax, 1
    _ax -= 0x0010;                              //sub ax, 10h
    _cx -= _ax;                                 //sub cx, ax
    _ax = memory16(_es, _si + 6);               //mov ax, es:[si+6]
    _ax += 1;                                   //inc ax
    _ax >>= 1;                                  //shr ax, 1
    _ax -= 0x000e;                              //sub ax, 0Eh
    _dx -= _ax;                                 //sub dx, ax
    _es = _pop();                               //pop es
    _push(_di);                                 //push di
    sub_10875();                                //call sub_10875
    _di = _pop();                               //pop di
loc_15761:                                      //loc_15761:
    _di += 0x000c;                              //add di, 0Ch
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_15769
      goto loc_15769;
    goto locret_1576C;                          //jmp short locret_1576C
loc_15769:                                      //loc_15769:
    goto loc_156BE;                             //jmp loc_156BE
locret_1576C:                                   //locret_1576C:
    return;
}

void sub_1576D()
{
    sub_10C71();                                //call sub_10C71
    memory16(_ds, 0x8F46) = 0x0037;             //mov word_31476, 37h
    memory16(_ds, 0x8F48) = 0x0076;             //mov word_31478, 76h
}

void sub_1577D()
{
    _ax = memory16(_ds, 0x915A);                //mov ax, word_3168A
    _dx = memory16(_ds, 0x915C);                //mov dx, word_3168C
{loc_10B1D(); return; };                        //
}

void sub_15787()
{
loc_15787:
    memory(_ds, 0x8F40) = 0xff;                 //mov byte ptr word_31470, 0FFh
    _push(_si);                                 //push si
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    sub_10A51();                                //call sub_10A51
    _si = _pop();                               //pop si
loc_1579A:                                      //loc_1579A:
    sub_14191();                                //call sub_14191
    _ax &= 0x0003;                              //and ax, 3
    if (_ax == 0)                               //jz short loc_1579A
      goto loc_1579A;
    _ax -= 1;                                   //dec ax
    _ax |= 0x0080;                              //or ax, 80h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _di = _si;                                  //mov di, si
loc_157AA:                                      //loc_157AA:
    if (memory(_ds, _di) == 0x00)               //jz short loc_157BD
      goto loc_157BD;
    if (memory(_ds, _di) == 0x20)               //jz short loc_157BD
      goto loc_157BD;
    if (memory(_ds, _di) == 0x0d)               //jz short loc_157BD
      goto loc_157BD;
    _ax += 1;                                   //inc ax
    _di += 1;                                   //inc di
    goto loc_157AA;                             //jmp short loc_157AA
loc_157BD:                                      //loc_157BD:
    _ax = _ax + memory16(_ds, 0x8F46);          //add ax, word_31476
    if ((short)_ax <= (short)0x004b)            //jle short loc_157C9
      goto loc_157C9;
    sub_15829();                                //call sub_15829
loc_157C9:                                      //loc_157C9:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_157F4
      goto loc_157F4;
    if (_al == 0x20)                            //jz short loc_157E4
      goto loc_157E4;
    if (_al != 0x0d)                            //jnz short loc_157DD
      goto loc_157DD;
    sub_15829();                                //call sub_15829
    goto loc_15787;                             //jmp short sub_15787
loc_157DD:                                      //loc_157DD:
    _push(_si);                                 //push si
    sub_10CF9();                                //call sub_10CF9
    _si = _pop();                               //pop si
    goto loc_157C9;                             //jmp short loc_157C9
loc_157E4:                                      //loc_157E4:
    memory16(_ds, 0x8F46) += 1;                 //inc word_31476
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_157F4
      goto loc_157F4;
    if (_al == 0x20)                            //jz short loc_157E4
      goto loc_157E4;
    _si -= 1;                                   //dec si
    goto loc_15787;                             //jmp short sub_15787
loc_157F4:                                      //loc_157F4:
    memory(_ds, 0x8F40) = 0x00;                 //mov byte ptr word_31470, 0
}

void sub_157FA()
{
    memory(_ds, 0x8F40) = 0xff;                 //mov byte ptr word_31470, 0FFh
    _push(_ax);                                 //push ax
    sub_10A51();                                //call sub_10A51
    sub_15691();                                //call sub_15691
    sub_156B8();                                //call sub_156B8
    sub_10C93();                                //call sub_10C93
    _ax = _pop();                               //pop ax
//    _STOP_("sp-trace-fail");                    //sub_157FA endp_failed
//    _STOP_("continues");                        //sub_1580D proc near
    sub_1580D();
}

void sub_1580D()
{
    if ((short)_ax < (short)0x000a)             //jl short loc_1581D
      goto loc_1581D;
    _cwd();                                     //cwd
    _bx = 0x000a;                               //mov bx, 0Ah
    _div(_bx);                                  //div bx
    _push(_dx);                                 //push dx
    sub_1580D();                                //call sub_1580D
    _ax = _pop();                               //pop ax
loc_1581D:                                      //loc_1581D:
    _ax += 0x0030;                              //add ax, 30h
    sub_10CF9();                                //call sub_10CF9
    memory(_ds, 0x8F40) = 0x00;                 //mov byte ptr word_31470, 0
}

void sub_15829()
{
    _ax = 0x0037;                               //mov ax, 37h
    memory16(_ds, 0x8F46) = _ax;                //mov word_31476, ax
    memory16(_ds, 0x8F48) += 0x0007;            //add word_31478, 7
}

void sub_15835()
{
    _si = 0x3de4;                               //mov si, 3DE4h
    _cx = 0x0007;                               //mov cx, 7
loc_1583B:                                      //loc_1583B:
    _push(_cx);                                 //push cx
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx = _ax;                                  //mov cx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx = _ax;                                  //mov dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _di = _ax;                                  //mov di, ax
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    _di += 0x0002;                              //add di, 2
    if (_ax & _ax)                              //jnz short loc_15855
      goto loc_15855;
    _di = memory16(_ds, _di);                   //mov di, [di]
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    _di += 0x0002;                              //add di, 2
loc_15855:                                      //loc_15855:
    memory16(_ds, _si - 2) = _di;               //mov [si-2], di
    _push(_si);                                 //push si
    _si = _ax;                                  //mov si, ax
    sub_10875();                                //call sub_10875
    _si = _pop();                               //pop si
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1583B
      goto loc_1583B;
}

void sub_15863()
{
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ah = 0x02;                                 //mov ah, 2
    _al = 0x00;                                 //mov al, 0
    _interrupt(128);                            //int 80h
    memory16(_ds, 0x3754) = 0x3625;             //mov word_2BC84, 3625h
    memory16(_ds, 0x3752) = 0x0078;             //mov word_2BC82, 78h
    memory16(_ds, 0x3750) = 0x0000;             //mov word_2BC80, 0
    _di = 0x9a40;                               //mov di, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
loc_15883:                                      //loc_15883:
    sub_14191();                                //call sub_14191
    _stosw<MemAuto, DirAuto>();                 //stosw
    sub_14191();                                //call sub_14191
    _stosw<MemAuto, DirAuto>();                 //stosw
    sub_14191();                                //call sub_14191
    _ax &= 0x1fff;                              //and ax, 1FFFh
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_15883
      goto loc_15883;
    sub_10DE7();                                //call sub_10DE7
    sub_10D81();                                //call sub_10D81
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15916
      goto loc_15916;
loc_158A1:                                      //loc_158A1:
    sub_10A0D();                                //call sub_10A0D
    sub_10D1B();                                //call sub_10D1B
    if ((short)memory16(_ds, 0x3750) < (short)0x0012)//jl short loc_158D9
      goto loc_158D9;
    memory16(_ds, 0x3752) = 0x0078;             //mov word_2BC82, 78h
    _si = memory16(_ds, 0x3754);                //mov si, word_2BC84
    sub_10AFB();                                //call sub_10AFB
    if ((short)memory16(_ds, 0x3750) < (short)0x0024)//jl short loc_158D9
      goto loc_158D9;
    if ((short)memory16(_ds, 0x3750) >= (short)0x0036)
      goto loc_158D9;
    memory16(_ds, 0x3752) = 0x0096;             //mov word_2BC82, 96h
    _si = memory16(_ds, 0x3754);                //mov si, word_2BC84
    _si += 0x0014;                              //add si, 14h
    sub_10AFB();                                //call sub_10AFB
loc_158D9:                                      //loc_158D9:
    sub_10831();                                //call sub_10831
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15916
      goto loc_15916;
    sub_10A51();                                //call sub_10A51
    memory16(_ds, 0x3750) += 1;                 //inc word_2BC80
    if (memory16(_ds, 0x3750) != 0x0048)        //jnz short loc_158A1
      goto loc_158A1;
    memory16(_ds, 0x3750) = 0x0000;             //mov word_2BC80, 0
    memory16(_ds, 0x3754) += 0x0028;            //add word_2BC84, 28h
    if (memory16(_ds, 0x3754) != 0x3715)        //jnz short loc_158A1
      goto loc_158A1;
    sub_159AA();                                //call sub_159AA
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15916
      goto loc_15916;
    memory16(_ds, 0x3754) = 0x3625;             //mov word_2BC84, 3625h
    goto loc_158A1;                             //jmp short loc_158A1
loc_15916:                                      //loc_15916:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _ah = 0x01;                                 //mov ah, 1
    _interrupt(128);                            //int 80h
    sub_10DE7();                                //call sub_10DE7
    sub_10D81();                                //call sub_10D81
}

void sub_15926()
{
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    sub_15935();                                //call sub_15935
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    _ax = 0x0064;                               //mov ax, 64h
    sub_1595D();                                //call sub_1595D
{sub_15950(); return; };                        //
}

void sub_15935()
{
    sub_10BC7();                                //call sub_10BC7
    _cx = 0x0030;                               //mov cx, 30h
    _di = 0x9a40;                               //mov di, 9A40h
loc_1593E:                                      //loc_1593E:
    sub_14191();                                //call sub_14191
    _stosw<MemAuto, DirAuto>();                 //stosw
    sub_14191();                                //call sub_14191
    _stosw<MemAuto, DirAuto>();                 //stosw
    sub_14191();                                //call sub_14191
    _ax &= 0x1fff;                              //and ax, 1FFFh
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_1593E
      goto loc_1593E;
}

void sub_15950()
{
    sub_10E2B();                                //call sub_10E2B
    sub_10D81();                                //call sub_10D81
    sub_10BE9();                                //call sub_10BE9
    sub_1426A();                                //call sub_1426A
}

void sub_1595D()
{
    memory16(_ds, 0x3752) = _ax;                //mov word_2BC82, ax
    memory16(_ds, 0x3754) = _si;                //mov word_2BC84, si
    if (memory(_ds, 0x374E) == 0x00)            //jz short loc_1598F
      goto loc_1598F;
    sub_10DE7();                                //call sub_10DE7
loc_1596E:                                      //loc_1596E:
    sub_10A0D();                                //call sub_10A0D
    _si = memory16(_ds, 0x3754);                //mov si, word_2BC84
    sub_10AFB();                                //call sub_10AFB
    sub_10831();                                //call sub_10831
    sub_10A51();                                //call sub_10A51
    sub_10D81();                                //call sub_10D81
    if (memory(_ds, 0x8F5B) == 0x00)            //jz short loc_1596E
      goto loc_1596E;
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    goto locret_159A9;                          //jmp short locret_159A9
loc_1598F:                                      //loc_1598F:
    _push(_cx);                                 //push cx
    sub_10A0D();                                //call sub_10A0D
    _si = memory16(_ds, 0x3754);                //mov si, word_2BC84
    sub_10AFB();                                //call sub_10AFB
    sub_10831();                                //call sub_10831
    sub_10A51();                                //call sub_10A51
    sub_10DE7();                                //call sub_10DE7
    sub_10D81();                                //call sub_10D81
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1598F
      goto loc_1598F;
locret_159A9:                                   //locret_159A9:
    return;
}

void sub_159AA()
{
    _ax = 0x000c;                               //mov ax, 0Ch
    _si = 0x352b;                               //mov si, 352Bh
    _cx = 0x0001;                               //mov cx, 1
    sub_1595D();                                //call sub_1595D
    _cx = 0x0055;                               //mov cx, 55h
loc_159B9:                                      //loc_159B9:
    _push(_cx);                                 //push cx
    sub_10B3F();                                //call sub_10B3F
    _cx = _pop();                               //pop cx
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short locret_159C7
      goto locret_159C7;
    if (--_cx)                                  //loop loc_159B9
      goto loc_159B9;
locret_159C7:                                   //locret_159C7:
    return;
}

void sub_159C8()
{
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    _dx = memory16(_ds, 0x9154);                //mov dx, word_31684
    if ((short)_dx >= (short)memory16(_ds, 0x358D))//jge short loc_159D8
      goto loc_159D8;
    goto locret_15B0A;                          //jmp locret_15B0A
loc_159D8:                                      //loc_159D8:
    if (_dx != memory16(_ds, 0x358D))           //jnz short loc_159E3
      goto loc_159E3;
    if ((short)_ax > (short)memory16(_ds, 0x358B))//jg short loc_159E3
      goto loc_159E3;
    goto locret_15B0A;                          //jmp locret_15B0A
loc_159E3:                                      //loc_159E3:
    sub_15B0B();                                //call sub_15B0B
    _si = 0x358b;                               //mov si, 358Bh
    _di = 0x3616;                               //mov di, 3616h
loc_159EC:                                      //loc_159EC:
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    _dx = memory16(_ds, 0x9154);                //mov dx, word_31684
    if ((short)_dx < (short)memory16(_ds, _si - 2))//jl short loc_15A21
      goto loc_15A21;
    if (_dx != memory16(_ds, _si - 2))          //jnz short loc_159FF
      goto loc_159FF;
    if (_ax <= memory16(_ds, _si - 4))          //jbe short loc_15A21
      goto loc_15A21;
loc_159FF:                                      //loc_159FF:
    _si -= 0x0004;                              //sub si, 4
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _cx = 0x000b;                               //mov cx, 0Bh
loc_15A10:                                      //loc_15A10:
    _di -= 1;                                   //dec di
    _al = memory(_ds, _di);                     //mov al, [di]
    memory(_ds, _di + 15) = _al;                //mov [di+0Fh], al
    if (--_cx)                                  //loop loc_15A10
      goto loc_15A10;
    _di -= 0x0004;                              //sub di, 4
    if ((short)_si > (short)0x3567)             //jg short loc_159EC
      goto loc_159EC;
loc_15A21:                                      //loc_15A21:
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _ax = memory16(_ds, 0x9154);                //mov ax, word_31684
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    memory(_ds, _di + 12) = 0x3a;               //mov byte ptr [di+0Ch], 3Ah
    memory(_ds, _di + 13) = 0x3a;               //mov byte ptr [di+0Dh], 3Ah
    memory(_ds, _di + 14) = 0x3a;               //mov byte ptr [di+0Eh], 3Ah
    _lea(_bp, _ds, _di + 4);                    //lea bp, [di+4]
    _bx = 0x3756;                               //mov bx, 3756h
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0x9154);                //mov ax, word_31684
    memory16(_ds, 0xFCE4) = _ax;                //mov word_38214, ax
loc_15A4A:                                      //loc_15A4A:
    if (memory16(_ds, _bx) == 0x0000)           //jz short loc_15A7C
      goto loc_15A7C;
    memory(_ds, _bp + 0) = 0x30;                //mov byte ptr ds:[bp+0], 30h
loc_15A54:                                      //loc_15A54:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    _FIXME_;                                    //sbb word_38214, ax
    if ((short)memory16(_ds, 0xFCE2) < 0)       //js short loc_15A69
      goto loc_15A69;
    memory(_ds, _bp + 0) += 1;                  //inc byte ptr ds:[bp+0]
    goto loc_15A54;                             //jmp short loc_15A54
loc_15A69:                                      //loc_15A69:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, 0xFCE4) = memory16(_ds, 0xFCE4) + _ax + _flags.carry; _ASSERT(0);
    _bx += 0x0004;                              //add bx, 4
    _bp += 1;                                   //inc bp
    goto loc_15A4A;                             //jmp short loc_15A4A
loc_15A7C:                                      //loc_15A7C:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _lea(_bp, _ds, _di + 12);                   //lea bp, [di+0Ch]
    _bx = 0x33ca;                               //mov bx, 33CAh
    _di = _di ^ _di;                            //xor di, di
loc_15A89:                                      //loc_15A89:
    _al = memory(_ds, _bx + _di);               //mov al, [bx+di]
    memory(_ds, _bp + 0) = _al;                 //mov ds:[bp+0], al
loc_15A8F:                                      //loc_15A8F:
    _push(_bp);                                 //push bp
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    sub_10B3F();                                //call sub_10B3F
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
    _bp = _pop();                               //pop bp
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15AF0
      goto loc_15AF0;
    _ah = memory(_ds, 0x8F59);                  //mov ah, byte_31489
    _ah &= 0x0c;                                //and ah, 0Ch
    _dx = 0xffff;                               //mov dx, 0FFFFh
    if (_ah & 0x04)                             //jnz short loc_15AB6
      goto loc_15AB6;
    _dx = 0x0001;                               //mov dx, 1
    if (!(_ah & 0x08))                          //jz short loc_15A8F
      goto loc_15A8F;
loc_15AB6:                                      //loc_15AB6:
    _cx = 0x0004;                               //mov cx, 4
    _flags.sign = (short)(_di + _dx) < 0;       //add di, dx
    _di += _dx;
    if (!_flags.sign)                           //jns short loc_15AC0
      goto loc_15AC0;
    _di = 0x0027;                               //mov di, 27h
loc_15AC0:                                      //loc_15AC0:
    if ((short)_di < (short)0x0028)             //jl short loc_15AC7
      goto loc_15AC7;
    _di = _di ^ _di;                            //xor di, di
loc_15AC7:                                      //loc_15AC7:
    _al = memory(_ds, _bx + _di);               //mov al, [bx+di]
    memory(_ds, _bp + 0) = _al;                 //mov ds:[bp+0], al
    _push(_bx);                                 //push bx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _push(_ax);                                 //push ax
    sub_10B3F();                                //call sub_10B3F
    _ax = _pop();                               //pop ax
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _bx = _pop();                               //pop bx
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15AF0
      goto loc_15AF0;
    _al = memory(_ds, 0x8F59);                  //mov al, byte_31489
    _al &= 0x0c;                                //and al, 0Ch
    if (_al != _ah)                             //jnz short loc_15A8F
      goto loc_15A8F;
    if (--_cx)                                  //loop loc_15AC7
      goto loc_15AC7;
    goto loc_15AB6;                             //jmp short loc_15AB6
loc_15AF0:                                      //loc_15AF0:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _bp += 1;                                   //inc bp
    if (memory(_ds, _bp + 0) == 0x3a)           //jz short loc_15A89
      goto loc_15A89;
    _cx = 0x0012;                               //mov cx, 12h
loc_15B00:                                      //loc_15B00:
    _push(_cx);                                 //push cx
    sub_10B3F();                                //call sub_10B3F
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_15B00
      goto loc_15B00;
    sub_15950();                                //call sub_15950
locret_15B0A:                                   //locret_15B0A:
    return;
}

void sub_15B0B()
{
    _si = 0x352b;                               //mov si, 352Bh
    _STOP_("goto loc_15B13");                   //jmp short loc_15B13
}

void sub_15B10()
{
    _si = 0x353f;                               //mov si, 353Fh
loc_15B13:                                      //loc_15B13:
    _push(_si);                                 //push si
    sub_15935();                                //call sub_15935
    _ax = 0x000c;                               //mov ax, 0Ch
    _si = _pop();                               //pop si
    _cx = 0x0001;                               //mov cx, 1
{sub_1595D(); return; };                        //
}

void sub_15B21()
{
    memory16(_ds, 0x91B0) = 0x0003;             //mov word_316E0, 3
    sub_15935();                                //call sub_15935
    _ax = 0x000c;                               //mov ax, 0Ch
    _si = 0x3477;                               //mov si, 3477h
    _cx = 0x0001;                               //mov cx, 1
    sub_1595D();                                //call sub_1595D
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
loc_15B3E:                                      //loc_15B3E:
    sub_109EB();                                //call sub_109EB
    memory16(_ds, 0x3752) = 0x000c;             //mov word_2BC82, 0Ch
    _si = 0x3477;                               //mov si, 3477h
    sub_10AFB();                                //call sub_10AFB
    memory16(_ds, 0x3752) = 0x003c;             //mov word_2BC82, 3Ch
    _si = 0x348b;                               //mov si, 348Bh
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    if (_ax & _ax)                              //jnz short loc_15B5F
      goto loc_15B5F;
    _si = 0x349f;                               //mov si, 349Fh
loc_15B5F:                                      //loc_15B5F:
    sub_10AFB();                                //call sub_10AFB
    memory16(_ds, 0x3752) = 0x0054;             //mov word_2BC82, 54h
    _si = 0x34b3;                               //mov si, 34B3h
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    if (_ax != 0x0001)                          //jnz short loc_15B75
      goto loc_15B75;
    _si = 0x34c7;                               //mov si, 34C7h
loc_15B75:                                      //loc_15B75:
    sub_10AFB();                                //call sub_10AFB
    memory16(_ds, 0x3752) = 0x006c;             //mov word_2BC82, 6Ch
    _si = 0x34db;                               //mov si, 34DBh
    if (memory(_ds, 0x8F54) != 0x00)            //jnz short loc_15B8B
      goto loc_15B8B;
    _si = 0x3503;                               //mov si, 3503h
loc_15B8B:                                      //loc_15B8B:
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    if (_ax != 0x0002)                          //jnz short loc_15B95
      goto loc_15B95;
    _si += 0x0014;                              //add si, 14h
loc_15B95:                                      //loc_15B95:
    sub_10AFB();                                //call sub_10AFB
    sub_15C7C();                                //call sub_15C7C
    sub_10831();                                //call sub_10831
    sub_10A51();                                //call sub_10A51
    if (!(memory(_ds, 0x8F59) & 0x01))          //jz short loc_15BC0
      goto loc_15BC0;
    memory(_ds, 0x8F59) = 0x00;                 //mov byte_31489, 0
    memory16(_ds, 0x8E88) = 0x0008;             //mov word_313B8, 8
    _ax = _pop();                               //pop ax
    _ax -= 1;                                   //dec ax
    _push(_ax);                                 //push ax
    if ((short)_ax >= 0)                        //jns short loc_15B3E
      goto loc_15B3E;
    _ax = _pop();                               //pop ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    goto loc_15B3E;                             //jmp loc_15B3E
loc_15BC0:                                      //loc_15BC0:
    if (!(memory(_ds, 0x8F59) & 0x02))          //jz short loc_15BE4
      goto loc_15BE4;
    memory(_ds, 0x8F59) = 0x00;                 //mov byte_31489, 0
    memory16(_ds, 0x8E88) = 0x0008;             //mov word_313B8, 8
    _ax = _pop();                               //pop ax
    _ax += 1;                                   //inc ax
    _push(_ax);                                 //push ax
    if ((short)_ax >= (short)0x0003)            //jge short loc_15BDD
      goto loc_15BDD;
    goto loc_15B3E;                             //jmp loc_15B3E
loc_15BDD:                                      //loc_15BDD:
    _ax = _pop();                               //pop ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    goto loc_15B3E;                             //jmp loc_15B3E
loc_15BE4:                                      //loc_15BE4:
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15BEE
      goto loc_15BEE;
    goto loc_15B3E;                             //jmp loc_15B3E
loc_15BEE:                                      //loc_15BEE:
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    memory16(_ds, 0x8E88) = 0x0009;             //mov word_313B8, 9
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    if (_ax != 0x0002)                          //jnz short loc_15C07
      goto loc_15C07;
    memory(_ds, 0x8F54) = (~memory(_ds, 0x8F54));//not byte_31484
    goto loc_15B3E;                             //jmp loc_15B3E
loc_15C07:                                      //loc_15C07:
    _ax = _pop();                               //pop ax
    _ax += 1;                                   //inc ax
    memory16(_ds, 0x8E70) = _ax;                //mov word_313A0, ax
{sub_15950(); return; };                        //
}

void sub_15C0F()
{
    sub_15935();                                //call sub_15935
    _ax = 0x0050;                               //mov ax, 50h
    _si = 0x344f;                               //mov si, 344Fh
    _cx = 0x0001;                               //mov cx, 1
    sub_1595D();                                //call sub_1595D
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _ax = 0x004f;                               //mov ax, 4Fh
    _push(_ax);                                 //push ax
loc_15C27:                                      //loc_15C27:
    sub_109EB();                                //call sub_109EB
    memory16(_ds, 0x3752) = 0x0050;             //mov word_2BC82, 50h
    _si = 0x344f;                               //mov si, 344Fh
    sub_10AFB();                                //call sub_10AFB
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _al += 0x30;                                //add al, 30h
    memory(_ds, 0x346C) = _al;                  //mov byte_2B99C, al
    memory16(_ds, 0x3752) = 0x0078;             //mov word_2BC82, 78h
    _si = 0x3463;                               //mov si, 3463h
    sub_10AFB();                                //call sub_10AFB
    sub_15C7C();                                //call sub_15C7C
    sub_10831();                                //call sub_10831
    sub_10A51();                                //call sub_10A51
    if (memory(_ds, 0x8F5B) != 0x00)            //jnz short loc_15C6D
      goto loc_15C6D;
    _ax = _pop();                               //pop ax
    _ax -= 1;                                   //dec ax
    _push(_ax);                                 //push ax
    if (_ax != 0)                               //jnz short loc_15C27
      goto loc_15C27;
    _sp += 0x0002;                              //add sp, 2
    sub_15950();                                //call sub_15950
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
loc_15C6D:                                      //loc_15C6D:
    _sp += 0x0002;                              //add sp, 2
    sub_15950();                                //call sub_15950
    memory(_ds, 0x8F5B) = 0x00;                 //mov byte_3148B, 0
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
}

void sub_15C7C()
{
    _ax = memory16(_ds, 0x91B0);                //mov ax, word_316E0
    _al += 0x30;                                //add al, 30h
    memory(_ds, 0x33FB) = _al;                  //mov byte_2B92B, al
    _si = 0x33f3;                               //mov si, 33F3h
    sub_10B83();                                //call sub_10B83
}

void sub_15C8B()
{
    _dx = 0x41c8;                               //mov dx, 41C8h
    _ax = _seg007;                              //mov ax, seg seg007
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    sub_1011C();                                //call sub_1011C
    _dx = 0x41d2;                               //mov dx, 41D2h
    _ax = _seg007;                              //mov ax, seg seg007
    _es = _ax;                                  //mov es, ax
    _di = 0x6be6;                               //mov di, 6BE6h
    sub_1011C();                                //call sub_1011C
    _dx = 0x41de;                               //mov dx, 41DEh
    _ax = _seg007;                              //mov ax, seg seg007
    _es = _ax;                                  //mov es, ax
    _di = 0xabbc;                               //mov di, 0ABBCh
    sub_1011C();                                //call sub_1011C
    _dx = 0x41e7;                               //mov dx, 41E7h
    _ax = _seg005;                              //mov ax, seg seg005
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    sub_1011C();                                //call sub_1011C
    sub_10DA3();                                //call sub_10DA3
}

void sub_15CC5()
{
    _ax = memory16(_ds, 0x991C);                //mov ax, word_31E4C
    if (_ax != memory16(_ds, 0x8E6C))           //jnz short loc_15CD1
      goto loc_15CD1;
    goto locret_15E03;                          //jmp locret_15E03
loc_15CD1:                                      //loc_15CD1:
    memory16(_ds, 0x8E6C) = _ax;                //mov word_3139C, ax
    sub_15B10();                                //call sub_15B10
    _ax = memory16(_ds, 0x991C);                //mov ax, word_31E4C
    _al += 0x30;                                //add al, 30h
    memory(_ds, 0x41EF) = _al;                  //mov byte_2C71F, al
    memory(_ds, 0x41FA) = _al;                  //mov byte_2C72A, al
    memory(_ds, 0x4206) = _al;                  //mov byte_2C736, al
    memory(_ds, 0x4215) = _al;                  //mov byte_2C745, al
    memory(_ds, 0x4222) = _al;                  //mov byte_2C752, al
    memory(_ds, 0x4231) = _al;                  //mov byte_2C761, al
    _dx = 0x41ee;                               //mov dx, 41EEh
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0x2ee0;                               //mov cx, 2EE0h
    _dx = 0xdf16;                               //mov dx, 0DF16h
    sub_15E52();                                //call sub_15E52
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _di = _di ^ _di;                            //xor di, di
    _si = 0xdf16;                               //mov si, 0DF16h
    _ch = _ch ^ _ch;                            //xor ch, ch
loc_15D10:                                      //loc_15D10:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cl = _al;                                  //mov cl, al
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cl = _al;                                  //mov cl, al
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    if ((short)_di >= (short)0x2ee0)            //jge short loc_15D28
      goto loc_15D28;
    if ((short)_di < (short)0x2ee0)             //jl short loc_15D10
      goto loc_15D10;
loc_15D28:                                      //loc_15D28:
    _dx = 0x4214;                               //mov dx, 4214h
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0x082a;                               //mov cx, 82Ah
    _dx = 0xd274;                               //mov dx, 0D274h
    sub_15E52();                                //call sub_15E52
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _dx = 0x4221;                               //mov dx, 4221h
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0x0392;                               //mov cx, 392h
    _dx = 0xda9e;                               //mov dx, 0DA9Eh
    sub_15E52();                                //call sub_15E52
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _dx = 0x4230;                               //mov dx, 4230h
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0x1e96;                               //mov cx, 1E96h
    _dx = 0xde30;                               //mov dx, 0DE30h
    sub_15E52();                                //call sub_15E52
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _si = 0xde30;                               //mov si, 0DE30h
    _cx = 0x0073;                               //mov cx, 73h
    _ax = 0xdf16;                               //mov ax, 0DF16h
loc_15D82:                                      //loc_15D82:
    memory16(_ds, _si) += _ax;                  //add [si], ax
    _si += 0x0002;                              //add si, 2
    if (--_cx)                                  //loop loc_15D82
      goto loc_15D82;
    _dx = 0x41f9;                               //mov dx, 41F9h
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0xe480;                               //mov cx, 0E480h
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = _seg009;                              //mov ax, seg seg009
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    sub_15E52();                                //call sub_15E52
    _ds = _pop();                               //pop ds
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _push(_es);                                 //push es
    _ax = _seg008;                              //mov ax, seg seg008
    _es = _ax;                                  //mov es, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x7a34;                               //mov cx, 7A34h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
    _dx = 0x4205;                               //mov dx, 4205h
    sub_15E24();                                //call sub_15E24
    memory16(_ds, 0x8E60) = _ax;                //mov word_31390, ax
    _bx = _ax;                                  //mov bx, ax
    _cx = 0xf468;                               //mov cx, 0F468h
    _dx = 0x0000;                               //mov dx, 0
    _ax = _seg008;                              //mov ax, seg seg008
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    sub_15E52();                                //call sub_15E52
    _ds = _pop();                               //pop ds
    _bx = memory16(_ds, 0x8E60);                //mov bx, word_31390
    sub_15E59();                                //call sub_15E59
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _si = _si ^ _si;                            //xor si, si
    _di = 0x5538;                               //mov di, 5538h
    _cx = 0x1c90;                               //mov cx, 1C90h
loc_15DEA:                                      //loc_15DEA:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx = _ax;                                  //mov dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx |= _ax;                                 //or dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx |= _ax;                                 //or dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ax |= _dx;                                 //or ax, dx
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_15DEA
      goto loc_15DEA;
    _ds = _pop();                               //pop ds
    sub_10DC5();                                //call sub_10DC5
    sub_15950();                                //call sub_15950
    sub_10D5F();                                //call sub_10D5F
locret_15E03:                                   //locret_15E03:
    return;
}

void loc_15E04()
{
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _ax = 0x0003;                               //mov ax, 3
    if (memory16(_ds, 0x3044) != 0x0004)        //jnz short loc_15E18
      goto loc_15E18;
    _ax = 0x0007;                               //mov ax, 7
loc_15E18:                                      //loc_15E18:
    _interrupt(16);                             //int 10h
    _dx = 0x300f;                               //mov dx, 300Fh
    _ah = 0x09;                                 //mov ah, 9
    _interrupt(33);                             //int 21h
    _STOP_("goto loc_1054F");                   //jmp loc_1054F
}

void sub_15E24()
{
loc_15E24:
    _push(_dx);                                 //push dx
    _ax = 0x3d00;                               //mov ax, 3D00h
    _interrupt(33);                             //int 21h
    _dx = _pop();                               //pop dx
    if (!_flags.carry)                          //jnb short locret_15E34
      goto locret_15E34;
    _push(_dx);                                 //push dx
    sub_15E35();                                //call sub_15E35
    _dx = _pop();                               //pop dx
    goto loc_15E24;                             //jmp short sub_15E24
locret_15E34:                                   //locret_15E34:
    return;
}

void sub_15E35()
{
    sub_15950();                                //call sub_15950
    sub_10D5F();                                //call sub_10D5F
    _si = 0x343b;                               //mov si, 343Bh
    memory(_ds, 0x374E) = 0xff;                 //mov byte_2BC7E, 0FFh
    sub_15926();                                //call sub_15926
    memory(_ds, 0x374E) = 0x00;                 //mov byte_2BC7E, 0
    sub_10D5F();                                //call sub_10D5F
    sub_15B10();                                //call sub_15B10
}

void sub_15E52()
{
    _ah = 0x3f;                                 //mov ah, 3Fh
    _interrupt(33);                             //int 21h
    if (_flags.carry)                           //jb short loc_15E04
      _STOP_("goto loc_15E04");
}

void sub_15E59()
{
    _ah = 0x3e;                                 //mov ah, 3Eh
    _interrupt(33);                             //int 21h
}

void sub_15E5E()
{
    WORD _cs = _seg000;

    _ax = 0x3509;                               //mov ax, 3509h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x8E66) = _bx;                //mov word_31396, bx
    memory16(_ds, 0x8E68) = _es;                //mov word_31398, es
    _ax = 0x2509;                               //mov ax, 2509h
    _push(_ds);                                 //push ds
    _dx = _cs;                                  //mov dx, cs
    _ds = _dx;                                  //mov ds, dx
    _dx = 0x5eeb;                               //mov dx, 5EEBh
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
}

void sub_15E7A()
{
    _ax = 0x2509;                               //mov ax, 2509h
    _push(_ds);                                 //push ds
    _dx = memory16(_ds, 0x8E66);                //mov dx, word_31396
    _ds = memory16(_ds, 0x8E68);                //mov ds, word_31398
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
}

void sub_15E8A()
{
    WORD _cs = _seg000;

    memory16(_cs, 0x6009) = 0x0003;             //mov cs:word_16009, 3
    _ax = 0x3508;                               //mov ax, 3508h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x8E62) = _bx;                //mov word_31392, bx
    memory16(_ds, 0x8E64) = _es;                //mov word_31394, es
    _ax = 0x2508;                               //mov ax, 2508h
    _push(_ds);                                 //push ds
    _dx = 0x600b;                               //mov dx, 600Bh
    _cx = _cs;                                  //mov cx, cs
    _ds = _cx;                                  //mov ds, cx
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
    _flags.interrupt = false;                   //cli
    _al = 0x36;                                 //mov al, 36h
    _out(67, _al);                              //out 43h, al
    _dx = 0x5555;                               //mov dx, 5555h
    _al = _dl;                                  //mov al, dl
    _out(64, _al);                              //out 40h, al
    _al = _dh;                                  //mov al, dh
    _out(64, _al);                              //out 40h, al
    _in(_al, 97);                               //in al, 61h
    memory(_ds, 0x3042) = _al;                  //mov byte_2B572, al
    _flags.interrupt = true;                    //sti
}

void sub_15EC3()
{
    _flags.interrupt = false;                   //cli
    _al = memory(_ds, 0x3042);                  //mov al, byte_2B572
    _out(97, _al);                              //out 61h, al
    _al = 0x36;                                 //mov al, 36h
    _out(67, _al);                              //out 43h, al
    _dx = 0xffff;                               //mov dx, 0FFFFh
    _al = _dl;                                  //mov al, dl
    _out(64, _al);                              //out 40h, al
    _al = _dh;                                  //mov al, dh
    _out(64, _al);                              //out 40h, al
    _in(_al, 97);                               //in al, 61h
    _flags.interrupt = true;                    //sti
    _ax = 0x2508;                               //mov ax, 2508h
    _push(_ds);                                 //push ds
    _dx = memory16(_ds, 0x8E62);                //mov dx, word_31392
    _ds = memory16(_ds, 0x8E64);                //mov ds, word_31394
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
}

void sub_15EEB()
{
    _push(_ds);                                 //push ds
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _in(_al, 96);                               //in al, 60h
    if (_al == memory(_ds, 0x2FB8))             //jz short loc_15F53
      goto loc_15F53;
    if (_al == memory(_ds, 0x2FC4))             //jz short loc_15F6F
      goto loc_15F6F;
    if (_al != memory(_ds, 0x2FD0))             //jnz short loc_15F0A
      goto loc_15F0A;
    goto loc_15F8A;                             //jmp loc_15F8A
loc_15F0A:                                      //loc_15F0A:
    if (_al != memory(_ds, 0x2FDC))             //jnz short loc_15F13
      goto loc_15F13;
    goto loc_15FA0;                             //jmp loc_15FA0
loc_15F13:                                      //loc_15F13:
    if (_al != memory(_ds, 0x3001))             //jnz short loc_15F1C
      goto loc_15F1C;
    goto loc_15FB6;                             //jmp loc_15FB6
loc_15F1C:                                      //loc_15F1C:
    if (_al != memory(_ds, 0x300D))             //jnz short loc_15F25
      goto loc_15F25;
    goto loc_15FEE;                             //jmp loc_15FEE
loc_15F25:                                      //loc_15F25:
    if (_al == memory(_ds, 0x2FB9))             //jz short loc_15F5F
      goto loc_15F5F;
    if (_al == memory(_ds, 0x2FC5))             //jz short loc_15F7F
      goto loc_15F7F;
    if (_al == memory(_ds, 0x2FD1))             //jz short loc_15F95
      goto loc_15F95;
    if (_al == memory(_ds, 0x2FDD))             //jz short loc_15FAB
      goto loc_15FAB;
    if (_al != memory(_ds, 0x3002))             //jnz short loc_15F46
      goto loc_15F46;
    goto loc_15FCD;                             //jmp loc_15FCD
loc_15F46:                                      //loc_15F46:
    if (_al != memory(_ds, 0x300E))             //jnz short loc_15F4F
      goto loc_15F4F;
    goto loc_15FF7;                             //jmp loc_15FF7
loc_15F4F:                                      //loc_15F4F:
    if (_al != 0x48)                            //jnz short loc_15F5B
      goto loc_15F5B;
loc_15F53:                                      //loc_15F53:
    memory(_ds, 0x8F59) |= 0x01;                //or byte_31489, 1
    goto loc_15FF7;                             //jmp loc_15FF7
loc_15F5B:                                      //loc_15F5B:
    if (_al != 0xc8)                            //jnz short loc_15F67
      goto loc_15F67;
loc_15F5F:                                      //loc_15F5F:
    memory(_ds, 0x8F59) &= 0xfe;                //and byte_31489, 0FEh
    goto loc_15FF7;                             //jmp loc_15FF7
loc_15F67:                                      //loc_15F67:
    if (_al == 0x4c)                            //jz short loc_15F6F
      goto loc_15F6F;
    if (_al != 0x50)                            //jnz short loc_15F77
      goto loc_15F77;
loc_15F6F:                                      //loc_15F6F:
    memory(_ds, 0x8F59) |= 0x02;                //or byte_31489, 2
    goto loc_15FF7;                             //jmp loc_15FF7
loc_15F77:                                      //loc_15F77:
    if (_al == 0xcc)                            //jz short loc_15F7F
      goto loc_15F7F;
    if (_al != 0xd0)                            //jnz short loc_15F86
      goto loc_15F86;
loc_15F7F:                                      //loc_15F7F:
    memory(_ds, 0x8F59) &= 0xfd;                //and byte_31489, 0FDh
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15F86:                                      //loc_15F86:
    if (_al != 0x4b)                            //jnz short loc_15F91
      goto loc_15F91;
loc_15F8A:                                      //loc_15F8A:
    memory(_ds, 0x8F59) |= 0x04;                //or byte_31489, 4
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15F91:                                      //loc_15F91:
    if (_al != 0xcb)                            //jnz short loc_15F9C
      goto loc_15F9C;
loc_15F95:                                      //loc_15F95:
    memory(_ds, 0x8F59) &= 0xfb;                //and byte_31489, 0FBh
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15F9C:                                      //loc_15F9C:
    if (_al != 0x4d)                            //jnz short loc_15FA7
      goto loc_15FA7;
loc_15FA0:                                      //loc_15FA0:
    memory(_ds, 0x8F59) |= 0x08;                //or byte_31489, 8
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15FA7:                                      //loc_15FA7:
    if (_al != 0xcd)                            //jnz short loc_15FB2
      goto loc_15FB2;
loc_15FAB:                                      //loc_15FAB:
    memory(_ds, 0x8F59) &= 0xf7;                //and byte_31489, 0F7h
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15FB2:                                      //loc_15FB2:
    if (_al != 0x39)                            //jnz short loc_15FC9
      goto loc_15FC9;
loc_15FB6:                                      //loc_15FB6:
    if (memory(_ds, 0x8F59) & 0x80)             //jnz short loc_15FF7
      goto loc_15FF7;
    memory(_ds, 0x8F5B) = 0xff;                 //mov byte_3148B, 0FFh
    memory(_ds, 0x8F59) |= 0x80;                //or byte_31489, 80h
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15FC9:                                      //loc_15FC9:
    if (_al != 0xb9)                            //jnz short loc_15FD4
      goto loc_15FD4;
loc_15FCD:                                      //loc_15FCD:
    memory(_ds, 0x8F59) &= 0x7f;                //and byte_31489, 7Fh
    goto loc_15FF7;                             //jmp short loc_15FF7
loc_15FD4:                                      //loc_15FD4:
    if (_al != 0x44)                            //jnz short loc_15FF0
      goto loc_15FF0;
    _in(_al, 97);                               //in al, 61h
    _al |= 0x80;                                //or al, 80h
    _out(97, _al);                              //out 61h, al
    _al = _al ^ 0x80;                           //xor al, 80h
    _out(97, _al);                              //out 61h, al
    _al = 0x20;                                 //mov al, 20h
    _out(32, _al);                              //out 20h, al
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _flags.interrupt = true;                    //sti
    _STOP_("goto loc_1054F");                   //jmp loc_1054F
loc_15FEE:                                      //loc_15FEE:
    _al = 0x1c;                                 //mov al, 1Ch
loc_15FF0:                                      //loc_15FF0:
    if ((char)_al < 0)                          //js short loc_15FF7
      goto loc_15FF7;
    memory(_ds, 0x8F58) = _al;                  //mov byte_31488, al
loc_15FF7:                                      //loc_15FF7:
    _in(_al, 97);                               //in al, 61h
    _al |= 0x80;                                //or al, 80h
    _out(97, _al);                              //out 61h, al
    _al = _al ^ 0x80;                           //xor al, 80h
    _out(97, _al);                              //out 61h, al
    _al = 0x20;                                 //mov al, 20h
    _out(32, _al);                              //out 20h, al
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _ds = _pop();                               //pop ds
}

void sub_16058()
{
    memory(_ds, 0x8F53) = 0x00;                 //mov byte_31483, 0
    memory16(_ds, 0x8F50) = 0x0200;             //mov word_31480, 200h
loc_16063:                                      //loc_16063:
    memory16(_ds, 0x8F50) >>= 1;                //shr word_31480, 1
    sub_160EF();                                //call sub_160EF
    if (!(_bx & _bx))                           //jz short locret_160A4
      goto locret_160A4;
    if (memory16(_ds, 0x8F50) == 0x0000)        //jz short loc_1607F
      goto loc_1607F;
    if (_bl < 0x20)                             //jb short loc_16063
      goto loc_16063;
    if (_bh < 0x20)                             //jb short loc_16063
      goto loc_16063;
loc_1607F:                                      //loc_1607F:
    _bh >>= 1;                                  //shr bh, 1
    _bl >>= 1;                                  //shr bl, 1
    memory16(_ds, 0x8F4E) = _bx;                //mov word_3147E, bx
    _al = _bh;                                  //mov al, bh
    _bh <<= 1;                                  //shl bh, 1
    _bh += _al;                                 //add bh, al
    _al = _bl;                                  //mov al, bl
    _bl <<= 1;                                  //shl bl, 1
    _bl += _al;                                 //add bl, al
    memory16(_ds, 0x8F4C) = _bx;                //mov word_3147C, bx
    _ax = memory16(_ds, 0x8F4D);                //mov ax, word_3147C+1
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, 0x8F4D) = _ax;                //mov word_3147C+1, ax
    memory(_ds, 0x8F53) = 0xff;                 //mov byte_31483, 0FFh
locret_160A4:                                   //locret_160A4:
    return;
}

void sub_160A5()
{
    if (memory(_ds, 0x8F53) == 0x00)            //jz short locret_160EE
      goto locret_160EE;
    sub_160EF();                                //call sub_160EF
    _dl = _dl ^ _dl;                            //xor dl, dl
    _al &= 0x30;                                //and al, 30h
    if (_al == 0x30)                            //jz short loc_160B9
      goto loc_160B9;
    _dl = 0x08;                                 //mov dl, 8
loc_160B9:                                      //loc_160B9:
    _ax = memory16(_ds, 0x8F4C);                //mov ax, word_3147C
    _ASSERT(0); /* FIXME */ _rcl(_dl, 1);       //rcl dl, 1
    _ASSERT(0); /* FIXME */ _rcl(_dl, 1);       //rcl dl, 1
    _ax = memory16(_ds, 0x8F4E);                //mov ax, word_3147E
    _ASSERT(0); /* FIXME */ _rcl(_dl, 1);       //rcl dl, 1
    _ASSERT(0); /* FIXME */ _rcl(_dl, 1);       //rcl dl, 1
    if (_dl == memory(_ds, 0x8F5A))             //jz short locret_160EE
      goto locret_160EE;
    if (!(_dl & 0x80))                          //jz short loc_160E6
      goto loc_160E6;
    if (memory(_ds, 0x8F5A) & 0x80)             //jnz short loc_160E6
      goto loc_160E6;
    memory(_ds, 0x8F5B) = 0xff;                 //mov byte_3148B, 0FFh
loc_160E6:                                      //loc_160E6:
    memory(_ds, 0x8F5A) = _dl;                  //mov byte_3148A, dl
    memory(_ds, 0x8F59) = _dl;                  //mov byte_31489, dl
locret_160EE:                                   //locret_160EE:
    return;
}

void sub_160EF()
{
    _flags.interrupt = false;                   //cli
    _dx = 0x0201;                               //mov dx, 201h
    _bp = 0x0100;                               //mov bp, 100h
    _out(_dx, _al);                             //out dx, al
    _bx = _bx ^ _bx;                            //xor bx, bx
loc_160F9:                                      //loc_160F9:
    _in(_al, _dx);                              //in al, dx
    if (!(_al & 0x01))                          //jz short loc_16100
      goto loc_16100;
    _bh += 1;                                   //inc bh
loc_16100:                                      //loc_16100:
    if (!(_al & 0x02))                          //jz short loc_16106
      goto loc_16106;
    _bl += 1;                                   //inc bl
loc_16106:                                      //loc_16106:
    if (!(_al & 0x03))                          //jz short loc_16114
      goto loc_16114;
    _ax = memory16(_ds, 0x8F50);                //mov ax, word_31480
loc_1610D:                                      //loc_1610D:
    _ax -= 1;                                   //dec ax
    if ((short)_ax >= 0)                        //jns short loc_1610D
      goto loc_1610D;
    _bp -= 1;                                   //dec bp
    if (_bp != 0)                               //jnz short loc_160F9
      goto loc_160F9;
    _in(_al, _dx);                              //in al, dx
loc_16114:                                      //loc_16114:
    _flags.interrupt = true;                    //sti
}

void sub_1655B() // shop
{
    WORD _cs = _seg000;

    if (memory(_ds, 0x922C) != 0x00)            //jnz short loc_16590
      goto loc_16590;
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    _ax = _ax + memory16(_ds, 0x9F16);          //add ax, word_32446
    if ((short)_ax >= (short)0x0a80)            //jge short loc_16590
      goto loc_16590;
    std::cout << "enter shop\n";
    memory(_ds, 0x8FB0) = 0xff;                 //mov byte_314E0, 0FFh
    memory(_ds, 0x922C) = 0xff;                 //mov byte_3175C, 0FFh
    memory16(_ds, 0x9190) = 0x09c0;             //mov word_316C0, 9C0h
    memory16(_ds, 0x91AA) = 0x09c0;             //mov word_316DA, 9C0h
    memory16(_ds, 0x918E) = 0x1860;             //mov word_316BE, 1860h
    memory16(_ds, 0x9196) = 0x0000;             //mov word_316C6, 0
loc_16590:                                      //loc_16590:
    if ((short)memory16(_ds, 0x9190) < (short)0x0a40)//jl short loc_165DC
      goto loc_165DC;
    if ((short)memory16(_ds, 0x9190) > (short)0x0d10)//jg short loc_165DC
      goto loc_165DC;
    if ((short)memory16(_ds, 0x91AA) >= (short)0x0d10)
      goto loc_165AE;
    memory16(_ds, 0x91AA) = 0x0d10;             //mov word_316DA, 0D10h
loc_165AE:                                      //loc_165AE:
    sub_16807();                      //call near ptr unk_16807
    _di = 0x91d4;                               //mov di, 91D4h
    _si = 0x65f6;                               //mov si, 65F6h
    _cx = 0x0010;                               //mov cx, 10h
loc_165BA:                                      //loc_165BA:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_165D4
      goto loc_165D4;
    _bx = 0x0000;                               //mov bx, 0
    _bx = _bx + memory16(_cs, _si);             //add bx, cs:[si]
    memory16(_ds, _di) -= 1;                    //dec word ptr [di]
    _bp = memory16(_ds, _di);                   //mov bp, [di]
    _bp &= 0x0003;                              //and bp, 3
    _bp <<= 1;                                  //shl bp, 1
    _ax = memory16(_cs, _bp + _si + 2);         //mov ax, cs:[bp+si+2]
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
loc_165D4:                                      //loc_165D4:
    _di += 0x0002;                              //add di, 2
    _si += 0x000a;                              //add si, 0Ah
    if (--_cx)                                  //loop loc_165BA
      goto loc_165BA;
loc_165DC:                                      //loc_165DC:
    memory(_ds, 0x9226) = 0x00;                 //mov byte_31756, 0
    memory(_ds, 0x9227) = 0x00;                 //mov byte_31757, 0
    memory(_ds, 0x9228) = 0x00;                 //mov byte_31758, 0
    memory(_ds, 0x9229) = 0x00;                 //mov byte_31759, 0
    memory(_ds, 0x922A) = 0x00;                 //mov byte_3175A, 0
}

void sub_165F6()
{
    WORD _cs = _seg000;

    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _FIXME_;                                    //sbb ax, cx
    _push(_bx);                                 //push bx
    memory16(_ds, _si + 65) += _dx;             //add [si+41h], dx
    _push(_sp);                                 //push sp
    _flags.carry = (memory16(_ds, _si - 100) + _dx) >= 0x10000;
    memory16(_ds, _si - 100) += _dx;
    _al -= 0xc1 + _flags.carry;                 //sbb al, 0C1h
    _push(_bx);                                 //push bx
    memory16(_ds, _si + 65) += _dx;             //add [si+41h], dx
    _push(_sp);                                 //push sp
    memory16(_ds, _si + 4) += _dx;              //add [si+4], dx
    _push(_ds);                                 //push ds
    _ASSERT(0); /* unk previous */ _rcl(memory16(_ds, _bp + _di + 1), 84);
    _cx += 1;                                   //inc cx
    _push(_sp);                                 //push sp
    _flags.carry = (memory16(_ds, _si - 92) + _dx) >= 0x10000;
    memory16(_ds, _si - 92) += _dx;
    _ax -= memory16(_ds, _bx + _di) + _flags.carry;//sbb ax, [bx+di]
    _push(_bx);                                 //push bx
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    _flags.carry2 = (memory16(_ds, _bp + _di + 65) + 0x1a53 + _flags.carry) >= 0x10000;
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x1a53 + _flags.carry; _ASSERT(0);_flags.carry = _flags.carry2;
    _al -= 0x01 + _flags.carry;                 //sbb al, 1
    _push(_bx);                                 //push bx
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    _flags.carry2 = (memory16(_ds, _bp + _di + 65) + 0x9453 + _flags.carry) >= 0x10000;
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x9453 + _flags.carry; _ASSERT(0);_flags.carry = _flags.carry2;
    _al -= 0x01 + _flags.carry;                 //sbb al, 1
    _push(_bx);                                 //push bx
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    _flags.carry2 = (memory16(_ds, _bp + _di + 65) + 0x5853 + _flags.carry) >= 0x10000;
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x5853 + _flags.carry; _ASSERT(0);_flags.carry = _flags.carry2;
    _ax -= 0x5301 + _flags.carry;               //sbb ax, 5301h
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x7653 + _flags.carry; _ASSERT(0);
    _ds = _pop();                               //pop ds
    memory16(_ds, _bp + _di + 65) += _dx;       //add [bp+di+41h], dx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0xec53 + _flags.carry; _ASSERT(0);
    _ds = _pop();                               //pop ds
    memory16(_ds, _bp + _di + 65) += _dx;       //add [bp+di+41h], dx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x6653 + _flags.carry; _ASSERT(0);
    memory(_ds, _bx + _di) &= _al;              //and [bx+di], al
    _push(_bx);                                 //push bx
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x5a53 + _flags.carry; _ASSERT(0);
    _ds = _pop();                               //pop ds
    _ASSERT(0); /* unk previous */ _rcl(memory16(_ds, _bp + _di + 1), 84);
    _cx += 1;                                   //inc cx
    _push(_sp);                                 //push sp
    memory16(_ds, _si + 60) += _dx;             //add [si+3Ch], dx
    _ds = _pop();                               //pop ds
    memory16(_ds, _bp + _di + 65) += _dx;       //add [bp+di+41h], dx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0xf853 + _flags.carry; _ASSERT(0);
    _ds = _pop();                               //pop ds
    _ASSERT(0); /* unk previous */ _rcl(memory16(_ds, _bp + _di + 1), 84);
    _cx += 1;                                   //inc cx
    _push(_sp);                                 //push sp
    memory16(_ds, _si - 78) += _dx;             //add [si-4Eh], dx
    _ds = _pop();                               //pop ds
    memory16(_ds, _bp + _di + 65) += _dx;       //add [bp+di+41h], dx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0x4a53 + _flags.carry; _ASSERT(0);
    _cl &= _al;                                 //and cl, al
    _push(_bx);                                 //push bx
    memory16(_ds, _si + 65) += _dx;             //add [si+41h], dx
    _push(_sp);                                 //push sp
    memory16(_ds, _si + 44) += _dx;             //add [si+2Ch], dx
    memory(_ds, _bx + _di) &= _al;              //and [bx+di], al
    _push(_bx);                                 //push bx
    _cx += 1;                                   //inc cx
    _push(_bx);                                 //push bx
    memory16(_ds, _bp + _di + 65) = memory16(_ds, _bp + _di + 65) + 0xc753 + _flags.carry; _ASSERT(0);
    _bp += 1;                                   //inc bp
    _al += 0xb9;                                //add al, 0B9h
    memory(_ds, _bx + _di) |= _ch;              //or [bx+di], ch
    _bp += 1;                                   //inc bp
    _al &= 0x76;                                //and al, 76h
    _bx += _ax;                                 //add bx, ax
    _bp = 0x650d;                               //mov bp, 650Dh
    loc_166B6(); return;                             //jmp short loc_166B6
    memory16(_ds, _di + 4) = 0x08b9;            //mov word ptr [di+4], 8B9h
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_FIXME_)                                //jbe short loc_166B1
      goto loc_166B1;
    return;                                     //retn
loc_166B1:                                      //loc_166B1:
    _bp = 0x6523;                               //mov bp, 6523h
    _STOP_("goto $+2");                         //jmp short $+2
}

void loc_166B6()                                      //loc_166B6:
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    memory16(_ds, _si + 2) = 0x69d0;            //mov word ptr [si+2], 69D0h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    sub_14191();                                //call sub_14191
    memory(_ds, _si + 28) = _al;                //mov [si+1Ch], al
    memory(_ds, _si + 29) = 0x00;               //mov byte ptr [si+1Dh], 0
    _ax = memory16(_ds, _di + 52);              //mov ax, [di+34h]
    _flags.carry = (memory16(_ds, 0x9152) + _ax) >= 0x10000;
    memory16(_ds, 0x9152) += _ax;
    memory16(_ds, 0x9154) = memory16(_ds, 0x9154) + 0x0000 + _flags.carry;
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
//    return;                                     //retn
//    _STOP_("sp-trace-fail");                    //sub_165F6 endp_failed
//    _STOP_("continues");                        //db  0Bh
    //???? stack?
}

void sub_16D22()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    _ax += 0x00d0;                              //add ax, 0D0h
    if ((short)_ax >= (short)memory16(_ds, _si + 22))//jge short loc_16D30
      goto loc_16D30;
    goto loc_16DD0;                             //jmp loc_16DD0
loc_16D30:                                      //loc_16D30:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x000a;                              //add ax, 0Ah
    memory16(_ds, _si + 40) = _ax;              //mov [si+28h], ax
    _ax += 0x0012;                              //add ax, 12h
    memory16(_ds, _si + 44) = _ax;              //mov [si+2Ch], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax += 0x0018;                              //add ax, 18h
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    _bx = memory16(_ds, _si + 26);              //mov bx, [si+1Ah]
    _bx &= 0xfffc;                              //and bx, 0FFFCh
    _bx <<= 1;                                  //shl bx, 1
    _di = 0x6dfc;                               //mov di, 6DFCh
    if (memory16(_ds, _si) == 0x00e8)           //jz short loc_16D66
      goto loc_16D66;
    _di = 0x6ddc;                               //mov di, 6DDCh
loc_16D66:                                      //loc_16D66:
    _bx += _di;                                 //add bx, di
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_ds, _di + 40) = _ax;              //mov [di+28h], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_ds, _di + 42) = _ax;              //mov [di+2Ah], ax
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    memory16(_ds, _si + 26) &= 0x000f;          //and word ptr [si+1Ah], 0Fh
    _al = memory(_cs, 0x626E);                  //mov al, cs:byte_16260+0Eh
    _flags.carry = (memory(_ds, _si + 72) + _al) >= 0x100;
    memory(_ds, _si + 72) += _al;
    if (!_flags.carry)                          //jnb short locret_16DD3
      goto locret_16DD3;
    sub_14191();                                //call sub_14191
    _al &= 0x3f;                                //and al, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x0020;                              //add ax, 20h
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    _bx += 0x000e;                              //add bx, 0Eh
    _bp = memory(_cs, 0x6270);                  //mov bp, word ptr cs:byte_16260+10h
    _bp <<= 1;                                  //shl bp, 1
    _bp = memory16(_cs, _bp + 30294);           //mov bp, cs:[bp+7656h]
    _cx = 0x0002;                               //mov cx, 2
    if (memory16(_ds, _si) == 0x00ec)           //jz short loc_16DC8
      goto loc_16DC8;
    _cx = 0x0006;                               //mov cx, 6
    _ax -= 0x0020;                              //sub ax, 20h
loc_16DC8:                                      //loc_16DC8:
    _dx = memory(_cs, 0x6272);                  //mov dx, word ptr cs:byte_16260+12h
{sub_11ED3(); return; };                        //
loc_16DD0:                                      //loc_16DD0:
    sub_107C0();                                //call sub_107C0
locret_16DD3:                                   //locret_16DD3:
    return;
}

void sub_16F00()
{
    WORD _cs = _seg000;

    _di = _si;                                  //mov di, si
    _ax = 0x00e0;                               //mov ax, 0E0h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_16F0E
      goto loc_16F0E;
    _ax = 0x00e4;                               //mov ax, 0E4h
loc_16F0E:                                      //loc_16F0E:
    _bx = 0x6ac7;                               //mov bx, 6AC7h
    sub_13529();                                //call sub_13529
    memory16(_ds, _si + 6) = 0x3b76;            //mov word ptr [si+6], 3B76h
    _ax = memory(_cs, 0x627A);                  //mov ax, word ptr cs:byte_16260+1Ah
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    _bx = 0x6b9a;                               //mov bx, 6B9Ah
    _bp = 0x6bc2;                               //mov bp, 6BC2h
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_16F44
      goto loc_16F44;
    _bx = 0x6b7a;                               //mov bx, 6B7Ah
    _bp = 0x6bba;                               //mov bp, 6BBAh
    memory16(_ds, _si + 56) += 0x0002;          //add word ptr [si+38h], 2
    memory16(_ds, _si + 18) += 0x0010;          //add word ptr [si+12h], 10h
loc_16F44:                                      //loc_16F44:
    memory16(_ds, _si + 12) = _bx;              //mov [si+0Ch], bx
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    memory16(_ds, _si + 56) -= 0x0002;          //sub word ptr [si+38h], 2
    memory16(_ds, _si + 18) -= 0x0010;          //sub word ptr [si+12h], 10h
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_ds, _di + 40) = _ax;              //mov [di+28h], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_ds, _di + 42) = _ax;              //mov [di+2Ah], ax
    memory16(_ds, _si + 52) = 0x0064;           //mov word ptr [si+34h], 64h
    memory16(_ds, _si + 48) = 0x0001;           //mov word ptr [si+30h], 1
    memory16(_ds, _si + 50) = 0x0001;           //mov word ptr [si+32h], 1
}

void sub_16F7F()
{
    WORD _cs = _seg000;

    _di = _si;                                  //mov di, si
    _ax = 0x00e8;                               //mov ax, 0E8h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_16F8D
      goto loc_16F8D;
    _ax = 0x00ec;                               //mov ax, 0ECh
loc_16F8D:                                      //loc_16F8D:
    _bx = 0x6d22;                               //mov bx, 6D22h
    sub_13529();                                //call sub_13529
    memory16(_ds, _si + 6) = 0x3b76;            //mov word ptr [si+6], 3B76h
    _ax = memory(_cs, 0x627C);                  //mov ax, word ptr cs:byte_16260+1Ch
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    _bx = 0x6ddc;                               //mov bx, 6DDCh
    _bp = 0x6e24;                               //mov bp, 6E24h
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_16FBB
      goto loc_16FBB;
    _bx = 0x6dfc;                               //mov bx, 6DFCh
    _bp = 0x6e1c;                               //mov bp, 6E1Ch
loc_16FBB:                                      //loc_16FBB:
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    memory16(_ds, _si + 12) = _bx;              //mov [si+0Ch], bx
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    memory16(_ds, _si + 52) = 0x0064;           //mov word ptr [si+34h], 64h
    memory16(_ds, _si + 48) = 0x0001;           //mov word ptr [si+30h], 1
    memory16(_ds, _si + 50) = 0x0001;           //mov word ptr [si+32h], 1
}

void sub_16FE0()
{
    WORD _cs = _seg000;

    _di = _si;                                  //mov di, si
    _ax = 0x00d8;                               //mov ax, 0D8h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_16FEE
      goto loc_16FEE;
    _ax = 0x00dc;                               //mov ax, 0DCh
loc_16FEE:                                      //loc_16FEE:
    _bx = 0x6bca;                               //mov bx, 6BCAh
    sub_13529();                                //call sub_13529
    memory16(_ds, _si + 6) = 0x3b76;            //mov word ptr [si+6], 3B76h
    _ax = memory(_cs, 0x627E);                  //mov ax, word ptr cs:byte_16260+1Eh
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    _bx = 0x704b;                               //mov bx, 704Bh
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_17016
      goto loc_17016;
    _bx = 0x7053;                               //mov bx, 7053h
loc_17016:                                      //loc_17016:
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    memory16(_ds, _si + 12) = _bx;              //mov [si+0Ch], bx
    memory16(_ds, _si + 16) = 0x6dd4;           //mov word ptr [si+10h], 6DD4h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_ds, _di + 40) = _ax;              //mov [di+28h], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_ds, _di + 42) = _ax;              //mov [di+2Ah], ax
    memory16(_ds, _si + 52) = 0x0064;           //mov word ptr [si+34h], 64h
    memory16(_ds, _si + 48) = 0x0001;           //mov word ptr [si+30h], 1
    memory16(_ds, _si + 50) = 0x0001;           //mov word ptr [si+32h], 1
}

void sub_1705B()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x00d4;                //mov word ptr [si], 0D4h
    _bx = 0x64e7;                               //mov bx, 64E7h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_1707A
      goto loc_1707A;
    memory16(_ds, _si) = 0x00d0;                //mov word ptr [si], 0D0h
    _bx = 0x64c1;                               //mov bx, 64C1h
loc_1707A:                                      //loc_1707A:
    memory16(_ds, _si + 2) = 0x6e2c;            //mov word ptr [si+2], 6E2Ch
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0002;                              //add bx, 2
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    memory16(_ds, _si + 6) = 0x3aa7;            //mov word ptr [si+6], 3AA7h
    _ax = memory(_cs, 0x6280);                  //mov ax, word ptr cs:byte_16260+20h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory(_ds, _si + 39) = 0xff;               //mov byte ptr [si+27h], 0FFh
    memory16(_ds, _si + 52) = 0x00fa;           //mov word ptr [si+34h], 0FAh
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    _ax = memory16(_ds, _di + 8);               //mov ax, [di+8]
    _ax -= 0x0008;                              //sub ax, 8
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_170C2
      goto loc_170C2;
    _ax += 0x0010;                              //add ax, 10h
loc_170C2:                                      //loc_170C2:
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 10);              //mov ax, [di+0Ah]
    _ax -= 0x0008;                              //sub ax, 8
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 26) = 0xffff;           //mov word ptr [si+1Ah], 0FFFFh
    _bx = memory16(_ds, _di + 6);               //mov bx, [di+6]
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    memory16(_ds, _si + 28) = _bx;              //mov [si+1Ch], bx
    memory16(_ds, _si + 34) = _bx;              //mov [si+22h], bx
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    sub_13589();                                //call sub_13589
}

void sub_170F1()
{
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //jmp cs:off_170F8[bx]
    {
      case 0: loc_13360(); return;
      case 2: goto loc_1710E;
      case 4: goto loc_17114;
      case 6: goto loc_1711A;
      case 8: goto loc_17120;
      case 10: goto loc_17126;
      case 12: goto loc_1712C;
      case 14: goto loc_17132;
      case 16: goto loc_17138;
      case 18: goto loc_1713E;
      case 20: goto loc_17144;
      default:
        _ASSERT(0);
    }
loc_1710E:                                      //loc_1710E:
    _bx = 0x6285;                               //mov bx, 6285h
{sub_13389(); return; };                        //
loc_17114:                                      //loc_17114:
    _bx = 0x6297;                               //mov bx, 6297h
{sub_13389(); return; };                        //
loc_1711A:                                      //loc_1711A:
    _bx = 0x62a9;                               //mov bx, 62A9h
{sub_13389(); return; };                        //
loc_17120:                                      //loc_17120:
    _bx = 0x62bb;                               //mov bx, 62BBh
{sub_13389(); return; };                        //
loc_17126:                                      //loc_17126:
    _bx = 0x62cd;                               //mov bx, 62CDh
{sub_13389(); return; };                        //
loc_1712C:                                      //loc_1712C:
    _bx = 0x62df;                               //mov bx, 62DFh
{sub_13389(); return; };                        //
loc_17132:                                      //loc_17132:
    _bx = 0x62f1;                               //mov bx, 62F1h
{sub_13389(); return; };                        //
loc_17138:                                      //loc_17138:
    _bx = 0x6313;                               //mov bx, 6313h
{sub_13389(); return; };                        //
loc_1713E:                                      //loc_1713E:
    _bx = 0x6325;                               //mov bx, 6325h
{sub_13389(); return; };                        //
loc_17144:                                      //loc_17144:
    _bx = 0x6337;                               //mov bx, 6337h
{sub_13389(); return; };                        //
}

void sub_1714A()
{
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
}

void sub_1714D()
{
    if (memory(_ds, 0x922B) == 0x00)            //jz short locret_171A8
      goto locret_171A8;
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x8EB4);                //mov ax, word_313E4
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0x8EB6);                //mov ax, word_313E6
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, 0x8EB8);                //mov ax, word_313E8
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    _ax = memory16(_ds, 0x8EBA);                //mov ax, word_313EA
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    memory16(_ds, 0xFCF2) = 0x0098;             //mov word_38222, 98h
    memory16(_ds, 0xFCFA) = 0x00a7;             //mov word_3822A, 0A7h
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCF6) -= _ax;               //sub word_38226, ax
    memory16(_ds, 0xFCF6) += 0x0044;            //add word_38226, 44h
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    memory16(_ds, 0xFCFE) += 0x000e;            //add word_3822E, 0Eh
    sub_10F2F();                                //call sub_10F2F
    if (_flags.zero)                                //jz short loc_171A7
      goto loc_171A7;
    _ax = _pop();                               //pop ax
    memory16(_ds, _di + 4) = 0x7569;            //mov word ptr [di+4], 7569h
    _flags.carry2 = memory16(_ds, _di + 36) <= _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //jbe short loc_171A9
      goto loc_171A9;
    return;                                     //retn
loc_171A7:                                      //loc_171A7:
    _ax = _pop();                               //pop ax
locret_171A8:                                   //locret_171A8:
    return;                                     //retn
loc_171A9:                                      //loc_171A9:
    memory(_ds, 0x922B) = 0x00;                 //mov byte_3175B, 0
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _cx = 0x0008;                               //mov cx, 8
    sub_115E4();
    _cx = 0x0013;                               //mov cx, 13h
    _ax = 0x0000;                               //mov ax, 0
    _bx = 0x0000;                               //mov bx, 0
    _dx = 0x0140;                               //mov dx, 140h
    _di = 0x00c0;                               //mov di, 0C0h
    _bp = 0x124c;                               //mov bp, 124Ch
    sub_11588();
    _si = memory16(_ds, 0x9054);                //mov si, word_31584
    sub_13760();                                //call sub_13760
    _si = _pop();                               //pop si
    memory(_ds, 0x8F61) = 0xff;                 //mov byte_31491, 0FFh
}

void sub_171DD()
{
    WORD _cs = _seg000;

    if (memory(_ds, 0x922B) != 0x00)            //jnz short loc_171E7
      goto loc_171E7;
    goto loc_172C0;                             //jmp loc_172C0
loc_171E7:                                      //loc_171E7:
    _di = memory16(_ds, _si + 16);              //mov di, [si+10h]
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 20);              //mov ax, [di+14h]
    memory16(_ds, _si + 20) = _ax;              //mov [si+14h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, _di + 24);              //mov ax, [di+18h]
    memory16(_ds, _si + 24) = _ax;              //mov [si+18h], ax
    _ax = memory16(_ds, _di + 28);              //mov ax, [di+1Ch]
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax = memory16(_ds, _di + 30);              //mov ax, [di+1Eh]
    memory16(_ds, _si + 30) = _ax;              //mov [si+1Eh], ax
    _ax = memory16(_ds, _di + 60);              //mov ax, [di+3Ch]
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    _ax = memory16(_ds, _di + 62);              //mov ax, [di+3Eh]
    memory16(_ds, _si + 62) = _ax;              //mov [si+3Eh], ax
    _ax = memory16(_ds, _di + 64);              //mov ax, [di+40h]
    memory16(_ds, _si + 64) = _ax;              //mov [si+40h], ax
    _ax = memory16(_ds, _di + 66);              //mov ax, [di+42h]
    memory16(_ds, _si + 66) = _ax;              //mov [si+42h], ax
    if (memory16(_ds, _di) != 0x0050)           //jnz short loc_17244
      goto loc_17244;
    memory16(_ds, _si + 18) = 0x00a0;           //mov word ptr [si+12h], 0A0h
    memory16(_ds, _si + 20) = 0x0000;           //mov word ptr [si+14h], 0
    memory16(_ds, _si + 22) += 0x0060;          //add word ptr [si+16h], 60h
    memory16(_ds, _si + 24) = 0x0000;           //mov word ptr [si+18h], 0
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, _si + 22) -= _ax;             //sub [si+16h], ax
loc_17244:                                      //loc_17244:
    memory16(_ds, _si + 26) = 0x0064;           //mov word ptr [si+1Ah], 64h
    loc_1480E();                                //call loc_1480E
    if (memory16(_ds, _si + 66) == 0x0000)      //jz short loc_172B5
      goto loc_172B5;
    if (memory16(_ds, _si) != 0x0100)           //jnz short loc_172B2
      goto loc_172B2;
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    _bx = memory16(_ds, 0x9F16);                //mov bx, word_32446
    _bx = _bx - memory16(_ds, _si + 22);        //sub bx, [si+16h]
    sub_11B90();                                //call sub_11B90
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _bx = _ax;                                  //mov bx, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_cs, _bx + 30444);           //mov ax, cs:[bx+76ECh]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    if ((short)memory16(_ds, _si + 66) < (short)0x000b)
      goto loc_172B2;
    _flags.carry = (memory(_ds, _si + 72) + 0x0f) >= 0x100;
    memory(_ds, _si + 72) += 0x0f;
    if (!_flags.carry)                          //jnb short loc_172B2
      goto loc_172B2;
    sub_14191();                                //call sub_14191
    _ax &= 0x003f;                              //and ax, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _cx = memory16(_ds, _si + 28);              //mov cx, [si+1Ch]
    _dx = 0x0004;                               //mov dx, 4
    sub_11ED3();                                //call sub_11ED3
    _bp = 0x6549;                               //mov bp, 6549h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _di + 14) = _ax;              //mov [di+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
loc_172B2:                                      //loc_172B2:
{sub_13589(); return; };                        //
loc_172B5:                                      //loc_172B5:
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    return;                                     //retn
loc_172C0:                                      //loc_172C0:
    sub_107C0();                                //call sub_107C0
}

void sub_172C4()
{
    WORD _cs = _seg000;

    if ((short)memory16(_ds, 0x9190) <= (short)0x01c0)
      goto loc_172CF;
    goto loc_17515;                             //jmp loc_17515
loc_172CF:                                      //loc_172CF:
    if (memory(_ds, 0x922B) == 0x00)            //jz short loc_172D9
      goto loc_172D9;
    goto loc_1736A;                             //jmp loc_1736A
loc_172D9:                                      //loc_172D9:
    memory(_ds, 0x922B) = 0xff;                 //mov byte_3175B, 0FFh
    _cx = 0x0007;                               //mov cx, 7
    _bp = _si;                                  //mov bp, si
loc_172E3:                                      //loc_172E3:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    if (_cx != 0x0007)                          //jnz short loc_172FD
      goto loc_172FD;
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
    goto loc_17308;                             //jmp short loc_17308
loc_172FD:                                      //loc_172FD:
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    _di = _bp;                                  //mov di, bp
    sub_1077C();                                //call sub_1077C
    _di = _si;                                  //mov di, si
    _si = _pop();                               //pop si
loc_17308:                                      //loc_17308:
    memory16(_ds, _di) = 0x00fc;                //mov word ptr [di], 0FCh
    if (_cx & _cx)                              //jnz short loc_17314
      goto loc_17314;
    memory16(_ds, _di) = 0x0100;                //mov word ptr [di], 100h
loc_17314:                                      //loc_17314:
    memory16(_ds, _di + 2) = 0x71dd;            //mov word ptr [di+2], 71DDh
    memory16(_ds, _di + 4) = 0x0853;            //mov word ptr [di+4], 853h
    memory16(_ds, _di + 6) = 0x3a99;            //mov word ptr [di+6], 3A99h
    memory16(_ds, _di + 12) = 0x2e0f;           //mov word ptr [di+0Ch], 2E0Fh
    memory16(_ds, _di + 14) = 0x0000;           //mov word ptr [di+0Eh], 0
    memory16(_ds, _di + 72) = 0x0000;           //mov word ptr [di+48h], 0
    memory16(_ds, _di + 16) = _bp;              //mov [di+10h], bp
    _bp = _di;                                  //mov bp, di
    memory(_ds, _di + 39) = 0x00;               //mov byte ptr [di+27h], 0
    memory(_ds, _di + 74) = 0xff;               //mov byte ptr [di+4Ah], 0FFh
    memory16(_ds, _di + 22) = 0xff9c;           //mov word ptr [di+16h], 0FF9Ch
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 44) = 0x03e8;           //mov word ptr [di+2Ch], 3E8h
    _cx -= 1;                                   //dec cx
    if ((short)_cx >= 0)                        //jns short loc_172E3
      goto loc_172E3;
    memory16(_ds, _si + 28) = 0x0000;           //mov word ptr [si+1Ch], 0
    memory16(_ds, _si + 30) = 0x0000;           //mov word ptr [si+1Eh], 0
    memory16(_ds, _si + 60) = 0x0000;           //mov word ptr [si+3Ch], 0
    memory16(_ds, _si + 62) = 0x0000;           //mov word ptr [si+3Eh], 0
    memory16(_ds, _si + 64) = 0x0000;           //mov word ptr [si+40h], 0
loc_1736A:                                      //loc_1736A:
    if ((short)memory16(_ds, 0x91AA) > (short)0x01c0)//jg short loc_17378
      goto loc_17378;
    memory16(_ds, 0x91AA) = 0x01c0;             //mov word_316DA, 1C0h
loc_17378:                                      //loc_17378:
    memory16(_ds, _si + 40) = 0x0080;           //mov word ptr [si+28h], 80h
    memory16(_ds, _si + 44) = 0x00c8;           //mov word ptr [si+2Ch], 0C8h
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax += 0x0050;                              //add ax, 50h
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    if (memory16(_ds, _si + 26) != 0x0000)      //jnz short loc_173B6
      goto loc_173B6;
    _ax = 0x0030;                               //mov ax, 30h
    if ((short)memory16(_ds, 0x9190) <= (short)_ax)//jle short loc_173A7
      goto loc_173A7;
    goto loc_174B3;                             //jmp loc_174B3
loc_173A7:                                      //loc_173A7:
    memory16(_ds, _si + 26) = 0x0001;           //mov word ptr [si+1Ah], 1
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
    memory16(_ds, _si + 34) = 0x00aa;           //mov word ptr [si+22h], 0AAh
loc_173B6:                                      //loc_173B6:
    if ((short)memory16(_ds, _si + 26) < 0 /*CHECK*/)//js short loc_173D3
      goto loc_173D3;
    if ((short)memory16(_ds, _si + 66) >= (short)0x000b)
      goto loc_173DC;
    if (memory16(_ds, _si + 66) != 0x0000)      //jnz short loc_173CE
      goto loc_173CE;
    memory16(_ds, 0x8E8A) = 0x0001;             //mov word_313BA, 1
loc_173CE:                                      //loc_173CE:
    memory16(_ds, _si + 66) += 1;               //inc word ptr [si+42h]
    goto loc_173DC;                             //jmp short loc_173DC
loc_173D3:                                      //loc_173D3:
    if (memory16(_ds, _si + 66) == 0x0000)      //jz short loc_173DC
      goto loc_173DC;
    memory16(_ds, _si + 66) -= 1;               //dec word ptr [si+42h]
loc_173DC:                                      //loc_173DC:
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    if (memory16(_ds, _si + 26) == 0)           //jz short loc_173DC
      goto loc_173DC;
    if ((short)memory16(_ds, _si + 26) < (short)0x0064)
      goto loc_173EC;
    memory16(_ds, _si + 26) = 0xffd8;           //mov word ptr [si+1Ah], 0FFD8h
loc_173EC:                                      //loc_173EC:
    _ax = memory16(_ds, 0x919C);                //mov ax, word_316CC
    _ax &= 0x007f;                              //and ax, 7Fh
    if (!(_ax & 0x0040))                        //jz short loc_173FC
      goto loc_173FC;
    _ax -= 0x007f;                              //sub ax, 7Fh
    _ax = -_ax;                                 //neg ax
loc_173FC:                                      //loc_173FC:
    _cbw();                                     //cbw
    _ax += 0x0020;                              //add ax, 20h
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax = memory16(_ds, 0x919C);                //mov ax, word_316CC
    _ax += 0x0050;                              //add ax, 50h
    _ax &= 0x00ff;                              //and ax, 0FFh
    if (!(_ax & 0x0080))                        //jz short loc_17413
      goto loc_17413;
    _al = (~_al);                               //not al
loc_17413:                                      //loc_17413:
    _ax -= 0x0040;                              //sub ax, 40h
    _cwd();                                     //cwd
    _dh = _dl;                                  //mov dh, dl
    _dl = _ah;                                  //mov dl, ah
    _ah = _al;                                  //mov ah, al
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    memory16(_ds, _si + 62) = _dx;              //mov [si+3Eh], dx
    _ax = memory16(_ds, 0x919C);                //mov ax, word_316CC
    _ax += 0x00a0;                              //add ax, 0A0h
    _ax &= 0x01ff;                              //and ax, 1FFh
    if (!(_ax & 0x0100))                        //jz short loc_1743E
      goto loc_1743E;
    _ax = _ax ^ 0x01ff;                         //xor ax, 1FFh
loc_1743E:                                      //loc_1743E:
    _ax -= 0x0080;                              //sub ax, 80h
    _cl = 0x05;                                 //mov cl, 5
    _ax <<= _cl;                                //shl ax, cl
    memory16(_ds, _si + 64) = _ax;              //mov [si+40h], ax
    _ax = memory16(_ds, _si + 32);              //mov ax, [si+20h]
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    if ((short)_ax >= (short)0x0010)            //jge short loc_1745B
      goto loc_1745B;
    _ax = 0x0010;                               //mov ax, 10h
    memory16(_ds, _si + 34) = 0x0000;           //mov word ptr [si+22h], 0
loc_1745B:                                      //loc_1745B:
    if ((short)_ax <= (short)0x01e0)            //jle short loc_17468
      goto loc_17468;
    _ax = 0x01e0;                               //mov ax, 1E0h
    memory16(_ds, _si + 34) = 0x0000;           //mov word ptr [si+22h], 0
loc_17468:                                      //loc_17468:
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 34) -= 1;               //dec word ptr [si+22h]
    if ((short)memory16(_ds, _si + 34) >= 0)    //jns short loc_174A9
      goto loc_174A9;
    if (memory16(_ds, _si + 32) != 0xffff)      //jnz short loc_17482
      goto loc_17482;
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
    memory16(_ds, _si + 34) = 0x00aa;           //mov word ptr [si+22h], 0AAh
    goto loc_174A9;                             //jmp short loc_174A9
loc_17482:                                      //loc_17482:
    if (memory16(_ds, _si + 32) != 0x0001)      //jnz short loc_17494
      goto loc_17494;
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
    memory16(_ds, _si + 34) = 0x003c;           //mov word ptr [si+22h], 3Ch
    goto loc_174A9;                             //jmp short loc_174A9
loc_17494:                                      //loc_17494:
    memory16(_ds, _si + 34) = 0x0032;           //mov word ptr [si+22h], 32h
    memory16(_ds, _si + 32) = 0x0001;           //mov word ptr [si+20h], 1
    if (memory16(_ds, _si + 22) == 0x0010)      //jz short loc_174A9
      goto loc_174A9;
    memory16(_ds, _si + 32) = 0xffff;           //mov word ptr [si+20h], 0FFFFh
loc_174A9:                                      //loc_174A9:
    _ax = 0x001e;                               //mov ax, 1Eh
    _ax = _ax - memory16(_ds, _si + 36);        //sub ax, [si+24h]
    memory(_ds, 0x91FE) += _al;                 //add byte ptr word_3172E, al
loc_174B3:                                      //loc_174B3:
    _bx = memory16(_ds, 0x919C);                //mov bx, word_316CC
    _bx &= 0x000c;                              //and bx, 0Ch
    _bx >>= 1;                                  //shr bx, 1
    _bx = memory16(_cs, _bx + 30436);           //mov bx, cs:[bx+76E4h]
    _di = 0x769e;                               //mov di, 769Eh
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    _di += 0x0004;                              //add di, 4
    _bx += 0x0004;                              //add bx, 4
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    _bx += 0x0004;                              //add bx, 4
    _di += 0x0008;                              //add di, 8
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    _di += 0x0004;                              //add di, 4
    _bx += 0x0004;                              //add bx, 4
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    if (memory16(_ds, _si + 26) == 0x0000)      //jz short loc_17515
      goto loc_17515;
    return;                                     //retn
loc_17515:                                      //loc_17515:
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
}

void sub_17520()
{
    WORD _cs = _seg000;

    if ((short)memory16(_ds, 0x9190) >= (short)0x0280)
      goto locret_17568;
    _ax = 0x0006;                               //mov ax, 6
    _bx = 0x0007;                               //mov bx, 7
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _cx = 0x0038;                               //mov cx, 38h
    _push(_si);                                 //push si
    _si = 0x7660;                               //mov si, 7660h
    sub_10941();                                //call sub_10941
    _si = _pop();                               //pop si
    _bx = memory16(_ds, 0x91FE);                //mov bx, word_3172E
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx &= 0x0006;                              //and bx, 6
    _cx = 0x0098;                               //mov cx, 98h
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _dx += 0x0042;                              //add dx, 42h
    _push(_si);                                 //push si
    _si = memory16(_cs, _bx + 30460);           //mov si, cs:[bx+76FCh]
    sub_10875();                                //call sub_10875
    _si = _pop();                               //pop si
locret_17568:                                   //locret_17568:
    return;
}

void sub_17569()
{
    memory16(_ds, _si + 4) = 0x7520;            //mov word ptr [si+4], 7520h
    if ((short)memory16(_ds, 0x9190) >= (short)0x0280)
      goto locret_1758E;
    _ax = 0x0006;                               //mov ax, 6
    _bx = 0x0007;                               //mov bx, 7
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _cx = 0x0038;                               //mov cx, 38h
    _push(_si);                                 //push si
    _si = 0x7660;                               //mov si, 7660h
    sub_10963();                                //call sub_10963
    _si = _pop();                               //pop si
locret_1758E:                                   //locret_1758E:
    return;
}

void sub_1758F()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x8EAC) = 0x0bb8;             //mov word_313DC, 0BB8h
    memory16(_ds, 0x8EAE) = 0x0258;             //mov word_313DE, 258h
    memory16(_ds, 0x91A8) = 0x0000;             //mov word_316D8, 0
    memory16(_ds, 0x91AA) = 0x11ff;             //mov word_316DA, 11FFh
    memory(_ds, 0x922C) = 0x00;                 //mov byte_3175C, 0
    memory16(_ds, 0x91FE) = 0x0000;             //mov word_3172E, 0
    sub_11022();                                //call sub_11022
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _si) = 0x0050;                //mov word ptr [si], 50h
    memory16(_ds, _si + 2) = 0x72c4;            //mov word ptr [si+2], 72C4h
    memory16(_ds, _si + 4) = 0x7520;            //mov word ptr [si+4], 7520h
    memory16(_ds, _si + 6) = 0x714d;            //mov word ptr [si+6], 714Dh
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    memory(_ds, _si + 75) = 0xff;               //mov byte ptr [si+4Bh], 0FFh
    memory16(_ds, _si + 22) = 0x0010;           //mov word ptr [si+16h], 10h
    _ax = memory(_cs, 0x6278);                  //mov ax, word ptr cs:byte_16260+18h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    memory16(_ds, _si + 66) = 0x0000;           //mov word ptr [si+42h], 0
    memory(_ds, 0x922B) = 0x00;                 //mov byte_3175B, 0
    memory(_ds, 0x9226) = 0x00;                 //mov byte_31756, 0
    memory(_ds, 0x9227) = 0x00;                 //mov byte_31757, 0
    memory(_ds, 0x9228) = 0x00;                 //mov byte_31758, 0
    memory(_ds, 0x9229) = 0x00;                 //mov byte_31759, 0
    memory(_ds, 0x922A) = 0x00;                 //mov byte_3175A, 0
    _di = 0x91d4;                               //mov di, 91D4h
    _cx = 0x0010;                               //mov cx, 10h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    memory16(_ds, 0x91F4) = 0xd272;             //mov word_31724, 0D272h
    memory16(_ds, 0x91F6) = 0x6a4a;             //mov word_31726, 6A4Ah
    memory16(_ds, 0x91F8) = 0xba5d;             //mov word_31728, 0BA5Dh
    memory16(_ds, 0x91FA) = 0x2512;             //mov word_3172A, 2512h
    memory16(_ds, 0x91FC) = 0xe51a;             //mov word_3172C, 0E51Ah
    _ax = 0x0001;                               //mov ax, 1
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = memory16(_ds, 0x991A) * _al;          //mul word_31E4A
    memory16(_ds, 0x8E76) = _ax;                //mov word_313A6, ax
    _ax = 0x0002;                               //mov ax, 2
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = memory16(_ds, 0x991A) * _al;          //mul word_31E4A
    memory16(_ds, 0x8E78) = _ax;                //mov word_313A8, ax
    memory16(_ds, 0x8E72) = 0x3463;             //mov word_313A2, 3463h
}

void loc_18B81()
{
    WORD _cs = _seg000;

    _ah = 0x11;                                 //mov ah, 11h
    _interrupt(128);                            //int 80h
    if (_al & _al)                              //jnz short loc_18B8F
      goto loc_18B8F;
    memory16(_ds, 0x8E88) = 0x0011;             //mov word_313B8, 11h
loc_18B8F:                                      //loc_18B8F:
    memory16(_ds, _si + 32) -= 1;               //dec word ptr [si+20h]
    _ax = memory16(_ds, _si + 28);              //mov ax, [si+1Ch]
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    if ((short)_ax >= (short)0x0060)            //jge short loc_18BA5
      goto loc_18BA5;
    _ax = 0x0060;                               //mov ax, 60h
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
loc_18BA5:                                      //loc_18BA5:
    if ((short)_ax <= (short)0x00c0)            //jle short loc_18BB2
      goto loc_18BB2;
    _ax = 0x00c0;                               //mov ax, 0C0h
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
loc_18BB2:                                      //loc_18BB2:
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _bx = memory16(_ds, 0x919C);                //mov bx, word_316CC
    _bx &= 0x0001;                              //and bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _push(_bx);                                 //push bx
    _bx = memory16(_cs, _bx + -27397);          //mov bx, cs:[bx-6B05h]
    _di = 0x933b;                               //mov di, 933Bh
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_cs, _di + 12) = _ax;              //mov cs:[di+0Ch], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_cs, _di + 14) = _ax;              //mov cs:[di+0Eh], ax
    _bx = _pop();                               //pop bx
    _bx = memory16(_cs, _bx + -27393);          //mov bx, cs:[bx-6B01h]
    _di = 0x9343;                               //mov di, 9343h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, _di) = _ax;                   //mov cs:[di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_cs, _di + 2) = _ax;               //mov cs:[di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_cs, _di + 12) = _ax;              //mov cs:[di+0Ch], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_cs, _di + 14) = _ax;              //mov cs:[di+0Eh], ax
    return;                                     //retn
loc_18C0D:                                      //loc_18C0D:
    if ((short)memory16(_ds, 0x8F32) >= (short)0x0010)
      goto loc_18C26;
    sub_14191();                                //call sub_14191
    if (_ax & 0x2000)                           //jnz short loc_18C26
      goto loc_18C26;
    _ax &= 0x0007;                              //and ax, 7
    _ax += 0x0002;                              //add ax, 2
    memory16(_ds, _si + 48) = _ax;              //mov [si+30h], ax
    return;                                     //retn
loc_18C26:                                      //loc_18C26:
    _dx = 0xfffd;                               //mov dx, 0FFFDh
    if (_ax & 0x4000)                           //jnz short loc_18C31
      goto loc_18C31;
    _dx = 0x0003;                               //mov dx, 3
loc_18C31:                                      //loc_18C31:
    _ax &= 0x0007;                              //and ax, 7
    _ax += 0x0008;                              //add ax, 8
    memory16(_ds, _si + 32) = _ax;              //mov [si+20h], ax
    memory16(_ds, _si + 28) = _dx;              //mov [si+1Ch], dx
    return;                                     //retn
    if ((short)memory16(_ds, 0x9190) >= (short)0x0160)
      goto locret_18C5E;
    _push(_si);                                 //push si
    _ax = 0x0006;                               //mov ax, 6
    _bx = 0x0009;                               //mov bx, 9
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _cx = 0x0038;                               //mov cx, 38h
    _si = 0x92e7;                               //mov si, 92E7h
    sub_10941();                                //call sub_10941
    _si = _pop();                               //pop si
locret_18C5E:                                   //locret_18C5E:
    return;
}

void sub_18C5F()
{
    memory16(_ds, _si + 4) = 0x8c3e;            //mov word ptr [si+4], 8C3Eh
    if ((short)memory16(_ds, 0x9190) >= (short)0x0160)
      goto locret_18C84;
    _push(_si);                                 //push si
    _ax = 0x0006;                               //mov ax, 6
    _bx = 0x0009;                               //mov bx, 9
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx - memory16(_ds, 0x9190);          //sub dx, word_316C0
    _cx = 0x0038;                               //mov cx, 38h
    _si = 0x92e7;                               //mov si, 92E7h
    sub_10963();                                //call sub_10963
    _si = _pop();                               //pop si
locret_18C84:                                   //locret_18C84:
    return;
}

void sub_18C85()
{
    WORD _cs = _seg000;

    _bx = _bx ^ _bx;                            //xor bx, bx
    if ((short)memory16(_ds, 0xFCE6) > (short)0x0080)//jg short loc_18C92
      goto loc_18C92;
    _bx |= 0x0002;                              //or bx, 2
loc_18C92:                                      //loc_18C92:
    if ((short)memory16(_ds, 0xFCE2) > (short)0x0080)//jg short loc_18C9D
      goto loc_18C9D;
    _bx |= 0x0004;                              //or bx, 4
loc_18C9D:                                      //loc_18C9D:
    _di = memory16(_cs, _bx + -27389);          //mov di, cs:[bx-6AFDh]
    _di += 0x938b;                              //add di, 938Bh
}

void loc_18CC6()
{
loc_18CC6:
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
    if (memory(_cs, _di) == 0x0000)             //jz short loc_18CFF
      goto loc_18CFF;
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    if ((short)memory16(_ds, 0xFCF2) > (short)_ax)//jg short loc_18D07
      goto loc_18D07;
    _ax = memory16(_cs, _di + 4);               //mov ax, cs:[di+4]
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    memory16(_ds, 0xFCFA) = _ax;                //mov word_3822A, ax
    memory16(_ds, 0xFCFA) += 0x000f;            //add word_3822A, 0Fh
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    memory16(_ds, 0xFCFE) += 0x000f;            //add word_3822E, 0Fh
    sub_10F2F();                                //call sub_10F2F
    if (_FIXME_)                                //jnz short loc_18D0B
      goto loc_18D0B;
loc_18CFF:                                      //loc_18CFF:
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_18CC6
      goto loc_18CC6;
    goto loc_18D08;                             //jmp short loc_18D08
loc_18D07:                                      //loc_18D07:
    _cx = _pop();                               //pop cx
loc_18D08:                                      //loc_18D08:
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
loc_18D0B:                                      //loc_18D0B:
    _bx = 0x98ce;                               //mov bx, 98CEh
    memory16(_ds, _bx + 12) = _di;              //mov [bx+0Ch], di
    _di = _bx;                                  //mov di, bx
    _cx = _pop();                               //pop cx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    return;                                     //retn
    _bx = 0x98ce;                               //mov bx, 98CEh
    _di = memory16(_ds, _bx + 12);              //mov di, [bx+0Ch]
    memory(_cs, _di) = 0x0000;                  //mov word ptr cs:[di], 0
    _bx = memory16(_cs, _di + 2);               //mov bx, cs:[di+2]
    _ax = memory16(_cs, _di + 4);               //mov ax, cs:[di+4]
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _dx = 0x0014;                               //mov dx, 14h
    _ax = _dx * _al;                            //mul dx
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, _bx + 0) = 0x0000;            //mov word ptr [bx+0], 0
    _dx = 0x0853;                               //mov dx, 853h
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    _ax += 0x0008;                              //add ax, 8
    _bx = memory16(_cs, _di + 4);               //mov bx, cs:[di+4]
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    _bx += 0x0008;                              //add bx, 8
    _bp = 0x1230;                               //mov bp, 1230h
{sub_13326(); return; };                        //
    _ax = memory16(_ds, _si + 40);              //mov ax, [si+28h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 42);              //mov ax, [si+2Ah]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, _si + 44);              //mov ax, [si+2Ch]
    memory16(_ds, 0xFCEA) = _ax;                //mov word_3821A, ax
    _ax = memory16(_ds, _si + 46);              //mov ax, [si+2Eh]
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCE6) += _ax;               //add word_38216, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCEE) += _ax;               //add word_3821E, ax
    sub_18C85();                                //call sub_18C85
    _cx = memory16(_cs, _di);                   //mov cx, cs:[di]
    _di += 0x0002;                              //add di, 2
loc_18D8E:                                      //loc_18D8E:
    _push(_cx);                                 //push cx
    if (memory(_cs, _di) != 0x0000)             //jnz short loc_18DE7
      goto loc_18DE7;
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_cs, _di + 4);               //mov ax, cs:[di+4]
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    memory16(_ds, 0xFCFA) = _ax;                //mov word_3822A, ax
    memory16(_ds, 0xFCFA) += 0x000f;            //add word_3822A, 0Fh
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    memory16(_ds, 0xFCFE) += 0x000f;            //add word_3822E, 0Fh
    sub_10F2F();                                //call sub_10F2F
    if (_FIXME_)                                //jz short loc_18DE7
      goto loc_18DE7;
    memory(_cs, _di) = 0x0001;                  //mov word ptr cs:[di], 1
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    _bx = memory16(_ds, 0xFCF2);                //mov bx, word_38222
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _dx = 0x0014;                               //mov dx, 14h
    _ax = _dx * _al;                            //mul dx
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_cs, _di + 6);               //mov ax, cs:[di+6]
    memory16(_ds, _bx + 0) = _ax;               //mov [bx+0], ax
    goto loc_18DEE;                             //jmp short loc_18DEE
loc_18DE7:                                      //loc_18DE7:
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_18D8E
      goto loc_18D8E;
    return;                                     //retn
loc_18DEE:                                      //loc_18DEE:
    _cx = _pop();                               //pop cx
}

void sub_18DF0()
{
    WORD _cs = _seg000;

    _cx = memory16(_cs, _si);                   //mov cx, cs:[si]
    _si += 0x0002;                              //add si, 2
loc_18DF6:                                      //loc_18DF6:
    memory16(_cs, _si) = 0x0001;                //mov word ptr cs:[si], 1
    _si += 0x0008;                              //add si, 8
    if (--_cx)                                  //loop loc_18DF6
      goto loc_18DF6;
}

void loc_18E72()
{
loc_18E72:
    WORD _cs = _seg000;

    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x0054;                //mov word ptr [si], 54h
    memory16(_ds, _si + 2) = 0x88a9;            //mov word ptr [si+2], 88A9h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x87d5;            //mov word ptr [si+6], 87D5h
    _ax = memory(_cs, 0x772E);                  //mov ax, word ptr cs:byte_176E6+48h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    memory(_ds, _si + 75) = 0xff;               //mov byte ptr [si+4Bh], 0FFh
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 18) = _bx;              //mov [si+12h], bx
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _dx = 0x0014;                               //mov dx, 14h
    _ax = _dx * _al;                            //mul dx
    _ax += _bx;                                 //add ax, bx
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x0000;                              //add ax, 0
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    _cx -= 1;                                   //dec cx
    memory16(_ds, _si + 34) = _cx;              //mov [si+22h], cx
    _cx += 1;                                   //inc cx
    if (--_cx)                                  //loop loc_18E72
      goto loc_18E72;
    memory16(_ds, 0x9200) = 0x0003;             //mov word_31730, 3
    memory16(_ds, 0x9202) = 0x0000;             //mov word_31732, 0
    memory(_ds, 0x922D) = 0x00;                 //mov byte_3175D, 0
    memory(_ds, 0x922E) = 0x00;                 //mov byte_3175E, 0
    memory(_ds, 0x922F) = 0x02;                 //mov byte_3175F, 2
    memory16(_ds, 0x91D4) = 0x0000;             //mov word_31704, 0
    memory16(_ds, 0x91D6) = 0x0000;             //mov word_31706, 0
    memory16(_ds, 0x91D8) = 0x0000;             //mov word_31708, 0
    memory16(_ds, 0x91DA) = 0x0000;             //mov word_3170A, 0
    memory16(_ds, 0x91DC) = 0x0000;             //mov word_3170C, 0
    memory16(_ds, 0x91DE) = 0x0000;             //mov word_3170E, 0
    memory16(_ds, 0x91E0) = 0x0000;             //mov word_31710, 0
    memory16(_ds, 0x91E2) = 0x0000;             //mov word_31712, 0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0000;                              //add si, 0
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0062;                              //add si, 62h
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x00c4;                              //add si, 0C4h
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0116;                              //add si, 116h
    sub_18DF0();                                //call sub_18DF0
    _bx = 0x98ce;                               //mov bx, 98CEh
    memory16(_ds, _bx) = 0x0000;                //mov word ptr [bx], 0
    memory16(_ds, _bx + 10) = _bx;              //mov [bx+0Ah], bx
    memory16(_ds, _bx + 8) = _bx;               //mov [bx+8], bx
    memory16(_ds, _bx + 2) = 0x0761;            //mov word ptr [bx+2], 761h
    memory16(_ds, _bx + 4) = 0x0761;            //mov word ptr [bx+4], 761h
    memory16(_ds, _bx + 6) = 0x8d18;            //mov word ptr [bx+6], 8D18h
    memory16(_ds, 0x91F4) = 0x45d2;             //mov word_31724, 45D2h
    memory16(_ds, 0x91F6) = 0xaa6a;             //mov word_31726, 0AA6Ah
    _ax = memory16(_ds, 0x991A);                //mov ax, word_31E4A
    memory16(_ds, 0x8E76) = _ax;                //mov word_313A6, ax
    _ax = memory16(_ds, 0x991A);                //mov ax, word_31E4A
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x8E78) = _ax;                //mov word_313A8, ax
    _si = 0x938b;                               //mov si, 938Bh
    _di = 0xd10c;                               //mov di, 0D10Ch
    _cx = 0x00b4;                               //mov cx, 0B4h
loc_18F7F:                                      //loc_18F7F:
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_18F7F
      goto loc_18F7F;
    memory16(_ds, 0x8E72) = 0x1b55;             //mov word_313A2, 1B55h
    return;                                     //retn
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  4Bh");                          //db  4Bh
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  4Bh");                          //db  4Bh
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  4Bh");                          //db  4Bh
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  4Bh");                          //db  4Bh
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  4Dh");                          //db  4Dh
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  4Dh");                          //db  4Dh
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  4Dh");                          //db  4Dh
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  52h");                          //db  52h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  55h");                          //db  55h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  55h");                          //db  55h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  55h");                          //db  55h
    _STOP_("db  56h");                          //db  56h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  56h");                          //db  56h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  56h");                          //db  56h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  56h");                          //db  56h
    _STOP_("db  57h");                          //db  57h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0FCh");                          //db 0FCh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  92h");                          //db  92h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0FDh");                          //db 0FDh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0A8h");                          //db 0A8h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0BEh");                          //db 0BEh
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0D4h");                          //db 0D4h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0EAh");                          //db 0EAh
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0FDh");                          //db 0FDh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db 0FCh");                          //db 0FCh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db 0FCh");                          //db 0FCh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0FDh");                          //db 0FDh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  85h");                          //db  85h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  8Dh");                          //db  8Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0ADh");                          //db 0ADh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  3Dh");                          //db  3Dh
    _STOP_("db  3Eh");                          //db  3Eh
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  46h");                          //db  46h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  42h");                          //db  42h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  42h");                          //db  42h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  42h");                          //db  42h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  42h");                          //db  42h
    _STOP_("db  43h");                          //db  43h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  43h");                          //db  43h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  43h");                          //db  43h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  43h");                          //db  43h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  5Ch");                          //db  5Ch
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  57h");                          //db  57h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  57h");                          //db  57h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  59h");                          //db  59h
    _STOP_("db 0CEh");                          //db 0CEh
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  82h");                          //db  82h
    _STOP_("db  7Fh");                          //db  7Fh
    _STOP_("db 0DBh");                          //db 0DBh
    _STOP_("db  7Fh");                          //db  7Fh
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  33h");                          //db  33h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0D7h");                          //db 0D7h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0DDh");                          //db 0DDh
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0E3h");                          //db 0E3h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db 0EFh");                          //db 0EFh
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  14h");                          //db  14h
    _STOP_("db 0F5h");                          //db 0F5h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db 0FAh");                          //db 0FAh
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  26h");                          //db  26h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  85h");                          //db  85h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db  64h");                          //db  64h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db 0D8h");                          //db 0D8h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  13h");                          //db  13h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db 0D8h");                          //db 0D8h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db 0, 3, 0, 12h, 0, 68h, 0, 88h, 0Bh, 4, 0...");
    _STOP_("db 0C8h, 0, 88h, 0Bh, 5, 0, 4, 0, 11h, 0, ...");
    _STOP_("db 0Bh, 4, 0, 6, 0, 3, 0, 0C8h, 0, 88h, 0B...");
    _STOP_("db 10h, 0, 58h, 0, 68h, 0Ah, 1, 0, 8, 0, 4...");
    _STOP_("db 68h, 0Ah, 8, 0, 1, 0, 0Ah, 0, 58h, 0, 6...");
    _STOP_("db 8, 0, 4, 0, 0D8h, 0, 68h, 0Ah, 8, 0, 1,...");
    _STOP_("db 0, 68h, 0Ah, 1, 0, 8, 0, 4, 0, 0D8h, 0,...");
    _STOP_("db 0, 1, 0, 0Ah, 0, 58h, 0, 68h, 0Ah, 1, 0...");
    _STOP_("db 0D8h, 0, 68h, 0Ah, 8, 0, 1, 0, 0Ah, 0, ...");
    _STOP_("db 3Bh, 1, 3Ch, 41h, 3Eh, 81h, 3Eh, 41h, 3...");
    _STOP_("db 0C1h, 3Eh, 1, 3Fh, 0EAh, 1Ah, 0C1h, 3Bh...");
    _STOP_("db 3Eh, 81h, 3Eh, 41h, 3Ch, 81h, 3Ch, 0C1h...");
    _STOP_("db 52h, 1Ch, 0C1h, 3Bh, 1, 3Ch, 41h, 3Eh, ...");
    _STOP_("db 3Ch, 81h, 3Ch, 0C1h, 3Eh, 1, 3Fh, 0A4h,...");
    _STOP_("db 1, 3Ch, 41h, 3Eh, 81h, 3Eh, 41h, 3Ch, 8...");
    _STOP_("db 3Eh, 1, 3Fh, 0AEh, 1Ch, 0C1h, 3Ch, 1, 3...");
    _STOP_("db 81h, 3Fh, 41h, 3Dh, 81h, 3Dh, 0C1h, 3Fh...");
    _STOP_("db 1Ch, 0C1h, 3Ch, 1, 3Dh, 41h, 3Fh, 81h, ...");
    _STOP_("db 81h, 3Dh, 0C1h, 3Fh, 1, 40h, 0F8h, 1Ah,...");
    _STOP_("db 3Dh, 41h, 3Fh, 81h, 3Fh, 41h, 3Dh, 81h,...");
    _STOP_("db 1, 40h, 0E0h, 19h, 0C1h, 3Ch, 1, 3Dh, 4...");
    _STOP_("db 3Fh, 41h, 3Dh, 81h, 3Dh, 0C1h, 3Fh, 1, ...");
    _STOP_("db 13h, 51h, 0EDh, 52h, 36h, 68h, 5Ah, 68h...");
    _STOP_("db 61h, 0C1h, 61h, 41h, 5Ch, 4 dup(0), 1, ...");
    _STOP_("db 81h, 62h, 4 dup(0), 41h, 5Ch, 2 dup(0),...");
    _STOP_("db 80h, 15h, 2 dup(0), 41h, 0Dh, 41h, 5Ch,...");
    _STOP_("db 5Ch, 81h, 5Ch, 0C1h, 5Ch, 1, 5Dh, 41h, ...");
    _STOP_("db 1, 34h, 4 dup(0), 41h, 3Ah, 4 dup(0), 1...");
    _STOP_("db 81h, 3Ah, 2 dup(0), 0C1h, 1Ch, 1, 1Dh, ...");
    _STOP_("db 1Dh, 0C1h, 1Dh, 1, 1Eh, 0C1h, 21h, 1, 2...");
    _STOP_("db 80h, 22h, 0C1h, 22h, 1, 23h, 0C1h, 26h,...");
    _STOP_("db 27h, 80h, 27h, 0C0h, 27h, 1, 28h, 0C1h,...");
    _STOP_("db 40h, 2Ch, 80h, 2Ch, 0C0h, 2Ch, 1, 2Dh, ...");
    _STOP_("db 31h, 41h, 31h, 81h, 31h, 0C1h, 31h, 1, ...");
    _STOP_("db 1, 36h, 41h, 36h, 81h, 36h, 0C1h, 36h, ...");
    _STOP_("db 3Ah, 1, 3Bh, 4 dup(0), 41h, 3Bh, 81h, 3...");
    _STOP_("db 1, 36h, 0C1h, 3Ah, 1, 3Bh, 0C1h, 4Eh, 1...");
    _STOP_("db 51h, 1, 52h, 0C1h, 36h, 1, 37h, 41h, 3B...");
    _STOP_("db 41h, 4Fh, 81h, 4Fh, 41h, 52h, 81h, 52h,...");
    _STOP_("db 31h, 41h, 36h, 81h, 36h, 0C1h, 4Dh, 1, ...");
    _STOP_("db 1, 51h, 41h, 4Eh, 81h, 4Eh, 41h, 51h, 8...");
    _STOP_("db 3 dup(0), 20h, 0, 0A0h, 1, 0C1h, 39h, 2...");
    _STOP_("db 0, 90h, 1, 81h, 39h, 2 dup(0), 30h, 0, ...");
    _STOP_("db 39h, 2 dup(0), 30h, 0, 80h, 1, 81h, 39h...");
    _STOP_("db 0, 80h, 1, 0C1h, 39h, 2 dup(0), 40h, 0,...");
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0F0h");                          //db 0F0h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0F0h");                          //db 0F0h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  70h");                          //db  70h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0F0h");                          //db 0F0h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db 0F0h");                          //db 0F0h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  73h");                          //db  73h
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  7Bh");                          //db  7Bh
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  7Bh");                          //db  7Bh
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  63h");                          //db  63h
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  93h");                          //db  93h
    _STOP_("db  62h");                          //db  62h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db 0C4h");                          //db 0C4h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  36h");                          //db  36h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  60h");                          //db  60h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  52h");                          //db  52h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db 0EAh");                          //db 0EAh
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0D4h");                          //db 0D4h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0BEh");                          //db 0BEh
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0A8h");                          //db 0A8h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  92h");                          //db  92h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  65h");                          //db  65h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db 0D5h");                          //db 0D5h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  25h");                          //db  25h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  2Dh");                          //db  2Dh
    _STOP_("db 0C5h");                          //db 0C5h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db  15h");                          //db  15h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  36h");                          //db  36h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  36h");                          //db  36h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  36h");                          //db  36h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  36h");                          //db  36h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  73h");                          //db  73h
    _STOP_("db  33h");                          //db  33h
    _STOP_("db 0CDh");                          //db 0CDh
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  1Dh");                          //db  1Dh
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  77h");                          //db  77h
    _STOP_("db  31h");                          //db  31h
    _STOP_("db 0DBh");                          //db 0DBh
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  85h");                          //db  85h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db  0Fh");                          //db  0Fh
    _STOP_("db  34h");                          //db  34h
    _STOP_("unk_19564 db    6");                //unk_19564 db    6
    _STOP_("unk_19566 db  0Ch");                //unk_19566 db  0Ch
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  14h");                          //db  14h
    _STOP_("unk_19596 db  1Eh");                //unk_19596 db  1Eh
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db 0D4h");                          //db 0D4h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db  96h");                          //db  96h
    _STOP_("db 0E4h");                          //db 0E4h
    _STOP_("db 0F4h");                          //db 0F4h
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  99h");                          //db  99h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0E4h");                          //db 0E4h
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db  9Ah");                          //db  9Ah
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  94h");                          //db  94h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0E4h");                          //db 0E4h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  9Ah");                          //db  9Ah
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  94h");                          //db  94h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0E4h");                          //db 0E4h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  9Ah");                          //db  9Ah
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  39h");                          //db  39h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  94h");                          //db  94h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0E4h");                          //db 0E4h
    _STOP_("db 38h, 0, 3, 9Ah, 53h, 8, 39h, 3Ah, 94h, ...");
    _STOP_("db 2 dup(0FFh), 0E4h, 0, 46h, 0, 3, 9Ah, 5...");
    _STOP_("db 94h, 96h, 0Ch, 0, 2 dup(0FFh), 0E4h, 0,...");
    _STOP_("db 9Ah, 53h, 8, 39h, 3Ah, 98h, 96h, 0Ch, 0...");
    _STOP_("db 2 dup(0), 0E8h, 0, 0C8h, 0, 2Bh, 9Ah, 5...");
    _STOP_("db 3Ah, 9Ch, 96h, 3, 5 dup(0), 0ECh, 0, 64...");
    _STOP_("db 53h, 8, 0A7h, 3Ah, 0A0h, 96h, 3, 5 dup(...");
    _STOP_("db 1, 0, 85h, 0DFh, 1, 0, 0D5h, 0E0h, 1, 0...");
    _STOP_("db 1, 0, 61h, 0E3h, 1, 0, 0B1h, 0E4h, 1, 0...");
    _STOP_("db 0, 47h, 0E7h, 1, 3 dup(0), 0E2h, 41h, 5...");
    _STOP_("db 0E8h, 3, 0, 0C9h, 0E9h, 3, 0, 0F1h, 0EA...");
    _STOP_("db 0ECh, 3, 3 dup(0), 0E2h, 41h, 7Ah, 96h,...");
    _STOP_("db 9Fh, 6Bh, 2 dup(0), 5Fh, 6Eh, 2 dup(0),...");
    _STOP_("db 95h, 41h, 1, 0, 45h, 42h, 1, 0, 0F5h, 4...");
    _STOP_("db 43h, 1, 0, 55h, 44h, 1, 0, 5, 45h, 1, 0...");
    _STOP_("db 1, 0, 65h, 46h, 1, 3 dup(0), 0E2h, 41h,...");
    _STOP_("db 88h, 2, 0, 0C1h, 88h, 2, 0, 5Dh, 89h, 2...");
    _STOP_("db 2, 3 dup(0), 0E2h, 41h, 0C6h, 96h, 21h,...");
    _STOP_("db 80h, 2, 0, 77h, 81h, 2, 0, 27h, 82h, 2,...");
    _STOP_("db 41h, 0DCh, 96h, 79h, 85h, 2, 0, 15h, 86...");
    _STOP_("db 86h, 2, 0, 61h, 87h, 2, 3 dup(0), 0E2h,...");
    _STOP_("db 0CDh, 82h, 2, 0, 7Dh, 83h, 2, 0, 23h, 8...");
    _STOP_("db 84h, 2, 3 dup(0), 0E2h, 41h, 8, 97h, 0C...");
    _STOP_("db 0, 75h, 0DCh, 2, 0, 11h, 0DDh, 2, 0, 99...");
    _STOP_("db 0E2h, 41h, 1Eh, 97h, 0A5h, 0B4h, 2, 0, ...");
    _STOP_("db 0, 0B1h, 0B9h, 2, 0, 35h, 0B7h, 2, 3 du...");
    _STOP_("db 34h, 97h, 3Dh, 0B2h, 2 dup(0), 8Dh, 0AA...");
    _STOP_("db 0ADh, 2, 0, 0ADh, 0AFh, 2, 0, 1Dh, 0ADh...");
    _STOP_("db 0E2h, 41h, 4Eh, 97h, 0B5h, 0BBh, 2 dup(...");
    _STOP_("db 2, 0, 7Dh, 0A3h, 2, 0, 0F9h, 0A5h, 2, 0...");
    _STOP_("db 2, 3 dup(0), 0E2h, 41h, 68h, 97h, 0F5h,...");
    _STOP_("db 45h, 0BEh, 2, 0, 0D5h, 0C0h, 2, 0, 65h,...");
    _STOP_("db 0D5h, 0C0h, 2, 3 dup(0), 0E2h, 41h, 82h...");
    _STOP_("db 0A7h, 2 dup(0), 0E7h, 5Dh, 2, 0, 97h, 5...");
    _STOP_("db 5Fh, 2, 0, 0EDh, 5Fh, 2, 3 dup(0), 0E2h...");
    _STOP_("db 7Bh, 58h, 2, 0, 2Bh, 59h, 2, 0, 0DBh, 5...");
    _STOP_("db 5Ah, 2, 3 dup(0), 0E2h, 41h, 0B2h, 97h,...");
    _STOP_("db 0B9h, 66h, 2, 0, 5Fh, 67h, 2, 0, 0Fh, 6...");
    _STOP_("db 0E2h, 41h, 0C8h, 97h, 53h, 63h, 2, 0, 3...");
    _STOP_("db 0B3h, 64h, 2, 0, 59h, 65h, 2, 3 dup(0),...");
    _STOP_("db 97h, 0C5h, 55h, 2, 0, 75h, 56h, 2, 0, 1...");
    _STOP_("db 0CBh, 57h, 2, 3 dup(0), 0E2h, 41h, 0F4h...");
    _STOP_("db 2, 0, 0E1h, 5Bh, 2, 0, 87h, 5Ch, 2, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 0Ah, 98h, 9Dh, 60h...");
    _STOP_("db 61h, 2, 0, 0FDh, 61h, 2, 0, 0A3h, 62h, ...");
    _STOP_("db 0E2h, 41h, 20h, 98h, 0BFh, 68h, 2, 0");
    _STOP_("db 6Fh, 69h, 2, 0, 15h, 6Ah, 2, 0, 0C5h, 6...");
    _STOP_("db 0E2h, 41h, 36h, 98h, 0A9h, 8Ah, 4, 0, 0...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 4Ch, 98h, 61h, 93h...");
    _STOP_("db 98h, 4, 0, 69h, 9Ch, 4, 3 dup(0), 0E2h,...");
    _STOP_("db 9, 7Bh, 2 dup(0), 91h, 7Bh, 2, 0, 19h, ...");
    _STOP_("db 7Ch, 14h, 0, 19h, 7Ch, 2, 0, 91h, 7Bh, ...");
    _STOP_("db 0E2h, 41h, 6Ch, 98h, 7Fh, 79h, 2 dup(0)...");
    _STOP_("db 3, 0, 15h, 2Eh, 3, 3 dup(0), 0E2h, 41h,...");
    _STOP_("db 0EDh, 1, 0, 0C9h, 0EDh, 1, 0, 5Bh, 0EEh...");
    _STOP_("db 0EEh, 1, 3 dup(0), 0E2h, 41h, 9Ch, 98h,...");
    _STOP_("db 0D9h, 39h, 2, 0, 79h, 3Bh, 1, 0, 69h, 3...");
    _STOP_("db 79h, 3Bh, 2, 3 dup(0), 0E2h, 41h, 0B2h,...");
    _STOP_("db 2 dup(0), 1Dh, 34h, 2, 0, 0BDh, 35h, 1,...");
    _STOP_("db 2 dup(0), 0BDh, 35h, 2, 3 dup(0), 0E2h,...");
    _STOP_("db 35h, 9, 3, 0, 71h, 0Ah, 3, 0, 0ADh, 0Bh...");
    _STOP_("db 0Ah, 3, 3 dup(0), 0E2h, 41h, 0E6h, 98h,...");
    _STOP_("db 0, 0E9h, 0Ch, 3, 0, 89h, 0Eh, 3, 0, 29h...");
    _STOP_("db 89h, 0Eh, 3, 0, 0E9h, 0Ch, 3, 0, 0ADh, ...");
    _STOP_("db 29h, 0, 3, 0, 65h, 1, 3, 0, 0A1h, 2, 3,...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 18h, 99h, 0A1h, 2,...");
    _STOP_("db 2 dup(3), 0, 7Dh, 5, 3, 0, 1Dh, 7, 3, 0...");
    _STOP_("db 0, 0DDh, 2 dup(3), 0, 0A1h, 2, 2 dup(0)...");
    _STOP_("db 0, 0BBh, 47h, 1, 0, 43h, 48h, 1, 0, 0BB...");
    _STOP_("db 0E2h, 41h, 4Ah, 99h, 0ADh, 48h, 1, 0, 5...");
    _STOP_("db 0EFh, 49h, 1, 0, 5Dh, 49h, 1, 3 dup(0),...");
    _STOP_("db 99h, 77h, 4Ah, 1, 0, 27h, 4Bh, 1, 0, 0D...");
    _STOP_("db 27h, 4Bh, 1, 3 dup(0), 0E2h, 41h, 76h, ...");
    _STOP_("db 1, 0, 37h, 4Dh, 1, 0, 0C9h, 4Dh, 1, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 8Ch, 99h, 51h, 4Eh...");
    _STOP_("db 4Eh, 1, 0, 7Fh, 4Fh, 1, 0, 0F7h, 4Eh, 1...");
    _STOP_("db 41h, 0A2h, 99h, 0E9h, 4Fh, 1, 0, 99h, 5...");
    _STOP_("db 51h, 1, 0, 99h, 50h, 1, 3 dup(0), 0E2h,...");
    _STOP_("db 0B3h, 51h, 1, 0, 63h, 52h, 1, 0, 13h, 5...");
    _STOP_("db 52h, 1, 3 dup(0), 0E2h, 41h, 0CEh, 99h,...");
    _STOP_("db 0, 73h, 54h, 1, 0, 5, 55h, 1, 0, 73h, 5...");
    _STOP_("db 0E2h, 41h, 0E4h, 99h, 0C3h, 0E8h, 10h, ...");
    _STOP_("db 0ACh, 0EBh, 0Eh, 0E8h, 8, 0AEh, 0BFh, 0...");
    _STOP_("db 6, 0E8h, 0, 0AEh, 0BFh, 9, 0ADh, 8Bh, 5...");
    _STOP_("db 0C3h, 10h, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h...");
    _STOP_("db 0EBh, 83h, 0E3h, 0Eh, 2Eh, 8Bh, 1, 89h,...");
    _STOP_("db 5Eh, 9Bh, 0E8h, 0DDh, 0ADh, 8Bh, 44h, 1...");
    _STOP_("db 79h, 15h, 8Bh, 5Ch, 16h, 85h, 0DBh, 79h...");
    _STOP_("db 7Ch, 5, 0BBh, 2 dup(0), 0EBh, 34h, 0BBh...");
    _STOP_("db 2Fh, 8Bh, 5Ch, 16h, 85h, 0DBh, 79h, 1Ah...");
    _STOP_("db 0F7h, 0D8h, 3Bh, 0D8h, 7Ch, 0EBh, 0BBh,...");
    _STOP_("db 1Ah, 81h, 0EBh, 0C0h, 0, 0F7h, 0DBh, 3B...");
    _STOP_("db 0Dh, 0EBh");                     //db 0Dh, 0EBh
    _STOP_("db 0D5h, 2Dh, 40h, 1, 81h, 0EBh, 0C0h, 0, ...");
    _STOP_("db 0E4h, 0BBh, 6, 0, 2Eh, 8Bh, 0BFh, 19h, ...");
    _STOP_("db 5, 89h, 44h, 0Ch, 2Eh, 8Bh, 45h, 2, 89h...");
    _STOP_("db 0C7h, 4, 89h, 7Ch, 10h, 0C7h, 44h, 2, 0...");
    _STOP_("db 0F0h, 9Ah, 81h, 3Eh, 0A8h, 91h, 0F0h, 0...");
    _STOP_("db 81h, 3Eh, 90h, 91h, 0F0h, 0Ah, 75h, 26h...");
    _STOP_("db 91h, 0F0h, 0Ah, 0A1h, 9Ah, 91h, 0E8h, 6...");
    _STOP_("db 6, 9Ah, 91h, 2 dup(0), 80h, 3Eh, 35h, 9...");
    _STOP_("db 0C6h, 6, 35h, 92h, 0, 0EBh, 6, 0C7h, 6,...");
    _STOP_("db 81h, 3Eh, 90h, 91h, 0D0h, 0, 7Fh, 3Ch, ...");
    _STOP_("db 91h, 20h, 7Dh, 6, 0C7h, 6, 0AAh, 91h, 2...");
    _STOP_("db 3Bh, 0, 0C6h, 6, 33h, 92h, 0, 0C6h, 6, ...");
    _STOP_("db 80h, 3Eh, 31h, 92h, 0, 74h, 29h, 80h, 3...");
    _STOP_("db 0, 74h, 22h, 80h, 3Eh, 61h, 8Fh, 0, 75h...");
    _STOP_("db 9, 0, 0E8h, 0D8h, 7Ah, 0C6h, 6, 61h, 8F...");
    _STOP_("db 0Eh, 81h, 3Eh, 0AAh, 91h, 30h, 0Ah, 7Dh...");
    _STOP_("db 0AAh, 91h, 30h, 0Ah, 0C3h, 80h, 3Eh, 31...");
    _STOP_("db 10h, 80h, 3Eh, 33h, 92h, 0, 75h, 9, 0C7...");
    _STOP_("db 2 dup(0), 0E8h, 2Ah, 0, 0C3h, 83h, 3Eh,...");
    _STOP_("db 0, 75h, 11h, 0A1h, 0F4h, 91h, 0D1h, 0C8...");
    _STOP_("db 0D1h, 0C8h, 0D1h, 0C8h, 0D1h, 0C8h, 0A3...");
    _STOP_("db 0C3h, 0A1h, 0F6h, 91h, 0D1h, 0C8h, 0D1h...");
    _STOP_("db 0C8h, 0D1h, 0C8h, 0D1h, 0C8h, 0A3h, 0F6...");
    _STOP_("db 83h, 3Eh, 8, 92h, 1, 74h, 9, 0A1h, 8, 9...");
    _STOP_("db 8, 92h, 0EBh, 10h, 0E8h, 0C4h, 0FFh, 25...");
    _STOP_("db 1, 0, 7Ch, 0F5h, 3Dh, 7, 0, 74h, 0F0h, ...");
    _STOP_("db 0A8h, 0DEh, 3, 0F8h, 0C7h, 6, 0EAh, 0FC...");
    _STOP_("db 8Bh, 3Dh, 8Bh, 45h, 2, 0A3h, 0E2h, 0FCh...");
    _STOP_("db 2Bh, 6, 90h, 91h, 2Bh, 6, 9Ah, 91h, 0A3...");
    _STOP_("db 0BBh, 21h, 0ADh, 2Eh, 8Bh, 17h, 83h, 0C...");
    _STOP_("db 70h, 74h, 8Bh, 0EEh, 0C7h, 44h, 6, 4Dh,...");
    _STOP_("db 57h, 8Bh, 0FEh, 0E8h, 61h, 74h, 89h, 75...");
    _STOP_("db 0C7h, 44h, 6, 99h, 3Ah, 57h, 0BFh, 4Ah,...");
    _STOP_("db 6Bh, 5Fh, 0C7h, 4, 50h, 0, 0A1h, 0EAh, ...");
    _STOP_("db 1Ah, 2Eh, 8Bh, 7, 29h, 6, 0EAh, 0FCh, 8...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 44h, 2, 83h, 0C3h, 2,...");
    _STOP_("db 53h, 8, 2Eh, 8Bh, 7, 89h, 44h, 0Ch, 83h...");
    _STOP_("db 44h, 34h, 0D0h, 7, 0C7h, 44h, 48h, 2 du...");
    _STOP_("db 27h, 0, 0C6h, 44h, 26h, 0, 0C7h, 44h, 0...");
    _STOP_("db 89h, 7Ch, 38h, 89h, 7Ch, 3Ah, 0C7h, 44h...");
    _STOP_("db 0, 0A1h, 0E2h, 0FCh, 89h, 44h, 12h, 0A1...");
    _STOP_("db 89h, 44h, 16h, 0C7h, 44h, 36h, 2 dup(0)...");
    _STOP_("db 60h, 95h, 89h, 44h, 42h, 0A1h, 0FAh, 0F...");
    _STOP_("db 22h, 0E8h, 49h, 99h, 89h, 6Ch, 44h, 0C7...");
    _STOP_("db 2 dup(0), 4Ah, 78h, 3, 0E9h, 6Dh, 0FFh,...");
    _STOP_("db 98h, 91h, 1, 44h, 16h, 0FFh, 74h, 1Ch, ...");
    _STOP_("db 8Bh, 5Ch, 1Ch, 83h, 0C3h, 10h, 0D1h, 0E...");
    _STOP_("db 0D1h, 0EBh, 0D1h, 0EBh, 83h, 0E3h, 0Eh,...");
    _STOP_("db 0, 0D1h, 0E8h");                 //db 0, 0D1h, 0E8h
    _STOP_("db 0D1h, 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, 25h...");
    _STOP_("db 0C3h, 74h, 18h, 2Eh, 8Bh, 0BFh, 65h, 0A...");
    _STOP_("db 5, 89h, 44h, 0Ch, 2Eh, 8Bh, 45h, 2, 89h...");
    _STOP_("db 0C7h, 4, 89h, 7Ch, 10h, 2Eh, 0A0h, 8Ch,...");
    _STOP_("db 48h, 73h, 33h, 8Bh, 44h, 12h, 8Bh, 5Ch,...");
    _STOP_("db 0, 2Eh, 8Bh, 16h, 8Eh, 95h, 50h, 53h, 5...");
    _STOP_("db 1Eh, 82h, 0BDh, 1Eh, 97h, 2Eh, 8Bh, 46h...");
    _STOP_("db 0Ch, 2Eh, 8Bh, 46h, 0, 89h, 45h, 0Eh, 8...");
    _STOP_("db 89h, 6Dh, 10h, 5Ah, 59h, 5Bh, 58h, 49h,...");
    _STOP_("db 0B3h, 98h, 0A1h, 98h, 91h, 1, 44h, 16h,...");
    _STOP_("db 8Bh, 5Ch, 1Ch, 83h, 0C3h, 10h, 0D1h, 0E...");
    _STOP_("db 0D1h, 0EBh, 0D1h, 0EBh, 83h, 0E3h, 0Eh,...");
    _STOP_("db 75h, 0ADh, 89h, 44h, 0Ch, 0E9h, 8Eh, 98...");
    _STOP_("db 91h, 1, 44h, 16h, 0E8h, 0Ah, 0ABh, 8Bh,...");
    _STOP_("db 0C3h, 10h, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h...");
    _STOP_("db 0EBh, 83h, 0E3h, 0Eh, 2Eh, 8Bh, 87h, 85...");
    _STOP_("db 44h, 0Ch, 0E9h, 69h, 98h, 0A1h, 98h, 91...");
    _STOP_("db 8Bh, 5Ch, 22h, 0C6h, 87h, 33h, 92h, 0FF...");
    _STOP_("db 0AAh, 8Bh, 5Ch, 1Ch, 83h, 0C3h, 10h, 0D...");
    _STOP_("db 0EBh, 0D1h, 0EBh, 0D1h, 0EBh, 83h, 0E3h...");
    _STOP_("db 87h, 95h, 0ADh, 89h, 44h, 0Ch, 0E9h, 3C...");
    _STOP_("db 0DFh, 0C7h, 47h, 4, 0B9h, 8, 83h, 7Fh, ...");
    _STOP_("db 5, 8Bh, 5Fh, 46h, 0EBh, 0F0h, 0BBh, 0Ah...");
    _STOP_("db 22h, 3, 5Dh, 22h, 29h, 7, 76h, 1, 0C3h,...");
    _STOP_("db 92h, 3, 5Dh, 22h, 0C6h, 7, 0FFh, 0C6h, ...");
    _STOP_("db 75h, 46h, 56h, 8Bh, 0F7h, 0E8h, 3Ch, 6A...");
    _STOP_("db 85h, 0FFh, 75h, 0F1h, 0B9h, 13h, 0, 0B8...");
    _STOP_("db 0BBh, 2 dup(0), 0BAh, 40h, 1, 0BFh, 0C0...");
    _STOP_("db 12h, 0E8h, 0E9h, 77h, 56h, 8Bh, 36h, 54...");
    _STOP_("db 0B9h, 99h, 5Eh, 5Fh, 0C3h, 8Bh, 0FEh, 0...");
    _STOP_("db 0FFh, 0A7h, 0A5h, 0ADh, 0E8h, 6Ch, 72h,...");
    _STOP_("db 90h, 0E8h, 0BFh, 69h, 5Fh, 0C7h, 4, 0DC...");
    _STOP_("db 2, 69h, 0A4h, 0C7h, 44h, 4, 53h, 8, 8Bh...");
    _STOP_("db 5Ch, 1Ch, 0D1h, 0E3h, 0C7h, 44h, 48h, 2...");
    _STOP_("db 45h, 8, 2Dh, 8, 0, 3, 87h, 62h, 40h, 89...");
    _STOP_("db 8Bh, 45h, 0Ah, 2Dh, 8, 0, 2Bh, 6, 90h, ...");
    _STOP_("db 72h, 40h, 89h, 44h, 16h, 2Eh, 8Bh, 0AFh...");
    _STOP_("db 2Eh, 8Bh, 46h, 0, 89h, 44h, 0Ch, 2Eh, 8...");
    _STOP_("db 44h, 0Eh, 83h, 0C5h, 4, 89h, 6Ch, 10h, ...");
    _STOP_("db 0A7h, 3Ah, 2Eh, 0A1h, 62h, 95h, 89h, 44...");
    _STOP_("db 44h, 27h, 0, 0C7h, 44h, 34h, 64h, 0, 0C...");
    _STOP_("db 2 dup(0), 0C7h, 44h, 36h, 2 dup(0), 0E9...");
    _STOP_("db 0C6h, 6, 35h, 92h, 0FFh, 0E8h, 0D1h, 0A...");
    _STOP_("db 92h, 95h, 0, 44h, 48h, 73h, 45h, 0E8h, ...");
    _STOP_("db 3Fh, 88h, 44h, 48h, 0A1h, 12h, 9Fh, 8Bh...");
    _STOP_("db 2Bh, 44h, 12h, 2Bh, 5Ch, 16h, 0E8h, 35h...");
    _STOP_("db 8Bh, 44h, 12h, 8Bh, 5Ch, 16h, 5, 10h, 0...");
    _STOP_("db 3Ch, 2Eh, 8Bh, 16h, 94h, 95h, 0E8h, 62h...");
    _STOP_("db 9Ch, 98h, 2Eh, 8Bh, 46h");       //db 9Ch, 98h, 2Eh, 8Bh, 46h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C5h");                          //db 0C5h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  10h");                          //db  10h
    _STOP_("db 0C3h");                          //db 0C3h
}

void sub_19E89()
{
    sub_141B1();                                //call sub_141B1
    _di = memory16(_ds, _si + 68);              //mov di, [si+44h]
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    _ax = _ax + memory16(_ds, _si + 60);        //add ax, [si+3Ch]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    _ax = _ax + memory16(_ds, _si + 62);        //add ax, [si+3Eh]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
{sub_13589(); return; };                        //
}

void loc_19EB6()
{
    WORD _cs = _seg000;

    memory16(_ds, _si + 12) = 0x7dbb;           //mov word ptr [si+0Ch], 7DBBh
loc_19EBB:                                      //loc_19EBB:
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 6) = 0x0761;            //mov word ptr [si+6], 761h
    return;                                     //retn
loc_19ED0:                                      //loc_19ED0:
    if (memory16(_ds, 0x9204) == 0x0000)        //jz short loc_19ED9
      goto loc_19ED9;
    if ((short)memory16(_ds, 0x9204) >= 0 /*CHECK*/)//jns short loc_19EE0
      goto loc_19EE0;
loc_19ED9:                                      //loc_19ED9:
    memory16(_ds, _si + 12) = 0x7d29;           //mov word ptr [si+0Ch], 7D29h
    goto loc_19EBB;                             //jmp short loc_19EBB
loc_19EE0:                                      //loc_19EE0:
    if (memory16(_ds, _si + 14) != 0x0000)      //jnz short loc_19F19
      _STOP_("goto loc_19F19");
    _al = memory(_cs, 0x9596);                  //mov al, byte ptr cs:unk_19596
    _flags.carry = (memory(_ds, _si + 72) + _al) >= 0x100;
    memory(_ds, _si + 72) += _al;
    if (!_flags.carry)                          //jnb short loc_19F0E
      _STOP_("goto loc_19F0E");
    sub_14191();                                //call sub_14191
    _al &= 0x3f;                                //and al, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    _bp = 0x9870;                               //mov bp, 9870h
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _STOP_("db  2Eh");                          //db  2Eh
}

void sub_19F02()
{
    _ax = _stack16(_bp + 2);                    //mov ax, [bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
loc_19F0E:                                      //loc_19F0E:
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
}

void loc_19F19()
{
{sub_13589(); return; };                        //
    _bx = memory16(_ds, _di + 68);              //mov bx, [di+44h]
loc_19F1F:                                      //loc_19F1F:
    memory16(_ds, _bx + 4) = 0x08b9;            //mov word ptr [bx+4], 8B9h
    _bx = memory16(_ds, _bx + 70);              //mov bx, [bx+46h]
    if (_bx & _bx)                              //jnz short loc_19F1F
      goto loc_19F1F;
    if (memory16(_ds, _di + 34) == 0x0028)      //jz short loc_19F38
      goto loc_19F38;
    memory16(_ds, 0x9206) -= _ax;               //sub word_31736, ax
    if (_FIXME_)                                //jbe short loc_19F3F
      goto loc_19F3F;
    return;                                     //retn
loc_19F38:                                      //loc_19F38:
    memory16(_ds, 0x9204) -= _ax;               //sub word_31734, ax
    if (_FIXME_)                                //jbe short loc_19F3F
      goto loc_19F3F;
    return;                                     //retn
loc_19F3F:                                      //loc_19F3F:
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 6) = 0x0761;            //mov word ptr [di+6], 761h
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_10EF5();                                //call sub_10EF5
    _si = _pop();                               //pop si
    _bp = 0x1230;                               //mov bp, 1230h
    _dx = 0x0853;                               //mov dx, 853h
    sub_13326();                                //call sub_13326
    memory16(_ds, 0x920E) -= 1;                 //dec word_3173E
    if (memory16(_ds, 0x920E) == 0)             //jz short loc_19F65
      goto loc_19F65;
    return;                                     //retn
loc_19F65:                                      //loc_19F65:
    _bx = memory16(_ds, _di + 68);              //mov bx, [di+44h]
    memory16(_ds, _bx + 36) = 0x0000;           //mov word ptr [bx+24h], 0
    _ax = 0x0001;                               //mov ax, 1
    sub_13A39();                                //call sub_13A39
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr byte_1152F+0B5h");    //call near ptr byte_1152F+0B5h
    memory(_ds, 0x9225) = 0x00;                 //mov byte_31755, 0
    return;                                     //retn
    sub_19E89();                                //call sub_19E89
    if (memory16(_ds, _si + 48) != 0x0000)      //jnz short loc_19FFC
      goto loc_19FFC;
    sub_14191();                                //call sub_14191
    if (_al < 0x03)                             //jb short loc_19F92
      goto loc_19F92;
    goto loc_1A017;                             //jmp loc_1A017
loc_19F92:                                      //loc_19F92:
    memory16(_ds, 0x8E8A) = 0x0001;             //mov word_313BA, 1
    memory16(_ds, _si + 48) = 0x0001;           //mov word ptr [si+30h], 1
    memory16(_ds, _si + 32) = 0x0001;           //mov word ptr [si+20h], 1
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    _ax = _ax - memory16(_ds, _si + 18);        //sub ax, [si+12h]
    _bx = memory16(_ds, 0x9F16);                //mov bx, word_32446
    _bx = _bx - memory16(_ds, _si + 22);        //sub bx, [si+16h]
    sub_11B90();                                //call sub_11B90
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _al -= 0x60;                                //sub al, 60h
    memory16(_ds, _di + 30) = 0x0000;           //mov word ptr [di+1Eh], 0
    memory16(_ds, _di + 28) = _ax;              //mov [di+1Ch], ax
    sub_14191();                                //call sub_14191
    _ax &= 0x001f;                              //and ax, 1Fh
    _ax += 0x0020;                              //add ax, 20h
    _ah = _al;                                  //mov ah, al
    _al = _al ^ _al;                            //xor al, al
    _ah <<= 1;                                  //shl ah, 1
    _ah <<= 1;                                  //shl ah, 1
    memory16(_ds, _di + 62) = 0x0000;           //mov word ptr [di+3Eh], 0
    memory16(_ds, _di + 60) = _ax;              //mov [di+3Ch], ax
    memory16(_ds, _di + 64) = 0x0000;           //mov word ptr [di+40h], 0
    memory16(_ds, _di + 66) = 0x0001;           //mov word ptr [di+42h], 1
    if (memory16(_ds, _si + 34) != 0x003c)      //jnz short loc_19FF9
      goto loc_19FF9;
    memory(_ds, _di + 28) += 0x40;              //add byte ptr [di+1Ch], 40h
    memory16(_ds, _di + 60) = -memory16(_ds, _di + 60);
loc_19FF9:                                      //loc_19FF9:
{sub_13589(); return; };                        //
loc_19FFC:                                      //loc_19FFC:
    _ax = memory16(_ds, _si + 32);              //mov ax, [si+20h]
    memory16(_ds, _si + 48) += _ax;             //add [si+30h], ax
    if (memory16(_ds, _si + 48) != 0x000e)      //jnz short loc_1A00B
      goto loc_1A00B;
    memory16(_ds, _si + 32) = -memory16(_ds, _si + 32);
loc_1A00B:                                      //loc_1A00B:
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    _ax = memory16(_ds, _si + 48);              //mov ax, [si+30h]
    memory16(_ds, _di + 66) = _ax;              //mov [di+42h], ax
{sub_13589(); return; };                        //
loc_1A017:                                      //loc_1A017:
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    memory16(_ds, _di + 66) = 0x0000;           //mov word ptr [di+42h], 0
    memory16(_ds, _di + 28) = 0x0040;           //mov word ptr [di+1Ch], 40h
{sub_13589(); return; };                        //
}

void sub_1A027()
{
    _di = memory16(_ds, _si + 8);               //mov di, [si+8]
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 20);              //mov ax, [di+14h]
    memory16(_ds, _si + 20) = _ax;              //mov [si+14h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, _di + 24);              //mov ax, [di+18h]
    memory16(_ds, _si + 24) = _ax;              //mov [si+18h], ax
    memory16(_ds, _si + 26) = 0x03e8;           //mov word ptr [si+1Ah], 3E8h
    _push(memory16(_ds, _si + 28));             //push word ptr [si+1Ch]
    _push(memory16(_ds, _si + 30));             //push word ptr [si+1Eh]
    _push(memory16(_ds, _si + 60));             //push word ptr [si+3Ch]
    _push(memory16(_ds, _si + 62));             //push word ptr [si+3Eh]
    _push(memory16(_ds, _si + 64));             //push word ptr [si+40h]
    sub_14865();                                //call sub_14865
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    _ax = memory16(_ds, _si + 28);              //mov ax, [si+1Ch]
    memory16(_ds, _di + 28) = _ax;              //mov [di+1Ch], ax
    _ax = memory16(_ds, _si + 30);              //mov ax, [si+1Eh]
    memory16(_ds, _di + 30) = _ax;              //mov [di+1Eh], ax
    _ax = memory16(_ds, _si + 60);              //mov ax, [si+3Ch]
    memory16(_ds, _di + 60) = _ax;              //mov [di+3Ch], ax
    _ax = memory16(_ds, _si + 62);              //mov ax, [si+3Eh]
    memory16(_ds, _di + 62) = _ax;              //mov [di+3Eh], ax
    _ax = memory16(_ds, _si + 64);              //mov ax, [si+40h]
    memory16(_ds, _di + 64) = _ax;              //mov [di+40h], ax
    _ax = memory16(_ds, _si + 66);              //mov ax, [si+42h]
    memory16(_ds, _di + 66) = _ax;              //mov [di+42h], ax
    memory16(_ds, _si + 64) = _pop();           //pop word ptr [si+40h]
    memory16(_ds, _si + 62) = _pop();           //pop word ptr [si+3Eh]
    memory16(_ds, _si + 60) = _pop();           //pop word ptr [si+3Ch]
    memory16(_ds, _si + 30) = _pop();           //pop word ptr [si+1Eh]
    memory16(_ds, _si + 28) = _pop();           //pop word ptr [si+1Ch]
}

void sub_1A090()
{
    WORD _cs = _seg000;

    _di = memory16(_ds, _si + 8);               //mov di, [si+8]
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 20);              //mov ax, [di+14h]
    memory16(_ds, _si + 20) = _ax;              //mov [si+14h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, _di + 24);              //mov ax, [di+18h]
    memory16(_ds, _si + 24) = _ax;              //mov [si+18h], ax
    memory16(_ds, _si + 26) = 0x03e8;           //mov word ptr [si+1Ah], 3E8h
    sub_14865();                                //call sub_14865
    _bx = memory16(_ds, _si + 28);              //mov bx, [si+1Ch]
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx &= 0x001c;                              //and bx, 1Ch
    if (memory16(_ds, _si + 66) != 0x000e)      //jnz short loc_1A0CB
      goto loc_1A0CB;
    memory16(_ds, 0x8E88) = 0x0001;             //mov word_313B8, 1
loc_1A0CB:                                      //loc_1A0CB:
    _ax = memory16(_ds, 0x919C);                //mov ax, word_316CC
    _ax &= 0x0004;                              //and ax, 4
    _ax >>= 1;                                  //shr ax, 1
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_cs, _bx + -20881);          //mov ax, cs:[bx-5191h]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
{sub_13589(); return; };                        //
}

void sub_1A0E5()
{
    WORD _cs = _seg000;

    _di = 0xadc3;                               //mov di, 0ADC3h
    sub_11022();                                //call sub_11022
    _bp = _si;                                  //mov bp, si
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1078E();                                //call sub_1078E
    _di = _pop();                               //pop di
    goto loc_1A105;                             //jmp short loc_1A105
loc_1A0F7:                                      //loc_1A0F7:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1078E();                                //call sub_1078E
    _di = _pop();                               //pop di
    memory16(_ds, _bx + 70) = _si;              //mov [bx+46h], si
loc_1A105:                                      //loc_1A105:
    memory16(_ds, _si) = 0x0054;                //mov word ptr [si], 54h
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    _bx = memory16(_cs, _di);                   //mov bx, cs:[di]
    _di += 0x0002;                              //add di, 2
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 60) = _ax;              //mov [si+3Ch], ax
    _di += 0x0002;                              //add di, 2
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 62) = _ax;              //mov [si+3Eh], ax
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory16(_ds, _si + 52) = 0x03e8;           //mov word ptr [si+34h], 3E8h
    memory(_ds, _si + 39) = 0xff;               //mov byte ptr [si+27h], 0FFh
    _bx = memory16(_ds, 0xDED6);                //mov bx, word_36406
    memory16(_ds, _si + 56) = _bx;              //mov [si+38h], bx
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _bx + 4);               //mov ax, [bx+4]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 18) -= 0x0020;          //sub word ptr [si+12h], 20h
    memory16(_ds, _si + 22) -= 0x0028;          //sub word ptr [si+16h], 28h
    memory16(_ds, _si + 20) = 0x0000;           //mov word ptr [si+14h], 0
    memory16(_ds, _si + 24) = 0x0000;           //mov word ptr [si+18h], 0
    _bx += 0x0006;                              //add bx, 6
    memory16(_ds, _si + 58) = _bx;              //mov [si+3Ah], bx
    memory16(_ds, _si + 28) = 0x0000;           //mov word ptr [si+1Ch], 0
    memory16(_ds, _si + 30) = 0x0000;           //mov word ptr [si+1Eh], 0
    memory16(_ds, _si + 64) = 0x0000;           //mov word ptr [si+40h], 0
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    _ASSERT(0); // problem, kokotina
    _ax = memory16(_cs, 0x19564);               //mov ax, word ptr cs:unk_19564
    memory16(_ds, _si + 66) = _ax;              //mov [si+42h], ax
    sub_13589();                                //call sub_13589
    memory16(_ds, _si + 68) = _bp;              //mov [si+44h], bp
    memory16(_ds, _si + 70) = 0x0000;           //mov word ptr [si+46h], 0
    _ax = _di;                                  //mov ax, di
    _ax -= 0xadc3;                              //sub ax, 0ADC3h
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, _si + 48) = 0x0000;           //mov word ptr [si+30h], 0
    _bx = _si;                                  //mov bx, si
    if (memory(_cs, _di) == 0x0000)             //jz short loc_1A1C7
      goto loc_1A1C7;
    goto loc_1A0F7;                             //jmp loc_1A0F7
loc_1A1C7:                                      //loc_1A1C7:
    memory(_ds, 0x9235) = 0xff;                 //mov byte_31765, 0FFh
    memory(_ds, 0x9225) = 0xff;                 //mov byte_31755, 0FFh
}

void loc_1A1F4()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, _di + 10);              //mov ax, [di+0Ah]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    memory16(_ds, 0xFCFE) = 0x0007;             //mov word_3822E, 7
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _bp = _si;                                  //mov bp, si
loc_1A214:                                      //loc_1A214:
    memory16(_ds, _si) = 0x00c8;                //mov word ptr [si], 0C8h
    memory16(_ds, _si + 12) = 0x4045;           //mov word ptr [si+0Ch], 4045h
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_1A236
      goto loc_1A236;
    memory16(_ds, _si) = 0x00cc;                //mov word ptr [si], 0CCh
    memory16(_ds, _si + 12) = 0x3f95;           //mov word ptr [si+0Ch], 3F95h
loc_1A236:                                      //loc_1A236:
    if (memory16(_ds, 0xFCFE) != 0x0000)        //jnz short loc_1A25C
      goto loc_1A25C;
    _bx = 0x98b2;                               //mov bx, 98B2h
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_1A249
      goto loc_1A249;
    _bx = 0x98cc;                               //mov bx, 98CCh
loc_1A249:                                      //loc_1A249:
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
loc_1A25C:                                      //loc_1A25C:
    memory16(_ds, _si + 2) = 0xa656;            //mov word ptr [si+2], 0A656h
    if (memory16(_ds, 0xFCFE) != 0x0000)        //jnz short loc_1A26D
      goto loc_1A26D;
    memory16(_ds, _si + 2) = 0xa613;            //mov word ptr [si+2], 0A613h
loc_1A26D:                                      //loc_1A26D:
    if (memory16(_ds, 0xFCFE) != 0x0007)        //jnz short loc_1A279
      goto loc_1A279;
    memory16(_ds, _si + 2) = 0xa5a4;            //mov word ptr [si+2], 0A5A4h
loc_1A279:                                      //loc_1A279:
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 32) = _ax;              //mov [si+20h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 6) = 0x3a39;            //mov word ptr [si+6], 3A39h
    memory(_ds, _si + 38) = 0x01;               //mov byte ptr [si+26h], 1
    _ax = memory16(_cs, 0x19566);               //mov ax, word ptr cs:unk_19566
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory(_ds, _si + 39) = 0x00;               //mov byte ptr [si+27h], 0
    memory16(_ds, _si + 52) = 0x0190;           //mov word ptr [si+34h], 190h
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    memory16(_ds, _si + 28) = 0x0000;           //mov word ptr [si+1Ch], 0
    _ax = 0x0007;                               //mov ax, 7
    _ax = _ax - memory16(_ds, 0xFCFE);          //sub ax, word_3822E
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_1A2C7
      goto loc_1A2C7;
    _ax = -_ax;                                 //neg ax
loc_1A2C7:                                      //loc_1A2C7:
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    sub_13589();                                //call sub_13589
    memory16(_ds, _si + 68) = _bp;              //mov [si+44h], bp
    memory16(_ds, _si + 70) = 0x0000;           //mov word ptr [si+46h], 0
    if (memory16(_ds, 0xFCFE) == 0x0000)        //jz short loc_1A2E9
      goto loc_1A2E9;
    _push(_di);                                 //push di
    _di = _si;                                  //mov di, si
    sub_11022();                                //call sub_11022
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _di + 70) = _si;              //mov [di+46h], si
    _di = _pop();                               //pop di
loc_1A2E9:                                      //loc_1A2E9:
    memory16(_ds, 0xFCFE) -= 1;                 //dec word_3822E
    if ((short)memory16(_ds, 0xFCFE) < 0)       //js short loc_1A2F2
      goto loc_1A2F2;
    goto loc_1A214;                             //jmp loc_1A214
loc_1A2F2:                                      //loc_1A2F2:
    _di = _pop();                               //pop di
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x00b8;                //mov word ptr [si], 0B8h
    memory16(_ds, _si + 2) = 0x0761;            //mov word ptr [si+2], 761h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x0761;            //mov word ptr [si+6], 761h
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    memory16(_ds, _si + 70) = _di;              //mov [si+46h], di
    memory16(_ds, _di) = 0x00bc;                //mov word ptr [di], 0BCh
    memory16(_ds, _di + 2) = 0x25a8;            //mov word ptr [di+2], 25A8h
    memory16(_ds, _di + 4) = 0x0761;            //mov word ptr [di+4], 761h
    memory16(_ds, _di + 6) = 0x0761;            //mov word ptr [di+6], 761h
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 44) = 0x03e8;           //mov word ptr [di+2Ch], 3E8h
    memory16(_ds, _di + 68) = _si;              //mov [di+44h], si
    return;                                     //retn
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  57h");                          //db  57h
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  64h");                          //db  64h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db 0A6h");                          //db 0A6h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  53h");                          //db  53h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Dh");                          //db  2Dh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  12h");                          //db  12h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  7Eh");                          //db  7Eh
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  99h");                          //db  99h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db 0FEh");                          //db 0FEh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  5Ch");                          //db  5Ch
    _STOP_("db  10h");                          //db  10h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  3Ah");                          //db  3Ah
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db 0C6h");                          //db 0C6h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  36h");                          //db  36h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db 0CAh");                          //db 0CAh
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db 0F8h");                          //db 0F8h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db 0DFh");                          //db 0DFh
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db 0D4h");                          //db 0D4h
    _STOP_("db 0A8h");                          //db 0A8h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  6Ah");                          //db  6Ah
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  38h");                          //db  38h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  8Fh");                          //db  8Fh
    _STOP_("db 0AEh");                          //db 0AEh
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db 0E2h");                          //db 0E2h
    _STOP_("db 0DEh");                          //db 0DEh
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db 0F0h");                          //db 0F0h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  74h");                          //db  74h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db 0F4h");                          //db 0F4h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  25h");                          //db  25h
    _STOP_("db 0ABh");                          //db 0ABh
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  76h");                          //db  76h
    _STOP_("db  3Bh");                          //db  3Bh
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  38h");                          //db  38h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  57h");                          //db  57h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db 0BAh");                          //db 0BAh
    _STOP_("db  73h");                          //db  73h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  74h");                          //db  74h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  65h");                          //db  65h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db 0BAh");                          //db 0BAh
    _STOP_("db  75h");                          //db  75h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  5Ch");                          //db  5Ch
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  3Eh");                          //db  3Eh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  46h");                          //db  46h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  64h");                          //db  64h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db 0AAh");                          //db 0AAh
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  3Bh");                          //db  3Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  5Ch");                          //db  5Ch
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E3h");                          //db 0E3h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  87h");                          //db  87h
    _STOP_("db  82h");                          //db  82h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  85h");                          //db  85h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  74h");                          //db  74h
    _STOP_("db  25h");                          //db  25h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db  13h");                          //db  13h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db 12h, 89h, 44h, 12h, 25h, 0Fh, 0, 3Dh, 0...");
    _STOP_("db 0E9h, 0BCh, 0, 0EBh, 3Ch, 3, 44h, 12h, ...");
    _STOP_("db 25h, 0Fh, 0, 74h, 3, 0E9h, 0ACh, 0, 0EB...");
    _STOP_("db 87h, 92h, 40h, 78h, 14h, 3, 44h, 16h, 8...");
    _STOP_("db 3, 6, 90h, 91h, 25h, 0Fh, 0, 74h, 3, 0E...");
    _STOP_("db 12h, 3, 44h, 16h, 89h, 44h, 16h, 3, 6, ...");
    _STOP_("db 0Fh, 0, 3Dh, 0Fh, 0, 75h, 7Eh, 8Bh, 44h...");
    _STOP_("db 74h, 48h, 3Dh, 40h, 1, 73h, 43h, 0BFh, ...");
    _STOP_("db 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, 25h, 0FEh...");
    _STOP_("db 8Bh, 54h, 16h, 3, 16h, 90h, 91h, 0D1h, ...");
    _STOP_("db 0D1h, 0EAh, 0D1h, 0EAh, 0B8h, 28h, 0, 0...");
    _STOP_("db 0F8h, 83h, 3Dh, 0, 74h, 10h, 8Bh, 87h, ...");
    _STOP_("db 44h, 12h, 8Bh, 87h, 92h, 40h, 29h, 44h,...");
    _STOP_("db 8Bh, 0AFh, 0A2h, 40h, 3Eh, 83h, 3Bh, 0,...");
    _STOP_("db 87h, 0B2h, 40h, 1, 44h, 12h, 8Bh, 87h, ...");
    _STOP_("db 44h, 16h, 8Bh, 9Fh, 0D2h, 40h, 89h, 5Ch...");
    _STOP_("db 0E3h, 2Eh, 8Bh, 9Fh, 0B3h, 0ADh, 2Eh, 8...");
    _STOP_("db 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 44h, 0Eh, 8...");
    _STOP_("db 89h, 5Ch, 10h, 2Eh, 0A0h, 6Ch, 95h, 0, ...");
    _STOP_("db 34h, 0E8h, 25h, 9Ch, 24h, 3Fh, 88h, 44h...");
    _STOP_("db 1Eh, 6Eh, 95h, 0D1h, 0E3h, 2Eh, 8Bh, 0A...");
    _STOP_("db 0A1h, 12h, 9Fh, 2Bh, 44h, 12h, 8Bh, 1Eh...");
    _STOP_("db 5Ch, 16h, 0E8h, 3, 76h, 8Bh, 0C8h, 8Bh,...");
    _STOP_("db 5Ch, 16h, 2Eh, 8Bh, 16h, 70h, 95h, 0E8h...");
    _STOP_("db 8Fh, 0E8h, 1Dh, 62h, 0C3h, 0A1h, 98h, 9...");
    _STOP_("db 81h, 7Ch, 16h, 0E8h, 0, 7Dh, 5Eh, 0C7h,...");
    _STOP_("db 7, 83h, 7Ch, 1Ch, 0, 75h, 2Ch, 83h, 7Ch...");
    _STOP_("db 5, 0FFh, 44h, 22h, 0EBh, 45h, 8Bh, 44h,...");
    _STOP_("db 16h, 9Fh, 79h, 2, 0F7h, 0D8h, 3Dh, 20h,...");
    _STOP_("db 0C7h, 44h, 1Ch, 2, 0, 0E8h, 0B2h, 9Bh, ...");
    _STOP_("db 0Ah, 0, 89h, 44h, 22h, 0C7h, 44h, 4, 53...");
    _STOP_("db 1Ch, 3, 44h, 1Ah, 89h, 44h, 1Ah, 75h, 0...");
    _STOP_("db 1Ch, 2 dup(0), 0C7h, 44h, 22h, 0FBh, 0F...");
    _STOP_("db 3Bh, 44h, 22h, 75h, 3, 0F7h, 5Ch, 1Ch, ...");
    _STOP_("db 0E8h, 0AEh, 61h, 0C3h, 0A1h, 98h, 91h, ...");
    _STOP_("db 81h, 7Ch, 16h, 0E8h, 0, 7Dh, 32h, 0E8h,...");
    _STOP_("db 7Ch, 44h, 8Bh, 44h, 22h, 0F7h, 65h, 1Ah...");
    _STOP_("db 89h, 44h, 12h, 83h, 7Dh, 1Ch, 2, 75h, 6...");
    _STOP_("db 2, 74h, 0Ch, 8Bh, 45h, 22h, 85h, 0C0h, ...");
    _STOP_("db 45h, 1Ah, 75h, 5, 0C7h, 44h, 0Eh, 1, 0,...");
    _STOP_("db 0E8h, 6Bh, 61h, 0C3h, 0A1h, 98h, 91h, 1...");
    _STOP_("db 7Ch, 16h, 0E8h, 0, 7Dh, 22h, 0C7h, 44h,...");
    _STOP_("db 7Ch, 44h, 8Bh, 44h, 22h, 0F7h, 65h, 1Ah...");
    _STOP_("db 89h, 44h, 12h, 83h, 7Dh, 1Ch, 0, 74h, 5...");
    _STOP_("db 4, 53h, 8, 0E9h, 4, 8Fh, 0E8h, 38h, 61h...");
    _STOP_("db 98h, 91h, 1, 44h, 16h, 0A1h, 0AAh, 91h,...");
    _STOP_("db 2Bh, 6, 90h");                   //db 2Bh, 6, 90h
    _STOP_("db 91h, 3Bh, 44h, 16h, 7Dh, 3, 0E9h, 0Fh, ...");
    _STOP_("db 9Bh, 83h, 7Ch, 1Ah, 0, 75h, 5Fh, 8Bh, 4...");
    _STOP_("db 12h, 89h, 44h, 12h, 3Dh, 0E0h, 0FFh, 7F...");
    _STOP_("db 44h, 12h, 2 dup(0), 0BBh, 0E6h, 98h, 0F...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 44h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C3h, 4, 89h, 5Ch, 10h, 0E9h,...");
    _STOP_("db 60h, 1, 7Ch, 0Ah, 0C7h, 44h, 12h, 40h, ...");
    _STOP_("db 99h, 0EBh, 0D8h, 3Dh, 88h, 0, 75h, 0Ah,...");
    _STOP_("db 1, 0, 0BBh, 0FCh, 98h, 0EBh, 0CCh, 3Dh,...");
    _STOP_("db 0Ah, 0C7h, 44h, 1Ah, 1, 0, 0BBh, 2Eh, 9...");
    _STOP_("db 0E9h, 80h, 8Eh, 83h, 7Ch, 0Eh, 0, 75h, ...");
    _STOP_("db 1Ah, 2 dup(0), 81h, 7Ch, 12h, 0A0h, 0, ...");
    _STOP_("db 44h, 12h, 68h, 0, 0BBh, 18h, 99h, 0EBh,...");
    _STOP_("db 12h, 0D8h, 0, 0BBh, 0E6h, 98h, 0EBh, 91...");
    _STOP_("db 1Ah, 83h, 7Ch, 1Ah, 0Bh, 2 dup(75h), 8B...");
    _STOP_("db 0A3h, 0E2h, 0FCh, 8Bh, 44h, 16h, 0A3h, ...");
    _STOP_("db 2Eh, 0E2h, 0FCh, 5, 83h, 6, 0E6h, 0FCh,...");
    _STOP_("db 40h, 81h, 3Eh, 0E2h, 0FCh, 0A0h, 0, 7Eh...");
    _STOP_("db 0E2h, 0FCh, 0Ah, 0BBh, 29h, 41h, 56h, 0...");
    _STOP_("db 0BFh, 96h, 90h, 0E8h, 11h, 60h, 8Bh, 0F...");
    _STOP_("db 5, 14h, 0, 0C7h, 45h, 2, 0B4h, 0A7h, 0C...");
    _STOP_("db 8, 89h, 5Dh, 0Ch, 0C7h, 45h, 0Eh, 2 dup...");
    _STOP_("db 0FCh, 89h, 45h, 12h, 0A1h, 0E6h, 0FCh, ...");
    _STOP_("db 0C7h, 45h, 1Ah, 2 dup(0), 2Eh, 0A1h, 72...");
    _STOP_("db 45h, 42h, 0C7h, 45h, 1Ch, 3, 0, 81h, 7C...");
    _STOP_("db 0, 7Ch, 5, 0C7h, 45h, 1Ch, 5, 0, 0E9h, ...");
    _STOP_("db 0Dh, 60h, 0C3h, 0E8h, 96h, 77h, 83h, 3C...");
    _STOP_("db 22h, 81h, 7Ch, 12h, 80h, 0, 7Dh, 0Ah, 0...");
    _STOP_("db 3, 0, 0C7h, 44h, 0Ch, 0F5h, 40h, 81h, 7...");
    _STOP_("db 0, 7Ch, 0Ah, 0C7h, 44h, 1Ch, 5, 0, 0C7h...");
    _STOP_("db 41h, 0C3h, 0A1h, 0AAh, 91h, 5, 0D0h, 0,...");
    _STOP_("db 7Dh, 3, 0E9h, 0E3h, 0, 8Bh, 44h, 12h, 5...");
    _STOP_("db 44h, 28h, 5, 1Fh, 0, 89h, 44h, 2Ch, 8Bh...");
    _STOP_("db 6, 90h, 91h, 5, 40h, 0, 89h, 44h, 2Ah, ...");
    _STOP_("db 44h, 2Eh, 8Bh, 44h, 1Ah, 75h, 0Dh, 0E8h...");
    _STOP_("db 3Ah, 6, 74h, 95h, 73h, 63h, 0B8h, 2 dup...");
    _STOP_("db 0FFh, 0D1h, 0E0h, 0D1h, 0E0h, 8Bh, 0D8h...");
    _STOP_("db 2Eh, 8Bh, 87h, 0BFh, 0AEh, 89h, 85h, 0A...");
    _STOP_("db 87h, 0C1h, 0AEh, 89h, 85h, 0A4h, 0, 2Eh...");
    _STOP_("db 0AEh, 89h, 85h, 0CAh, 0, 2Eh, 8Bh, 87h,...");
    _STOP_("db 89h, 85h, 0CCh, 0, 0FFh, 44h, 1Ah, 83h,...");
    _STOP_("db 74h, 22h, 83h, 7Ch, 1Ah, 4, 7Ch, 21h, 8...");
    _STOP_("db 0Bh, 7Eh, 1Ch, 83h, 7Ch, 1Ah, 0Ch, 75h,...");
    _STOP_("db 99h, 2Eh, 3Ah, 6, 76h, 95h, 73h, 0Bh, 0...");
    _STOP_("db 4, 0, 0C3h, 0C7h, 44h, 1Ah, 2 dup(0), 0...");
    _STOP_("db 78h, 95h, 0, 44h, 48h, 73h, 0F6h, 0E8h,...");
    _STOP_("db 3Fh, 88h, 44h, 48h, 8Bh, 44h, 12h, 8Bh,...");
    _STOP_("db 20h, 0, 2Bh, 1Eh, 90h");         //db 20h, 0, 2Bh, 1Eh, 90h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  3Eh");                          //db  3Eh
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db  95h");                          //db  95h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E7h");                          //db 0E7h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db 0ADh");                          //db 0ADh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0E2h");                          //db 0E2h
    _STOP_("db 0FEh");                          //db 0FEh
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0FAh");                          //db 0FAh
    _STOP_("db  75h");                          //db  75h
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0FAh");                          //db 0FAh
    _STOP_("db  75h");                          //db  75h
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  95h");                          //db  95h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  76h");                          //db  76h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0EDh");                          //db 0EDh
    _STOP_("db  5Eh");                          //db  5Eh
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db  76h");                          //db  76h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  78h");                          //db  78h
    _STOP_("db 0A9h");                          //db 0A9h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0BAh");                          //db 0BAh
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  1Eh");                          //db  1Eh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db 0BDh");                          //db 0BDh
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  12h");                          //db  12h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db  38h");                          //db  38h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  52h");                          //db  52h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  56h");                          //db  56h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  78h");                          //db  78h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  7Ah");                          //db  7Ah
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  47h");                          //db  47h
    _STOP_("db  7Eh");                          //db  7Eh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0A2h");                          //db 0A2h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0A4h");                          //db 0A4h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0A6h");                          //db 0A6h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0CAh");                          //db 0CAh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  87h");                          //db  87h
    _STOP_("db 0CCh");                          //db 0CCh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db 0CFh");                          //db 0CFh
    _STOP_("db 0A9h");                          //db 0A9h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db 0AAh");                          //db 0AAh
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  7Eh");                          //db  7Eh
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  52h");                          //db  52h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0F4h");                          //db 0F4h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C2h");                          //db 0C2h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  12h");                          //db  12h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0E1h");                          //db 0E1h
    _STOP_("db 0FCh");                          //db 0FCh
    _STOP_("db  56h");                          //db  56h
    _STOP_("db 0BEh");                          //db 0BEh
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  5Eh");                          //db  5Eh
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db 0AEh");                          //db 0AEh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  25h");                          //db  25h
    _STOP_("db 0FEh");                          //db 0FEh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0F8h");                          //db 0F8h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db 0BBh");                          //db 0BBh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C2h");                          //db 0C2h
    _STOP_("db  40h");                          //db  40h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0E1h");                          //db 0E1h
    _STOP_("db 0FCh");                          //db 0FCh
    _STOP_("db  56h");                          //db  56h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db 0F7h");                          //db 0F7h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  5Eh");                          //db  5Eh
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db 0AAh");                          //db 0AAh
    _STOP_("db  91h");                          //db  91h
    _STOP_("db 0D0h");                          //db 0D0h
    _STOP_("db  3Bh");                          //db  3Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  7Dh");                          //db  7Dh
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db 0BDh");                          //db 0BDh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db  1Fh");                          //db  1Fh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  17h");                          //db  17h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db  73h");                          //db  73h
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db  3Fh");                          //db  3Fh
    _STOP_("db  88h");                          //db  88h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  48h");                          //db  48h
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("db  25h");                          //db  25h
    _STOP_("db 0FEh");                          //db 0FEh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db 0D8h");                          //db 0D8h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  38h");                          //db  38h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  87h");                          //db  87h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  87h");                          //db  87h
    _STOP_("db  31h");                          //db  31h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  87h");                          //db  87h
    _STOP_("db  33h");                          //db  33h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  87h");                          //db  87h
    _STOP_("db  35h");                          //db  35h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  2Ch");                          //db  2Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db  74h");                          //db  74h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db  7Ch");                          //db  7Ch
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  74h");                          //db  74h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db  1Fh");                          //db  1Fh
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  44h");                          //db  44h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  5Ch");                          //db  5Ch
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  1Eh");                          //db  1Eh
    _STOP_("db  90h");                          //db  90h
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  2Dh");                          //db  2Dh
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  82h");                          //db  82h
    _STOP_("db  95h");                          //db  95h
    _STOP_("db  57h");                          //db  57h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  54h");                          //db  54h
    _STOP_("db  74h");                          //db  74h
    _STOP_("db  50h");                          //db  50h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  0Ch");                          //db  0Ch
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  46h");                          //db  46h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db  58h");                          //db  58h
    _STOP_("db  83h");                          //db  83h
    _STOP_("db 0C5h");                          //db 0C5h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  10h");                          //db  10h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  49h");                          //db  49h
    _STOP_("db  79h");                          //db  79h
    _STOP_("db 0D7h");                          //db 0D7h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0E8h");                          //db 0E8h
    _STOP_("db  23h");                          //db  23h
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db  76h");                          //db  76h
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  45h");                          //db  45h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0AAh");                          //db 0AAh
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0BAh");                          //db 0BAh
    _STOP_("db  53h");                          //db  53h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  45h");                          //db  45h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  1Eh");                          //db  1Eh
    _STOP_("db 90h, 91h, 83h, 0C3h, 10h, 0BDh, 4Ch, 12...");
    _STOP_("db 88h, 8Bh, 5Dh, 38h, 0C7h, 7, 2 dup(0), ...");
    _STOP_("db 2 dup(0), 0C7h, 47h, 4, 2 dup(0), 0C7h,...");
    _STOP_("db 0C7h, 47h, 28h, 2 dup(0), 0C7h, 47h, 2A...");
    _STOP_("db 0C7h, 47h, 2Ch, 2 dup(0), 0C7h, 47h, 2E...");
    _STOP_("db 81h, 6, 52h, 91h, 0F4h, 1, 83h, 16h, 54...");
    _STOP_("db 8Bh, 0F7h, 0E8h, 0C3h, 5Ch, 5Eh, 0C3h, ...");
    _STOP_("db 61h, 7, 0B8h, 2, 0, 0BBh, 2, 0, 8Bh, 54...");
    _STOP_("db 16h, 90h, 91h, 8Bh, 4Ch, 12h, 83h, 0C1h...");
    _STOP_("db 0E9h, 83h, 0E1h, 0FCh, 56h, 0BEh, 2Fh, ...");
    _STOP_("db 2 dup(5Eh), 0C3h, 0A1h, 0AAh, 91h, 5, 0...");
    _STOP_("db 44h, 16h, 7Dh, 3, 0E9h, 95h, 0, 8Bh, 44...");
    _STOP_("db 0, 89h, 44h, 28h, 5, 0Ch, 0, 89h, 44h, ...");
    _STOP_("db 16h, 2Bh, 6, 90h, 91h, 5, 2, 0, 89h, 44...");
    _STOP_("db 0, 89h, 44h, 2Eh, 8Bh, 44h, 1Ah, 85h, 0...");
    _STOP_("db 2Eh, 0A0h, 84h, 95h, 0, 44h, 48h, 73h, ...");
    _STOP_("db 96h, 24h, 3Fh, 88h, 44h, 48h, 0C7h, 44h...");
    _STOP_("db 0C3h, 25h, 0FEh, 0FFh, 0BBh, 57h, 0AFh,...");
    _STOP_("db 0, 74h, 3, 0BBh, 65h, 0AFh, 8Bh, 7Ch, 3...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 5, 0FFh, 44h, 1Ah, 83...");
    _STOP_("db 8, 74h, 0Ch, 83h, 7Ch, 1Ah, 0Eh, 75h, 5...");
    _STOP_("db 1Ah, 2 dup(0), 0C3h, 8Bh, 44h, 12h, 8Bh...");
    _STOP_("db 8, 0, 2Bh, 1Eh, 90h, 91h, 0BDh, 0B7h, 7...");
    _STOP_("db 81h, 3Ch, 0F0h, 0, 74h, 6, 0B9h, 4, 0, ...");
    _STOP_("db 2Eh, 8Bh, 16h, 86h, 95h, 0E9h, 0Bh, 73h...");
    _STOP_("db 5Bh, 0C3h, 0D1h, 0E3h, 2Eh, 0FFh, 0A7h,...");
    _STOP_("db 9Ah, 95h, 0E9h, 0B0h, 87h, 0BBh, 0ACh, ...");
    _STOP_("db 87h, 0FFh, 36h, 78h, 8Eh, 2Eh, 0A1h, 98...");
    _STOP_("db 78h, 8Eh, 0BBh, 0BEh, 95h, 0E8h, 99h, 8...");
    _STOP_("db 8Eh, 0C3h, 0BBh, 30h, 96h, 0E9h, 8Eh, 8...");
    _STOP_("db 96h, 0E9h, 88h, 87h, 56h, 80h, 3Eh, 33h...");
    _STOP_("db 9, 80h, 3Eh, 34h, 92h, 0, 75h, 2, 5Eh, ...");
    _STOP_("db 0AFh, 2Eh, 83h, 3Ch, 0, 74h, 0F5h, 2Eh,...");
    _STOP_("db 8Bh, 44h, 2, 40h, 2Eh, 8Bh, 5Ch, 4, 43h...");
    _STOP_("db 6, 2Eh, 8Bh, 4Ch, 8, 83h, 0C6h, 0Ah, 2B...");
    _STOP_("db 91h, 81h, 0FAh, 0C0h, 0, 7Dh, 0D8h, 83h...");
    _STOP_("db 7Eh, 0D3h, 56h, 8Bh, 0F7h, 0E8h, 0F9h, ...");
    _STOP_("db 0CAh, 33h, 0C0h, 0C3h, 0C7h, 6, 0A8h, 9...");
    _STOP_("db 0C7h, 6, 0AAh, 91h, 0FFh, 11h, 0C7h, 6,...");
    _STOP_("db 13h, 0C7h, 6, 0AEh, 8Eh, 0D0h, 7, 0E8h,...");
    _STOP_("db 0E2h, 90h, 0E8h, 1Fh, 5Bh, 0C7h, 4, 50h...");
    _STOP_("db 2, 61h, 7, 0C7h, 44h, 4, 1, 0ACh, 0C6h,...");
    _STOP_("db 0C7h, 6, 0F4h, 91h, 96h, 0E4h, 0C7h, 6,...");
    _STOP_("db 52h, 0C6h, 6, 31h, 92h, 0, 0C6h, 6, 32h...");
    _STOP_("db 0C6h, 6, 33h, 92h, 0, 0C6h, 6, 34h, 92h...");
    _STOP_("db 8, 92h, 2 dup(0), 2Eh, 0A1h, 88h, 95h, ...");
    _STOP_("db 2Eh, 0A1h, 88h, 95h, 0A3h, 0Ch, 92h, 0C...");
    _STOP_("db 0, 0C7h, 6, 0Eh, 92h, 2, 0, 2Eh, 0A1h, 8Ah");
    _STOP_("db  92h");                          //db  92h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  95h");                          //db  95h
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db  92h");                          //db  92h
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  99h");                          //db  99h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db  76h");                          //db  76h
    _STOP_("db  8Eh");                          //db  8Eh
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  99h");                          //db  99h
    _STOP_("db  8Bh");                          //db  8Bh
    _STOP_("db 0D8h");                          //db 0D8h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db  78h");                          //db  78h
    _STOP_("db  8Eh");                          //db  8Eh
    _STOP_("db 0C7h");                          //db 0C7h
    _STOP_("db  72h");                          //db  72h
    _STOP_("db  8Eh");                          //db  8Eh
    _STOP_("db  8Dh");                          //db  8Dh
    _STOP_("db  55h");                          //db  55h
    _STOP_("db 0C3h");                          //db 0C3h
    _STOP_("db  1Fh");                          //db  1Fh
    _STOP_("db  78h");                          //db  78h
    _STOP_("db 0CFh");                          //db 0CFh
    _STOP_("db  78h");                          //db  78h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  73h");                          //db  73h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  74h");                          //db  74h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  75h");                          //db  75h
    _STOP_("db  0Fh");                          //db  0Fh
    _STOP_("db  76h");                          //db  76h
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db  76h");                          //db  76h
    _STOP_("db  6Fh");                          //db  6Fh
    _STOP_("db  77h");                          //db  77h
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  57h");                          //db  57h
    _STOP_("db  72h");                          //db  72h
    _STOP_("db  73h");                          //db  73h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db 0ABh");                          //db 0ABh
    _STOP_("db  6Fh");                          //db  6Fh
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  71h");                          //db  71h
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  71h");                          //db  71h
    _STOP_("db 0C6h");                          //db 0C6h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db 0DCh");                          //db 0DCh
    _STOP_("db  96h");                          //db  96h
    _STOP_("db 0F2h");                          //db 0F2h
    _STOP_("db  96h");                          //db  96h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db 0D6h");                          //db 0D6h
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db 0C8h");                          //db 0C8h
    _STOP_("db  15h");                          //db  15h
    _STOP_("db 0D6h");                          //db 0D6h
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db 0C8h");                          //db 0C8h
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  0Eh");                          //db  0Eh
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  64h");                          //db  64h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  82h");                          //db  82h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  7Eh");                          //db  7Eh
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  68h");                          //db  68h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  4Eh");                          //db  4Eh
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  4Ah");                          //db  4Ah
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  11h");                          //db  11h
    _STOP_("db 0D2h");                          //db 0D2h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db 0D4h");                          //db 0D4h
    _STOP_("db 0B9h");                          //db 0B9h
    _STOP_("db 0D6h");                          //db 0D6h
    _STOP_("db  49h");                          //db  49h
    _STOP_("db 0D9h");                          //db 0D9h
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db 0C8h");                          //db 0C8h
    _STOP_("db  75h");                          //db  75h
    _STOP_("db 0CAh");                          //db 0CAh
    _STOP_("db 0CDh");                          //db 0CDh
    _STOP_("db  95h");                          //db  95h
    _STOP_("db 0CFh");                          //db 0CFh
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db 0AFh");                          //db 0AFh
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Bh");                          //db  6Bh
    _STOP_("db  4Fh");                          //db  4Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  57h");                          //db  57h
    _STOP_("db  72h");                          //db  72h
    _STOP_("db  73h");                          //db  73h
    _STOP_("db  5Fh");                          //db  5Fh
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db 0FBh");                          //db 0FBh
    _STOP_("db  6Eh");                          //db  6Eh
    _STOP_("db 0ABh");                          //db 0ABh
    _STOP_("db  6Fh");                          //db  6Fh
    _STOP_("db  5Bh");                          //db  5Bh
    _STOP_("db  70h");                          //db  70h
    _STOP_("db  0Bh");                          //db  0Bh
    _STOP_("db  71h");                          //db  71h
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  71h");                          //db  71h
    _STOP_("db 0CEh");                          //db 0CEh
    _STOP_("db  35h");                          //db  35h
    _STOP_("db 0D2h");                          //db 0D2h
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  3Fh");                          //db  3Fh
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db 0E5h");                          //db 0E5h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  0Fh");                          //db  0Fh
    _STOP_("db 0A4h");                          //db 0A4h
    _STOP_("db 0BFh");                          //db 0BFh
    _STOP_("db 0A3h");                          //db 0A3h
    _STOP_("db 0B3h");                          //db 0B3h
    _STOP_("db  9Dh");                          //db  9Dh
    _STOP_("db  9Ch");                          //db  9Ch
    _STOP_("db  97h");                          //db  97h
    _STOP_("db 0B2h");                          //db 0B2h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db 0C8h");                          //db 0C8h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db 0DEh");                          //db 0DEh
    _STOP_("db  97h");                          //db  97h
    _STOP_("db 0F4h");                          //db 0F4h
    _STOP_("db  97h");                          //db  97h
    _STOP_("db  0Ah");                          //db  0Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  36h");                          //db  36h
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  5Ah");                          //db  5Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  4Ch");                          //db  4Ch
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E0h");                          //db 0E0h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  5Eh");                          //db  5Eh
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  20h");                          //db  20h
    _STOP_("db 0A4h");                          //db 0A4h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  38h");                          //db  38h
    _STOP_("db 0A4h");                          //db 0A4h
    _STOP_("db  9Eh");                          //db  9Eh
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  6Ch");                          //db  6Ch
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  19h");                          //db  19h
    _STOP_("db  38h");                          //db  38h
    _STOP_("db  7Fh");                          //db  7Fh
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0F6h");                          //db 0F6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Eh");                          //db  8Eh
    _STOP_("db  98h");                          //db  98h
    _STOP_("db 0E6h");                          //db 0E6h
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  7Fh");                          //db  7Fh
    _STOP_("db  9Fh");                          //db  9Fh
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Ah");                          //db  8Ah
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  90h");                          //db  90h
    _STOP_("db 0A0h");                          //db 0A0h
    _STOP_("db  61h");                          //db  61h
    _STOP_("db  8Eh");                          //db  8Eh
    _STOP_("db  98h");                          //db  98h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db  33h");                          //db  33h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  23h");                          //db  23h
    _STOP_("db 0B5h");                          //db 0B5h
    _STOP_("db  25h");                          //db  25h
    _STOP_("db 0A5h");                          //db 0A5h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db  29h");                          //db  29h
    _STOP_("db 0E9h");                          //db 0E9h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db  15h");                          //db  15h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0D9h");                          //db 0D9h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  12h");                          //db  12h
    _STOP_("db  6Dh");                          //db  6Dh
    _STOP_("db  14h");                          //db  14h
    _STOP_("db  5Dh");                          //db  5Dh
    _STOP_("db  16h");                          //db  16h
    _STOP_("db  89h");                          //db  89h
    _STOP_("db  18h");                          //db  18h
    _STOP_("db 0A1h");                          //db 0A1h
    _STOP_("db  1Ah");                          //db  1Ah
    _STOP_("db 0CDh");                          //db 0CDh
    _STOP_("db  1Ch");                          //db  1Ch
    _STOP_("db  91h");                          //db  91h
    _STOP_("db  1Eh");                          //db  1Eh
    _STOP_("db  0Dh");                          //db  0Dh
    _STOP_("db  21h");                          //db  21h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  34h");                          //db  34h
    _STOP_("db  35h");                          //db  35h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  35h");                          //db  35h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  24h");                          //db  24h
    _STOP_("db  25h");                          //db  25h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db  80h");                          //db  80h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db 0C0h");                          //db 0C0h
    _STOP_("db  27h");                          //db  27h
    _STOP_("db  28h");                          //db  28h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  2Ah");                          //db  2Ah
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  2Bh");                          //db  2Bh
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  31h");                          //db  31h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  2Fh");                          //db  2Fh
    _STOP_("db  30h");                          //db  30h
    _STOP_("db 0C1h");                          //db 0C1h
    _STOP_("db  31h");                          //db  31h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  81h");                          //db  81h
    _STOP_("db  30h");                          //db  30h
    _STOP_("db  41h");                          //db  41h
    _STOP_("db  32h");                          //db  32h
    _STOP_("db 81h, 32h, 0C1h, 30h, 1, 31h, 0C1h, 32h,...");
    _STOP_("db 31h, 81h, 31h, 41h, 33h, 81h, 33h, 0C1h...");
    _STOP_("db 0C1h, 32h, 1, 33h, 0C1h, 33h, 1, 34h, 4...");
    _STOP_("db 34h, 0C1h, 30h, 1, 31h, 0C1h, 32h, 1, 3...");
    _STOP_("db 81h, 30h, 41h, 32h, 81h, 32h, 0C1h, 2Fh...");
    _STOP_("db 31h, 1, 32h, 41h, 24h, 81h, 24h, 0C1h, ...");
    _STOP_("db 41h, 27h, 80h, 27h, 0C0h, 27h, 1, 28h, ...");
    _STOP_("db 1, 2Bh, 0E4h, 99h, 0CEh, 99h, 0B8h, 99h...");
    _STOP_("db 8Ch, 99h, 76h, 99h, 60h, 99h, 4Ah, 99h,...");
    _STOP_("db 35h, 41h, 35h, 81h, 35h, 0C1h, 35h, 1, ...");
    _STOP_("db 1, 37h, 41h, 36h, 81h, 36h, 41h, 37h, 8...");
    _STOP_("db 35h, 1, 36h, 0C1h, 36h, 1, 37h, 0C1h, 3...");
    _STOP_("db 35h, 81h, 35h, 0C1h, 37h, 1, 38h, 41h, ...");
    _STOP_("db 41h, 38h, 1, 38h, 0C1h, 37h, 0C1h, 38h,...");
    _STOP_("db 39h, 81h, 39h, 41h, 39h, 1, 39h, 0C1h, ...");
    _STOP_("db 1, 3Ah, 60h, 33h, 0D3h, 0ABh, 0D9h, 0AB...");
    _STOP_("db 0F5h, 0ABh, 0FBh, 0ABh, 0B7h, 0AFh, 2 d...");
    _STOP_("db 10h, 1, 2 dup(0), 0B7h, 0AFh, 2 dup(0),...");
    _STOP_("db 0C3h, 0AFh, 1, 5 dup(0), 48h, 0, 0BDh, ...");
    _STOP_("db 2, 0, 60h, 0, 98h, 0, 0BDh, 0AFh, 2 dup...");
    _STOP_("db 1, 98h, 3 dup(0), 81h, 17h, 1, 1Bh, 81h...");
    _STOP_("db 0C1h, 1Ah, 41h, 1Eh, 0C1h, 21h, 1, 22h,...");
    _STOP_("db 55h, 0DFh, 7Ah, 36h, 68h, 5Ah, 68h, 0Fh...");
    _STOP_("db 4, 0, 40h, 0, 2, 0, 5, 0, 1, 0, 8, 0, 4...");
    _STOP_("db 6, 0, 6, 0, 7, 0, 4, 0, 7, 0, 2, 0, 0Ah...");
    _STOP_("db 6, 0, 10h, 0, 10h, 0, 1, 0, 6, 0, 32h, ...");
    _STOP_("db 0, 6, 0, 14h, 0, 14h, 0, 0AFh, 0, 6, 0,...");
    _STOP_("db 1, 0, 20h, 0, 8, 0, 2, 0, 0E8h, 0, 90h,...");
    _STOP_("db 53h, 8, 39h, 3Ah, 0F0h, 0B0h, 8, 0, 2 d...");
    _STOP_("db 3 dup(0), 0CAh, 37h, 53h, 8, 39h, 3Ah, ...");
    _STOP_("db 0, 2 dup(0FFh), 2 dup(0), 0ECh, 0, 0FAh...");
    _STOP_("db 53h, 8, 0A7h, 3Ah, 24h, 0B1h, 4, 5 dup(...");
    _STOP_("db 0C8h, 0, 0Bh, 48h, 53h, 8, 0A7h, 3Ah, 3...");
    _STOP_("db 6 dup(0), 1, 2Ch, 1, 0Bh, 48h, 53h, 8, ...");
    _STOP_("db 0B1h, 4, 5 dup(0), 4, 1, 64h, 0, 0Bh, 4...");
    _STOP_("db 3Ah, 0CAh, 0B0h, 4, 5 dup(0), 8, 1, 96h...");
    _STOP_("db 53h, 8, 0A7h, 3Ah, 0A4h, 0B0h, 4, 5 dup...");
    _STOP_("db 2, 0, 1, 9Fh, 2, 0, 0B1h, 9Fh, 2, 0, 61...");
    _STOP_("db 11h, 0A1h, 2, 0, 0C1h, 0A1h, 2, 0, 71h,...");
    _STOP_("db 21h, 0A3h, 2, 3 dup(0), 0E2h, 41h, 0A4h...");
    _STOP_("db 99h, 1, 0, 0D1h, 99h, 1, 0, 81h, 9Ah, 1...");
    _STOP_("db 1, 0, 0E1h, 9Bh, 1, 0, 41h, 9Ch, 1, 0, ...");
    _STOP_("db 0, 0A1h, 9Dh, 1, 3 dup(0), 0E2h, 41h, 0...");
    _STOP_("db 82h, 3, 0, 9Dh, 83h, 3, 0, 9Dh, 84h, 3,...");
    _STOP_("db 3, 0, 9Dh, 86h, 3, 3 dup(0), 0E2h, 41h,...");
    _STOP_("db 9Dh, 87h");                      //db 9Dh, 87h
    _STOP_("db 3, 0, 8Fh, 88h, 3, 0, 81h, 89h, 3, 0, 7...");
    _STOP_("db 65h, 8Bh, 3, 3 dup(0), 0E2h, 41h, 0Ah, ...");
    _STOP_("db 2, 0, 0B5h, 8Dh, 2, 0, 5, 8Fh, 2, 0, 55...");
    _STOP_("db 0A5h, 91h, 2, 3 dup(0), 0E2h, 41h, 24h,...");
    _STOP_("db 2, 0, 29h, 7Eh, 2, 0, 0CFh, 7Eh, 2, 0, ...");
    _STOP_("db 0, 25h, 80h, 2, 0, 0CBh, 80h, 2, 3 dup(...");
    _STOP_("db 3Eh, 0B1h, 0F5h, 92h, 2, 0, 1Dh, 94h, 2...");
    _STOP_("db 2, 0, 0A9h, 96h, 2, 0, 0F9h, 97h, 2, 3 ...");
    _STOP_("db 41h, 5Ch, 0B1h, 29h, 0, 2, 0, 91h, 2 du...");
    _STOP_("db 4, 2, 0, 9Fh, 6, 2, 0, 0F3h, 8, 2, 0, 0...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 76h, 0B1h, 0FBh, 0...");
    _STOP_("db 0Fh, 2, 0, 9, 11h, 2, 0, 71h, 13h, 2, 0...");
    _STOP_("db 2, 0, 79h, 17h, 2, 3 dup(0), 0E2h, 41h,...");
    _STOP_("db 21h, 3, 0, 9, 24h, 3, 0, 49h, 26h, 3, 0...");
    _STOP_("db 0, 5, 2Bh, 3, 0, 31h, 2Dh, 3, 3 dup(0),...");
    _STOP_("db 0B1h, 71h, 2Fh, 3, 0, 0D9h, 31h, 3, 0, ...");
    _STOP_("db 0, 6Dh, 36h, 3, 0, 0D5h, 38h, 3, 0, 1, ...");
    _STOP_("db 0E2h, 41h, 0D0h, 0B1h, 0D9h, 75h, 0Ah, ...");
    _STOP_("db 2, 0, 39h, 77h, 2, 0, 0E9h, 77h, 2, 0, ...");
    _STOP_("db 0, 49h, 79h, 1, 0, 0A9h, 79h, 2, 0, 59h...");
    _STOP_("db 9, 7Bh, 2, 0, 0B9h, 7Bh, 2, 0, 0D9h, 75...");
    _STOP_("db 75h, 2 dup(0), 49h, 6Fh, 0Ah, 0, 0F9h, ...");
    _STOP_("db 70h, 2, 0, 59h, 71h, 2, 0, 9, 72h, 2, 0...");
    _STOP_("db 1, 0, 19h, 73h, 2, 0, 0C9h, 73h, 2, 0, ...");
    _STOP_("db 0, 29h, 75h, 2, 0, 49h, 6Fh, 1, 0, 49h,...");
    _STOP_("db 81h, 5Eh, 1, 0, 1Dh, 5Fh, 1, 0, 0B9h, 5...");
    _STOP_("db 60h, 1, 0, 0B9h, 5Fh, 1, 0, 1Dh, 5Fh, 1...");
    _STOP_("db 41h, 4Eh, 0B2h, 65h, 60h, 1, 0, 0E3h, 6...");
    _STOP_("db 1, 0, 0DFh, 61h, 1, 0, 2 dup(61h), 1, 0...");
    _STOP_("db 1, 3 dup(0), 0E2h, 41h, 6Ch, 0B2h, 5Dh,...");
    _STOP_("db 62h, 1, 0, 59h, 63h, 1, 0, 0A5h, 63h, 1...");
    _STOP_("db 1, 0, 0EFh, 62h, 1, 3 dup(0), 0E2h, 41h...");
    _STOP_("db 5, 64h, 1, 0, 0B5h, 64h, 1, 0, 5Bh, 65h...");
    _STOP_("db 65h, 1, 0, 5Bh, 65h, 1, 0, 0B5h, 64h, 1...");
    _STOP_("db 41h, 0A8h, 0B2h, 57h, 66h, 1, 0, 0F3h, ...");
    _STOP_("db 67h, 1, 0, 0E5h, 67h, 1, 0, 8Fh, 67h, 1...");
    _STOP_("db 1, 3 dup(0), 0E2h, 41h, 0C6h, 0B2h, 3Bh...");
    _STOP_("db 0EBh, 68h, 1, 0, 91h, 69h, 1, 0, 0Fh, 6...");
    _STOP_("db 69h, 1, 0, 0EBh, 68h, 1, 3 dup(0), 0E2h...");
    _STOP_("db 0B2h, 0E1h, 5Ah, 1, 0, 73h, 5Bh, 1, 0, ...");
    _STOP_("db 0, 29h, 5Ch, 1, 0, 0DDh, 5Bh, 1, 0, 73h...");
    _STOP_("db 0E2h, 41h, 2, 0B3h, 89h, 5Ch, 1, 0, 7, ...");
    _STOP_("db 5Dh, 1, 0, 3, 5Eh, 1, 0");       //db 5Dh, 1, 0, 3, 5Eh, 1, 0
    _STOP_("db 85h, 5Dh, 1, 0, 7, 5Dh, 1, 3 dup(0), 0E...");
    _STOP_("db 0B3h, 0F9h, 0CCh, 1, 0, 6Dh, 0CDh, 1, 3...");
    _STOP_("db 41h, 3Eh, 0B3h, 81h, 0C8h, 1, 0, 71h, 0...");
    _STOP_("db 0E2h, 41h, 4Ch, 0B3h, 0ADh, 0CBh, 1, 0,...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 5Ah, 0B3h, 0B9h, 0...");
    _STOP_("db 0CEh, 1, 3 dup(0), 0E2h, 41h, 68h, 0B3h...");
    _STOP_("db 1, 0, 6Dh, 0CDh, 1, 3 dup(0), 0E2h, 41h...");
    _STOP_("db 0CDh, 19h, 2 dup(0), 0D1h, 0A3h, 2 dup(...");
    _STOP_("db 2 dup(0), 8Dh, 6Ah, 2 dup(0), 29h, 6Bh,...");
    _STOP_("db 6Bh, 1, 0, 89h, 6Ch, 1, 0, 39h, 6Dh, 1,...");
    _STOP_("db 1, 0, 99h, 6Eh, 1, 0, 0E9h, 6Dh, 1, 0, ...");
    _STOP_("db 0, 89h, 6Ch, 1, 0, 0D9h, 6Bh, 1, 3 dup(...");
    _STOP_("db 94h, 0B3h, 0B5h, 0E9h, 4, 0, 69h, 0EBh,...");
    _STOP_("db 0E2h, 41h, 0C2h, 0B3h, 1Dh, 0EDh, 4, 0,...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 0D0h, 0B3h, 0E5h, ...");
    _STOP_("db 0D2h, 4, 3 dup(0), 0E2h, 41h, 0DEh, 0B3...");
    _STOP_("db 4, 0, 0FBh, 0D6h, 4, 3 dup(0), 0E2h, 41...");
    _STOP_("db 63h, 0D9h, 4, 0, 17h, 0DBh, 4, 3 dup(0)...");
    _STOP_("db 0FAh, 0B3h, 0CBh, 0DCh, 4, 0, 0Bh, 0DFh...");
    _STOP_("db 0E2h, 41h, 8, 0B4h, 5Fh, 0E1h, 4, 0, 31...");
    _STOP_("db 0E2h, 41h, 16h, 0B4h, 21h, 0E5h, 4, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 24h, 0B4h, 0B1h, 0...");
    _STOP_("db 0F2h, 1, 0, 11h, 0F3h, 1, 0, 0C1h, 0F3h...");
    _STOP_("db 0E2h, 41h, 32h, 0B4h, 69h, 0C0h, 2, 0, ...");
    _STOP_("db 0, 0BFh, 0C1h, 2, 0, 19h, 0C1h, 2, 3 du...");
    _STOP_("db 48h, 0B4h, 51h, 0C2h, 2, 0, 1, 0C3h, 2,...");
    _STOP_("db 2, 0, 1, 0C3h, 2, 3 dup(0), 0E2h, 41h, ...");
    _STOP_("db 0C4h, 2, 0, 11h, 0C5h, 2, 0, 0C1h, 0C5h...");
    _STOP_("db 0C5h, 2, 3 dup(0), 0E2h, 41h, 74h, 0B4h...");
    _STOP_("db 2, 0, 21h, 0C7h, 2, 0, 0D1h, 0C7h, 2, 0...");
    _STOP_("db 2, 3 dup(0), 0E2h, 41h, 8Ah, 0B4h, 51h,...");
    _STOP_("db 1, 0B9h, 2, 0, 0A7h, 0B9h, 2, 0, 1, 0B9...");
    _STOP_("db 0E2h, 41h, 0A0h, 0B4h, 39h, 0BAh, 2, 0,...");
    _STOP_("db 2, 0, 99h, 0BBh, 2, 0, 0E9h, 0BAh, 2, 3...");
    _STOP_("db 41h, 0B6h, 0B4h, 49h, 0BCh, 2, 0, 0F9h,...");
    _STOP_("db 0A9h, 0BDh, 2, 0, 0F9h, 0BCh, 2, 3 dup(...");
    _STOP_("db 0CCh, 0B4h, 59h, 0BEh, 2, 0, 9, 0BFh, 2...");
    _STOP_("db 2, 0, 9, 0BFh, 2, 3 dup(0), 0E2h, 41h, ...");
    _STOP_("db 52h, 2, 0, 0D1h, 53h, 2, 0, 61h, 56h, 2...");
    _STOP_("db 2, 3 dup(0), 0E2h, 41h, 0F8h, 0B4h, 0A9...");
    _STOP_("db 0C1h, 4Bh, 2, 0, 29h, 4Eh, 2, 0, 0B9h, ...");
    _STOP_("db 0E2h, 41h, 0Eh, 0B5h, 41h, 3Dh, 2 dup(0...");
    _STOP_("db 4, 0, 0F5h, 3Eh, 8, 0, 0E5h, 40h, 2 dup...");
    _STOP_("db 4, 0, 41h, 3Dh, 2 dup(0), 75h, 43h, 2 d...");
    _STOP_("db 4, 0, 29h, 45h, 8, 0, 19h, 47h, 2 dup(0...");
    _STOP_("db 4, 0, 75h, 43h, 2 dup(0), 0C3h, 81h, 3E...");
    _STOP_("db 0F0h, 0Dh, 7Ch, 0Eh, 81h, 3Eh, 90h, 91h...");
    _STOP_("db 7Fh, 6, 0C7h, 6, 0AAh, 91h, 0F0h, 0Dh, ...");
    _STOP_("db 25h, 0Fh, 0, 74h, 3, 0E9h, 9Ch, 0, 81h,...");
    _STOP_("db 50h, 0Eh, 7Eh, 3, 0E9h, 91h, 0, 81h, 3E...");
    _STOP_("db 0E0h, 0Ah, 7Dh, 3, 0E9h, 86h, 0, 0E8h, ...");
    _STOP_("db 4Ah, 90h, 0E8h, 0E7h, 51h, 0E8h, 0F9h, ...");
    _STOP_("db 0, 74h, 3, 0B8h, 8, 0, 0F7h, 6, 9Ch, 91...");
    _STOP_("db 3, 5, 10h, 0, 0BBh, 2Ah, 0C8h, 3, 0D8h,...");
    _STOP_("db 89h, 4, 83h, 0C3h, 2, 2Eh, 8Bh, 7, 89h,...");
    _STOP_("db 0C3h, 2, 2Eh, 8Bh, 7, 89h, 44h, 2, 83h,...");
    _STOP_("db 44h, 6, 0A7h, 3Ah, 0C7h, 44h, 4, 53h, 8...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 44h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C3h, 4, 89h, 5Ch, 10h, 0E8h,...");
    _STOP_("db 44h, 48h, 0C7h, 44h, 16h, 0E0h, 0FFh, 0...");
    _STOP_("db 2 dup(0), 2Eh, 0A1h, 0E0h, 0AFh, 89h, 4...");
    _STOP_("db 44h, 27h, 0FFh, 0C7h, 44h, 36h, 2 dup(0...");
    _STOP_("db 34h, 2Ch, 1, 0E8h, 77h, 7Fh, 0C3h, 0E8h...");
    _STOP_("db 98h, 91h, 2Eh, 3, 6, 0E2h, 0AFh, 1, 44h...");
    _STOP_("db 16h, 0C8h, 0, 7Ch, 3, 0E9h, 0BCh, 0, 0F...");
    _STOP_("db 83h, 7Ch, 1Ah, 8, 74h, 0Dh, 83h, 7Ch, 1...");
    _STOP_("db 70h, 0C7h, 44h, 1Ah, 2 dup(0), 0EBh, 69...");
    _STOP_("db 0E4h, 0AFh, 0, 44h, 48h, 73h, 60h, 0E8h...");
    _STOP_("db 3Fh, 88h, 44h, 48h, 56h, 0E8h, 0CCh, 59...");
    _STOP_("db 90h, 0E8h, 20h, 51h, 8Bh, 0FEh, 5Eh, 0B...");
    _STOP_("db 81h, 3Ch, 0C8h, 0, 74h, 3, 0BBh, 50h, 0...");
    _STOP_("db 7, 89h, 5, 83h, 0C3h, 2, 0C7h, 45h, 2, ...");
    _STOP_("db 45h, 4, 53h, 8, 2Eh, 8Bh, 7, 89h, 45h, ...");
    _STOP_("db 2, 8Bh, 44h, 16h, 2Dh, 1Eh, 0, 89h, 45h...");
    _STOP_("db 45h, 1Ah, 2 dup(0), 2Eh, 8Bh, 1Fh, 2Eh,...");
    _STOP_("db 45h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 45h, 0...");
    _STOP_("db 4, 89h, 5Dh, 10h, 2Eh, 0A0h, 4, 0B0h, 0...");
    _STOP_("db 31h, 0E8h, 0DBh, 8Ah, 24h, 3Fh, 88h, 44...");
    _STOP_("db 44h, 12h, 8Bh, 5Ch, 16h, 5, 14h, 0, 2Eh...");
    _STOP_("db 0B0h, 0D1h, 0E5h, 2Eh, 8Bh, 0AEh, 50h, ...");
    _STOP_("db 0, 81h, 3Ch, 0C8h, 0, 74h, 3, 2Dh, 24h,...");
    _STOP_("db 16h, 24h, 0B0h, 0E8h, 0EFh, 67h, 0E9h, ...");
    _STOP_("db 0D6h, 50h, 0C3h, 0A1h, 98h, 91h, 1, 44h...");
    _STOP_("db 0BDh, 8Ah, 83h, 7Ch, 0Eh, 0, 75h, 2Ah, ...");
    _STOP_("db 0C7h, 4, 0Ch, 0, 0C7h, 44h, 2, 98h, 39h...");
    _STOP_("db 89h, 5Ch, 16h, 0BDh, 30h, 12h, 2Eh, 8Bh...");
    _STOP_("db 44h, 0Ch, 2Eh, 8Bh, 46h, 2, 89h, 44h, 0...");
    _STOP_("db 4, 89h, 6Ch, 10h, 0C3h, 81h, 7Ch, 0Ch, ...");
    _STOP_("db 19h, 81h, 7Ch, 0Ch, 49h, 79h, 74h, 3, 0...");
    _STOP_("db 0B8h, 2 dup(0), 0BBh, 0Ah, 0, 8Bh, 2Eh,...");
    _STOP_("db 83h, 0C5h, 6, 0EBh, 0Dh, 0B8h, 80h, 0, ...");
    _STOP_("db 8Bh, 2Eh, 0C4h, 0DEh, 83h, 0C5h, 6, 56h...");
    _STOP_("db 58h, 0BFh, 4Ah, 90h, 0E8h, 21h, 50h, 8B...");
    _STOP_("db 0C7h, 5, 0F8h, 0, 0C7h, 45h, 2, 0Dh, 0B...");
    _STOP_("db 4, 53h, 8, 0C7h, 45h, 6, 0A7h, 3Ah, 0C7...");
    _STOP_("db 1Eh, 2 dup(0), 89h, 45h, 1Ch, 0C7h, 45h...");
    _STOP_("db 0C7h, 45h, 3Eh, 2 dup(0), 0C7h, 45h, 40...");
    _STOP_("db 3, 5Ch, 12h, 89h, 5Dh, 12h, 8Bh, 44h, 1...");
    _STOP_("db 16h, 0C7h, 45h, 1Ah, 2 dup(0), 0C7h, 45...");
    _STOP_("db 0, 2Eh, 0A1h, 0E6h, 0AFh, 89h, 45h, 24h...");
    _STOP_("db 27h, 0, 8Bh, 16h, 0ACh, 91h, 89h, 55h, ...");
    _STOP_("db 0ACh, 91h, 0BBh, 8Ch, 8Eh, 0B9h, 8, 0, ...");
    _STOP_("db 74h, 7, 83h, 0C3h, 4, 0E2h, 0F6h, 0EBh,...");
    _STOP_("db 0C7h, 47h, 2, 1, 0, 0C7h, 45h, 28h, 0E8...");
    _STOP_("db 2Ch, 0E8h, 3, 8Bh, 5Dh, 1Ch, 0D1h, 0EBh...");
    _STOP_("db 0D1h, 0EBh, 0D1h, 0EBh, 2Eh, 8Bh, 9Fh, ...");
    _STOP_("db 8Bh, 7, 89h, 45h, 0Ch, 2Eh, 8Bh, 47h, 2...");
    _STOP_("db 83h, 0C3h, 4, 89h, 5Dh, 10h, 89h, 6Dh, ...");
    _STOP_("db 3Ah, 2Eh, 0A1h, 0E8h, 0AFh, 89h, 45h, 4...");
    _STOP_("db 48h, 2 dup(0), 0C3h, 0FFh, 74h, 1Ch, 0E...");
    _STOP_("db 81h, 3Ch, 0F8h, 0, 74h, 3Dh, 0C7h, 4, 0...");
    _STOP_("db 44h, 2, 0Dh, 0B8h, 0C7h, 44h, 6, 0A7h, ...");
    _STOP_("db 4, 53h, 8, 0E8h, 62h, 89h, 25h, 4, 0, 8...");
    _STOP_("db 0A0h, 0, 7Ch, 3, 5, 2, 0, 8Bh, 0D8h, 8B...");
    _STOP_("db 41h, 0D1h, 0E3h, 8Bh, 9Fh, 0C0h, 0DEh, ...");
    _STOP_("db 89h, 5Ch, 38h, 89h, 5Ch, 3Ah, 0C7h, 44h...");
    _STOP_("db 8Bh, 5Ch, 1Ch, 83h, 0C3h, 10h, 0D1h, 0E...");
    _STOP_("db 0D1h, 0EBh, 0D1h, 0EBh, 83h, 0E3h, 0Eh,...");
    _STOP_("db 0, 0D1h, 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, ...");
    _STOP_("db 0Eh, 0, 3Bh, 0C3h, 74h, 1Eh, 2Eh, 8Bh, ...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 44h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C3h, 4, 89h, 5Ch, 10h, 0E9h,...");
    _STOP_("db 28h, 4Fh, 0C3h, 0E8h, 15h, 89h, 0A1h, 9...");
    _STOP_("db 3, 6, 0EAh, 0AFh, 1, 44h, 16h, 81h, 7Ch...");
    _STOP_("db 0, 7Dh, 3Dh, 2Eh, 0A0h, 0ECh, 0AFh, 0, ...");
    _STOP_("db 31h, 0E8h, 0D7h, 88h, 24h, 3Fh, 88h, 44...");
    _STOP_("db 44h, 12h, 8Bh, 5Ch, 16h, 5, 1Ah, 0, 83h...");
    _STOP_("db 0BDh, 69h, 82h, 0B9h, 0Ah, 0, 81h, 3Ch,...");
    _STOP_("db 9, 0B9h, 0Dh, 0, 2Dh, 34h, 0, 0BDh, 35h...");
    _STOP_("db 16h, 0EEh, 0AFh, 0E8h, 0EBh, 65h, 0E9h,...");
    _STOP_("db 0D2h, 4Eh, 0C3h, 8Bh, 0FEh, 0D1h, 0E3h,...");
    _STOP_("db 5Eh, 0C9h, 0C7h, 45h, 4, 8Bh, 0B9h, 29h...");
    _STOP_("db 2Dh, 56h, 57h, 8Bh, 36h, 54h, 90h, 0E8h...");
    _STOP_("db 9, 0, 0E8h, 0D3h, 5Ch, 0B9h, 13h, 0, 0B...");
    _STOP_("db 57h, 8Bh, 5Dh, 16h, 0BAh, 60h, 0, 0BFh,...");
    _STOP_("db 4Ch, 12h, 0E8h, 60h, 5Ch, 0C6h, 6, 61h,...");
    _STOP_("db 5Eh, 0C3h, 0C7h, 45h, 4, 0B3h, 0B9h, 29...");
    _STOP_("db 76h, 1, 0C3h, 0FFh, 0Eh, 12h, 92h, 8Bh,...");
    _STOP_("db 5Dh, 16h, 2Bh, 1Eh, 90h, 91h, 5, 10h, 0...");
    _STOP_("db 20h, 0BDh, 4Ch, 12h, 0BAh, 53h, 8, 0E8h...");
    _STOP_("db 0C7h, 45h, 1Ch, 2 dup(0FFh), 0C7h, 45h,...");
    _STOP_("db 0C7h, 45h, 6, 61h, 7, 0C3h, 0B8h, 6, 0,...");
    _STOP_("db 8Bh, 54h, 16h, 0B9h, 38h, 0, 0BFh, 66h,...");
    _STOP_("db 1Ah, 0");                        //db 1Ah, 0
    _STOP_("db 74h, 6, 0BBh, 6, 0, 0BFh, 0A2h, 0C8h, 5...");
    _STOP_("db 0E8h, 0B8h, 4Fh, 5Eh, 0C3h, 0C7h, 44h, ...");
    _STOP_("db 0B8h, 6, 0, 0BBh, 5, 0, 8Bh, 54h, 16h, ...");
    _STOP_("db 0BFh, 66h, 0C8h, 83h, 7Ch, 1Ah, 0, 74h,...");
    _STOP_("db 0, 0BFh, 0A2h, 0C8h, 56h, 8Bh, 0F7h, 0E...");
    _STOP_("db 5Eh, 0C3h, 0C7h, 44h, 4, 0E3h, 0B9h, 0B...");
    _STOP_("db 81h, 7Ch, 12h, 0A0h, 0, 7Ch, 3, 0BFh, 0...");
    _STOP_("db 5Ch, 1Ch, 0D1h, 0E3h, 2Eh, 8Bh, 39h, 0B...");
    _STOP_("db 2, 0, 8Bh, 54h, 16h, 8Bh, 4Ch, 12h, 0D1...");
    _STOP_("db 8Bh, 0F7h, 0E8h, 82h, 4Fh, 5Eh, 0C3h, 0...");
    _STOP_("db 81h, 7Ch, 12h, 0A0h, 0, 7Ch, 3, 0BFh, 0...");
    _STOP_("db 5Ch, 1Ch, 0D1h, 0E3h, 2Eh, 8Bh, 39h, 0B...");
    _STOP_("db 2, 0, 8Bh, 54h, 16h, 8Bh, 4Ch, 12h, 0D1...");
    _STOP_("db 8Bh, 0F7h, 0E8h, 35h, 4Fh, 5Eh, 0C3h, 8...");
    _STOP_("db 0, 74h, 3, 0E9h, 3Ch, 4Eh, 0C3h, 0C7h, ...");
    _STOP_("db 0BAh, 83h, 7Ch, 42h, 0, 74h, 3, 0E9h, 0...");
    _STOP_("db 83h, 3Eh, 0AAh, 91h, 10h, 7Dh, 6, 0C7h,...");
    _STOP_("db 10h, 0, 0A1h, 98h, 91h, 8Bh, 1Eh, 9Ch, ...");
    _STOP_("db 0Fh, 0D1h, 0E3h, 3, 87h, 0E2h, 40h, 0A3...");
    _STOP_("db 1, 44h, 16h, 83h, 3Eh, 12h, 92h, 0, 74h...");
    _STOP_("db 44h, 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h...");
    _STOP_("db 0C7h, 44h, 28h, 94h, 0, 0C7h, 44h, 2Ch,...");
    _STOP_("db 44h, 16h, 5, 20h, 0, 89h, 44h, 2Ah, 5, ...");
    _STOP_("db 2Eh, 83h, 7Ch, 1Ah, 0, 75h, 17h, 2Eh, 0...");
    _STOP_("db 0, 44h, 48h, 73h, 25h, 0E8h, 9, 87h, 24...");
    _STOP_("db 44h, 48h, 0C7h, 6, 8Ah, 8Eh, 1, 0, 0FEh...");
    _STOP_("db 0Dh, 80h, 7Ch, 1Ah, 78h, 75h, 6, 0C7h, ...");
    _STOP_("db 1, 0, 0C3h, 0C7h, 44h, 1Ah, 2 dup(0), 0...");
    _STOP_("db 92h, 1, 44h, 16h, 8Bh, 44h, 12h, 5, 6, ...");
    _STOP_("db 28h, 5, 14h, 0, 89h, 44h, 2Ch, 8Bh, 44h...");
    _STOP_("db 0, 89h, 44h, 2Ah, 5, 14h, 0, 89h, 44h, ...");
    _STOP_("db 14h, 92h, 1, 44h, 16h, 8Bh, 44h, 12h, 5...");
    _STOP_("db 44h, 28h, 5, 14h, 0, 89h, 44h, 2Ch, 8Bh...");
    _STOP_("db 6, 0, 89h, 44h, 2Ah, 5, 14h, 0, 89h, 44...");
    _STOP_("db 12h, 9Fh, 2Bh, 44h, 12h, 2Dh, 10h, 0, 8...");
    _STOP_("db 9Fh, 2Bh, 5Ch, 16h, 83h, 0EBh, 10h, 0E8...");
    _STOP_("db 0BFh, 22h, 41h, 81h, 7Ch, 12h, 0A0h, 0,...");
    _STOP_("db 2Ah, 41h, 8Bh, 0D8h, 8Ah, 1, 89h, 44h, ...");
    _STOP_("db 0F2h, 0AFh, 0, 44h, 48h, 73h, 4Fh, 0E8h...");
    _STOP_("db 3Fh, 88h, 44h, 48h, 8Bh, 44h, 12h, 5, 1...");
    _STOP_("db 16h, 83h, 0C3h, 10h, 8Bh, 4Ch, 1Ch, 8Bh...");
    _STOP_("db 0E5h, 2Eh, 8Bh, 0AEh, 4Eh, 0CAh, 2Eh, 8...");
    _STOP_("db 0AFh, 0E8h, 84h, 63h, 2Eh, 8Bh, 46h, 0,...");
    _STOP_("db 2Eh, 8Bh, 46h, 2, 89h, 45h, 0Eh, 83h, 0...");
    _STOP_("db 6Dh, 10h, 8Bh, 5Dh, 1Ch, 0D1h, 0E3h, 8B...");
    _STOP_("db 1, 45h, 12h, 8Bh, 87h, 12h, 41h, 1, 45h...");
    _STOP_("db 0C7h, 44h, 0Ch, 19h, 7Dh");      //db 0C7h, 44h, 0Ch, 19h, 7Dh
    _STOP_("db 0C7h, 44h, 0Eh, 2 dup(0), 0A1h, 14h, 92...");
    _STOP_("db 0E8h, 75h, 4, 80h, 74h, 1Ch, 80h, 8Bh, ...");
    _STOP_("db 45h, 1Ah, 3Dh, 8, 0, 7Eh, 0Dh, 2Dh, 80h...");
    _STOP_("db 3Dh, 8, 0, 7Eh, 3, 0B8h, 8, 0, 89h, 44h...");
    _STOP_("db 75h, 0Ah, 0C7h, 44h, 28h, 0E8h, 3, 0C7h...");
    _STOP_("db 3, 0C3h, 0C7h, 44h, 0Ch, 19h, 7Dh, 0C7h...");
    _STOP_("db 0A1h, 14h, 92h, 1, 44h, 16h, 0E8h, 0F1h...");
    _STOP_("db 42h, 0, 75h, 0Ah, 0C7h, 44h, 28h, 0E8h,...");
    _STOP_("db 2Ch, 0E8h, 3, 0C3h, 0C7h, 44h, 0Ch, 69h...");
    _STOP_("db 44h, 0Eh, 2 dup(0), 0A1h, 14h, 92h, 1, ...");
    _STOP_("db 0CDh, 2, 83h, 7Ch, 42h, 0, 75h, 0Ah, 0C...");
    _STOP_("db 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, 0C3h,...");
    _STOP_("db 92h, 0, 74h, 3, 0E9h, 0A0h, 0, 0C6h, 6,...");
    _STOP_("db 0BFh, 6Ah, 0C9h, 0B9h, 13h, 0, 0E8h, 0A...");
    _STOP_("db 36h, 0DEh, 0FCh, 0EBh, 3, 0E8h, 1, 54h,...");
    _STOP_("db 90h, 0E8h, 66h, 4Bh, 5Fh, 0C7h, 4, 50h,...");
    _STOP_("db 5, 89h, 44h, 2, 2Eh, 8Bh, 45h, 2, 89h, ...");
    _STOP_("db 8Bh, 45h, 4, 89h, 44h, 4, 2Eh, 8Bh, 45h...");
    _STOP_("db 12h, 2Eh, 8Bh, 45h, 8, 0C6h, 44h, 4Ah, ...");
    _STOP_("db 90h, 91h, 89h, 44h, 16h, 0C7h, 44h, 1Ah...");
    _STOP_("db 44h, 1Ch, 2 dup(0), 0C7h, 44h, 1Eh, 2 d...");
    _STOP_("db 44h, 3Ch, 2 dup(0), 0C7h, 44h, 3Eh, 2 d...");
    _STOP_("db 44h, 40h, 2 dup(0), 0C7h, 44h, 42h, 3, ...");
    _STOP_("db 45h, 0Ah, 89h, 44h, 24h, 83h, 0C7h, 0Ch...");
    _STOP_("db 27h, 0FFh, 0C7h, 44h, 20h, 2 dup(0), 0C...");
    _STOP_("db 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, 0A1h,...");
    _STOP_("db 89h, 2 dup(44h), 0E2h, 2, 0EBh, 3, 0E9h...");
    _STOP_("db 0C7h, 6, 12h, 92h, 2, 0, 0C3h, 0C7h, 45...");
    _STOP_("db 29h, 45h, 24h, 77h, 1Dh, 0FEh, 0Eh, 10h...");
    _STOP_("db 6, 8Ch, 91h, 2 dup(0FFh), 0B9h, 0Ah, 0,...");
    _STOP_("db 34h, 64h, 0, 0FFh, 75h, 8, 0E8h, 0E4h, ...");
    _STOP_("db 0E2h, 0F0h, 0C3h, 50h, 0A1h, 0B4h, 8Eh,...");
    _STOP_("db 0FCh, 0A1h, 0B6h, 8Eh, 0A3h, 0E6h, 0FCh...");
    _STOP_("db 8Eh, 0A3h, 0EAh, 0FCh, 0A1h, 0BAh, 8Eh,...");
    _STOP_("db 0FCh, 8Bh, 45h, 28h, 0A3h, 0F2h, 0FCh, ...");
    _STOP_("db 0A3h, 0F6h, 0FCh, 8Bh, 45h, 2Ch, 0A3h, ...");
    _STOP_("db 45h, 2Eh, 0A3h, 0FEh, 0FCh, 0A1h, 0FEh,...");
    _STOP_("db 0F6h, 0FCh, 0E8h, 22h, 52h, 75h, 2Dh, 8...");
    _STOP_("db 0A3h, 0F6h, 0FCh, 0A1h, 0F6h, 0FCh, 0A3...");
    _STOP_("db 0E8h, 11h, 52h, 75h, 1Ch, 0E8h, 0Ch, 52...");
    _STOP_("db 58h, 0C7h, 45h, 4, 0B9h, 8, 29h, 45h, 2...");
    _STOP_("db 0FEh, 0Eh, 10h, 92h, 0C7h, 45h, 34h, 2C...");
    _STOP_("db 7Dh, 0E8h, 5Ah, 7Dh, 83h, 0C4h, 2, 0C3h...");
    _STOP_("db 83h, 3Eh, 10h, 92h, 0, 74h, 3, 0E9h, 84...");
    _STOP_("db 0Ah, 0C7h, 45h, 4, 0B9h, 8, 0C7h, 47h, ...");
    _STOP_("db 45h, 24h, 77h, 72h, 8Bh, 1Eh, 54h, 90h,...");
    _STOP_("db 74h, 0Dh, 0FFh, 77h, 0Ah, 56h, 8Bh, 0F3...");
    _STOP_("db 4Ah, 5Eh, 5Bh, 0EBh, 0EEh, 57h, 56h, 0B...");
    _STOP_("db 2 dup(0), 0BBh, 2 dup(0), 0BAh, 40h, 1,...");
    _STOP_("db 0, 0BDh");                       //db 0, 0BDh
    _STOP_("db 4Ch, 12h, 0E8h, 0F9h, 57h, 0B9h, 4, 0, ...");
    _STOP_("db 0BFh, 2 dup(0), 81h, 0C7h, 58h, 16h, 0B...");
    _STOP_("db 0C0h, 0F3h, 0ABh, 5Eh, 5Fh, 0C7h, 6, 0A...");
    _STOP_("db 81h, 6, 52h, 91h, 0D0h, 7, 83h, 16h, 54...");
    _STOP_("db 6, 8Ch, 91h, 1, 0, 0C7h, 6, 90h, 91h, 0...");
    _STOP_("db 6, 0AAh, 91h, 0A0h, 8, 0C7h, 6, 8Eh, 91...");
    _STOP_("db 0C7h, 6, 96h, 91h, 2 dup(0), 0C3h, 0A1h...");
    _STOP_("db 44h, 16h, 83h, 7Ch, 1Ah, 0, 74h, 3, 0E9...");
    _STOP_("db 12h, 9Fh, 2Bh, 44h, 12h, 8Bh, 1Eh, 16h,...");
    _STOP_("db 16h, 0E8h, 9Ch, 5Dh, 3Dh, 2, 0, 7Dh, 3,...");
    _STOP_("db 3Dh, 6, 0, 7Eh, 3, 0B8h, 6, 0, 0D1h, 0E...");
    _STOP_("db 0D1h, 0E0h, 0D1h, 0E0h, 0D1h, 0E0h, 2Ch...");
    _STOP_("db 44h, 1Eh, 2 dup(0), 89h, 44h, 1Ch, 0C7h...");
    _STOP_("db 0C7h, 44h, 3Eh, 2 dup(0), 0C7h, 44h, 40...");
    _STOP_("db 0E8h, 67h, 83h, 2Eh, 3Ah, 6, 0F6h, 0AFh...");
    _STOP_("db 0D8h, 0, 0C7h, 44h, 20h, 2, 0, 0A1h, 12...");
    _STOP_("db 44h, 12h, 8Bh, 1Eh, 16h, 9Fh, 2Bh, 5Ch,...");
    _STOP_("db 5Dh, 3Dh, 2, 0, 7Dh, 3, 0B8h, 2, 0, 3Dh...");
    _STOP_("db 3, 0B8h, 6, 0, 0D1h, 0E0h, 0D1h, 0E0h, ...");
    _STOP_("db 0E0h, 0D1h, 0E0h, 2Ch, 60h, 0C7h, 44h, ...");
    _STOP_("db 89h, 44h, 1Ch, 0E8h, 21h, 83h, 25h, 1Fh...");
    _STOP_("db 0, 8Ah, 0E0h, 32h, 0C0h, 0D0h, 0E4h, 0D...");
    _STOP_("db 44h, 3Ch, 0C7h, 44h, 3Eh, 2 dup(0), 0C7...");
    _STOP_("db 2 dup(0), 83h, 7Ch, 1Ch, 20h, 7Ch, 7, 8...");
    _STOP_("db 0A0h, 0, 7Ch, 0Ah, 80h, 44h, 1Ch, 40h, ...");
    _STOP_("db 0F7h, 54h, 3Ch, 8Bh, 44h, 20h, 1, 44h, ...");
    _STOP_("db 1Ah, 18h, 7Ch, 3, 0F7h, 5Ch, 20h, 8Bh, ...");
    _STOP_("db 4, 0, 89h, 44h, 42h, 0EBh, 50h, 8Bh, 7C...");
    _STOP_("db 12h, 89h, 44h, 12h, 8Bh, 45h, 14h, 89h,...");
    _STOP_("db 45h, 16h, 89h, 44h, 16h, 8Bh, 45h, 18h,...");
    _STOP_("db 8Bh, 45h, 1Ch, 89h, 44h, 1Ch, 8Bh, 45h,...");
    _STOP_("db 1Eh, 8Bh, 45h, 3Ch, 89h, 44h, 3Ch, 8Bh,...");
    _STOP_("db 44h, 3Eh, 8Bh, 45h, 40h, 89h, 44h, 40h,...");
    _STOP_("db 89h, 44h, 42h, 0C7h, 44h, 1Ah, 64h, 0, ...");
    _STOP_("db 0A1h, 98h, 91h, 1, 44h, 16h, 0E8h, 0B0h...");
    _STOP_("db 5Ch, 1Ch, 83h, 0C3h, 10h, 0D1h, 0EBh, 0...");
    _STOP_("db 0EBh, 0D1h, 0EBh, 83h, 0E3h, 6, 2Eh, 8B...");
    _STOP_("db 0CBh, 89h, 44h, 0Ch, 0E9h, 61h, 76h, 81...");
    _STOP_("db 91h, 0B0h, 9, 7Dh, 6, 0C7h, 6, 0AAh, 91...");
    _STOP_("db 98h, 91h, 1, 44h, 16h, 0E8h, 7Dh, 0FFh,...");
    _STOP_("db 2Bh, 44h, 12h, 8Bh, 1Eh, 16h, 9Fh, 2Bh,...");
    _STOP_("db 41h, 5Ch, 3Dh, 2, 0, 7Dh, 3, 0B8h, 2, 0...");
    _STOP_("db 7Eh, 3, 0B8h, 6, 0, 89h, 44h, 1Ch, 8Bh,...");
    _STOP_("db 0E3h, 2Eh, 8Bh, 87h, 7Eh, 0CBh, 89h, 44...");
    _STOP_("db 18h, 76h, 0E8h, 3Dh, 82h, 8Bh, 7Ch, 8, ...");
    _STOP_("db 89h, 44h, 12h, 8Bh, 45h, 16h, 89h, 44h,...");
    _STOP_("db 1Ch, 3Bh, 44h, 1Ch, 74h, 1Fh, 89h, 44h,...");
    _STOP_("db 0D1h, 0E3h, 2Eh, 8Bh");          //db 0D1h, 0E3h, 2Eh, 8Bh
    _STOP_("db 9Fh, 8Eh, 0CBh, 2Eh, 8Bh, 7, 89h, 44h, ...");
    _STOP_("db 47h, 2, 89h, 44h, 0Eh, 83h, 0C3h, 4, 89...");
    _STOP_("db 2Eh, 0A0h, 10h, 0B0h, 0, 44h, 48h, 73h,...");
    _STOP_("db 81h, 24h, 3Fh, 88h, 44h, 48h, 8Bh, 44h,...");
    _STOP_("db 16h, 8Bh, 4Ch, 1Ch, 8Bh, 0E9h, 0D1h, 0E...");
    _STOP_("db 32h, 41h, 3Eh, 3, 9Eh, 42h, 41h, 2Eh, 8...");
    _STOP_("db 0B0h, 0E8h, 0F9h, 5Eh, 0BDh, 32h, 0B4h,...");
    _STOP_("db 0, 89h, 45h, 0Ch, 2Eh, 8Bh, 46h, 2, 89h...");
    _STOP_("db 0C5h, 4, 89h, 6Dh, 10h, 0E9h, 95h, 75h,...");
    _STOP_("db 1, 44h, 16h, 0C7h, 44h, 42h, 0Ch, 0, 0A...");
    _STOP_("db 0D1h, 0E0h, 0D1h, 0E0h, 25h, 7Fh, 0, 0A...");
    _STOP_("db 5, 2Dh, 7Fh, 0, 0F7h, 0D8h, 5, 0A0h, 0,...");
    _STOP_("db 0A1h, 9Ch, 91h, 0D1h, 0E0h, 5, 50h, 0, ...");
    _STOP_("db 0A9h, 80h, 0, 74h, 2, 0F6h, 0D0h, 2Dh, ...");
    _STOP_("db 8Ah, 0F2h, 8Ah, 0D4h, 8Ah, 0E0h, 32h, 0...");
    _STOP_("db 3Ch, 89h, 54h, 3Eh, 0A1h, 9Ch, 91h, 5, ...");
    _STOP_("db 0FFh, 1, 0A9h, 0, 1, 74h, 3, 35h, 0FFh,...");
    _STOP_("db 0, 0D1h, 0E0h, 0D1h, 0E0h, 89h, 44h, 40...");
    _STOP_("db 75h, 0A1h, 98h, 91h, 1, 44h, 16h, 0E8h,...");
    _STOP_("db 22h, 75h, 0A1h, 98h, 91h, 1, 44h, 16h, ...");
    _STOP_("db 0E8h, 49h, 0FEh, 2Eh, 0A0h, 1Ch, 0B0h, ...");
    _STOP_("db 73h, 3Fh, 0E8h, 12h, 81h, 24h, 3Fh, 88h...");
    _STOP_("db 7, 0, 8Bh, 44h, 12h, 8Bh, 5Ch, 16h, 2Eh...");
    _STOP_("db 0B0h, 0D1h, 0E5h, 2Eh, 8Bh, 0AEh, 50h, ...");
    _STOP_("db 16h, 1Eh, 0B0h, 0E8h, 32h, 5Eh, 0BDh, 3...");
    _STOP_("db 8Bh, 46h, 0, 89h, 45h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C5h, 4, 89h, 6Dh, 10h, 49h, ...");
    _STOP_("db 0CBh, 74h, 0A1h, 98h, 91h, 1, 44h, 16h,...");
    _STOP_("db 80h, 0A1h, 12h, 9Fh, 2Bh, 44h, 12h, 8Bh...");
    _STOP_("db 2Bh, 5Ch, 16h, 0E8h, 0B9h, 5Ah, 3Bh, 44...");
    _STOP_("db 1Fh, 89h, 44h, 1Ch, 8Bh, 0D8h, 0D1h, 0E...");
    _STOP_("db 9Fh, 9Eh, 0CBh, 2Eh, 8Bh, 7, 89h, 44h, ...");
    _STOP_("db 47h, 2, 89h, 44h, 0Eh, 83h, 0C3h, 4, 89...");
    _STOP_("db 2Eh, 0A0h, 0F8h, 0AFh, 0, 44h, 48h, 73h...");
    _STOP_("db 8Ah, 80h, 24h, 3Fh, 88h, 44h, 48h, 8Bh,...");
    _STOP_("db 5Ch, 16h, 8Bh, 4Ch, 1Ch, 0BDh, 0C5h, 81...");
    _STOP_("db 16h, 0FAh, 0AFh, 0E8h, 0B3h, 5Dh, 0E8h,...");
    _STOP_("db 6Ch, 2Ah, 8, 83h, 44h, 2Eh, 8, 0C3h, 80...");
    _STOP_("db 92h, 0, 74h, 3, 0E9h, 0BCh, 0, 0C6h, 6,...");
    _STOP_("db 0C7h, 6, 0A6h, 91h, 0B0h, 9, 0C7h, 6, 0...");
    _STOP_("db 0, 0C7h, 6, 0A4h, 91h, 0B0h, 0, 0E8h, 9...");
    _STOP_("db 5Eh, 0CAh, 0B9h, 14h, 0, 0E8h, 0C9h, 4E...");
    _STOP_("db 4Ah, 90h, 0E8h, 2Eh, 46h, 5Fh, 0C7h, 4,...");
    _STOP_("db 8Bh, 5, 89h, 44h, 2, 0C7h, 44h, 4, 53h,...");
    _STOP_("db 45h, 2, 89h, 44h, 6, 2Eh, 8Bh, 5Dh, 4, ...");
    _STOP_("db 89h, 44h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 4...");
    _STOP_("db 0C3h, 4, 89h, 5Ch, 10h, 0C6h, 44h, 4Ah,...");
    _STOP_("db 45h, 6, 89h, 44h, 12h, 2Eh, 8Bh, 45h, 8...");
    _STOP_("db 91h, 89h, 44h, 16h, 0C7h, 44h, 1Ah, 2 d...");
    _STOP_("db 44h, 1Eh, 2 dup(0), 2Eh, 8Bh, 45h, 0Ah,...");
    _STOP_("db 0C7h, 44h, 3Ch, 2 dup(0), 0C7h, 44h, 3E...");
    _STOP_("db 0C7h, 44h, 40h, 2 dup(0), 0C7h, 44h, 42...");
    _STOP_("db 2 dup(0), 2Eh, 8Ah, 45h, 0Ch, 89h, 44h,...");
    _STOP_("db 45h, 0Dh, 88h, 44h, 27h, 83h, 0C7h, 0Eh...");
    _STOP_("db 20h, 2 dup(0), 0E8h, 0A4h, 73h, 0E2h, 2...");
    _STOP_("db 6Ah, 0FFh, 0B8h, 5, 0, 0A3h, 10h, 92h, ...");
    _STOP_("db 1, 83h, 7Dh, 0Ch, 0, 74h, 3, 0B8h, 10h,...");
    _STOP_("db 0C2h, 0E8h, 31h, 73h, 0A1h, 90h, 91h, 2...");
    _STOP_("db 0C7h, 44h, 4, 0D5h, 0C2h, 0BBh, 0F8h, 0...");
    _STOP_("db 0Ch, 1, 74h, 3, 0BBh, 0Eh, 0B5h, 2Eh, 8...");
    _STOP_("db 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 44h, 0Eh, 8...");
    _STOP_("db 89h, 5Ch, 10h, 0C3h, 0A1h, 98h, 91h, 1,...");
    _STOP_("db 7Ch, 16h, 88h, 1, 7Eh, 3, 0E9h, 91h, 0,...");
    _STOP_("db 83h, 7Ch, 1Ah, 0, 75h, 16h, 0C7h, 44h, ...");
    _STOP_("db 0A0h, 0FCh, 0AFh, 0, 44h, 48h, 73h, 17h...");
    _STOP_("db 7Fh, 24h, 3Fh, 88h, 44h, 48h, 8Bh, 44h,...");
    _STOP_("db 1Ah, 83h, 7Ch, 1Ah, 6, 75h, 3, 0F7h, 5C...");
    _STOP_("db 3Ch, 0Ch, 1, 75h, 15h, 8Bh, 44h, 12h, 8...");
    _STOP_("db 0D1h, 0E1h, 0D1h, 0E1h, 0D1h, 0E1h, 0D1...");
    _STOP_("db 83h, 0C1h, 10h, 0EBh, 18h, 8Bh, 4Ch, 12...");
    _STOP_("db 10h, 8Bh, 44h, 1Ah, 0D1h, 0E0h, 0D1h, 0...");
    _STOP_("db 0D1h, 0E0h, 0F7h, 0D8h, 3, 0C1h, 2Dh, 1...");
    _STOP_("db 16h, 83h, 0C3h, 8, 8Bh, 0D3h, 83h, 0C2h...");
    _STOP_("db 28h, 89h, 5Ch, 2Ah, 89h, 4Ch, 2Ch, 89h,...");
    _STOP_("db 0F3h, 7Fh, 74h, 13h, 83h, 3Eh, 88h, 91h...");
    _STOP_("db 0B8h, 6, 0, 0E8h, 85h, 79h, 0C7h, 6, 4,...");
    _STOP_("db 0C3h, 0E8h, 0ECh, 44h, 0C3h, 81h, 3Ch, ...");
    _STOP_("db 3Ch, 8Bh, 44h, 1Ah, 85h, 0C0h, 74h, 1Bh...");
    _STOP_("db 8Bh, 54h, 16h, 8Bh, 4Ch, 12h, 0D1h, 0E9...");
    _STOP_("db 0CBh, 2Bh, 7Ch, 1Ah, 2Bh, 7Ch, 1Ah, 56h...");
    _STOP_("db 0E8h, 45h, 46h, 5Eh, 8Bh, 4Ch, 1Ah, 0D1...");
    _STOP_("db 0E1h, 0D1h, 0E1h, 0D1h, 0E1h, 3, 4Ch, 1...");
    _STOP_("db 16h, 83h, 0C2h, 8, 8Bh, 74h, 0Ch, 0E9h,...");
    _STOP_("db 44h, 1Ah, 85h, 0C0h, 74h, 2Bh, 0BBh, 2,...");
    _STOP_("db 16h, 8Bh, 4Ch, 1Ah, 0D1h, 0E1h, 0D1h, 0...");
    _STOP_("db 0D1h, 0E1h, 0F7h, 0D9h, 3, 4Ch, 12h, 83...");
    _STOP_("db 0D1h, 0E9h, 0BFh, 0BAh, 0CBh, 2Bh, 7Ch,...");
    _STOP_("db 1Ah, 56h, 8Bh, 0F7h, 0E8h, 0F9h, 45h, 5...");
    _STOP_("db 1Ah, 0D1h, 0E1h, 0D1h, 0E1h, 0D1h, 0E1h...");
    _STOP_("db 0F7h, 0D9h, 3, 4Ch, 12h, 83h, 0C1h, 0Fh...");
    _STOP_("db 83h, 0C2h, 8, 8Bh, 74h, 0Ch, 0E9h, 0Dh,...");
    _STOP_("db 0, 83h, 7Dh, 0Ch, 0, 74h, 3, 0B8h, 0E4h...");
    _STOP_("db 0C3h, 0E8h, 0AFh, 71h, 83h, 44h, 16h, 1...");
    _STOP_("db 0E0h, 0, 75h, 4, 83h, 44h, 12h, 10h, 0C...");
    _STOP_("db 0C5h, 0C7h, 44h, 6, 0D8h, 0C4h, 2Eh, 0A...");
    _STOP_("db 89h, 44h, 24h, 0C6h, 44h");      //db 89h, 44h, 24h, 0C6h, 44h
    _STOP_("db 27h, 0FFh, 0C7h, 44h, 28h, 0E8h, 3, 0C7...");
    _STOP_("db 0E8h, 3, 0C7h, 44h, 34h, 0C8h, 0, 8Bh, ...");
    _STOP_("db 44h, 22h, 0BBh, 3Ch, 0B5h, 81h, 3Ch, 0E...");
    _STOP_("db 0BBh, 24h, 0B5h, 2Eh, 8Bh, 7, 89h, 44h,...");
    _STOP_("db 47h, 2, 89h, 44h, 0Eh, 83h, 0C3h, 4, 89...");
    _STOP_("db 0C7h, 44h, 36h, 2 dup(0), 2Eh, 0A1h, 1A...");
    _STOP_("db 44h, 48h, 8Bh, 44h, 12h, 89h, 44h, 30h,...");
    _STOP_("db 89h, 44h, 32h, 0C3h, 0A1h, 0AAh, 91h, 5...");
    _STOP_("db 44h, 16h, 7Ch, 7Bh, 0E8h, 0B9h, 7Dh, 83...");
    _STOP_("db 0, 75h, 15h, 0E8h, 90h, 7Dh, 2Eh, 3Ah, ...");
    _STOP_("db 0Ah, 0C7h, 44h, 1Ah, 1, 0, 0C7h, 44h, 0...");
    _STOP_("db 81h, 3Ch, 0E0h, 0, 75h, 9, 2Eh, 0A1h, 2...");
    _STOP_("db 12h, 0EBh, 7, 2Eh, 0A1h, 2, 0B0h, 29h, ...");
    _STOP_("db 7Ch, 1Ah, 1, 75h, 1Bh, 83h, 7Ch, 0Eh, 0...");
    _STOP_("db 44h, 1Ah, 2, 0, 0A1h, 16h, 9Fh, 2Bh, 44...");
    _STOP_("db 90h, 91h, 89h, 44h, 20h, 0E9h, 81h, 0, ...");
    _STOP_("db 0D1h, 0E3h, 83h, 7Ch, 12h, 28h, 7Ch, 27...");
    _STOP_("db 12h, 18h, 1, 7Fh, 20h, 8Bh, 87h, 52h, 4...");
    _STOP_("db 20h, 0, 79h, 0Eh, 2Eh, 8Bh, 1Eh, 2, 0B0...");
    _STOP_("db 16h, 0EBh, 0Ch, 0E8h, 4Dh, 43h, 0C3h, 2...");
    _STOP_("db 2, 0B0h, 1, 5Ch, 16h, 83h, 7Ch, 12h, 0E...");
    _STOP_("db 7Ch, 12h, 60h, 1, 7Ch, 42h, 8Bh, 44h, 3...");
    _STOP_("db 12h, 8Bh, 44h, 32h, 89h, 44h, 16h, 0C7h...");
    _STOP_("db 0C7h, 44h, 28h, 0E8h, 3, 0C7h, 44h, 2Ch...");
    _STOP_("db 3Ch, 0B5h, 81h, 3Ch, 0E0h, 0, 74h, 3, 0...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 44h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C3h, 4, 89h, 5Ch, 10h, 2Eh, ...");
    _STOP_("db 89h, 44h, 24h, 0C3h, 0E8h, 0BBh, 70h, 0...");
    _STOP_("db 29h, 44h, 2Ah, 29h, 44h, 2Eh, 0C3h, 29h...");
    _STOP_("db 6, 0C7h, 45h, 4, 55h, 0C5h, 0C3h, 56h, ...");
    _STOP_("db 0Ch, 4Ah, 5Eh, 2Bh, 1Eh, 90h, 91h, 0BDh...");
    _STOP_("db 53h, 8, 0E8h, 2Fh, 6Eh, 8Bh, 45h, 34h, ...");
    _STOP_("db 83h, 16h, 54h, 91h, 0, 56h, 0E8h, 1Bh, ...");
    _STOP_("db 96h, 90h, 0E8h, 6Eh, 42h, 5Fh, 0BBh, 0B...");
    _STOP_("db 4, 18h, 0, 0C7h, 44h, 1Ah, 7, 0, 0C7h, ...");
    _STOP_("db 28h, 0C7h, 44h, 4, 53h, 8, 2Eh, 8Bh, 7,...");
    _STOP_("db 2Eh, 8Bh, 47h, 2, 89h, 44h, 0Eh, 83h, 0...");
    _STOP_("db 5Ch, 10h, 8Bh, 45h, 12h, 89h, 44h, 12h,...");
    _STOP_("db 2Bh, 6, 90h, 91h, 89h, 44h, 16h, 0E8h, ...");
    _STOP_("db 44h, 1Ch, 8Bh, 0F7h, 0E8h, 36h, 0FFh, 5...");
    _STOP_("db 44h, 4, 75h, 0C5h, 8Bh, 4Ch, 12h, 8Bh, ...");
    _STOP_("db 16h, 90h, 91h, 81h, 0FAh, 0DCh, 0, 7Fh,...");
    _STOP_("db 74h, 0Ch, 0E8h, 8Ch, 43h, 5Eh, 0EBh, 19...");
    _STOP_("db 4Ch, 12h, 8Bh, 54h, 16h, 2Bh, 16h, 90h,...");
    _STOP_("db 0DCh, 0, 7Fh, 0EFh, 56h, 8Bh, 74h, 0Ch,...");
    _STOP_("db 42h, 5Eh, 8Bh, 6Ch, 22h, 0D1h, 0E5h, 8B...");
    _STOP_("db 3Dh, 2, 0, 7Ch, 1, 0C3h, 0BFh, 0C6h");//db 3Dh, 2, 0, 7Ch, 1, 0C3h, 0BFh, 0C6h
    _STOP_("db 0CBh, 81h, 3Ch, 0E0h, 0, 74h, 3, 0BFh, ...");
    _STOP_("db 1, 0, 0BBh, 3, 0, 3Eh, 8Bh, 8Eh, 94h, 4...");
    _STOP_("db 96h, 0AAh, 41h, 2Bh, 16h, 90h, 91h, 56h...");
    _STOP_("db 0E8h, 80h, 43h, 5Eh, 0C3h, 0B8h, 0D0h, ...");
    _STOP_("db 0Ch, 0, 75h, 3, 0B8h, 0D4h, 0, 0BBh, 1A...");
    _STOP_("db 54h, 6Fh, 0C7h, 44h, 4, 61h, 7, 0C7h, 4...");
    _STOP_("db 0C6h, 2Eh, 0A1h, 4, 0B0h, 89h, 44h, 24h...");
    _STOP_("db 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, ...");
    _STOP_("db 0BBh, 0D2h, 0CBh, 81h, 3Ch, 0D0h, 0, 74...");
    _STOP_("db 0CCh, 2Eh, 8Bh, 7, 89h, 5, 2Eh, 8Bh, 47...");
    _STOP_("db 2, 2Eh, 8Bh, 47h, 4, 89h, 45h, 28h, 2Eh...");
    _STOP_("db 89h, 45h, 2Ah, 0C3h, 0A1h, 0AAh, 91h, 5...");
    _STOP_("db 44h, 16h, 7Dh, 3, 0E9h, 0B9h, 0, 8Bh, 4...");
    _STOP_("db 0, 89h, 44h, 28h, 5, 1Ch, 0, 89h, 44h, ...");
    _STOP_("db 16h, 2Bh, 6, 90h, 91h, 5, 2, 0, 89h, 44...");
    _STOP_("db 0, 89h, 44h, 2Eh, 8Bh, 44h, 1Ah, 85h, 0...");
    _STOP_("db 2Eh, 0A0h, 6, 0B0h, 0, 44h, 48h, 73h, 0...");
    _STOP_("db 7Bh, 24h, 3Fh, 88h, 44h, 48h, 0C7h, 44h...");
    _STOP_("db 0C3h, 0D1h, 0E0h, 0D1h, 0E0h, 0D1h, 0E0...");
    _STOP_("db 0CBh, 81h, 3Ch, 0D0h, 0, 74h, 3, 0BBh, ...");
    _STOP_("db 7Ch, 38h, 3, 0D8h, 2Eh, 8Bh, 7, 89h, 5,...");
    _STOP_("db 2, 89h, 45h, 2, 2Eh, 8Bh, 47h, 4, 89h, ...");
    _STOP_("db 8Bh, 47h, 6, 89h, 45h, 2Ah, 0FFh, 44h, ...");
    _STOP_("db 1Ah, 4, 74h, 0Ch, 83h, 7Ch, 1Ah, 6, 75h...");
    _STOP_("db 1Ah, 2 dup(0), 0C3h, 8Bh, 44h, 12h, 8Bh...");
    _STOP_("db 1Eh, 90h, 91h, 5, 12h, 0, 83h, 0C3h, 0E...");
    _STOP_("db 2Eh, 8, 0B0h, 0D1h, 0E5h, 2Eh, 8Bh, 0AE...");
    _STOP_("db 0B9h, 2, 0, 81h, 3Ch, 0D4h, 0, 74h, 6, ...");
    _STOP_("db 8, 0, 2Eh, 8Bh, 16h, 0Ah, 0B0h, 0E9h, 0...");
    _STOP_("db 0DCh, 40h, 0C3h, 29h, 45h, 24h, 76h, 6,...");
    _STOP_("db 46h, 0C7h, 0C3h, 0BAh, 53h, 8, 8Bh, 45h...");
    _STOP_("db 0, 8Bh, 5Dh, 16h, 2Bh, 1Eh, 90h, 91h, 8...");
    _STOP_("db 0BDh, 4Ch, 12h, 0E8h, 1Dh, 6Ch, 8Bh, 5D...");
    _STOP_("db 32h, 0CCh, 81h, 3Dh, 0D0h, 0, 74h, 3, 0...");
    _STOP_("db 2Eh, 8Bh, 46h, 0, 89h, 7, 2Eh, 8Bh, 46h...");
    _STOP_("db 2, 2Eh, 8Bh, 46h, 4, 89h, 47h, 28h, 2Eh...");
    _STOP_("db 89h, 47h, 2Ah, 81h, 6, 52h, 91h, 90h, 1...");
    _STOP_("db 91h, 0, 56h, 8Bh, 0F7h, 0E8h, 7Ch, 40h,...");
    _STOP_("db 44h, 4, 61h, 7, 0BFh, 0D2h, 0CBh, 81h, ...");
    _STOP_("db 74h, 3, 0BFh, 2, 0CCh, 0B8h, 2, 0, 0BBh...");
    _STOP_("db 4Ch, 12h, 0D1h, 0E9h, 8Bh, 54h, 16h, 2B...");
    _STOP_("db 91h, 56h, 8Bh, 0F7h, 0E8h, 0F4h, 41h, 5...");
    _STOP_("db 0E3h, 2Eh, 0FFh, 0A7h, 42h, 0CCh, 0BBh,...");
    _STOP_("db 0Bh, 6Ch, 0BBh, 5Ch, 0B0h, 0E9h, 5, 6Ch...");
    _STOP_("db 0B0h, 0E9h, 0FFh, 6Bh, 0BBh, 4Ah, 0B0h,...");
    _STOP_("db 6Bh, 0BBh, 80h, 0B0h, 0E9h, 0F3h, 6Bh, ...");
    _STOP_("db 0E9h, 0EDh, 6Bh, 33h, 0C0h");    //db 0E9h, 0EDh, 6Bh, 33h, 0C0h
    _STOP_("db 0C3h, 0C7h, 6, 0A8h, 91h, 80h, 8, 0C7h,...");
    _STOP_("db 0FFh, 11h, 0C7h, 6, 0ACh, 8Eh, 70h, 17h...");
    _STOP_("db 8Eh, 0D0h, 7, 0C6h, 6, 36h, 92h, 0, 0C6...");
    _STOP_("db 0, 2Eh, 0A1h, 0Ch, 0B0h, 2Eh, 0A3h, 80h...");
    _STOP_("db 0A1h, 0Ch, 0B0h, 2Eh, 0A3h, 8Ch, 0C9h, ...");
    _STOP_("db 0B0h, 2Eh, 0A3h, 74h, 0C9h, 2Eh, 0A0h, ...");
    _STOP_("db 0A2h, 4Ah, 0CBh, 2Eh, 0A0h, 14h, 0B0h, ...");
    _STOP_("db 0CBh, 2Eh, 0A0h, 14h, 0B0h, 2Eh, 0A2h, ...");
    _STOP_("db 0A0h, 14h, 0B0h, 2Eh, 0A2h, 74h, 0CBh, ...");
    _STOP_("db 0B0h, 2Eh, 0A2h, 3Ch, 0CBh, 2Eh, 0A0h, ...");
    _STOP_("db 2 dup(0A2h), 0CAh, 0A1h, 1Ah, 99h, 8Bh,...");
    _STOP_("db 0E0h, 3, 0C3h, 0D1h, 0E0h, 0A3h, 76h, 8...");
    _STOP_("db 99h, 0D1h, 0E0h, 0D1h, 0E0h, 0D1h, 0E0h...");
    _STOP_("db 8Eh, 0C7h, 6, 72h, 8Eh, 9Bh, 81h, 0C3h,...");
    _STOP_("db 0, 13h, 0B6h, 76h, 0B1h, 0D8h, 0, 20h, ...");
    _STOP_("db 0B2h, 0B1h, 0CCh, 0, 20h, 1, 13h, 0B6h,...");
    _STOP_("db 0, 20h, 1, 99h, 0B8h, 0D0h, 0B1h, 0F0h,...");
    _STOP_("db 0B1h, 0F4h, 0, 20h, 1, 1Eh, 0B2h, 8Ah, ...");
    _STOP_("db 0C6h, 0B2h, 0E4h, 0B2h, 2, 0B3h, 20h, 0...");
    _STOP_("db 6Ch, 0B2h, 41h, 55h, 81h, 55h, 0C1h, 55...");
    _STOP_("db 56h, 81h, 56h, 0C1h, 59h, 0, 5Ah, 40h, ...");
    _STOP_("db 0C0h, 5Ah, 1, 5Bh, 41h, 5Eh, 80h, 5Eh, ...");
    _STOP_("db 5Fh, 40h, 5Fh, 81h, 5Fh, 0C1h, 62h, 0, ...");
    _STOP_("db 80h, 63h, 0C0h, 63h, 1, 64h, 2 dup(0), ...");
    _STOP_("db 67h, 0C1h, 67h, 1, 68h, 2 dup(0), 41h, ...");
    _STOP_("db 0C1h, 55h, 1, 56h, 41h, 56h, 81h, 56h, ...");
    _STOP_("db 5Ah, 40h, 5Ah, 80h, 5Ah, 0C0h, 5Ah, 1, ...");
    _STOP_("db 80h, 5Eh, 0C0h, 5Eh, 0, 5Fh, 40h, 5Fh, ...");
    _STOP_("db 62h, 0, 63h, 40h, 63h, 80h, 63h, 0C0h, ...");
    _STOP_("db 2 dup(0), 0C1h, 43h, 0, 44h, 40h, 44h, ...");
    _STOP_("db 0C1h, 48h, 1, 49h, 4 dup(0), 2Eh, 0C9h,...");
    _STOP_("db 0C9h, 26h, 0C9h, 26h, 0C9h, 1Eh, 0C9h, ...");
    _STOP_("db 0C9h, 0Eh, 0C9h, 56h, 0C9h, 36h, 0C9h, ...");
    _STOP_("db 0C9h, 3Eh, 0C9h, 46h, 0C9h, 4Eh, 0C9h, ...");
    _STOP_("db 0C9h, 41h, 4Dh, 81h, 4Dh, 41h, 52h, 81h...");
    _STOP_("db 56h, 1, 57h, 41h, 5Bh, 81h, 5Bh, 0C1h, ...");
    _STOP_("db 41h, 64h, 81h, 64h, 41h, 68h, 81h, 68h,...");
    _STOP_("db 6Bh, 41h, 6Eh, 81h, 6Eh, 41h, 71h, 81h,...");
    _STOP_("db 1, 4Eh, 0C1h, 52h, 1, 53h, 41h, 57h, 81...");
    _STOP_("db 5Bh, 1, 5Ch, 41h, 60h, 81h, 60h, 0C1h, ...");
    _STOP_("db 0C1h, 68h, 1, 69h, 0C1h, 6Bh, 1, 6Ch, 0...");
    _STOP_("db 6Fh, 0C1h, 71h, 1, 72h, 0CEh, 35h, 0C3h...");
    _STOP_("db 0C1h, 68h, 0C3h, 0, 0BCh, 0F3h, 0C1h, 2...");
    _STOP_("db 0B8h, 68h, 0B9h, 0A0h, 3 dup(0), 64h, 0...");
    _STOP_("db 30h, 0B9h, 0E3h, 0B9h, 70h, 0, 20h, 0, ...");
    _STOP_("db 0BAh, 30h, 0B9h, 0E3h, 0B9h, 0B0h, 0, 2...");
    _STOP_("db 77h, 0BBh, 99h, 3Ah, 0Eh, 0BAh, 0A0h, 0...");
    _STOP_("db 0B8h, 0BBh, 99h, 3Ah, 0Eh, 0BAh, 0A0h, ...");
    _STOP_("db 0B8h, 0BBh, 99h, 3Ah, 0Eh, 0BAh, 0A0h, ...");
    _STOP_("db 2 dup(0), 0B8h, 0BBh, 99h, 3Ah, 0Eh, 0B...");
    _STOP_("db 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah, 0E...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0B8h, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 3 dup(0), 0DCh, 0BBh, 99h, 3Ah,...");
    _STOP_("db 0, 58h, 7 dup(0), 3Eh, 0B3h, 4Ch, 0B3h,...");
    _STOP_("db 0B3h, 76h, 0B3h, 2 dup(0), 0D5h, 0BDh, ...");
    _STOP_("db 0B3h, 0A0h, 0, 0E8h, 9, 40h, 0, 32h, 0F...");
    _STOP_("db 61h, 7, 84h, 0B3h, 0A0h, 0, 0E8h, 9, 40...");
    _STOP_("db 3, 0BFh, 61h, 7, 84h, 0B3h, 0A0h, 0, 0E...");
    _STOP_("db 32h, 0FFh, 3, 0BFh, 61h, 7, 84h, 0B3h, ...");
    _STOP_("db 9, 40h, 0, 32h, 0FFh, 28h, 0BFh, 46h, 0...");
    _STOP_("db 0A0h, 2 dup(0), 0Ah, 40h, 0, 0AFh, 0FFh...");
    _STOP_("db 43h, 0BDh, 8Ch, 0B3h, 0A0h, 2 dup(0), 0...");
    _STOP_("db 0FFh, 0F4h, 0BFh, 61h, 7, 90h, 0B3h, 0A...");
    _STOP_("db 8, 0C0h, 0, 1, 0, 5Bh, 0C0h, 61h, 7, 90...");
    _STOP_("db 0, 0F8h, 8, 0C0h, 0, 1, 0, 5Bh, 0C0h, 6...");
    _STOP_("db 0A0h, 0, 0F8h, 8, 0C0h, 0, 1, 0, 5Bh, 0...");
    _STOP_("db 90h, 0B3h, 0A0h, 0, 0F8h, 8, 0C0h, 0, 1...");
    _STOP_("db 61h, 7, 90h, 0B3h, 0A0h, 0, 0F8h, 8, 0C...");
    _STOP_("db 5Bh, 0C0h, 61h, 7, 90h, 0B3h, 0A0h, 0, ...");
    _STOP_("db 0, 1, 0, 5Bh, 0C0h, 61h, 7, 90h, 0B3h, ...");
    _STOP_("db 8, 0C0h, 0, 1, 0, 5Bh, 0C0h, 61h, 7, 90...");
    _STOP_("db 0, 0F8h, 8, 0C0h, 0, 1, 0, 5Bh, 0C0h, 6...");
    _STOP_("db 0A0h, 0, 0F8h, 8, 0C0h, 0, 1, 0, 67h, 0...");
    _STOP_("db 94h, 0B3h, 0A0h, 0, 0F8h, 8, 0C0h, 0, 1...");
    _STOP_("db 0C0h, 0D3h, 0BCh, 0DEh, 0B3h, 78h, 0, 9...");
    _STOP_("db 14h, 0, 0BEh, 0C0h, 0D3h, 0BCh, 0DEh, 0...");
    _STOP_("db 57h, 9, 2 dup(0), 14h, 0, 0BEh, 0C0h, 0...");
    _STOP_("db 0B3h, 0C8h, 0, 97h, 9, 2 dup(0), 14h, 0...");
    _STOP_("db 0D3h, 0BCh, 0DEh, 0B3h, 0C8h, 0, 57h, 9...");
    _STOP_("db 0, 99h, 1Dh, 81h, 1Bh, 0CDh, 19h, 89h, ...");
    _STOP_("db 0A1h, 0B0h, 31h, 0B3h, 0C1h, 0B5h, 0D1h...");
    _STOP_("db 0A6h, 0F1h, 0A8h, 81h, 0ABh, 48h, 0B4h,...");
    _STOP_("db 0B4h, 8Ah, 0B4h, 0A0h, 0B4h, 0B6h, 0B4h...");
    _STOP_("db 0E2h, 0B4h, 16h, 0B4h, 24h, 0B4h, 0C2h,...");
    _STOP_("db 0B3h, 0DEh, 0B3h, 0ECh, 0B3h, 0FAh, 0B3...");
    _STOP_("db 3Fh, 41h, 3Fh, 41h, 3Fh, 41h, 3Fh, 41h,...");
    _STOP_("db 81h, 3Fh, 81h, 3Fh, 81h, 3Fh, 81h, 3Fh,...");
    _STOP_("db 3Fh, 1, 31h, 1, 35h, 1, 39h, 0C1h, 30h,...");
    _STOP_("db 38h, 41h, 39h, 81h, 39h");       //db 38h, 41h, 39h, 81h, 39h
    _STOP_("db 41h, 3Ch, 81h, 3Ch, 0C1h, 39h, 1, 3Ah, ...");
    _STOP_("db 3Dh, 0C1h, 39h, 1, 3Ah, 0C1h, 3Ch, 1, 3...");
    _STOP_("db 1, 3Ah, 0C1h, 3Ch, 1, 3Dh, 0C1h, 39h, 1...");
    _STOP_("db 3Ch, 1, 3Dh, 41h, 39h, 81h, 39h, 41h, 3...");
    _STOP_("db 0C1h, 3Ah, 1, 3Bh, 0C1h, 3Dh, 1, 3Eh, 4...");
    _STOP_("db 3Bh, 41h, 3Eh, 81h, 3Eh, 41h, 3Bh, 81h,...");
    _STOP_("db 81h, 3Eh, 41h, 3Bh, 81h, 3Bh, 41h, 3Eh,...");
    _STOP_("db 3Bh, 81h, 3Bh, 41h, 3Eh, 81h, 3Eh, 0C1h...");
    _STOP_("db 0C1h, 3Dh, 1, 3Eh, 41h, 3Ah, 81h, 3Ah, ...");
    _STOP_("db 3Dh, 0C1h, 3Bh, 1, 3Ch, 0C1h, 3Eh, 1, 3...");
    _STOP_("db 78h, 0C7h, 7Eh, 0C7h, 84h, 0C7h, 8Ah, 0...");
    _STOP_("db 96h, 0C7h, 71h, 81h, 0C5h, 81h, 9Bh, 81...");
    _STOP_("db 5Ah, 68h, 6 dup(0), 14h, 0, 0Ch, 0, 0Ah...");
    _STOP_("db 14h, 0, 6, 0, 50h, 0, 7, 0, 4, 0, 0Fh, ...");
    _STOP_("db 0, 0Ah, 0, 10h, 0, 0Ah, 0, 14h, 0, 14h,...");
    _STOP_("db 0, 0Ah, 0, 0Fh, 0, 8, 0, 1, 0, 14h, 0, ...");
    _STOP_("db 0, 0C8h, 0, 4, 0, 0Ah, 0, 1, 0, 0Eh, 0,...");
    _STOP_("db 1, 0Bh, 48h, 53h, 8, 0A7h, 3Ah, 2Eh, 0C...");
    _STOP_("db 3 dup(0), 0CCh, 0, 2Ch, 1, 0Bh, 48h, 53...");
    _STOP_("db 50h, 0CDh, 0Ah, 0, 0FFh, 3 dup(0), 0D0h...");
    _STOP_("db 0Bh, 48h, 53h, 8, 0A7h, 3Ah, 6Eh, 0CDh,...");
    _STOP_("db 0D4h, 0, 0FAh, 0, 0Bh, 48h, 53h, 8, 0A7...");
    _STOP_("db 0CDh, 5, 5 dup(0), 0D8h, 0, 64h, 0, 0Bh...");
    _STOP_("db 0A7h, 3Ah, 0DAh, 0CDh, 5, 5 dup(0), 0E0...");
    _STOP_("db 0Bh, 48h, 53h, 8, 0A7h, 3Ah, 0, 0CEh, 5...");
    _STOP_("db 0, 0C8h, 0, 3Ch, 0D2h, 53h, 8, 0A7h, 3A...");
    _STOP_("db 5, 5 dup(0), 0F0h, 0, 64h, 0, 0Bh, 48h,...");
    _STOP_("db 3Ah, 4Eh, 0CEh, 5, 5 dup(0), 29h, 0, 2,...");
    _STOP_("db 0, 35h, 5, 2, 0, 0C5h, 7, 2, 0, 41h, 0A...");
    _STOP_("db 0Ch, 2, 0, 4Dh, 0Fh, 2, 3 dup(0), 0E2h,...");
    _STOP_("db 0DDh, 11h, 3, 0, 9, 14h, 3, 0, 35h, 16h...");
    _STOP_("db 18h, 3, 0, 2Dh, 1Bh, 3, 0, 95h, 1Dh, 3,...");
    _STOP_("db 41h, 50h, 0CDh, 41h, 34h, 2, 0, 0F1h, 3...");
    _STOP_("db 35h, 2, 0, 47h, 36h, 2, 0, 0EDh, 36h, 2...");
    _STOP_("db 2, 0, 43h, 38h, 2, 0, 0F3h, 38h, 2, 3 d...");
    _STOP_("db 41h, 6Eh, 0CDh, 41h, 3Bh, 2, 0, 0F1h, 3...");
    _STOP_("db 3Ch, 2, 0, 15h, 3Dh, 2, 0, 93h, 3Dh, 2,...");
    _STOP_("db 2, 0, 99h, 3Eh, 2, 0, 21h, 3Fh, 2, 0, 0...");
    _STOP_("db 0, 6Dh, 40h, 2, 0, 9, 41h, 2, 0, 91h, 4...");
    _STOP_("db 42h, 2, 0, 97h, 42h, 2, 0, 15h, 43h, 2,...");
    _STOP_("db 2, 3 dup(0), 0E2h, 41h, 94h, 0CDh, 39h,...");
    _STOP_("db 44h, 1, 0, 5Dh, 45h, 1, 0, 0Dh, 46h, 1,...");
    _STOP_("db 1, 0, 6Dh, 47h, 1, 0, 1Dh, 48h, 1, 0, 0...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 0DAh, 0CDh, 69h, 54h");
    _STOP_("db 1, 0, 0Fh, 55h, 1, 0, 0B5h, 55h, 1, 0, ...");
    _STOP_("db 0, 0D9h, 56h, 1, 0, 7Fh, 57h, 1, 0, 7, ...");
    _STOP_("db 58h, 1, 0, 49h, 59h, 1, 0, 0EFh, 59h, 1...");
    _STOP_("db 1, 0, 31h, 5Bh, 1, 0, 0B9h, 5Bh, 1, 0, ...");
    _STOP_("db 0, 0F1h, 5Ch, 1, 0, 83h, 5Dh, 1, 0, 0Bh...");
    _STOP_("db 0A7h, 5Eh, 1, 3 dup(0), 0E2h, 41h, 0, 0...");
    _STOP_("db 1, 0, 0A9h, 0A6h, 1, 0, 31h, 0A7h, 1, 0...");
    _STOP_("db 1, 0, 2Dh, 0A8h, 1, 0, 0DDh, 0A8h, 1, 0...");
    _STOP_("db 1, 0, 0D9h, 0A9h, 1, 3 dup(0), 0E2h, 41...");
    _STOP_("db 6Dh, 83h, 2, 0, 1Dh, 84h, 2, 3 dup(0), ...");
    _STOP_("db 0CEh, 0CDh, 84h, 2, 0, 7Dh, 85h, 2, 3 d...");
    _STOP_("db 41h, 82h, 0CEh, 2Dh, 86h, 2, 0, 0DDh, 8...");
    _STOP_("db 0E2h, 41h, 90h, 0CEh, 69h, 49h, 3, 0, 1...");
    _STOP_("db 0E2h, 41h, 9Eh, 0CEh, 0C9h, 4Ah, 3, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 0ACh, 0CEh, 29h, 4...");
    _STOP_("db 4Ch, 3, 3 dup(0), 0E2h, 41h, 0BAh, 0CEh...");
    _STOP_("db 0, 39h, 4Eh, 3, 3 dup(0), 0E2h, 41h, 0C...");
    _STOP_("db 4Eh, 3, 0, 99h, 4Fh, 3, 3 dup(0), 0E2h,...");
    _STOP_("db 49h, 50h, 3, 0, 0F9h, 50h, 3, 3 dup(0),...");
    _STOP_("db 0CEh, 0A9h, 51h, 3, 0, 59h, 52h, 3, 3 d...");
    _STOP_("db 41h, 0F2h, 0CEh, 9, 53h, 3, 0, 0B9h, 53...");
    _STOP_("db 0E2h, 41h, 0, 0CFh, 0C1h, 1Fh, 2, 0, 51...");
    _STOP_("db 0E1h, 24h, 2, 0, 71h, 27h, 2, 3 dup(0),...");
    _STOP_("db 0CFh, 1, 2Ah, 2, 0, 91h, 2Ch, 2, 0, 21h...");
    _STOP_("db 0B1h, 31h, 2, 3 dup(0), 0E2h, 41h, 24h,...");
    _STOP_("db 2, 0, 0E1h, 24h, 2, 0, 51h, 22h, 2, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 3Ah, 0CFh, 0B1h, 3...");
    _STOP_("db 2Fh, 2, 0, 91h, 2Ch, 2, 0, 1, 2Ah, 2, 3...");
    _STOP_("db 41h, 50h, 0CFh, 61h, 7Ah, 2, 0, 11h, 7B...");
    _STOP_("db 0E2h, 41h, 66h, 0CFh, 0B7h, 7Bh, 2, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 74h, 0CFh, 0DBh, 7...");
    _STOP_("db 7Dh, 2, 3 dup(0), 0E2h, 41h, 82h, 0CFh,...");
    _STOP_("db 0, 5Fh, 7Eh, 2, 3 dup(0), 0E2h, 41h, 90...");
    _STOP_("db 7Eh, 2, 0, 97h, 7Fh, 2, 3 dup(0), 0E2h,...");
    _STOP_("db 3Dh, 80h, 2, 0, 0D9h, 80h, 2, 3 dup(0),...");
    _STOP_("db 0CFh, 61h, 81h, 2, 0, 0D5h, 81h, 2, 3 d...");
    _STOP_("db 41h, 0BAh, 0CFh, 49h, 82h, 2, 0, 0E5h, ...");
    _STOP_("db 0E2h, 41h, 0C8h, 0CFh, 4 dup(0), 55h, 6...");
    _STOP_("db 61h, 0AAh, 2 dup(0), 0DDh, 99h, 2 dup(0...");
    _STOP_("db 2, 0, 9Fh, 9Dh, 2, 0, 0A9h, 9Eh, 2, 0, ...");
    _STOP_("db 3 dup(0), 0E2h, 41h, 0E2h, 0CFh, 29h, 9...");
    _STOP_("db 99h, 1, 0, 71h, 99h, 1, 0, 95h, 99h, 1,...");
    _STOP_("db 1, 0, 95h, 99h, 1, 0, 71h, 99h, 1, 0, 4...");
    _STOP_("db 0E2h, 41h, 0FCh, 0CFh, 0F9h, 0A0h, 2, 0...");
    _STOP_("db 2, 0, 0E9h, 0A4h, 2, 0, 61h, 0A3h, 2, 3...");
    _STOP_("db 41h, 22h, 0D0h, 8Dh, 87h, 2, 0, 3Dh, 88...");
    _STOP_("db 2 dup(0), 0E2h, 41h, 38h, 0D0h, 0EDh, 8...");
    _STOP_("db 89h, 2, 3 dup(0), 0E2h, 41h, 46h, 0D0h,...");
    _STOP_("db 0, 0FDh, 8Ah, 2, 3 dup(0), 0E2h, 41h, 5...");
    _STOP_("db 8Bh, 2, 0, 5Dh, 8Ch, 2, 3 dup(0), 0E2h,...");
    _STOP_("db 0Dh, 8Dh, 2, 0, 0BDh, 8Dh, 2, 3 dup(0),...");
    _STOP_("db 0D0h, 6Dh, 8Eh, 2, 0, 1Dh, 8Fh, 2, 3 du...");
    _STOP_("db 7Eh, 0D0h, 0CDh, 8Fh, 2, 0, 7Dh, 90h, 2...");
    _STOP_("db 41h, 8Ch, 0D0h, 2Dh, 91h, 2, 0, 0DDh, 9...");
    _STOP_("db 0E2h, 41h, 9Ah, 0D0h, 4Dh, 5Fh, 1, 0, 0...");
    _STOP_("db 0, 85h, 60h, 1, 0, 3, 61h, 1, 3 dup(0),...");
    _STOP_("db 0D0h, 99h, 39h, 3, 0, 0Dh, 3Ah, 3, 3 du...");
    _STOP_("db 0BEh, 0D0h, 6Dh, 3Ah, 3, 0, 0E1h, 3Ah, ...");
    _STOP_("db 0E2h, 41h, 0CCh, 0D0h, 0A1h, 16h, 92h, ...");
    _STOP_("db 0A1h, 18h, 92h, 0A3h, 74h, 0D2h, 2 dup(...");
    _STOP_("db 0D1h, 0E3h, 2Eh, 0FFh, 0A7h, 2Eh, 0E7h,...");
    _STOP_("db 0D1h, 0E3h, 8Bh, 9Fh, 0Ch, 0DFh, 8Dh, 6...");
    _STOP_("db 6, 0FEh, 0FCh, 9, 0, 0C7h, 6, 0FAh, 0FC...");
    _STOP_("db 8Bh, 45h, 8, 0A3h, 0E2h, 0FCh, 8Bh, 45h...");
    _STOP_("db 0E6h, 0FCh, 0A1h, 90h, 91h, 29h, 6, 0E6...");
    _STOP_("db 3, 3Fh, 0BFh, 4Ah, 90h, 0E8h, 69h, 36h,...");
    _STOP_("db 0, 0C7h, 44h, 2, 0B9h, 0D1h, 0C7h, 44h,...");
    _STOP_("db 44h, 6, 0A7h, 3Ah, 0C7h, 44h, 0Ch, 69h,...");
    _STOP_("db 0Eh, 2 dup(0), 8Bh, 47h, 2, 89h, 44h, 1...");
    _STOP_("db 4, 2Bh, 6, 90h, 91h, 89h, 44h, 16h, 2Eh...");
    _STOP_("db 0CCh, 89h, 44h, 24h, 0C6h, 44h, 27h, 0,...");
    _STOP_("db 2 dup(0), 0C7h, 44h, 1Eh, 2 dup(0), 0C7...");
    _STOP_("db 2 dup(0), 0C7h, 44h, 3Eh, 2 dup(0), 0C7...");
    _STOP_("db 2 dup(0), 89h, 5Ch, 38h, 89h, 6Ch, 3Ah,...");
    _STOP_("db 0FCh, 89h, 44h, 1Ah, 2Eh, 0A1h, 62h, 0C...");
    _STOP_("db 0FCh, 0C7h, 44h, 28h, 0E8h, 3, 0C7h, 44...");
    _STOP_("db 3, 0C7h, 44h, 34h, 0C8h, 0, 0C7h, 44h, ...");
    _STOP_("db 2Eh, 0A1h, 64h, 0CCh, 89h, 44h, 42h, 0B...");
    _STOP_("db 26h, 0FEh, 0FCh, 88h, 44h, 48h, 0FFh, 0...");
    _STOP_("db 78h, 3, 0E9h, 64h, 0FFh, 0C3h, 0A1h, 98...");
    _STOP_("db 16h, 81h, 7Ch, 16h, 90h, 1, 7Dh, 72h, 0...");
    _STOP_("db 0E8h, 99h, 76h, 8Bh, 5Ch, 1Ch, 83h, 0C3...");
    _STOP_("db 0EBh, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h, 0EB...");
    _STOP_("db 0Eh, 58h, 5, 10h, 0, 0D1h, 0E8h, 0D1h, ...");
    _STOP_("db 0D1h, 0E8h, 25h, 0Eh, 0, 3Bh, 0C3h, 74h...");
    _STOP_("db 0BFh, 42h, 0E7h, 2Eh, 8Bh, 5, 89h, 44h,...");
    _STOP_("db 45h, 2, 89h, 44h, 0Eh, 83h, 0C7h, 4, 89...");
    _STOP_("db 2Eh, 0A0h, 96h, 0CCh, 0, 44h, 48h, 73h,...");
    _STOP_("db 48h, 0, 0B9h, 7, 0, 8Bh, 44h, 12h, 8Bh,...");
    _STOP_("db 8Bh, 2Eh, 9Ah, 0CCh, 0D1h, 0E5h, 2Eh, 8...");
    _STOP_("db 0EBh, 2Eh, 8Bh, 16h, 98h, 0CCh, 0E8h, 0...");
    _STOP_("db 79h, 0E3h, 0E9h, 51h, 63h, 0E8h, 85h, 3...");
    _STOP_("db 74h, 1Ch, 0E8h, 0C9h, 75h, 8Bh, 5Ch, 1C...");
    _STOP_("db 20h, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h, 0EBh...");
    _STOP_("db 0D1h, 0EBh, 83h, 0E3h, 6, 58h, 2Dh, 20h...");
    _STOP_("db 0D1h, 0E8h, 0D1h");              //db 0D1h, 0E8h, 0D1h
    _STOP_("db 0E8h, 0D1h, 0E8h, 0D1h, 0E8h, 25h, 6, 0...");
    _STOP_("db 75h, 1, 0C3h, 2Eh, 8Bh, 9Fh, 52h, 0E7h,...");
    _STOP_("db 89h, 44h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 4...");
    _STOP_("db 0C3h, 4, 89h, 5Ch, 10h, 0E9h, 3, 63h, 0...");
    _STOP_("db 7Dh, 0Ch, 0, 74h, 3, 0B8h, 4, 1, 0BBh, ...");
    _STOP_("db 91h, 62h, 0A1h, 90h, 91h, 29h, 44h, 16h...");
    _STOP_("db 4, 53h, 8, 0C7h, 44h, 6, 0A7h, 3Ah, 2Eh...");
    _STOP_("db 0CCh, 89h, 44h, 24h, 0C6h, 44h, 27h, 0F...");
    _STOP_("db 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, ...");
    _STOP_("db 0FAh, 0, 0BBh, 0Eh, 0CFh, 81h, 3Ch, 0, ...");
    _STOP_("db 44h, 12h, 10h, 0BBh, 24h, 0CFh, 2Eh, 8B...");
    _STOP_("db 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 44h, 0Eh, 8...");
    _STOP_("db 89h, 5Ch, 10h, 0C7h, 44h, 36h, 2 dup(0)...");
    _STOP_("db 1Ch, 14h, 0, 0C3h, 0A1h, 98h, 91h, 1, 4...");
    _STOP_("db 7Ch, 16h, 90h, 1, 7Ch, 3, 0E9h, 88h, 0,...");
    _STOP_("db 6Eh, 0A1h, 90h, 91h, 83h, 7Ch, 1Ch, 0, ...");
    _STOP_("db 44h, 16h, 3, 44h, 16h, 3Dh, 20h, 0Fh, 7...");
    _STOP_("db 44h, 1Ch, 2 dup(0FFh), 0BFh, 3Ah, 0CFh,...");
    _STOP_("db 1, 74h, 21h, 0BFh, 50h, 0CFh, 0EBh, 1Ch...");
    _STOP_("db 16h, 3, 44h, 16h, 3Dh, 30h, 0Eh, 7Fh, 2...");
    _STOP_("db 1Ch, 1, 0, 0BFh, 0Eh, 0CFh, 81h, 3Ch, 0...");
    _STOP_("db 0BFh, 24h, 0CFh, 2Eh, 8Bh, 5, 89h, 44h,...");
    _STOP_("db 45h, 2, 89h, 44h, 0Eh, 83h, 0C7h, 4, 89...");
    _STOP_("db 2Eh, 0A0h, 68h, 0CCh, 0, 44h, 48h, 73h,...");
    _STOP_("db 6Eh, 24h, 3Fh, 88h, 44h, 48h, 8Bh, 44h,...");
    _STOP_("db 0, 8Bh, 5Ch, 16h, 0B9h, 2, 0, 81h, 3Ch,...");
    _STOP_("db 0B9h, 6, 0, 2Dh, 40h, 0, 0E8h, 7, 0, 0E...");
    _STOP_("db 35h, 34h, 0C3h, 56h, 0E8h, 92h, 3Ch, 0B...");
    _STOP_("db 0E8h, 0E6h, 33h, 8Bh, 0FEh, 5Eh, 0C7h, ...");
    _STOP_("db 45h, 2, 0FAh, 0D3h, 0C7h, 45h, 4, 53h, ...");
    _STOP_("db 6, 0A7h, 3Ah, 89h, 45h, 12h, 89h, 5Dh, ...");
    _STOP_("db 1Ch, 8Bh, 0D9h, 0D1h, 0E3h, 2Eh, 8Bh, 9...");
    _STOP_("db 2Eh, 8Bh, 7, 89h, 45h, 0Ch, 2Eh, 8Bh, 4...");
    _STOP_("db 0Eh, 83h, 0C3h, 4, 89h, 5Dh, 10h, 2Eh, ...");
    _STOP_("db 89h, 45h, 24h, 0C6h, 45h, 27h, 0, 0C7h,...");
    _STOP_("db 0, 0E8h, 0ADh, 6Dh, 25h, 1Fh, 0, 89h, 4...");
    _STOP_("db 45h, 36h, 2 dup(0), 0C7h, 45h, 28h, 0E8...");
    _STOP_("db 2Ch, 0E8h, 3, 0C3h, 0E8h, 0B4h, 6Dh, 0F...");
    _STOP_("db 8Bh, 44h, 1Ah, 2Eh, 3Bh, 6, 6Ch, 0CCh, ...");
    _STOP_("db 8Bh, 0, 25h, 7, 0, 75h, 50h, 0A1h, 12h,...");
    _STOP_("db 16h, 9Fh, 2Bh, 44h, 12h, 2Bh, 5Ch, 16h,...");
    _STOP_("db 2Bh, 44h, 1Ch, 74h, 3Bh, 79h, 3, 5, 8, ...");
    _STOP_("db 1Ch, 3Dh, 4, 0, 7Ch, 0Dh, 75h, 7, 0F7h,...");
    _STOP_("db 0, 75h, 4, 83h, 6Ch, 1Ch, 2, 83h, 64h, ...");
    _STOP_("db 5Ch, 1Ch, 0D1h, 0E3h, 2Eh, 8Bh, 9Fh, 5A...");
    _STOP_("db 8Bh, 7, 89h, 44h, 0Ch, 2Eh, 8Bh, 47h, 2...");
    _STOP_("db 83h, 0C3h, 4, 89h, 5Ch");        //db 83h, 0C3h, 4, 89h, 5Ch
    _STOP_("db 10h, 8Bh, 5Ch, 1Ch, 0D1h, 0E3h, 8Bh, 87...");
    _STOP_("db 1, 44h, 12h, 8Bh, 87h, 80h, 33h, 3, 6, ...");
    _STOP_("db 44h, 16h, 0E8h, 0Dh, 61h, 0E8h, 6Ch, 6E...");
    _STOP_("db 83h, 3Eh, 88h, 91h, 0, 75h, 10h, 0C7h, ...");
    _STOP_("db 8, 0B8h, 4, 0, 0E8h, 0BBh, 67h, 0E8h, 2...");
    _STOP_("db 0E8h, 5Ah, 3Ah, 0BDh, 30h, 12h, 0BAh, 5...");
    _STOP_("db 82h, 5Eh, 0E8h, 19h, 33h, 0C3h, 80h, 3E...");
    _STOP_("db 0, 74h, 3, 0E9h, 2Ah, 1, 0C6h, 6, 38h, ...");
    _STOP_("db 6, 0A6h, 91h, 0A0h, 1, 0C7h, 6, 0A2h, 9...");
    _STOP_("db 0C7h, 6, 0A4h, 91h, 0B0h, 0, 0E8h, 1Fh,...");
    _STOP_("db 9Eh, 0DAh, 0FFh, 0C6h, 6, 74h, 0D2h, 0F...");
    _STOP_("db 16h, 92h, 2 dup(0FFh), 0C7h, 6, 18h, 92...");
    _STOP_("db 0BFh, 2 dup(0), 0B9h, 78h, 0, 33h, 0C0h...");
    _STOP_("db 0B9h, 12h, 0, 0BEh, 12h, 0E5h, 0C7h, 5,...");
    _STOP_("db 45h, 2, 2 dup(0), 0C7h, 45h, 4, 2 dup(0...");
    _STOP_("db 6, 51h, 0B9h, 1Eh, 0, 2Eh, 8Ah, 4, 46h,...");
    _STOP_("db 0F9h, 59h, 0C7h, 5, 2 dup(0), 0C7h, 45h...");
    _STOP_("db 83h, 0C7h, 4, 0E2h, 0D5h, 0B9h, 2Ch, 1,...");
    _STOP_("db 0ABh, 0C7h, 6, 8Eh, 91h, 10h, 4, 0C7h, ...");
    _STOP_("db 0A0h, 1, 0C7h, 6, 0AAh, 91h, 0A0h, 1, 0...");
    _STOP_("db 0B9h, 16h, 0, 0E8h, 0E3h, 3Ah, 89h, 36h...");
    _STOP_("db 0EBh, 3, 0E8h, 0DAh, 3Ah, 57h, 0BFh, 4A...");
    _STOP_("db 3Fh, 32h, 5Fh, 2Eh, 8Bh, 5, 89h, 4, 2Eh...");
    _STOP_("db 89h, 44h, 2, 2Eh, 8Bh, 45h, 4, 89h, 44h...");
    _STOP_("db 45h, 6, 89h, 44h, 6, 2Eh, 8Bh, 5Dh, 8, ...");
    _STOP_("db 89h, 44h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 4...");
    _STOP_("db 0C3h, 4, 89h, 5Ch, 10h, 0C7h, 44h, 12h,...");
    _STOP_("db 44h, 16h, 0C0h, 0FEh, 2Eh, 8Bh, 45h, 0A...");
    _STOP_("db 30h, 2Eh, 8Bh, 45h, 0Ch, 89h, 44h, 32h,...");
    _STOP_("db 2 dup(0), 0C6h, 44h, 4Ah, 0FFh, 0C7h, 4...");
    _STOP_("db 33h, 0C0h, 2Eh, 8Ah, 45h, 0Eh, 89h, 44h...");
    _STOP_("db 45h, 0Fh, 88h, 44h, 27h, 83h, 0C7h, 10h...");
    _STOP_("db 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, ...");
    _STOP_("db 89h, 2 dup(44h), 0C7h, 44h, 36h, 2 dup(...");
    _STOP_("db 0EBh, 3, 0E9h, 6Fh, 0FFh, 0C7h, 6, 1Ah,...");
    _STOP_("db 0C3h, 0C7h, 44h, 4, 4Ch, 0D7h, 0B8h, 0F...");
    _STOP_("db 0, 8Bh, 54h, 16h, 8Bh, 4Ch, 12h, 0D1h, ...");
    _STOP_("db 12h, 0E5h, 0E8h, 6Ch, 33h, 5Eh, 0C3h, 0...");
    _STOP_("db 8Bh, 44h, 12h, 8Bh, 5Ch, 16h, 89h, 44h,...");
    _STOP_("db 2Ah, 3, 44h, 24h, 2, 5Ch, 27h, 89h, 44h...");
    _STOP_("db 2Eh, 0C3h, 0E8h, 99h, 6Bh, 0E8h, 0F2h, ...");
    _STOP_("db 5Fh, 0E8h, 0ECh, 3, 83h, 3Eh, 1Ah, 92h,...");
    _STOP_("db 5Eh, 5Fh, 0C3h, 0C7h, 6, 0AAh, 91h, 0A0...");
    _STOP_("db 90h, 91h, 0, 75h, 8, 56h, 0A1h, 9Ah, 91...");
    _STOP_("db 6Bh, 5Eh, 0A1h, 98h, 91h, 1, 44h, 16h, ...");
    _STOP_("db 0, 74h, 41h, 78h, 23h, 83h, 44h, 1Ah, 2...");
    _STOP_("db 14h, 74h, 12h, 83h, 7Ch, 1Ah, 28h, 74h,...");
    _STOP_("db 1Ah, 3Ch, 75h, 52h, 0C7h, 44h, 1Ah, 2 d...");
    _STOP_("db 0C7h, 6");                       //db 0C7h, 6
    _STOP_("db 8Ah, 8Eh, 0Ch, 0, 0C3h, 83h, 6Ch, 1Ah, ...");
    _STOP_("db 1Ah, 0ECh, 74h, 0EFh, 83h, 7Ch, 1Ah, 0D...");
    _STOP_("db 83h, 7Ch, 1Ah, 0C4h, 75h, 2Fh, 0C7h, 44...");
    _STOP_("db 0C3h, 2Eh, 0A0h, 6Eh, 0CCh, 0, 44h, 48h...");
    _STOP_("db 0F7h, 6Ah, 24h, 3Fh, 88h, 44h, 48h, 0C7...");
    _STOP_("db 2 dup(0), 0C7h, 44h, 1Ah, 2, 0, 0F7h, 6...");
    _STOP_("db 0, 75h, 5, 0C7h, 44h, 1Ah, 0FEh, 0FFh, ...");
    _STOP_("db 0CDh, 80h, 8Bh, 44h, 12h, 0A3h, 0E2h, 0...");
    _STOP_("db 0E2h, 0FCh, 77h, 0C7h, 6, 0E6h, 0FCh, 6...");
    _STOP_("db 1Ah, 0, 79h, 6, 0C7h, 6, 0E6h, 0FCh, 0F...");
    _STOP_("db 16h, 1, 6, 0E6h, 0FCh, 56h, 0E8h, 3Eh, ...");
    _STOP_("db 90h, 0E8h, 0A4h, 30h, 8Bh, 0FEh, 5Eh, 0...");
    _STOP_("db 0, 0C7h, 45h, 2, 98h, 0D7h, 0C7h, 45h, ...");
    _STOP_("db 45h, 6, 0A7h, 3Ah, 0A1h, 0E2h, 0FCh, 89...");
    _STOP_("db 0A1h, 0E6h, 0FCh, 89h, 45h, 16h, 0C7h, ...");
    _STOP_("db 0BBh, 38h, 0D0h, 2Eh, 8Bh, 7, 89h, 45h,...");
    _STOP_("db 47h, 2, 89h, 45h, 0Eh, 83h, 0C3h, 4, 89...");
    _STOP_("db 2Eh, 0A1h, 70h, 0CCh, 89h, 45h, 24h, 0C...");
    _STOP_("db 0, 0C7h, 45h, 34h, 96h, 0, 0C7h, 45h, 1...");
    _STOP_("db 45h, 36h, 2 dup(0), 0C7h, 45h, 28h, 0E8...");
    _STOP_("db 2Ch, 0E8h, 3, 0C3h, 0BAh, 55h, 0, 8Bh, ...");
    _STOP_("db 0DBh, 74h, 41h, 79h, 5, 0BAh, 0E5h, 0, ...");
    _STOP_("db 0E3h, 0FCh, 8Bh, 4Ch, 12h, 83h, 0C1h, 6...");
    _STOP_("db 56h, 53h, 51h, 52h, 0D1h, 0EBh, 2Eh, 8B...");
    _STOP_("db 2 dup(0E8h), 0FEh, 30h, 5Ah, 59h, 5Bh, ...");
    _STOP_("db 14h, 7Ch, 17h, 83h, 0FBh, 28h, 7Dh, 12h...");
    _STOP_("db 0Eh, 83h, 0C2h, 10h, 56h, 0D1h, 0EBh, 2...");
    _STOP_("db 0C0h, 2 dup(0E8h), 0DFh, 30h, 5Eh, 0C3h...");
    _STOP_("db 6Ah, 0FFh, 44h, 1Ah, 8Bh, 44h, 1Ah, 25h...");
    _STOP_("db 47h, 0A1h, 12h, 9Fh, 8Bh, 1Eh, 16h, 9Fh...");
    _STOP_("db 2Bh, 5Ch, 16h, 0E8h, 0DAh, 43h, 2Bh, 44...");
    _STOP_("db 32h, 79h, 3, 5, 8, 0, 0FFh, 44h, 1Ch, 3...");
    _STOP_("db 4, 83h, 6Ch, 1Ch, 2, 83h, 64h, 1Ch, 7, ...");
    _STOP_("db 0D1h, 0E3h, 2Eh, 8Bh, 9Fh, 0F2h, 0E8h, ...");
    _STOP_("db 89h, 44h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 4...");
    _STOP_("db 0C3h, 4, 89h, 5Ch, 10h, 8Bh, 5Ch, 1Ch, ...");
    _STOP_("db 87h, 70h, 33h, 8Bh, 9Fh, 80h, 33h, 83h,...");
    _STOP_("db 0, 75h, 4, 0D1h, 0E0h, 0D1h, 0E3h, 1, 4...");
    _STOP_("db 16h, 0E8h, 7Bh, 5Dh, 0E8h, 9Dh, 6Ah, 74...");
    _STOP_("db 3Eh, 88h, 91h, 0, 75h, 0Ch, 0C7h, 6, 4,...");
    _STOP_("db 0B8h, 4, 0, 0E8h, 29h, 64h, 0E8h, 97h, ...");
    _STOP_("db 84h, 69h, 0E8h, 0DDh, 1, 81h, 7Ch, 0Ch,...");
    _STOP_("db 41h, 83h, 7Ch, 0Eh, 1, 75h, 3Bh, 56h, 0...");
    _STOP_("db 0BFh, 96h, 90h, 0E8h, 35h, 2Fh, 8Bh, 0F...");
    _STOP_("db 5, 10h, 1, 0C7h, 45h, 2, 0F5h, 0DCh, 0C...");
    _STOP_("db 0Dh, 8Bh, 44h, 12h, 2Dh, 2, 0, 89h, 45h...");
    _STOP_("db 16h, 2Dh, 18h, 0, 89h, 45h, 16h, 0C7h, ...");
    _STOP_("db 2Eh, 0A1h, 7Ah, 0CCh, 0F7h");    //db 2Eh, 0A1h, 7Ah, 0CCh, 0F7h
    _STOP_("db 0D8h, 89h, 45h, 1Ch, 83h, 7Ch, 0Eh, 0, ...");
    _STOP_("db 7Ch, 16h, 0, 78h, 16h, 2Eh, 0A0h, 72h, ...");
    _STOP_("db 48h, 73h, 0Dh, 0E8h, 1, 69h, 24h, 3Fh, ...");
    _STOP_("db 0C7h, 44h, 0Eh, 1, 0, 0E9h, 0ECh, 5Ch, ...");
    _STOP_("db 0B9h, 8, 29h, 45h, 24h, 76h, 1, 0C3h, 0...");
    _STOP_("db 92h, 81h, 6, 52h, 91h, 0C8h, 0, 83h, 16...");
    _STOP_("db 0, 56h, 57h, 8Bh, 0F7h, 0E8h, 37h, 36h,...");
    _STOP_("db 80h, 7Dh, 27h, 0, 74h, 3, 0BDh, 4Ch, 12...");
    _STOP_("db 8, 0E8h, 56h, 5Ah, 5Fh, 5Eh, 81h, 3Dh, ...");
    _STOP_("db 8, 56h, 8Bh, 0F7h, 0E8h, 0E2h, 2Eh, 5Eh...");
    _STOP_("db 45h, 2, 6Fh, 0DBh, 0C7h, 45h, 28h, 0E8h...");
    _STOP_("db 2Ch, 0E8h, 3, 0C7h, 45h, 6, 61h, 7, 0C3...");
    _STOP_("db 44h, 0C7h, 45h, 4, 0B9h, 8, 0C7h, 47h, ...");
    _STOP_("db 29h, 47h, 24h, 76h, 1Ch, 0B8h, 0Bh, 0, ...");
    _STOP_("db 33h, 0C9h, 2Eh, 8Ah, 0Eh, 78h, 0E7h, 0F...");
    _STOP_("db 0D8h, 0D1h, 0E3h, 2Eh, 8Bh, 87h, 2, 0E9...");
    _STOP_("db 0Ch, 0C3h, 57h, 56h, 0BFh, 0E0h, 1, 33h...");
    _STOP_("db 68h, 1, 0F3h, 0ABh, 8Bh, 36h, 54h, 90h,...");
    _STOP_("db 0B9h, 9, 0, 0E8h, 0A8h, 3Ch, 0B9h, 27h,...");
    _STOP_("db 0BBh, 2 dup(0), 0BAh, 40h, 1, 0BFh, 0C0...");
    _STOP_("db 12h, 0E8h, 37h, 3Ch, 0C6h, 6, 61h, 8Fh,...");
    _STOP_("db 2 dup(0), 33h, 0C0h, 0B9h, 0Ch, 3, 0F3h...");
    _STOP_("db 5Fh, 0C3h, 80h, 3Eh, 39h, 92h, 0, 74h, ...");
    _STOP_("db 0, 0C6h, 6, 39h, 92h, 0FFh, 8Bh, 45h, 0...");
    _STOP_("db 0FCh, 83h, 2Eh, 0E6h, 0FCh, 8, 0A1h, 90...");
    _STOP_("db 6, 0E6h, 0FCh, 0BFh, 1Ah, 0E9h, 0B9h, 0...");
    _STOP_("db 95h, 36h, 89h, 36h, 0DEh, 0FCh, 0EBh, 3...");
    _STOP_("db 36h, 57h, 0BFh, 4Ah, 90h, 0E8h, 0F1h, 2...");
    _STOP_("db 8Bh, 5, 89h, 4, 2Eh, 8Bh, 45h, 2, 89h, ...");
    _STOP_("db 8Bh, 45h, 4, 89h, 44h, 4, 2Eh, 8Bh, 45h...");
    _STOP_("db 6, 2Eh, 8Bh, 45h, 8, 89h, 44h, 0Ch, 0C7...");
    _STOP_("db 2 dup(0), 0C6h, 44h, 4Ah, 0FFh, 0C7h, 4...");
    _STOP_("db 0, 0A1h, 0E6h, 0FCh, 89h, 44h, 16h, 2Eh...");
    _STOP_("db 89h, 44h, 30h, 2Eh, 8Bh, 45h, 0Ch, 89h,...");
    _STOP_("db 44h, 1Ah, 2 dup(0), 0C7h, 44h, 1Ch, 4, ...");
    _STOP_("db 45h, 0Eh, 89h, 44h, 24h, 83h, 0C7h, 10h...");
    _STOP_("db 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, ...");
    _STOP_("db 89h, 2 dup(44h), 0C7h, 44h, 36h, 2 dup(...");
    _STOP_("db 0C3h, 8Bh, 7Ch, 44h, 8Bh, 45h, 12h, 3, ...");
    _STOP_("db 44h, 12h, 8Bh, 45h, 16h, 3, 44h, 32h, 8...");
    _STOP_("db 0C3h, 0E8h, 0E7h, 0FFh, 0BBh, 0, 1, 2Bh...");
    _STOP_("db 5Ch, 1Ah, 81h, 0FBh, 0, 6, 7Ch, 4, 81h,...");
    _STOP_("db 89h, 5Ch, 1Ah, 0D1h, 0EBh, 0D1h, 0EBh, ...");
    _STOP_("db 0EBh, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h, 0EB...");
    _STOP_("db 0FEh, 2Eh, 8Bh, 87h, 0BAh, 0E9h, 89h, 4...");
    _STOP_("db 31h, 5Bh, 8Bh, 5Dh, 44h, 0C7h, 47h, 4, ...");
    _STOP_("db 45h, 24h, 76h, 1, 0C3h, 57h, 56h, 8Bh, ...");
    _STOP_("db 0E8h, 0F1h, 5Ch, 0B9h, 13h, 0, 0B8h, 70...");
    _STOP_("db 8, 2Bh, 1Eh, 90h");              //db 8, 2Bh, 1Eh, 90h
    _STOP_("db 91h, 0BAh, 60h, 0, 0BFh, 0A0h, 0, 0BDh,...");
    _STOP_("db 0, 3Bh, 0B9h, 4, 0, 0E8h, 56h, 3Bh, 0BF...");
    _STOP_("db 0B9h, 0Ah, 0, 33h, 0C0h, 51h, 0B9h, 8, ...");
    _STOP_("db 59h, 83h, 0C7h, 18h, 0E2h, 0F4h, 5Eh, 5...");
    _STOP_("db 91h, 0DCh, 5, 83h, 16h, 54h, 91h, 0, 0C...");
    _STOP_("db 0FFh, 8Bh, 5Ch, 16h, 3, 1Eh, 90h, 91h, ...");
    _STOP_("db 0D1h, 0E3h, 0BFh, 0C6h, 0E9h, 81h, 3Ch,...");
    _STOP_("db 3, 0BFh, 0CEh, 0E9h, 2Eh, 8Bh, 1, 89h, ...");
    _STOP_("db 0E8h, 38h, 0FFh, 0A1h, 12h, 9Fh, 2Bh, 4...");
    _STOP_("db 1Eh, 16h, 9Fh, 2Bh, 5Ch, 16h, 0E8h, 0AB...");
    _STOP_("db 44h, 1Ch, 8Bh, 0D8h, 0D1h, 0E3h, 2Eh, 8...");
    _STOP_("db 0E9h, 89h, 44h, 0Ch, 2Eh, 0A0h, 74h, 0C...");
    _STOP_("db 73h, 2Bh, 0E8h, 91h, 66h, 24h, 3Fh, 88h...");
    _STOP_("db 44h, 12h, 5, 8, 0, 8Bh, 5Ch, 16h, 83h, ...");
    _STOP_("db 4Ch, 1Ch, 2Eh, 8Bh, 2Eh, 8Ch, 0CCh, 0D1...");
    _STOP_("db 8Bh, 0AEh, 0BCh, 0EBh, 2Eh, 8Bh, 16h, 7...");
    _STOP_("db 0ABh, 43h, 0E9h, 5Eh, 5Ah, 0C7h, 45h, 4...");
    _STOP_("db 45h, 24h, 76h, 1, 0C3h, 0C7h, 45h, 2, 6...");
    _STOP_("db 45h, 28h, 0E8h, 3, 0C7h, 45h, 2Ch, 0E8h...");
    _STOP_("db 6, 61h, 7, 81h, 6, 52h, 91h, 0C8h, 0, 8...");
    _STOP_("db 91h, 0, 56h, 57h, 8Bh, 45h, 12h, 5, 8, ...");
    _STOP_("db 16h, 83h, 0C3h, 8, 0BDh, 30h, 12h, 0BAh...");
    _STOP_("db 0BAh, 57h, 5Fh, 5Eh, 0C3h, 0E8h, 9Bh, 0...");
    _STOP_("db 0Ch, 15h, 67h, 0C7h, 44h, 28h, 0E8h, 3,...");
    _STOP_("db 0E8h, 3, 0C3h, 81h, 3Eh, 0AAh, 91h, 20h...");
    _STOP_("db 0C7h, 6, 0AAh, 91h, 20h, 9, 0A1h, 98h, ...");
    _STOP_("db 16h, 83h, 7Ch, 1Ch, 0, 74h, 1Eh, 78h, 0...");
    _STOP_("db 88h, 8Eh, 2 dup(0), 0FFh, 44h, 16h, 0FF...");
    _STOP_("db 0EBh, 44h, 0C7h, 6, 88h, 8Eh, 2 dup(0),...");
    _STOP_("db 0FFh, 44h, 1Ch, 0EBh, 36h, 0E8h, 0D4h, ...");
    _STOP_("db 73h, 2Fh, 0A9h, 1, 0, 74h, 15h, 0B8h, 1...");
    _STOP_("db 16h, 2Bh, 6, 90h, 91h, 74h, 1Eh, 0E8h, ...");
    _STOP_("db 89h, 44h, 1Ch, 0EBh, 15h, 8Bh, 44h, 16h...");
    _STOP_("db 91h, 2Dh, 0D0h, 8, 74h, 9, 0E8h, 0B7h, ...");
    _STOP_("db 0D8h, 89h, 44h, 1Ch, 83h, 7Ch, 1Ah, 0, ...");
    _STOP_("db 0A0h, 78h, 0CCh, 0, 44h, 48h, 73h, 59h,...");
    _STOP_("db 24h, 3Fh, 88h, 44h, 48h, 0FFh, 44h, 1Ah...");
    _STOP_("db 9, 74h, 43h, 83h, 7Ch, 1Ah, 3, 75h, 42h...");
    _STOP_("db 6, 88h, 8Eh, 2 dup(0), 0E8h, 2, 34h, 0B...");
    _STOP_("db 0E8h, 56h, 2Bh, 8Bh, 0FEh, 5Eh, 0C7h, 5...");
    _STOP_("db 45h, 2, 0F5h, 0DCh, 0C7h, 45h, 4, 3Dh, ...");
    _STOP_("db 12h, 96h, 0, 8Bh, 44h, 16h, 5, 30h, 0, ...");
    _STOP_("db 0C7h, 45h, 1Ah, 2 dup(0), 2Eh, 0A1h, 7A...");
    _STOP_("db 45h, 1Ch, 0EBh, 5, 0C7h, 44h, 1Ah, 2 du...");
    _STOP_("db 9Ch, 0CCh, 0, 44h, 49h, 73h, 26h, 0E8h,...");
    _STOP_("db 3Fh, 88h, 44h, 49h, 0B8h, 6Eh, 0, 8Bh, ...");
    _STOP_("db 0C3h, 30h, 0B9h, 6, 0, 0E8h, 14h, 0F7h,...");
    _STOP_("db 0, 8Bh, 5Ch, 16h, 83h, 0C3h");   //db 0, 8Bh, 5Ch, 16h, 83h, 0C3h
    _STOP_("db 30h, 0B9h, 2, 0, 0E8h, 5, 0F7h, 0C3h, 0...");
    _STOP_("db 0A2h, 0DCh, 0B8h, 6, 0, 0BBh, 6, 0, 8Bh...");
    _STOP_("db 38h, 0, 56h, 0BEh, 52h, 0EAh, 0E8h, 0C3...");
    _STOP_("db 0C3h, 0B8h, 0Ch, 0, 0F7h, 64h, 1Ah, 8Bh...");
    _STOP_("db 8Bh, 87h, 0E6h, 0E9h, 2Eh, 0A3h, 62h, 0...");
    _STOP_("db 87h, 0E8h, 0E9h, 2Eh, 0A3h, 64h, 0EAh, ...");
    _STOP_("db 0EAh, 0E9h, 2Eh, 0A3h, 6Eh, 0EAh, 2Eh, ...");
    _STOP_("db 0E9h, 2Eh, 0A3h, 70h, 0EAh, 2Eh, 8Bh, 8...");
    _STOP_("db 2Eh, 0A3h, 7Ah, 0EAh, 2Eh, 8Bh, 87h, 0F...");
    _STOP_("db 0A3h, 7Ch, 0EAh, 0B8h, 6, 0, 0BBh, 6, 0...");
    _STOP_("db 0B9h, 38h, 0, 56h, 0BEh, 52h, 0EAh, 0E8...");
    _STOP_("db 5Eh, 0C3h, 8Bh, 44h, 12h, 89h, 44h, 28h...");
    _STOP_("db 89h, 44h, 2Ch, 83h, 7Ch, 1Ah, 30h, 74h,...");
    _STOP_("db 7Ah, 0CCh, 1, 44h, 1Ah, 83h, 7Ch, 1Ah, ...");
    _STOP_("db 0C7h, 44h, 1Ah, 30h, 0, 0A1h, 98h, 91h,...");
    _STOP_("db 83h, 7Ch, 1Ch, 0, 79h, 7, 2Eh, 0A1h, 7A...");
    _STOP_("db 44h, 16h, 8Bh, 44h, 16h, 89h, 44h, 2Ah,...");
    _STOP_("db 89h, 44h, 2Eh, 0EBh, 27h, 8Bh, 44h, 1Ch...");
    _STOP_("db 8Bh, 44h, 16h, 83h, 7Ch, 1Ch, 0, 78h, 7...");
    _STOP_("db 0, 7Dh, 2Dh, 0EBh, 5, 3, 44h, 1Ah, 78h,...");
    _STOP_("db 16h, 89h, 44h, 2Ah, 3, 44h, 1Ah, 89h, 4...");
    _STOP_("db 4Ah, 65h, 74h, 18h, 83h, 3Eh, 88h, 91h,...");
    _STOP_("db 0B8h, 6, 0, 56h, 0E8h, 0DBh, 2 dup(5Eh)...");
    _STOP_("db 9Fh, 0B9h, 8, 0E8h, 42h, 2Ah, 0C3h, 8Bh...");
    _STOP_("db 8, 0, 0A3h, 0E2h, 0FCh, 0D1h, 0E8h, 0D1...");
    _STOP_("db 0E8h, 25h, 0FEh, 0, 0A3h, 0EAh, 0FCh, 8...");
    _STOP_("db 2Dh, 8, 0, 0A3h, 0E6h, 0FCh, 0D1h, 0E8h...");
    _STOP_("db 0D1h, 0E8h, 0D1h, 0E8h, 0BAh, 28h, 0, 0...");
    _STOP_("db 0EEh, 0FCh, 0BBh, 2 dup(0), 3, 1Eh, 0EA...");
    _STOP_("db 0EEh, 0FCh, 0C7h, 7, 81h, 4Eh, 0C7h, 47...");
    _STOP_("db 0C7h, 47h, 4, 2 dup(0), 0C7h, 47h, 6, 0...");
    _STOP_("db 9Ah, 0EAh, 0B9h, 3, 0, 0E8h, 4Eh, 32h, ...");
    _STOP_("db 90h, 0E8h, 0B3h, 29h, 5Fh, 2Eh, 8Bh, 5,...");
    _STOP_("db 8Bh, 45h, 2, 89h, 44h, 2, 0C7h, 44h, 4,...");
    _STOP_("db 8Bh, 45h, 4, 89h, 44h, 6, 0A1h, 0E2h, 0...");
    _STOP_("db 12h, 0A1h, 0E6h, 0FCh, 89h, 44h, 16h, 0...");
    _STOP_("db 2 dup(0), 2Eh, 0A1h, 7Ch, 0CCh, 89h, 44...");
    _STOP_("db 44h, 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h...");
    _STOP_("db 38h, 2Eh, 8Bh, 45h, 6, 83h, 0C7h, 8, 3,...");
    _STOP_("db 0E0h, 0D1h, 0E0h, 0D1h, 0E0h, 1, 6, 0E2...");
    _STOP_("db 0A3h, 0C3h, 8Bh, 5Ch, 1Ah, 83h, 0C3h, 4...");
    _STOP_("db 10h, 7Ch, 2, 33h, 0DBh, 89h, 5Ch, 1Ah, ...");
    _STOP_("db 2Eh, 8Bh, 87h, 0B2h, 0EAh, 89h, 5, 2Eh,...");
    _STOP_("db 0EAh, 89h, 45h, 2, 8Bh, 44h, 12h, 89h, ...");
    _STOP_("db 20h, 0, 89h, 44h, 2Ch, 8Bh, 44h, 16h, 2...");
    _STOP_("db 5, 2, 0, 89h, 44h, 2Ah, 5, 0Ch, 0, 89h,...");
    _STOP_("db 0FFh, 44h, 1Ah, 83h, 64h, 1Ah, 3, 8Bh, ...");
    _STOP_("db 0E0h, 8Bh, 7Ch, 38h, 0BBh, 0C2h, 0EAh, ...");
    _STOP_("db 28h, 1, 74h, 3, 0BBh, 0CAh, 0EAh, 3, 0D...");
    _STOP_("db 7, 89h, 5, 8Bh, 44h, 12h, 5, 3, 0, 89h,...");
    _STOP_("db 0Ah, 0, 89h, 44h, 2Ch, 8Bh, 44h, 16h, 2...");
    _STOP_("db 5, 3, 0, 89h, 44h, 2Ah, 5, 0Ah, 0, 89h,...");
    _STOP_("db 0C7h, 45h, 4, 70h, 0DFh, 29h, 45h, 24h,...");
    _STOP_("db 8Bh, 45h, 12h, 5, 8, 0, 8Bh, 5Dh, 16h, ...");
    _STOP_("db 91h, 83h, 0C3h, 8, 0BDh, 30h, 12h, 0BAh...");
    _STOP_("db 4Ch, 54h, 8Bh, 5Dh, 38h, 0C7h, 7, 81h, ...");
    _STOP_("db 2, 2 dup(0), 0C7h, 47h, 4, 2 dup(0), 0C...");
    _STOP_("db 37h, 8Bh, 5Dh, 0Ah, 56h, 8Bh, 0F7h, 0E8...");
    _STOP_("db 8Bh, 6Fh, 0Ah, 8Bh, 0F3h, 0E8h, 0BFh, 2...");
    _STOP_("db 0E8h, 0BAh, 28h, 5Eh, 81h, 6, 52h, 91h,...");
    _STOP_("db 16h, 54h, 91h, 0, 0C3h, 0C7h, 45h, 4, 7...");
    _STOP_("db 45h, 24h, 76h, 1, 0C3h, 8Bh, 45h, 12h, ...");
    _STOP_("db 5Dh, 16h, 2Bh, 1Eh, 90h, 91h, 83h, 0C3h...");
    _STOP_("db 12h, 0BAh, 53h, 8, 0E8h, 0EFh, 53h, 8Bh...");
    _STOP_("db 7, 41h, 37h, 0C7h, 47h, 0FCh, 2 dup(0),...");
    _STOP_("db 2 dup(0), 0C7h, 47h, 0FAh, 81h, 37h, 8B...");
    _STOP_("db 8Bh, 0F7h, 0E8h, 6Ah, 28h, 8Bh, 6Fh, 8,...");
    _STOP_("db 62h, 28h, 8Bh, 0F5h, 0E8h, 5Dh, 28h, 5E...");
    _STOP_("db 91h, 0C8h, 0, 83h, 16h, 54h, 91h, 0, 0C...");
    _STOP_("db 0EAh, 0EBh, 3, 0BFh, 0D4h, 0EAh, 0C7h, ...");
    _STOP_("db 7, 0B8h, 1, 0, 0BBh, 1, 0, 8Bh, 54h, 16...");
    _STOP_("db 90h, 91h, 8Bh, 4Ch, 12h, 0D1h, 0E9h, 56...");
    _STOP_("db 0E8h, 0CEh, 29h, 5Eh, 0C3h, 0B8h, 0F8h,...");
    _STOP_("db 0DFh, 0E8h, 89h, 55h, 0C7h, 44h, 6, 97h...");
    _STOP_("db 0A1h, 7Eh, 0CCh, 89h, 44h, 24h, 0C7h, 4...");
    _STOP_("db 3, 0C7h, 44h, 2Ch, 0E8h, 3, 8Bh, 7Ch, 3...");
    _STOP_("db 0FEh, 41h, 2Eh, 75h, 0Ah, 0C7h, 45h, 0F...");
    _STOP_("db 0C7h, 45h, 26h, 0C0h, 0Ah, 81h, 7Dh, 4,...");
    _STOP_("db 0Ah, 0C7h, 45h, 4, 0C0h, 5, 0C7h, 45h, ...");
    _STOP_("db 2Eh, 0A1h, 0D6h, 0EAh, 89h, 5, 2Eh, 0A1...");
    _STOP_("db 89h, 45h, 28h, 0C3h, 0A1h, 0AAh, 91h, 5...");
    _STOP_("db 44h, 16h, 7Dh, 3, 0E9h, 9Ch, 0, 8Bh, 44...");
    _STOP_("db 0, 89h, 44h, 28h, 5, 18h, 0, 89h, 44h, ...");
    _STOP_("db 16h, 2Bh, 6, 90h, 91h, 5, 4, 0, 89h, 44...");
    _STOP_("db 0, 89h, 44h, 2Eh, 0FFh, 44h, 1Ah, 83h, ...");
    _STOP_("db 2Eh, 0A0h, 90h, 0CCh, 0, 44h, 48h, 73h,...");
    _STOP_("db 61h, 24h, 3Fh, 88h, 44h, 48h, 0B9h, 7, ...");
    _STOP_("db 12h, 5, 10h, 0, 8Bh, 5Ch, 16h, 2Bh, 1Eh...");
    _STOP_("db 0C3h, 10h, 2Eh, 8Bh, 16h, 92h, 0CCh, 0E...");
    _STOP_("db 0BDh, 0A8h, 0D0h, 2Eh, 8Bh, 46h, 0, 89h...");
    _STOP_("db 8Bh, 46h, 2, 89h, 45h, 0Eh, 83h, 0C5h, ...");
    _STOP_("db 10h, 49h, 79h, 0CEh, 8Bh, 7Ch, 38h, 8Bh...");
    _STOP_("db 0E3h, 0Eh, 0D1h, 0E3h, 0D1h, 0E3h, 2Eh,...");
    _STOP_("db 0EAh, 89h, 5, 2Eh, 8Bh, 87h, 0D8h, 0EAh...");
    _STOP_("db 2Eh, 8Bh, 87h, 0DAh, 0EAh, 89h, 45h");//db 2Eh, 8Bh, 87h, 0DAh, 0EAh, 89h, 45h
    _STOP_("db 28h, 2Eh, 8Bh, 87h, 0DCh, 0EAh, 89h, 45...");
    _STOP_("db 0E8h, 2Ah, 27h, 0C3h, 0C7h, 45h, 4, 6, ...");
    _STOP_("db 24h, 76h, 1, 0C3h, 8Bh, 45h, 12h, 5, 10...");
    _STOP_("db 16h, 2Bh, 1Eh, 90h, 91h, 83h, 0C3h, 10h...");
    _STOP_("db 12h, 0BAh, 53h, 8, 0E8h, 6Bh, 52h, 8Bh,...");
    _STOP_("db 7Fh, 0FEh, 0C0h, 5, 75h, 0Ah, 0C7h, 47h...");
    _STOP_("db 2Eh, 0C7h, 47h, 26h, 0C1h, 32h, 81h, 7F...");
    _STOP_("db 75h, 0Ah, 0C7h, 47h, 4, 81h, 2Eh, 0C7h,...");
    _STOP_("db 33h, 0C7h, 7, 2 dup(0), 0C7h, 47h, 2, 2...");
    _STOP_("db 47h, 28h, 2 dup(0), 0C7h, 47h, 2Ah, 2 d...");
    _STOP_("db 52h, 91h, 0F4h, 1, 83h, 16h, 54h, 91h, ...");
    _STOP_("db 0F7h, 0E8h, 0BCh, 26h, 5Eh, 0C3h, 0C7h,...");
    _STOP_("db 7, 0B8h, 2, 0, 0BBh, 2, 0, 8Bh, 54h, 16...");
    _STOP_("db 90h, 91h, 8Bh, 4Ch, 12h, 0D1h, 0E9h, 56...");
    _STOP_("db 0EAh, 0E8h, 3Fh, 28h, 5Eh, 0C3h, 8Bh, 5...");
    _STOP_("db 3Ah, 92h, 0, 75h, 7, 53h, 0E8h, 4, 0, 8...");
    _STOP_("db 0C3h, 0B8h, 0F4h, 0, 0BBh, 0B0h, 0E1h, ...");
    _STOP_("db 53h, 8Bh, 45h, 0Ch, 89h, 44h, 1Ch, 0C7h...");
    _STOP_("db 0E2h, 2Eh, 0A1h, 80h, 0CCh, 89h, 44h, 2...");
    _STOP_("db 28h, 0E8h, 3, 0C7h, 44h, 2Ch, 0E8h, 3, ...");
    _STOP_("db 8Bh, 5Ch, 1Ch, 0C7h, 44h, 22h, 2 dup(0F...");
    _STOP_("db 0D1h, 0E3h, 0D1h, 0E3h, 81h, 7Dh, 0FEh,...");
    _STOP_("db 0Ah, 0C7h, 45h, 0FEh, 41h, 6, 0C7h, 45h...");
    _STOP_("db 81h, 7Dh, 4, 1, 2Fh, 75h, 0Ah, 0C7h, 45...");
    _STOP_("db 0C7h, 45h, 2Ch, 41h, 17h, 2Eh, 8Bh, 87h...");
    _STOP_("db 89h, 5, 2Eh, 8Bh, 87h, 18h, 0EBh, 89h, ...");
    _STOP_("db 8Bh, 87h, 1Ah, 0EBh, 89h, 45h, 28h, 2Eh...");
    _STOP_("db 0EBh, 89h, 45h, 2Ah, 0C3h, 0A1h, 0AAh, ...");
    _STOP_("db 0, 3Bh, 44h, 16h, 7Dh, 3, 0E9h, 0FDh, 0...");
    _STOP_("db 5, 4, 0, 89h, 44h, 28h, 5, 18h, 0, 89h,...");
    _STOP_("db 44h, 16h, 2Bh, 6, 90h, 91h, 5, 4, 0, 89...");
    _STOP_("db 5, 18h, 0, 89h, 44h, 2Eh, 83h, 7Ch, 1Ah...");
    _STOP_("db 8Bh, 44h, 16h, 2Bh, 6, 90h, 91h, 3Dh, 0...");
    _STOP_("db 3, 0E9h, 9Ah, 0, 83h, 7Ch, 1Ah, 8, 74h,...");
    _STOP_("db 1Ah, 0FFh, 44h, 1Ch, 83h, 64h, 1Ch, 7, ...");
    _STOP_("db 0A1h, 12h, 9Fh, 2Bh, 44h, 12h, 2Dh, 10h...");
    _STOP_("db 16h, 9Fh, 2Bh, 5Ch, 16h, 3, 1Eh, 90h, 9...");
    _STOP_("db 10h, 0E8h, 6Eh, 39h, 2Bh, 44h, 1Ch, 74h...");
    _STOP_("db 0, 3Dh, 4, 0, 7Dh, 5, 0FFh, 44h, 1Ch, 0...");
    _STOP_("db 4Ch, 1Ch, 83h, 64h, 1Ch, 7, 2Eh, 0A0h, ...");
    _STOP_("db 44h, 48h, 73h, 4Bh, 0E8h, 4Ah, 5Fh, 24h...");
    _STOP_("db 48h, 8Bh, 44h, 12h, 5, 10h, 0, 8Bh, 5Ch...");
    _STOP_("db 90h, 91h, 83h, 0C3h, 10h, 8Bh, 4Ch, 1Ch...");
    _STOP_("db 0D1h, 0E5h, 0D1h, 0E5h, 83h, 0E5h, 1Ch,...");
    _STOP_("db 56h, 0EBh, 2Eh, 3, 9Eh, 58h, 0EBh, 83h,...");
    _STOP_("db 6, 9Ch, 91h, 1, 0, 75h, 3, 83h, 0C5h, 1...");
    _STOP_("db 2Eh, 8Bh, 0AEh, 76h, 0EBh, 2Eh, 8Bh, 16...");
    _STOP_("db 0E8h, 44h, 3Ch");                //db 0E8h, 44h, 3Ch
    _STOP_("db 8Bh, 7Ch, 38h, 8Bh, 5Ch, 1Ch, 0D1h, 0E3...");
    _STOP_("db 0D1h, 0E3h, 2Eh, 8Bh, 87h, 16h, 0EBh, 8...");
    _STOP_("db 87h, 18h, 0EBh, 89h, 45h, 2, 2Eh, 8Bh, ...");
    _STOP_("db 89h, 45h, 28h, 2Eh, 8Bh, 87h, 1Ch, 0EBh...");
    _STOP_("db 0C3h, 0E8h, 2, 25h, 0C3h, 0C7h, 45h, 4,...");
    _STOP_("db 45h, 24h, 76h, 1, 0C3h, 8Bh, 5Dh, 22h, ...");
    _STOP_("db 5, 0C6h, 87h, 3Ah, 92h, 0FFh, 8Bh, 45h,...");
    _STOP_("db 0, 8Bh, 5Dh, 16h, 2Bh, 1Eh, 90h, 91h, 8...");
    _STOP_("db 0BDh, 4Ch, 12h, 0BAh, 53h, 8, 0E8h, 37h...");
    _STOP_("db 38h, 81h, 7Fh, 0FEh, 41h, 6, 75h, 0Ah, ...");
    _STOP_("db 0C1h, 2Eh, 0C7h, 47h, 26h, 41h, 33h, 81...");
    _STOP_("db 12h, 75h, 0Ah, 0C7h, 47h, 4, 1, 2Fh, 0C...");
    _STOP_("db 81h, 33h, 0C7h, 7, 2 dup(0), 0C7h, 47h,...");
    _STOP_("db 0C7h, 47h, 28h, 2 dup(0), 0C7h, 47h, 2A...");
    _STOP_("db 81h, 6, 52h, 91h, 90h, 1, 83h, 16h, 54h...");
    _STOP_("db 8Bh, 0F7h, 0E8h, 88h, 24h, 5Eh, 0C3h, 0...");
    _STOP_("db 61h, 7, 0B8h, 2, 0, 0BBh, 2, 0, 8Bh, 54...");
    _STOP_("db 16h, 90h, 91h, 8Bh, 4Ch, 12h, 0D1h, 0E9...");
    _STOP_("db 16h, 0EBh, 0E8h, 0Bh, 26h, 5Eh, 0C3h, 0...");
    _STOP_("db 7Dh, 0Ch, 0, 74h, 3, 0B8h, 0Ch, 1, 0BBh...");
    _STOP_("db 0E8h, 0BDh, 51h, 0C7h, 44h, 6, 76h, 3Bh...");
    _STOP_("db 86h, 0CCh, 89h, 44h, 24h, 0C7h, 44h, 28...");
    _STOP_("db 44h, 2Ch, 0E8h, 3, 8Bh, 5Ch, 38h, 0BDh,...");
    _STOP_("db 0A6h, 0EBh, 83h, 7Dh, 0Ch, 0, 74h, 6, 0...");
    _STOP_("db 0BAh, 0A8h, 0EBh, 89h, 6Ch, 0Ch, 89h, 5...");
    _STOP_("db 8Bh, 46h, 0, 89h, 7, 0C7h, 44h, 34h, 64...");
    _STOP_("db 30h, 2 dup(0), 0C7h, 44h, 32h, 2 dup(0)...");
    _STOP_("db 0AAh, 91h, 5, 0D0h, 0, 3Bh, 44h, 16h, 7...");
    _STOP_("db 0B0h, 0, 8Bh, 44h, 12h, 5, 2, 0, 89h, 4...");
    _STOP_("db 0, 89h, 44h, 2Ch, 8Bh, 44h, 16h, 2Bh, 6...");
    _STOP_("db 2, 0, 89h, 44h, 2Ah, 5, 0Ch, 0, 89h, 44...");
    _STOP_("db 7Ch, 1Ah, 0, 75h, 11h, 2Eh, 0A0h, 88h, ...");
    _STOP_("db 48h, 73h, 37h, 0E8h, 9Ch, 5Dh, 24h, 3Fh...");
    _STOP_("db 0FFh, 44h, 1Ah, 8Bh, 44h, 1Ah, 0D1h, 0E...");
    _STOP_("db 0EBh, 81h, 3Ch, 8, 1, 74h, 3, 0BBh, 86h...");
    _STOP_("db 8Bh, 7Ch, 38h, 2Eh, 8Bh, 7, 89h, 5, 83h...");
    _STOP_("db 74h, 0Ch, 83h, 7Ch, 1Ah, 7, 75h, 5, 0C7...");
    _STOP_("db 2 dup(0), 0C3h, 8Bh, 44h, 12h, 8Bh, 5Ch...");
    _STOP_("db 90h, 91h, 5, 18h, 0, 83h, 0C3h, 8, 0B9h...");
    _STOP_("db 3Ch, 8, 1, 74h, 6, 0B9h, 6, 0, 2Dh, 18h...");
    _STOP_("db 16h, 8Ah, 0CCh, 0E8h, 82h, 3Ah, 0BBh, 0...");
    _STOP_("db 3Ch, 8, 1, 74h, 3, 0BBh, 0CCh, 0D0h, 2E...");
    _STOP_("db 45h, 0Ch, 2Eh, 8Bh, 47h, 2, 89h, 45h, 0...");
    _STOP_("db 4, 89h, 5Dh, 10h, 0C3h, 0E8h, 4Ch, 23h,...");
    _STOP_("db 0E3h, 2Eh, 0FFh, 0A7h, 0AAh, 0EBh, 0BBh...");
    _STOP_("db 0E9h, 7, 4Fh, 0BBh, 0B0h, 0CCh, 0E9h, 1...");
    _STOP_("db 0C2h, 0CCh, 0E9h, 0FBh, 4Eh, 0BBh, 0D4h...");
    _STOP_("db 0F5h, 4Eh, 0BBh, 0E6h");         //db 0F5h, 4Eh, 0BBh, 0E6h
    _STOP_("db 0CCh, 0E9h, 0EFh, 4Eh, 0BBh, 0F8h, 0CCh...");
    _STOP_("db 4Eh, 0BBh, 0Ah, 0CDh, 0E9h, 0E3h, 4Eh, ...");
    _STOP_("db 0E9h, 0DDh, 4Eh, 33h, 0C0h, 0C3h, 0C7h,...");
    _STOP_("db 2 dup(0), 0C7h, 6, 0AAh, 91h, 0FFh, 11h...");
    _STOP_("db 8Eh, 70h, 17h, 0C7h, 6, 0AEh, 8Eh, 70h,...");
    _STOP_("db 38h, 92h, 0, 0C6h, 6, 39h, 92h, 0, 0C7h...");
    _STOP_("db 0, 12h, 0C7h, 6, 18h, 92h, 0A0h, 11h, 2...");
    _STOP_("db 0CCh, 2Eh, 0A2h, 78h, 0E7h, 2Eh, 0A1h, ...");
    _STOP_("db 0A3h, 78h, 0E9h, 0C6h, 6, 3Ah, 92h, 0, ...");
    _STOP_("db 92h, 0, 0B8h, 0Ch, 0, 0F7h, 26h, 1Ah, 9...");
    _STOP_("db 8Eh, 0B8h, 0Eh, 0, 0F7h, 26h, 1Ah, 99h,...");
    _STOP_("db 0C7h, 6, 72h, 8Eh, 0F5h, 98h, 0C3h, 0Ah...");
    _STOP_("db 41h, 50h, 81h, 50h, 0C1h, 50h, 1, 51h, ...");
    _STOP_("db 51h, 81h, 51h, 0C1h, 51h, 0, 52h, 41h, ...");
    _STOP_("db 0C1h, 52h, 1, 53h, 41h, 53h, 6 dup(0), ...");
    _STOP_("db 0C1h, 53h, 1, 54h, 40h, 54h, 80h, 54h, ...");
    _STOP_("db 55h, 40h, 55h, 81h, 55h, 0C1h, 55h, 4 d...");
    _STOP_("db 41h, 56h, 6 dup(0), 81h, 56h, 0C0h, 56h...");
    _STOP_("db 57h, 80h, 57h, 0C0h, 57h, 1, 58h, 6 dup...");
    _STOP_("db 81h, 58h, 2 dup(0), 0C1h, 58h, 1, 59h, ...");
    _STOP_("db 59h, 0C0h, 59h, 0, 5Ah, 40h, 5Ah, 80h, ...");
    _STOP_("db 1, 5Bh, 41h, 5Bh, 2 dup(0), 81h, 5Bh, 0...");
    _STOP_("db 5Ch, 41h, 5Ch, 81h, 5Ch, 0C1h, 5Ch, 0, ...");
    _STOP_("db 80h, 5Dh, 0C0h, 5Dh, 0, 5Eh, 41h, 5Eh, ...");
    _STOP_("db 5Eh, 1, 5Fh, 41h, 5Fh, 81h, 5Fh, 0C0h, ...");
    _STOP_("db 40h, 60h, 80h, 60h, 0C0h, 60h, 0, 61h, ...");
    _STOP_("db 61h, 0C0h, 61h, 0, 62h, 40h, 62h, 80h, ...");
    _STOP_("db 1, 63h, 41h, 63h, 81h, 63h, 0C1h, 63h, ...");
    _STOP_("db 64h, 80h, 64h, 0, 67h, 40h, 67h, 80h, 6...");
    _STOP_("db 0C0h, 65h, 1, 66h, 41h, 66h, 81h, 66h, ...");
    _STOP_("db 1, 68h, 41h, 68h, 81h, 68h, 80h, 6Ah, 0...");
    _STOP_("db 6Bh, 41h, 6Bh, 0C1h, 69h, 1, 6Ah, 10h d...");
    _STOP_("db 0C0h, 6Bh, 0, 6Ch, 40h, 6Ch, 81h, 6Ch, ...");
    _STOP_("db 51h, 0C1h, 6Ch, 1, 6Dh, 40h, 6Dh, 80h, ...");
    _STOP_("db 1, 6Eh, 41h, 6Eh, 41h, 53h, 6 dup(0), 8...");
    _STOP_("db 0C1h, 53h, 81h, 6Eh, 0C0h, 6Eh, 0, 6Fh,...");
    _STOP_("db 6Fh, 0C0h, 6Fh, 1, 70h, 0C1h, 55h, 4 du...");
    _STOP_("db 41h, 56h, 6 dup(0), 81h, 56h, 0C0h, 56h...");
    _STOP_("db 57h, 80h, 57h, 0C0h, 57h, 1, 58h, 6 dup...");
    _STOP_("db 81h, 58h, 2 dup(0), 0C1h, 58h, 1, 59h, ...");
    _STOP_("db 59h, 0C0h, 59h, 0, 5Ah, 40h, 5Ah, 80h, ...");
    _STOP_("db 1, 5Bh, 41h, 5Bh, 2 dup(0), 81h, 5Bh, 0...");
    _STOP_("db 5Ch, 41h, 5Ch, 81h, 5Ch, 0C1h, 5Ch, 0, ...");
    _STOP_("db 80h, 5Dh, 0C0h, 5Dh, 0, 5Eh, 41h, 5Eh, ...");
    _STOP_("db 5Eh, 1, 5Fh, 41h, 5Fh, 81h, 5Fh, 0C0h, ...");
    _STOP_("db 40h, 60h, 80h, 60h, 0C0h, 60h, 0, 61h, ...");
    _STOP_("db 61h, 0C0h, 61h, 0, 62h, 40h, 62h, 80h, ...");
    _STOP_("db 1, 63h, 41h, 63h, 81h, 63h, 0C1h, 63h, ...");
    _STOP_("db 64h, 80h, 64h, 0C1h, 64h, 0");   //db 64h, 80h, 64h, 0C1h, 64h, 0
    _STOP_("db 65h, 41h, 65h, 80h, 65h, 0C0h, 65h, 1, ...");
    _STOP_("db 81h, 66h, 0C1h, 66h, 6 dup(0), 1, 68h, ...");
    _STOP_("db 68h, 0C1h, 68h, 1, 69h, 41h, 69h, 81h, ...");
    _STOP_("db 1, 6Ah, 6 dup(0), 0CEh, 35h, 7Fh, 0DDh,...");
    _STOP_("db 0E1h, 97h, 0DFh, 63h, 0D9h, 0A8h, 0D4h,...");
    _STOP_("db 86h, 0D2h, 26h, 0E1h, 0BAh, 0CEh, 0C8h,...");
    _STOP_("db 0CEh, 0E4h, 0CEh, 0F2h, 0CEh, 0, 0CFh, ...");
    _STOP_("db 0CEh, 82h, 0CEh, 90h, 0CEh, 82h, 0CEh, ...");
    _STOP_("db 0CFh, 74h, 0CFh, 82h, 0CFh, 90h, 0CFh, ...");
    _STOP_("db 0CFh, 0BAh, 0CFh, 0C8h, 0CFh, 34h, 1, 2...");
    _STOP_("db 0D7h, 61h, 7, 0D6h, 0CFh, 4 dup(0), 14h...");
    _STOP_("db 0F9h, 0D5h, 61h, 7, 99h, 3Ah, 0D6h, 0CF...");
    _STOP_("db 0E0h, 0, 0F0h, 10h, 44h, 1, 0F9h, 0D5h,...");
    _STOP_("db 3Ah, 0D6h, 0CFh, 2 dup(0), 50h, 0, 0F0h...");
    _STOP_("db 0D2h, 0DAh, 53h, 8, 9Dh, 0D8h, 0DAh, 0C...");
    _STOP_("db 0, 1Eh, 0, 14h, 1, 0D2h, 0DAh, 53h, 8, ...");
    _STOP_("db 0CFh, 9Ah, 0, 3Ah, 0, 1Eh, 0, 14h, 1, 0...");
    _STOP_("db 8, 9Dh, 0D8h, 0DAh, 0CFh, 3Fh, 0, 6Ch, ...");
    _STOP_("db 1, 0D2h, 0DAh, 53h, 8, 9Dh, 0D8h, 0DAh,...");
    _STOP_("db 0, 6Ch, 0, 1Eh, 0, 14h, 1, 0D2h, 0DAh, ...");
    _STOP_("db 0D8h, 0DAh, 0CFh, 48h, 0, 0C5h, 0, 1Eh,...");
    _STOP_("db 0DAh, 53h, 8, 9Dh, 0D8h, 0DAh, 0CFh, 9A...");
    _STOP_("db 1Eh, 0, 14h, 1, 0D2h, 0DAh, 53h, 8, 9Dh...");
    _STOP_("db 0CFh, 3Fh, 0, 0FCh, 0, 1Eh, 0, 14h, 1, ...");
    _STOP_("db 8, 9Dh, 0D8h, 0DAh, 0CFh, 0A2h, 0, 0FCh...");
    _STOP_("db 3Ch, 1, 2Ah, 0D8h, 53h, 8, 9Dh, 0D8h, 0...");
    _STOP_("db 0, 4Dh, 0, 0Ah, 0FFh, 3Ch, 1, 2Ah, 0D8h...");
    _STOP_("db 0D8h, 0E2h, 0CFh, 0BCh, 0, 4Dh, 0, 0Ah,...");
    _STOP_("db 2Ah, 0D8h, 53h, 8, 9Dh, 0D8h, 0E2h, 0CF...");
    _STOP_("db 0, 0Ah, 0FFh, 3Ch, 1, 2Ah, 0D8h, 53h, 8...");
    _STOP_("db 0E2h, 0CFh, 0BDh, 0, 0DDh, 0, 0Ah, 0FFh...");
    _STOP_("db 0D6h, 53h, 8, 9Dh, 0D8h, 0FCh, 0CFh, 3E...");
    _STOP_("db 5, 0, 40h, 1, 15h, 0D6h, 53h, 8, 9Dh, 0...");
    _STOP_("db 0AEh, 0, 12h, 0, 5, 0, 40h, 1, 15h, 0D6...");
    _STOP_("db 0D8h, 0FCh, 0CFh, 3Eh, 0, 0A2h, 0, 5, 0...");
    _STOP_("db 0D6h, 53h, 8, 9Dh, 0D8h, 0FCh, 0CFh, 0A...");
    _STOP_("db 0, 5, 0, 38h, 1, 15h, 0D6h, 53h, 8, 9Dh...");
    _STOP_("db 0D0h, 50h, 0, 19h, 1, 28h, 0FFh, 38h, 1...");
    _STOP_("db 53h, 8, 9Dh, 0D8h, 22h, 0D0h, 8Ah, 0, 1...");
    _STOP_("db 50h, 0, 1Eh, 0D6h, 53h, 8, 0F5h, 0D8h, ...");
    _STOP_("db 0, 0Fh, 1, 14h, 0FFh, 8Dh, 92h, 15h, 93...");
    _STOP_("db 25h, 94h, 0ADh, 94h, 0C5h, 67h, 55h, 6A...");
    _STOP_("db 75h, 6Fh, 5, 72h, 5, 72h, 5, 72h, 5, 72...");
    _STOP_("db 72h, 5, 72h, 75h, 6Fh, 0E5h, 6Ch, 55h, ...");
    _STOP_("db 38h, 0D0h, 46h, 0D0h, 54h, 0D0h, 62h, 0...");
    _STOP_("db 7Eh, 0D0h, 8Ch, 0D0h, 9Ah, 0D0h, 41h, 0...");
    _STOP_("db 0E1h, 0AFh, 31h, 0AFh, 81h, 0AEh, 0D1h,...");
    _STOP_("db 71h, 0ACh, 0C1h, 0ABh, 11h, 0ABh, 61h, ...");
    _STOP_("db 0FCh, 0, 82h, 0DBh, 0A2h, 0DCh, 61h, 7,...");
    _STOP_("db 1, 0D2h, 0DAh, 53h, 8, 2Bh, 0DBh, 55h, ...");
    _STOP_("db 28h, 0, 28h, 0, 14h, 1, 0D2h, 0DAh, 53h...");
    _STOP_("db 55h, 64h, 10h, 0, 38h, 0, 28h, 0, 14h, ...");
    _STOP_("db 53h, 8, 2Bh, 0DBh, 55h, 64h, 38h, 0, 38...");
    _STOP_("db 14h, 1, 0D2h, 0DAh, 53h, 8, 2Bh, 0DBh, ...");
    _STOP_("db 0, 28h, 0, 28h, 0, 20h, 1, 23h, 0DAh, 5...");
    _STOP_("db 0FDh, 78h, 28h, 0, 3Bh, 0, 0C8h, 0, 1Ch...");
    _STOP_("db 53h, 8, 61h, 7, 55h, 77h, 1, 5 dup(0), ...");
    _STOP_("db 0DAh, 53h, 8, 61h, 7, 55h, 77h, 48h, 5 ...");
    _STOP_("db 1, 0B0h, 0DAh, 53h, 8, 61h, 7, 95h, 74h...");
    _STOP_("db 3 dup(0), 18h, 1, 0B0h, 0DAh, 53h, 8, 6...");
    _STOP_("db 48h, 0, 48h, 3 dup(0), 0FDh, 78h, 35h, ...");
    _STOP_("db 0A5h, 79h, 6Dh, 79h, 35h, 79h, 95h, 74h...");
    _STOP_("db 75h, 0A5h, 76h, 93h, 78h, 29h, 78h, 0BF...");
    _STOP_("db 77h, 95h, 61h, 45h, 62h, 0F5h, 62h, 0A5...");
    _STOP_("db 64h, 5, 65h, 0B5h, 2 dup(65h), 66h, 0C0...");
    _STOP_("db 0C0h, 27h, 0, 28h, 40h, 2Bh, 80h, 2Bh, ...");
    _STOP_("db 2Ch, 0C0h, 30h, 0, 31h, 40h, 35h, 80h, ...");
    _STOP_("db 80h, 2Ch, 0C0h, 30h, 0, 31h, 40h, 35h, ...");
    _STOP_("db 2Ch, 0, 2Dh, 40h, 31h, 80h, 31h, 0C0h, ...");
    _STOP_("db 0C0h, 2Ch, 0, 2Dh, 40h, 31h, 80h, 31h, ...");
    _STOP_("db 36h, 40h, 2Dh, 80h, 2Dh, 0C0h, 31h, 0, ...");
    _STOP_("db 80h, 36h, 40h, 2Dh, 80h, 2Dh, 0C0h, 31h...");
    _STOP_("db 36h, 80h, 36h, 0C0h, 2Dh, 0, 2Eh, 40h, ...");
    _STOP_("db 0C0h, 36h, 0, 37h, 0C0h, 2Dh, 0, 2Eh, 4...");
    _STOP_("db 32h, 0C0h, 36h, 0, 37h, 41h, 1Eh, 81h, ...");
    _STOP_("db 1, 1Fh, 41h, 1Fh, 81h, 1Fh, 40h, 23h, 8...");
    _STOP_("db 23h, 0, 24h, 40h, 24h, 80h, 24h, 40h, 2...");
    _STOP_("db 0C0h, 27h, 0, 28h, 40h, 28h, 80h, 28h, ...");
    _STOP_("db 2Bh, 40h, 2Bh, 80h, 2Bh, 0C0h, 2Bh, 0, ...");
    _STOP_("db 80h, 2Fh, 0C1h, 2Fh, 1, 30h, 40h, 30h, ...");
    _STOP_("db 33h, 1, 34h, 41h, 34h, 81h, 34h, 0C1h, ...");
    _STOP_("db 28h, 1, 71h, 0DEh, 0B6h, 0DEh, 2, 0, 30...");
    _STOP_("db 61h, 7, 4, 0, 2Ch, 1, 71h, 0DEh, 13h, 0...");
    _STOP_("db 1, 4Dh, 1, 4Dh, 41h, 4Dh, 41h, 4Dh, 1, ...");
    _STOP_("db 1, 4Ch, 41h, 4Ch, 81h, 4Ch, 0C1h, 4Ch, ...");
    _STOP_("db 4Dh, 1, 4Eh, 41h, 4Eh, 1, 4Ch, 81h, 4Dh...");
    _STOP_("db 80h, 2 dup(40h), 44h, 80h, 44h, 0C0h, 4...");
    _STOP_("db 44h, 0, 45h, 40h, 41h, 80h, 41h, 40h, 4...");
    _STOP_("db 0C0h, 41h, 0, 42h, 0C0h, 45h, 0, 46h, 4...");
    _STOP_("db 42h, 40h, 46h, 80h, 46h, 0C0h, 42h, 0, ...");
    _STOP_("db 0, 47h, 40h, 43h, 80h, 43h, 40h, 47h, 8...");
    _STOP_("db 43h, 0, 44h, 0C0h, 47h, 0, 48h, 40h, 38...");
    _STOP_("db 41h, 3Ch, 80h, 3Ch, 0C0h, 38h, 0, 39h, ...");
    _STOP_("db 3Dh, 40h, 39h, 80h, 39h, 40h, 3Dh");//db 3Dh, 40h, 39h, 80h, 39h, 40h, 3Dh
    _STOP_("db 80h, 3Dh, 0C0h, 39h, 0, 3Ah, 0C0h, 3Dh,...");
    _STOP_("db 3Ah, 80h, 3Ah, 40h, 3Eh, 80h, 3Eh, 0C0h...");
    _STOP_("db 0C0h, 3Eh, 0, 3Fh, 40h, 3Bh, 80h, 3Bh, ...");
    _STOP_("db 3Fh, 0C0h, 3Bh, 1, 3Ch, 0C0h, 3Fh, 1, 4...");
    _STOP_("db 0F5h, 0FFh, 7, 0, 0F9h, 0FFh, 0Eh, 0, 0...");
    _STOP_("db 0, 6, 3 dup(0), 0Bh, 0, 0F9h, 0FFh, 7, ...");
    _STOP_("db 2 dup(0), 0F9h, 0FFh, 0F9h, 0FFh, 35h, ...");
    _STOP_("db 96h, 69h, 96h, 0FBh, 96h, 5Bh, 97h, 0ED...");
    _STOP_("db 98h, 81h, 48h, 0C1h, 48h, 1, 49h, 41h, ...");
    _STOP_("db 0C1h, 49h, 1, 4Ah, 81h, 48h, 41h, 4Ah, ...");
    _STOP_("db 4Ah, 1, 4Bh, 41h, 4Bh, 81h, 4Bh, 0C1h, ...");
    _STOP_("db 1, 38h, 0C1h, 37h, 60h, 33h, 7Ch, 0E4h,...");
    _STOP_("db 0E4h, 8Eh, 0E4h, 94h, 0E4h, 9Ah, 0E4h, ...");
    _STOP_("db 0E4h, 0C1h, 98h, 0F5h, 98h, 36h, 68h, 5...");
}

void loc_1EBD7()
{
    sub_1EBD0(0x1EBD7);
}
void sub_1EBD0(int pc)
{
    if (pc == 0x1EBD7)
        goto loc_1EBD7;
    
    memory(_ds, 0x8F52) = 0x00;                 //mov byte_31482, 0
    goto loc_1EBDC;                             //jmp short loc_1EBDC
loc_1EBD7:                                      //loc_1EBD7:
    memory(_ds, 0x8F52) = 0xff;                 //mov byte_31482, 0FFh
loc_1EBDC:                                      //loc_1EBDC:
    _bp = 0xa000;                               //mov bp, 0A000h
    _es = _bp;                                  //mov es, bp
loc_1EBE1:                                      //loc_1EBE1:
    if ((short)_dx > (short)0xfff0)             //jg short loc_1EBF2
      goto loc_1EBF2;
    _si += _ax;                                 //add si, ax
    _si += _ax;                                 //add si, ax
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1EBE1
      goto loc_1EBE1;
    goto loc_1EC6A;                             //jmp short loc_1EC6A
loc_1EBF2:                                      //loc_1EBF2:
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _bp = _di;                                  //mov bp, di
    _bp += 0x1ba8;                              //add bp, 1BA8h
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _di += _cx;                                 //add di, cx
    _cx = _ax;                                  //mov cx, ax
    if ((short)_dx >= 0)                        //jns short loc_1EC21
      goto loc_1EC21;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EC0A:                                      //loc_1EC0A:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _cx += _dx;                                 //add cx, dx
    sub_1EC6F();                                //call sub_1EC6F
    _di += 0x0002;                              //add di, 2
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EC0A
      goto loc_1EC0A;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx == 0)                               //jz short loc_1EC6A
      goto loc_1EC6A;
loc_1EC21:                                      //loc_1EC21:
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _di += _ax;                                 //add di, ax
loc_1EC28:                                      //loc_1EC28:
    if ((short)_di >= (short)_bp)               //jge short loc_1EC48
      goto loc_1EC48;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EC2E:                                      //loc_1EC2E:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1EC6F();                                //call sub_1EC6F
    _di += 0x0002;                              //add di, 2
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EC2E
      goto loc_1EC2E;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _di += 0x0280;                              //add di, 280h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1EC28
      goto loc_1EC28;
    goto loc_1EC6A;                             //jmp short loc_1EC6A
loc_1EC48:                                      //loc_1EC48:
    _push(_di);                                 //push di
    _di -= _bp;                                 //sub di, bp
    _ax = _di;                                  //mov ax, di
    _di = _pop();                               //pop di
    _dx = _dx ^ _dx;                            //xor dx, dx
    _bp = 0x0028;                               //mov bp, 28h
    _div(_bp);                                  //div bp
    _ax -= 0x000f;                              //sub ax, 0Fh
    _ax = -_ax;                                 //neg ax
    if ((short)_ax<=0)                                //jle short loc_1EC6A
      goto loc_1EC6A;
loc_1EC5C:                                      //loc_1EC5C:
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1EC6F();                                //call sub_1EC6F
    _di += 0x0002;                              //add di, 2
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EC5C
      goto loc_1EC5C;
loc_1EC6A:                                      //loc_1EC6A:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1EC6F()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_ax != 0)                               //jnz short loc_1EC7D
      goto loc_1EC7D;
    goto loc_1EDCF;                             //jmp loc_1EDCF
loc_1EC7D:                                      //loc_1EC7D:
    if (_flags.carry)                           //jb short loc_1ECD8
      goto loc_1ECD8;
    if (memory(_ds, 0x8F52) == 0x00)            //jz short loc_1ECAE
      goto loc_1ECAE;
    _push(_dx);                                 //push dx
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EC94:                                      //loc_1EC94:
    memoryVideoSet(_es, _di, _al);                     //mov es:[di], al
    memoryVideoSet(_es, _di + 1, _al);                 //mov es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_1EC94
      goto loc_1EC94;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _dx = _pop();                               //pop dx
    goto loc_1EDCF;                             //jmp loc_1EDCF
loc_1ECAE:                                      //loc_1ECAE:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _ax = 0xa400;                               //mov ax, 0A400h
    _ds = _ax;                                  //mov ds, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0105;                               //mov ax, 105h
    _out(_dx, _ax);                             //out dx, ax
loc_1ECC5:                                      //loc_1ECC5:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += 0x0026;                              //add di, 26h
    if (--_cx)                                  //loop loc_1ECC5
      goto loc_1ECC5;
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ds = _pop();                               //pop ds
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1EDCF;                             //jmp loc_1EDCF
loc_1ECD8:                                      //loc_1ECD8:
    if (memory(_ds, 0x8F52) == 0x00)            //jz short loc_1ED27
      goto loc_1ED27;
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si += 0x5538;                              //add si, 5538h
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1ECFC:                                      //loc_1ECFC:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    _ah = memoryVideoGet(_es, _di);                     //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);                     //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    _ah = memoryVideoGet(_es, _di + 1);                 //mov ah, es:[di+1]
    memoryVideoSet(_es, _di + 1, _al);                 //mov es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_1ECFC
      goto loc_1ECFC;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    goto loc_1EDCF;                             //jmp loc_1EDCF
loc_1ED27:                                      //loc_1ED27:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _si += 0x5538;                              //add si, 5538h
loc_1ED43:                                      //loc_1ED43:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    memoryVideoAnd(_es, _di + 1, _al);                //and es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_1ED43
      goto loc_1ED43;
    _dx -= 1;                                   //dec dx
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x1003;                               //mov ax, 1003h
    _out(_dx, _ax);                             //out dx, ax
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _push(_ds);                                 //push ds
    _ax = 0xa400;                               //mov ax, 0A400h
    _ds = _ax;                                  //mov ds, ax
    memory(_ss, 0x0) = 0x00;                    //mov ss:byte_447B0, 0
    memory(_ss, 0x1) = 0x01;                    //mov ss:byte_447B0+1, 1
loc_1ED75:                                      //loc_1ED75:
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ah = memory(_ss, 0x1);                     //mov ah, ss:byte_447B0+1
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ah = memory(_ss, 0x0);                     //mov ah, ss:byte_447B0
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _ax);                             //out dx, ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1ED8E:                                      //loc_1ED8E:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);                     //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);                     //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di + 1);                 //mov ah, es:[di+1]
    memoryVideoSet(_es, _di + 1, _al);                 //mov es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_1ED8E
      goto loc_1ED8E;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    memory(_ss, 0x0) += 1;                      //inc ss:byte_447B0
    memory(_ss, 0x1) <<= 1;                     //shl ss:byte_447B0+1, 1
    if ((char)memory(_ss, 0x0) < (char)0x04)    //jl short loc_1ED75
      goto loc_1ED75;
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0003;                               //mov ax, 3
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0004;                               //mov ax, 4
    _out(_dx, _ax);                             //out dx, ax
    _ds = _pop();                               //pop ds
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
loc_1EDCF:                                      //loc_1EDCF:
    _ax = _pop();                               //pop ax
}

void sub_1EDE0()
{
    memory(_ds, 0x8F52) = 0x00;                 //mov byte_31482, 0
    goto loc_1EDEC;                             //jmp short loc_1EDEC
loc_1EDE7:                                      //loc_1EDE7:
    memory(_ds, 0x8F52) = 0xff;                 //mov byte_31482, 0FFh
loc_1EDEC:                                      //loc_1EDEC:
    _bp = memory16(_ds, 0x4255);                //mov bp, seg_2C785
    _es = _bp;                                  //mov es, bp
loc_1EDF2:                                      //loc_1EDF2:
    if ((short)_dx > (short)0xfff0)             //jg short loc_1EE03
      goto loc_1EE03;
    _si += _ax;                                 //add si, ax
    _si += _ax;                                 //add si, ax
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1EDF2
      goto loc_1EDF2;
    goto loc_1EE73;                             //jmp short loc_1EE73
loc_1EE03:                                      //loc_1EE03:
    _cx >>= 1;                                  //shr cx, 1
    _di = _cx;                                  //mov di, cx
    _cx = _ax;                                  //mov cx, ax
    if ((short)_dx >= 0)                        //jns short loc_1EE26
      goto loc_1EE26;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EE0F:                                      //loc_1EE0F:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _cx += _dx;                                 //add cx, dx
    sub_1EE78();                                //call sub_1EE78
    _di += 0x0004;                              //add di, 4
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EE0F
      goto loc_1EE0F;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx == 0)                               //jz short loc_1EE73
      goto loc_1EE73;
loc_1EE26:                                      //loc_1EE26:
    _ax = _dx;                                  //mov ax, dx
    _xchg(_di, _dx);                            //xchg di, dx
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di += _dx;                                 //add di, dx
    _dx = _ax;                                  //mov dx, ax
loc_1EE34:                                      //loc_1EE34:
    if ((short)_dx >= (short)0x00b1)            //jge short loc_1EE5B
      goto loc_1EE5B;
    _push(_dx);                                 //push dx
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EE3D:                                      //loc_1EE3D:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1EE78();                                //call sub_1EE78
    _di += 0x0004;                              //add di, 4
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EE3D
      goto loc_1EE3D;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx = _pop();                               //pop dx
    _di += 0x0500;                              //add di, 500h
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1EE34
      goto loc_1EE34;
    goto loc_1EE73;                             //jmp short loc_1EE73
loc_1EE5B:                                      //loc_1EE5B:
    _dx -= 0x00c0;                              //sub dx, 0C0h
    _dx = -_dx;                                 //neg dx
    if (_FIXME_)                                //jle short loc_1EE73
      goto loc_1EE73;
    _ax = _dx;                                  //mov ax, dx
loc_1EE65:                                      //loc_1EE65:
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1EE78();                                //call sub_1EE78
    _di += 0x0004;                              //add di, 4
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1EE65
      goto loc_1EE65;
loc_1EE73:                                      //loc_1EE73:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1EE78()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_ax != 0)                               //jnz short loc_1EE86
      goto loc_1EE86;
    goto loc_1EFDE;                             //jmp loc_1EFDE
loc_1EE86:                                      //loc_1EE86:
    if (_flags.carry)                           //jb short loc_1EEC1
      goto loc_1EEC1;
    if (memory(_ds, 0x8F52) == 0x00)            //jz short loc_1EEA0
      goto loc_1EEA0;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _ax = 0xffff;                               //mov ax, 0FFFFh
loc_1EE94:                                      //loc_1EE94:
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_1EE94
      goto loc_1EE94;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    goto loc_1EFDE;                             //jmp loc_1EFDE
loc_1EEA0:                                      //loc_1EEA0:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
loc_1EEB2:                                      //loc_1EEB2:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_1EEB2
      goto loc_1EEB2;
    _ds = _pop();                               //pop ds
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1EFDE;                             //jmp loc_1EFDE
loc_1EEC1:                                      //loc_1EEC1:
    if (memory(_ds, 0x8F52) == 0x00)            //jz short loc_1EF38
      goto loc_1EF38;
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si += 0x5538;                              //add si, 5538h
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1EED6:                                      //loc_1EED6:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_1EED6
      goto loc_1EED6;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    goto loc_1EFDE;                             //jmp loc_1EFDE
loc_1EF38:                                      //loc_1EF38:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _bp = _si;                                  //mov bp, si
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _si -= _dx;                                 //sub si, dx
    _si += 0x5538;                              //add si, 5538h
loc_1EF4C:                                      //loc_1EF4C:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _push(_ds);                                 //push ds
    _dx = _seg009;                              //mov dx, seg seg009
    _xchg(_si, _bp);                            //xchg si, bp
    _ds = _dx;                                  //mov ds, dx
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _al = (~_al);                               //not al
    memory(_es, _di) &= _al;                    //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _al = (~_al);                               //not al
    memory(_es, _di) &= _al;                    //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ds = _pop();                               //pop ds
    _xchg(_si, _bp);                            //xchg si, bp
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _push(_ds);                                 //push ds
    _dx = _seg009;                              //mov dx, seg seg009
    _xchg(_si, _bp);                            //xchg si, bp
    _ds = _dx;                                  //mov ds, dx
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _al = (~_al);                               //not al
    memory(_es, _di) &= _al;                    //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _al = (~_al);                               //not al
    memory(_es, _di) &= _al;                    //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ds = _pop();                               //pop ds
    _xchg(_si, _bp);                            //xchg si, bp
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_1EFD7
      goto loc_1EFD7;
    goto loc_1EFDA;                             //jmp short loc_1EFDA
loc_1EFD7:                                      //loc_1EFD7:
    goto loc_1EF4C;                             //jmp loc_1EF4C
loc_1EFDA:                                      //loc_1EFDA:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
loc_1EFDE:                                      //loc_1EFDE:
    _ax = _pop();                               //pop ax
}

void sub_1EFF0()
{
    memory(_ds, 0x8F52) = 0x00;                 //mov byte_31482, 0
    goto loc_1EFFC;                             //jmp short loc_1EFFC
loc_1EFF7:                                      //loc_1EFF7:
    memory(_ds, 0x8F52) = 0xff;                 //mov byte_31482, 0FFh
loc_1EFFC:                                      //loc_1EFFC:
    _bp = 0xb800;                               //mov bp, 0B800h
    _es = _bp;                                  //mov es, bp
loc_1F001:                                      //loc_1F001:
    if ((short)_dx > (short)0xfff0)             //jg short loc_1F012
      goto loc_1F012;
    _si += _ax;                                 //add si, ax
    _si += _ax;                                 //add si, ax
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1F001
      goto loc_1F001;
    goto loc_1F080;                             //jmp short loc_1F080
loc_1F012:                                      //loc_1F012:
    _di = _cx;                                  //mov di, cx
    _cx = _ax;                                  //mov cx, ax
    if ((short)_dx >= 0)                        //jns short loc_1F033
      goto loc_1F033;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1F01C:                                      //loc_1F01C:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _cx += _dx;                                 //add cx, dx
    sub_1F085();                                //call sub_1F085
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1F01C
      goto loc_1F01C;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx == 0)                               //jz short loc_1F080
      goto loc_1F080;
loc_1F033:                                      //loc_1F033:
    _ax = _dx;                                  //mov ax, dx
    _xchg(_di, _dx);                            //xchg di, dx
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di += _dx;                                 //add di, dx
    _dx = _ax;                                  //mov dx, ax
loc_1F041:                                      //loc_1F041:
    if ((short)_dx >= (short)0x00b1)            //jge short loc_1F068
      goto loc_1F068;
    _push(_dx);                                 //push dx
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1F04A:                                      //loc_1F04A:
    _push(_cx);                                 //push cx
    _cx = 0x0010;                               //mov cx, 10h
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1F085();                                //call sub_1F085
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1F04A
      goto loc_1F04A;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _dx = _pop();                               //pop dx
    _di += 0x0280;                              //add di, 280h
    _dx += 0x0010;                              //add dx, 10h
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_1F041
      goto loc_1F041;
    goto loc_1F080;                             //jmp short loc_1F080
loc_1F068:                                      //loc_1F068:
    _dx -= 0x00c0;                              //sub dx, 0C0h
    _dx = -_dx;                                 //neg dx
    if (_FIXME_)                                //jle short loc_1F080
      goto loc_1F080;
    _ax = _dx;                                  //mov ax, dx
loc_1F072:                                      //loc_1F072:
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
    sub_1F085();                                //call sub_1F085
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1F072
      goto loc_1F072;
loc_1F080:                                      //loc_1F080:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1F085()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_ax != 0)                               //jnz short loc_1F093
      goto loc_1F093;
    goto loc_1F286;                             //jmp loc_1F286
loc_1F093:                                      //loc_1F093:
    if (_flags.carry)                           //jb short loc_1F0E2
      goto loc_1F0E2;
    if (memory(_ds, 0x8F52) == 0x00)            //jz short loc_1F0B6
      goto loc_1F0B6;
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _ax = 0x7777;                               //mov ax, 7777h
loc_1F0A1:                                      //loc_1F0A1:
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_1F0AF
      goto loc_1F0AF;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_1F0AF:                                      //loc_1F0AF:
    if (--_cx)                                  //loop loc_1F0A1
      goto loc_1F0A1;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    goto loc_1F286;                             //jmp loc_1F286
loc_1F0B6:                                      //loc_1F0B6:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
loc_1F0CA:                                      //loc_1F0CA:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_1F0D8
      goto loc_1F0D8;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_1F0D8:                                      //loc_1F0D8:
    if (--_cx)                                  //loop loc_1F0CA
      goto loc_1F0CA;
    _ds = _pop();                               //pop ds
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1F286;                             //jmp loc_1F286
loc_1F0E2:                                      //loc_1F0E2:
    if (memory(_ds, 0x8F52) != 0x00)            //jnz short loc_1F0EC
      goto loc_1F0EC;
    goto loc_1F1FF;                             //jmp loc_1F1FF
loc_1F0EC:                                      //loc_1F0EC:
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _si = _ax;                                  //mov si, ax
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si += 0x5538;                              //add si, 5538h
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_1F0FA:                                      //loc_1F0FA:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F10B
      goto loc_1F10B;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F115
      goto loc_1F115;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F119;                             //jmp short loc_1F119
loc_1F10B:                                      //loc_1F10B:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F119
      goto loc_1F119;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F119;                             //jmp short loc_1F119
loc_1F115:                                      //loc_1F115:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F119:                                      //loc_1F119:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F128
      goto loc_1F128;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F132
      goto loc_1F132;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F136;                             //jmp short loc_1F136
loc_1F128:                                      //loc_1F128:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F136
      goto loc_1F136;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F136;                             //jmp short loc_1F136
loc_1F132:                                      //loc_1F132:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F136:                                      //loc_1F136:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F145
      goto loc_1F145;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F14F
      goto loc_1F14F;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F153;                             //jmp short loc_1F153
loc_1F145:                                      //loc_1F145:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F153
      goto loc_1F153;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F153;                             //jmp short loc_1F153
loc_1F14F:                                      //loc_1F14F:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F153:                                      //loc_1F153:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F162
      goto loc_1F162;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F16C
      goto loc_1F16C;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F170;                             //jmp short loc_1F170
loc_1F162:                                      //loc_1F162:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F170
      goto loc_1F170;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F170;                             //jmp short loc_1F170
loc_1F16C:                                      //loc_1F16C:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F170:                                      //loc_1F170:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F182
      goto loc_1F182;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F18C
      goto loc_1F18C;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F190;                             //jmp short loc_1F190
loc_1F182:                                      //loc_1F182:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F190
      goto loc_1F190;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F190;                             //jmp short loc_1F190
loc_1F18C:                                      //loc_1F18C:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F190:                                      //loc_1F190:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F19F
      goto loc_1F19F;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1A9
      goto loc_1F1A9;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F1AD;                             //jmp short loc_1F1AD
loc_1F19F:                                      //loc_1F19F:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1AD
      goto loc_1F1AD;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F1AD;                             //jmp short loc_1F1AD
loc_1F1A9:                                      //loc_1F1A9:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F1AD:                                      //loc_1F1AD:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1BC
      goto loc_1F1BC;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1C6
      goto loc_1F1C6;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F1CA;                             //jmp short loc_1F1CA
loc_1F1BC:                                      //loc_1F1BC:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1CA
      goto loc_1F1CA;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F1CA;                             //jmp short loc_1F1CA
loc_1F1C6:                                      //loc_1F1C6:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F1CA:                                      //loc_1F1CA:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1D9
      goto loc_1F1D9;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1E3
      goto loc_1F1E3;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_1F1E7;                             //jmp short loc_1F1E7
loc_1F1D9:                                      //loc_1F1D9:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1F1E7
      goto loc_1F1E7;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_1F1E7;                             //jmp short loc_1F1E7
loc_1F1E3:                                      //loc_1F1E3:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_1F1E7:                                      //loc_1F1E7:
    _flags.sign = (short)(_di + 0x1ff9) < 0;    //add di, 1FF9h
    _di += 0x1ff9;
    if (!_flags.sign)                           //jns short loc_1F1F1
      goto loc_1F1F1;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_1F1F1:                                      //loc_1F1F1:
    if (--_cx)                                  //loop loc_1F1F5
      goto loc_1F1F5;
    goto loc_1F1F8;                             //jmp short loc_1F1F8
loc_1F1F5:                                      //loc_1F1F5:
    goto loc_1F0FA;                             //jmp loc_1F0FA
loc_1F1F8:                                      //loc_1F1F8:
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    goto loc_1F286;                             //jmp loc_1F286
loc_1F1FF:                                      //loc_1F1FF:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _si = _ax;                                  //mov si, ax
    _dx <<= 1;                                  //shl dx, 1
    _si -= _dx;                                 //sub si, dx
    _bp = _si;                                  //mov bp, si
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _si += 0x5538;                              //add si, 5538h
loc_1F213:                                      //loc_1F213:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _push(_ds);                                 //push ds
    _dx = _seg009;                              //mov dx, seg seg009
    _xchg(_si, _bp);                            //xchg si, bp
    _ds = _dx;                                  //mov ds, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F226
      goto loc_1F226;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F226:                                      //loc_1F226:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F22F
      goto loc_1F22F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F22F:                                      //loc_1F22F:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F238
      goto loc_1F238;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F238:                                      //loc_1F238:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F241
      goto loc_1F241;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F241:                                      //loc_1F241:
    _di += 1;                                   //inc di
    _ds = _pop();                               //pop ds
    _xchg(_si, _bp);                            //xchg si, bp
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _push(_ds);                                 //push ds
    _xchg(_si, _bp);                            //xchg si, bp
    _dx = _seg009;                              //mov dx, seg seg009
    _ds = _dx;                                  //mov ds, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F258
      goto loc_1F258;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F258:                                      //loc_1F258:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F261
      goto loc_1F261;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F261:                                      //loc_1F261:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F26A
      goto loc_1F26A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F26A:                                      //loc_1F26A:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_1F273
      goto loc_1F273;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1F273:                                      //loc_1F273:
    _ds = _pop();                               //pop ds
    _xchg(_si, _bp);                            //xchg si, bp
    _flags.sign = (short)(_di + 0x1ff9) < 0;    //add di, 1FF9h
    _di += 0x1ff9;
    if (!_flags.sign)                           //jns short loc_1F280
      goto loc_1F280;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_1F280:                                      //loc_1F280:
    if (--_cx)                                  //loop loc_1F213
      goto loc_1F213;
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
loc_1F286:                                      //loc_1F286:
    _ax = _pop();                               //pop ax
}

void loc_1F290()
{
    sub_1F2D5();                                //call sub_1F2D5
    _ax = 0x000d;                               //mov ax, 0Dh
    _interrupt(16);                             //int 10h
    _ax = 0x1002;                               //mov ax, 1002h
    _dx = 0x425d;                               //mov dx, 425Dh
    _interrupt(16);                             //int 10h
    _ax = 0x1001;                               //mov ax, 1001h
    _bh = _bh ^ _bh;                            //xor bh, bh
    _interrupt(16);                             //int 10h
    _ax = 0x0040;                               //mov ax, 40h
    _es = _ax;                                  //mov es, ax
    _dx = memory16(_es, 0x63);                  //mov dx, es:63h
    memory16(_ds, 0x4257) = _dx;                //mov word_2C787, dx
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1F2BA()
{
    sub_1F2D5();                                //call sub_1F2D5
    _ax = 0x000d;                               //mov ax, 0Dh
    _interrupt(16);                             //int 10h
    _ax = 0x0040;                               //mov ax, 40h
    _es = _ax;                                  //mov es, ax
    _dx = memoryBiosGet16(_es, 0x63);                  //mov dx, es:63h
    memory16(_ds, 0x4257) = _dx;                //mov word_2C787, dx
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1F2D5()
{
    _di = 0x973e;                               //mov di, 973Eh
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x00c8;                               //mov cx, 0C8h
loc_1F2DD:                                      //loc_1F2DD:
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax += 0x0028;                              //add ax, 28h
    if (--_cx)                                  //loop loc_1F2DD
      goto loc_1F2DD;
}

void sub_1F2E4()
{
    _bx = _bx ^ _bx;                            //xor bx, bx
    _cx = 0x0010;                               //mov cx, 10h
loc_1F2E9:                                      //loc_1F2E9:
    _ax = 0x1000;                               //mov ax, 1000h
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _interrupt(16);                             //int 10h
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _bh = _bh ^ 0x18;                           //xor bh, 18h
    if (--_cx)                                  //loop loc_1F2E9
      goto loc_1F2E9;
    _ax = 0x1000;                               //mov ax, 1000h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _interrupt(16);                             //int 10h
}

void sub_1F2FF()
{
    _cx = 0x0010;                               //mov cx, 10h
    _dh = _dh ^ _dh;                            //xor dh, dh
loc_1F304:                                      //loc_1F304:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _cl = _dh;                                  //mov cl, dh
    _ch = _dh;                                  //mov ch, dh
    _ax = 0x1010;                               //mov ax, 1010h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _interrupt(16);                             //int 10h
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _dh = _dh ^ 0x3f;                           //xor dh, 3Fh
    if (--_cx)                                  //loop loc_1F304
      goto loc_1F304;
    _ax = 0x1010;                               //mov ax, 1010h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _cx = _cx ^ _cx;                            //xor cx, cx
    _dh = _dh ^ _dh;                            //xor dh, dh
    _interrupt(16);                             //int 10h
}

void sub_1F325()
{
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _di = 0x4000;                               //mov di, 4000h
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _si = _si ^ _si;                            //xor si, si
    sub_1F363();                                //call sub_1F363
    _ah = 0x02;                                 //mov ah, 2
    _si = 0x0002;                               //mov si, 2
    sub_1F363();                                //call sub_1F363
    _ah = 0x04;                                 //mov ah, 4
    _si = 0x0004;                               //mov si, 4
    sub_1F363();                                //call sub_1F363
    _ah = 0x08;                                 //mov ah, 8
    _si = 0x0006;                               //mov si, 6
    sub_1F363();                                //call sub_1F363
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_1F363()
{
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _cx = 0x1c90;                               //mov cx, 1C90h
loc_1F368:                                      //loc_1F368:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_1F368
      goto loc_1F368;
    _di = _pop();                               //pop di
}

void sub_1F371()
{
    _ax = 0x1002;                               //mov ax, 1002h
    _dx = 0x425d;                               //mov dx, 425Dh
    _interrupt(16);                             //int 10h
}

void sub_1F37A()
{
    _ax = 0x1002;                               //mov ax, 1002h
    _dx = 0x426d;                               //mov dx, 426Dh
    _interrupt(16);                             //int 10h
}

void sub_1F383()
{
    _ax = 0x1002;                               //mov ax, 1002h
    _dx = 0x425d;                               //mov dx, 425Dh
    _interrupt(16);                             //int 10h
}

void sub_1F38C()
{
    _push(_dx);                                 //push dx
    _ax = 0x1012;                               //mov ax, 1012h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _cx = 0x0010;                               //mov cx, 10h
    _interrupt(16);                             //int 10h
    _dx = _pop();                               //pop dx
    _ax = 0x1012;                               //mov ax, 1012h
    _dx += 0x0018;                              //add dx, 18h
    _bx = 0x0010;                               //mov bx, 10h
    _cx = 0x0008;                               //mov cx, 8
    _interrupt(16);                             //int 10h
}

void sub_1F3A7()
{
    _dx = 0x427d;                               //mov dx, 427Dh
    sub_1F38C();                                //call sub_1F38C
}

void sub_1F3AE()
{
    _dx = 0x427d;                               //mov dx, 427Dh
    sub_1F38C();                                //call sub_1F38C
}

void sub_1F3B5()
{
    _ax = 0x0030;                               //mov ax, 30h
    _ax = memory16(_ds, 0x991C) * _al;          //mul word_31E4C
    _dx = _ax;                                  //mov dx, ax
    _dx += 0x427d;                              //add dx, 427Dh
    sub_1F38C();                                //call sub_1F38C
}

void sub_1F3C7()
{
    WORD _cs = _seg001;

    _ax = 0x1000;                               //mov ax, 1000h
    _bl = 0x12;                                 //mov bl, 12h
    _bh = 0x00;                                 //mov bh, 0
    _interrupt(16);                             //int 10h
    memory(_cs, 0x136) = 0x01;                  //mov cs:byte_1F3C6, 1
}

void sub_1F3D7()
{
    WORD _cs = _seg001;

    if (memory(_cs, 0x136) == 0x00)             //jz short locret_1F3EE
      goto locret_1F3EE;
    memory(_cs, 0x136) = 0x00;                  //mov cs:byte_1F3C6, 0
    _ax = 0x1000;                               //mov ax, 1000h
    _bl = 0x12;                                 //mov bl, 12h
    _bh = 0x0f;                                 //mov bh, 0Fh
    _interrupt(16);                             //int 10h
locret_1F3EE:                                   //locret_1F3EE:
    return;
}

void sub_1F3EF()
{
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    sub_10ED5();                                //call sub_10ED5
    _push(_es);                                 //push es
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x1003;                               //mov ax, 1003h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0805;                               //mov ax, 805h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0010;                               //mov cx, 10h
    _ax = 0x0400;                               //mov ax, 400h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0808;                               //mov ax, 808h
    _out(_dx, _ax);                             //out dx, ax
    _bl = _al;                                  //mov bl, al
    _bp = memory16(_ds, 0x425B);                //mov bp, word_2C78B
loc_1F420:                                      //loc_1F420:
    _di = memory16(_ds, _si);                   //mov di, [si]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, _si + 2);         //add di, [si+2]
    _di += _bp;                                 //add di, bp
    if (!(memoryVideoGet(_es, _di) & _bl))      //jz short loc_1F435
      goto loc_1F435;
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
loc_1F435:                                      //loc_1F435:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_1F420
      goto loc_1F420;
    _cx = 0x0010;                               //mov cx, 10h
    _ax = 0x0500;                               //mov ax, 500h
    _out(_dx, _ax);                             //out dx, ax
loc_1F441:                                      //loc_1F441:
    _di = memory16(_ds, _si);                   //mov di, [si]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, _si + 2);         //add di, [si+2]
    _di += _bp;                                 //add di, bp
    if (!(memoryVideoGet(_es, _di) & _bl))      //jz short loc_1F456
      goto loc_1F456;
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
loc_1F456:                                      //loc_1F456:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_1F441
      goto loc_1F441;
    _cx = 0x0010;                               //mov cx, 10h
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
loc_1F462:                                      //loc_1F462:
    _di = memory16(_ds, _si);                   //mov di, [si]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, _si + 2);         //add di, [si+2]
    _di += _bp;                                 //add di, bp
    if (!(memoryVideoGet(_es, _di) & _bl))      //jz short loc_1F477
      goto loc_1F477;
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
loc_1F477:                                      //loc_1F477:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_1F462
      goto loc_1F462;
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0003;                               //mov ax, 3
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _es = _pop();                               //pop es
}

void sub_1F492()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0805;                               //mov ax, 805h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
loc_1F4A8:                                      //loc_1F4A8:
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax &= 0x7fff;                              //and ax, 7FFFh
    _ax -= 0x0200;                              //sub ax, 200h
    if ((short)_ax > (short)0x0200)             //jg short loc_1F4D2
      goto loc_1F4D2;
loc_1F4B6:                                      //loc_1F4B6:
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    sub_10ED9();                                //call sub_10ED9
    _ax &= 0x1fff;                              //and ax, 1FFFh
    if ((short)_ax <= (short)0x0200)            //jle short loc_1F4B6
      goto loc_1F4B6;
loc_1F4D2:                                      //loc_1F4D2:
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x00a0;                              //add ax, 0A0h
    if (_ax >= 0x0140)                          //jnb short loc_1F4B6
      goto loc_1F4B6;
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x0064;                              //add ax, 64h
    if (_ax >= 0x00c8)                          //jnb short loc_1F4B6
      goto loc_1F4B6;
    _di = 0x0028;                               //mov di, 28h
    _ax = _di * _al;                            //mul di
    _di = _ax;                                  //mov di, ax
    _di = _di + memory16(_ds, 0x425B);          //add di, word_2C78B
    _push(_cx);                                 //push cx
    _cx = _bx;                                  //mov cx, bx
    _cx &= 0x0007;                              //and cx, 7
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _di += _bx;                                 //add di, bx
    _ah = 0x80;                                 //mov ah, 80h
    _ah >>= _cl;                                //shr ah, cl
    _cx = _pop();                               //pop cx
    if (!(memoryVideoGet(_es, _di) & _ah))      //jz short loc_1F555
      goto loc_1F555;
    _al = 0x08;                                 //mov al, 8
    _dx = 0x03ce;                               //mov dx, 3CEh
    _out(_dx, _ax);                             //out dx, ax
    _bx = memory16(_ds, _si + 4);               //mov bx, [si+4]
    _xchg(_bh, _bl);                            //xchg bh, bl
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx &= 0x0007;                              //and bx, 7
    _ah = memory(_ds, _bx + 14141);             //mov ah, [bx+373Dh]
    _al = _al ^ _al;                            //xor al, al
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    goto loc_1F55A;                             //jmp short loc_1F55A
loc_1F555:                                      //loc_1F555:
    memory16(_ds, _si + 4) |= 0x8000;           //or word ptr [si+4], 8000h
loc_1F55A:                                      //loc_1F55A:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_1F561
      goto loc_1F561;
    goto loc_1F564;                             //jmp short loc_1F564
loc_1F561:                                      //loc_1F561:
    goto loc_1F4A8;                             //jmp loc_1F4A8
loc_1F564:                                      //loc_1F564:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_1F57C()
{
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
//    _STOP_("sp-trace-fail");                    //sub_1F57C endp_failed
//    _STOP_("continues");                        //sub_1F585 proc far
    sub_1F585();
}

void sub_1F585()
{
    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_1F592
      goto loc_1F592;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_1F592:                                      //loc_1F592:
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_1F5AE
      goto loc_1F5AE;
    goto loc_1FE9B;                   //jmp loc_1FE9B
loc_1F5AE:                                      //loc_1F5AE:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_1F5B8
      goto loc_1F5B8;
    goto loc_1FE9B;                   //jmp loc_1FE9B
loc_1F5B8:                                      //loc_1F5B8:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_1F5C1
      goto loc_1F5C1;
    goto loc_1FE9B;                   //jmp loc_1FE9B
loc_1F5C1:                                      //loc_1F5C1:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_1F5CA
      goto loc_1F5CA;
    goto loc_1FE9B;                   //jmp loc_1FE9B
loc_1F5CA:                                      //loc_1F5CA:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    memory16(_ds, 0x2) = 0x0000;                //mov word ptr ds:2, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_1F5E7
      goto loc_1F5E7;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
    memory16(_ds, 0x2) = _ax;                   //mov ds:2, ax
loc_1F5E7:                                      //loc_1F5E7:
    if ((short)_dx >= 0)                        //jns short loc_1F5F9
      goto loc_1F5F9;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    memory16(_ds, 0x0) = _dx;                   //mov word ptr unk_54890, dx
    memory16(_ds, 0x2) = _dx;                   //mov ds:2, dx
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_1F5F9:                                      //loc_1F5F9:
    if ((short)_bp <= (short)0x0008)            //jle short loc_1F63F
      goto loc_1F63F;
    _ax = memory16(_ds, 0x0);                   //mov ax, word ptr unk_54890
    _ax = _ax | memory16(_ds, 0x2);             //or ax, ds:2
    if (_ax == 0)                               //jz short loc_1F63F
      goto loc_1F63F;
    if ((short)_bp > (short)0x0010)             //jg short loc_1F616
      goto loc_1F616;
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
    goto loc_1F63F;                             //jmp short loc_1F63F
loc_1F616:                                      //loc_1F616:
    if ((short)_bp > (short)0x0018)             //jg short loc_1F62F
      goto loc_1F62F;
    _ax = memory16(_ds, 0x0);                   //mov ax, word ptr unk_54890
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x0) += _ax;                  //add word ptr unk_54890, ax
    _ax = memory16(_ds, 0x2);                   //mov ax, ds:2
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x2) += _ax;                  //add ds:2, ax
    goto loc_1F63F;                             //jmp short loc_1F63F
loc_1F62F:                                      //loc_1F62F:
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
loc_1F63F:                                      //loc_1F63F:
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _di += _ax;                                 //add di, ax
    if ((short)_cx >= 0)                        //jns short loc_1F64D
      goto loc_1F64D;
{loc_1FA46(); return; };                        //
loc_1F64D:                                      //loc_1F64D:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax <= (short)0x0140)            //jle short loc_1F659
      goto loc_1F659;
{loc_1FC5C(); return; };                        //
loc_1F659:                                      //loc_1F659:
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _ch = _ch ^ _ch;                            //xor ch, ch
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_1F687
      goto loc_1F687;
{loc_1F997(); return; };                        //
loc_1F687:                                      //loc_1F687:
    if ((short)_bp > (short)0x0010)             //jg short loc_1F68F
      goto loc_1F68F;
{loc_1F8C1(); return; };                        //
loc_1F68F:                                      //loc_1F68F:
    if ((short)_bp > (short)0x0018)             //jg short loc_1F697
      goto loc_1F697;
{loc_1F7C0(); return; };                        //
loc_1F697:                                      //loc_1F697:
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp > (short)0x0020)             //jg short loc_1F6A1
      goto loc_1F6A1;
{loc_1F73C(); return; };                        //
loc_1F6A1:                                      //loc_1F6A1:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _al = _al ^ _al;                            //xor al, al
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 4, _al);           //or es:[di+4], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F6A1
      goto loc_1F6A1;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F6F8();                                //call sub_1F6F8
    _ah = 0x02;                                 //mov ah, 2
    sub_1F6F8();                                //call sub_1F6F8
    _ah = 0x04;                                 //mov ah, 4
    sub_1F6F8();                                //call sub_1F6F8
    _ah = 0x08;                                 //mov ah, 8
    sub_1F6F8();                                //call sub_1F6F8
{loc_1FE85(); return; };                        //
    
loc_1FE9B:                                      //loc_1FE9B:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax

}

void sub_1F6F8()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1F708:                                      //loc_1F708:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 3, _ah);          //and es:[di+3], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 4, _ah);          //and es:[di+4], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F708
      goto loc_1F708;
    _di = _pop();                               //pop di
}

void loc_1F73C()
{
loc_1F73C:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F73C
      goto loc_1F73C;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F787();                                //call sub_1F787
    _ah = 0x02;                                 //mov ah, 2
    sub_1F787();                                //call sub_1F787
    _ah = 0x04;                                 //mov ah, 4
    sub_1F787();                                //call sub_1F787
    _ah = 0x08;                                 //mov ah, 8
    sub_1F787();                                //call sub_1F787
{loc_1FE85(); return; };                        //
}

void sub_1F787()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1F797:                                      //loc_1F797:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 3, _ah);          //and es:[di+3], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F797
      goto loc_1F797;
    _di = _pop();                               //pop di
}

void loc_1F7C0()
{
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp > (short)0x0018)             //jg short loc_1F7CA
      goto loc_1F7CA;
{loc_1F851(); return; };                        //
loc_1F7CA:                                      //loc_1F7CA:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _al = _al ^ _al;                            //xor al, al
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F7CA
      goto loc_1F7CA;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F816();                                //call sub_1F816
    _ah = 0x02;                                 //mov ah, 2
    sub_1F816();                                //call sub_1F816
    _ah = 0x04;                                 //mov ah, 4
    sub_1F816();                                //call sub_1F816
    _ah = 0x08;                                 //mov ah, 8
    sub_1F816();                                //call sub_1F816
{loc_1FE85(); return; };                        //
}

void sub_1F816()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1F826:                                      //loc_1F826:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 3, _ah);          //and es:[di+3], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F826
      goto loc_1F826;
    _di = _pop();                               //pop di
}

void loc_1F851()
{
loc_1F851:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F851
      goto loc_1F851;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F891();                                //call sub_1F891
    _ah = 0x02;                                 //mov ah, 2
    sub_1F891();                                //call sub_1F891
    _ah = 0x04;                                 //mov ah, 4
    sub_1F891();                                //call sub_1F891
    _ah = 0x08;                                 //mov ah, 8
    sub_1F891();                                //call sub_1F891
{loc_1FE85(); return; };                        //
}

void sub_1F891()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1F8A1:                                      //loc_1F8A1:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F8A1
      goto loc_1F8A1;
    _di = _pop();                               //pop di
}

void loc_1F8C1()
{
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0010)            //jle short loc_1F93B
    {
      loc_1F93B();
        return;
    }
loc_1F8C8:                                      //loc_1F8C8:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _al = _al ^ _al;                            //xor al, al
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F8C8
      goto loc_1F8C8;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F909();                                //call sub_1F909
    _ah = 0x02;                                 //mov ah, 2
    sub_1F909();                                //call sub_1F909
    _ah = 0x04;                                 //mov ah, 4
    sub_1F909();                                //call sub_1F909
    _ah = 0x08;                                 //mov ah, 8
    sub_1F909();                                //call sub_1F909
{loc_1FE85(); return; };                        //
}

void sub_1F909()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1F919:                                      //loc_1F919:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F919
      goto loc_1F919;
    _di = _pop();                               //pop di
}

void loc_1F93B()
{
loc_1F93B:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F93B
      goto loc_1F93B;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F970();                                //call sub_1F970
    _ah = 0x02;                                 //mov ah, 2
    sub_1F970();                                //call sub_1F970
    _ah = 0x04;                                 //mov ah, 4
    sub_1F970();                                //call sub_1F970
    _ah = 0x08;                                 //mov ah, 8
    sub_1F970();                                //call sub_1F970
{loc_1FE85(); return; };                        //
}

void sub_1F970()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1F980:                                      //loc_1F980:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F980
      goto loc_1F980;
    _di = _pop();                               //pop di
}

void loc_1F997()
{
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0008)            //jle short loc_1F9FD
    {
      loc_1F9FD();
        return;
    }
loc_1F99E:                                      //loc_1F99E:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _al = _al ^ _al;                            //xor al, al
    _ror(_ax, _cl);                             //ror ax, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F99E
      goto loc_1F99E;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1F9D4();                                //call sub_1F9D4
    _ah = 0x02;                                 //mov ah, 2
    sub_1F9D4();                                //call sub_1F9D4
    _ah = 0x04;                                 //mov ah, 4
    sub_1F9D4();                                //call sub_1F9D4
    _ah = 0x08;                                 //mov ah, 8
    sub_1F9D4();                                //call sub_1F9D4
{loc_1FE85(); return; };                        //
}

void sub_1F9D4()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1F9E4:                                      //loc_1F9E4:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F9E4
      goto loc_1F9E4;
    _di = _pop();                               //pop di
}

void loc_1F9FD()
{
loc_1F9FD:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1F9FD
      goto loc_1F9FD;
    _di = _pop();                               //pop di
    _dx -= 1;                                   //dec dx
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FA27();                                //call sub_1FA27
    _ah = 0x02;                                 //mov ah, 2
    sub_1FA27();                                //call sub_1FA27
    _ah = 0x04;                                 //mov ah, 4
    sub_1FA27();                                //call sub_1FA27
    _ah = 0x08;                                 //mov ah, 8
    sub_1FA27();                                //call sub_1FA27
{loc_1FE85(); return; };                        //
}

void sub_1FA27()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1FA37:                                      //loc_1FA37:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FA37
      goto loc_1FA37;
    _di = _pop();                               //pop di
}

void loc_1FA46()
{
    _dx = _cx;                                  //mov dx, cx
    _dx = -_dx;                                 //neg dx
    _dx -= 1;                                   //dec dx
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _bp -= _dx;                                 //sub bp, dx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    memory16(_ds, 0x4) = _dx;                   //mov ds:4, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _ch = 0x08;                                 //mov ch, 8
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_1FA7A
      goto loc_1FA7A;
{loc_1FC06(); return; };                        //
loc_1FA7A:                                      //loc_1FA7A:
    if ((short)_bp > (short)0x0010)             //jg short loc_1FA82
      goto loc_1FA82;
{loc_1FB9B(); return; };                        //
loc_1FA82:                                      //loc_1FA82:
    if ((short)_bp > (short)0x0018)             //jg short loc_1FA8A
      goto loc_1FA8A;
{loc_1FB1B(); return; };                        //
loc_1FA8A:                                      //loc_1FA8A:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);                    //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);                //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);                //or es:[di+2], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);                //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FA8A
      goto loc_1FA8A;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FADB();                                //call sub_1FADB
    _ah = 0x02;                                 //mov ah, 2
    sub_1FADB();                                //call sub_1FADB
    _ah = 0x04;                                 //mov ah, 4
    sub_1FADB();                                //call sub_1FADB
    _ah = 0x08;                                 //mov ah, 8
    sub_1FADB();                                //call sub_1FADB
{loc_1FE85(); return; };                        //
}

void sub_1FADB()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1FAEB:                                      //loc_1FAEB:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di, _ah);                    //and es:[di], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);                //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);                //and es:[di+2], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 3, _ah);                //and es:[di+3], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FAEB
      goto loc_1FAEB;
    _di = _pop();                               //pop di
}

void loc_1FB1B()
{
loc_1FB1B:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);                    //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);                //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);                //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FB1B
      goto loc_1FB1B;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FB64();                                //call sub_1FB64
    _ah = 0x02;                                 //mov ah, 2
    sub_1FB64();                                //call sub_1FB64
    _ah = 0x04;                                 //mov ah, 4
    sub_1FB64();                                //call sub_1FB64
    _ah = 0x08;                                 //mov ah, 8
    sub_1FB64();                                //call sub_1FB64
{loc_1FE85(); return; };                        //
}

void sub_1FB64()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FB74:                                      //loc_1FB74:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di, _ah);                    //and es:[di], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);                //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);                //and es:[di+2], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FB74
      goto loc_1FB74;
    _di = _pop();                               //pop di
}

void loc_1FB9B()
{
loc_1FB9B:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FB9B
      goto loc_1FB9B;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FBD8();                                //call sub_1FBD8
    _ah = 0x02;                                 //mov ah, 2
    sub_1FBD8();                                //call sub_1FBD8
    _ah = 0x04;                                 //mov ah, 4
    sub_1FBD8();                                //call sub_1FBD8
    _ah = 0x08;                                 //mov ah, 8
    sub_1FBD8();                                //call sub_1FBD8
{loc_1FE85(); return; };                        //
}

void sub_1FBD8()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FBE8:                                      //loc_1FBE8:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di, _ah);              //and es:[di], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FBE8
      goto loc_1FBE8;
    _di = _pop();                               //pop di
}

void loc_1FC06()
{
loc_1FC06:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FC06
      goto loc_1FC06;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FC37();                                //call sub_1FC37
    _ah = 0x02;                                 //mov ah, 2
    sub_1FC37();                                //call sub_1FC37
    _ah = 0x04;                                 //mov ah, 4
    sub_1FC37();                                //call sub_1FC37
    _ah = 0x08;                                 //mov ah, 8
    sub_1FC37();                                //call sub_1FC37
{loc_1FE85(); return; };                        //
}

void sub_1FC37()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FC47:                                      //loc_1FC47:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di, _ah);              //and es:[di], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FC47
      goto loc_1FC47;
    _di = _pop();                               //pop di
}

void loc_1FC5C()
{
    _dx = _bp;                                  //mov dx, bp
    _bp = 0x0140;                               //mov bp, 140h
    _bp -= _cx;                                 //sub bp, cx
    _ax = _bp;                                  //mov ax, bp
    _ax += 0x0007;                              //add ax, 7
    _dx += 0x0007;                              //add dx, 7
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _ax &= 0xfff8;                              //and ax, 0FFF8h
    _dx -= _ax;                                 //sub dx, ax
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    memory16(_ds, 0x4) = _dx;                   //mov ds:4, dx
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _ch = 0x08;                                 //mov ch, 8
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_1FCA7
      goto loc_1FCA7;
{loc_1FE1D(); return; };                        //
loc_1FCA7:                                      //loc_1FCA7:
    if ((short)_bp > (short)0x0010)             //jg short loc_1FCAF
      goto loc_1FCAF;
{loc_1FDB8(); return; };                        //
loc_1FCAF:                                      //loc_1FCAF:
    if ((short)_bp > (short)0x0018)             //jg short loc_1FCB7
      goto loc_1FCB7;
{loc_1FD3E(); return; };                        //
loc_1FCB7:                                      //loc_1FCB7:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FCB7
      goto loc_1FCB7;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FD05();                                //call sub_1FD05
    _ah = 0x02;                                 //mov ah, 2
    sub_1FD05();                                //call sub_1FD05
    _ah = 0x04;                                 //mov ah, 4
    sub_1FD05();                                //call sub_1FD05
    _ah = 0x08;                                 //mov ah, 8
    sub_1FD05();                                //call sub_1FD05
{loc_1FE85(); return; };                        //
}

void sub_1FD05()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _bl = _bh;                                  //mov bl, bh
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
loc_1FD15:                                      //loc_1FD15:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 3, _ah);          //and es:[di+3], ah
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FD15
      goto loc_1FD15;
    _di = _pop();                               //pop di
}

void loc_1FD3E()
{
loc_1FD3E:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FD3E
      goto loc_1FD3E;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FD84();                                //call sub_1FD84
    _ah = 0x02;                                 //mov ah, 2
    sub_1FD84();                                //call sub_1FD84
    _ah = 0x04;                                 //mov ah, 4
    sub_1FD84();                                //call sub_1FD84
    _ah = 0x08;                                 //mov ah, 8
    sub_1FD84();                                //call sub_1FD84
{loc_1FE85(); return; };                        //
}

void sub_1FD84()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FD94:                                      //loc_1FD94:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 2, _ah);          //and es:[di+2], ah
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FD94
      goto loc_1FD94;
    _di = _pop();                               //pop di
}

void loc_1FDB8()
{
loc_1FDB8:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FDB8
      goto loc_1FDB8;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FDF2();                                //call sub_1FDF2
    _ah = 0x02;                                 //mov ah, 2
    sub_1FDF2();                                //call sub_1FDF2
    _ah = 0x04;                                 //mov ah, 4
    sub_1FDF2();                                //call sub_1FDF2
    _ah = 0x08;                                 //mov ah, 8
    sub_1FDF2();                                //call sub_1FDF2
{loc_1FE85(); return; };                        //
}

void sub_1FDF2()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FE02:                                      //loc_1FE02:
    _al = memory(_ds, _si);                     //mov al, [si]
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    memoryVideoAnd(_es, _di + 1, _ah);          //and es:[di+1], ah
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FE02
      goto loc_1FE02;
    _di = _pop();                               //pop di
}

void loc_1FE1D()
{
loc_1FE1D:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FE1D
      goto loc_1FE1D;
    _di = _pop();                               //pop di
    sub_1FE70();                                //call sub_1FE70
    _ah = 0x01;                                 //mov ah, 1
    sub_1FE4D();                                //call sub_1FE4D
    _ah = 0x02;                                 //mov ah, 2
    sub_1FE4D();                                //call sub_1FE4D
    _ah = 0x04;                                 //mov ah, 4
    sub_1FE4D();                                //call sub_1FE4D
    _ah = 0x08;                                 //mov ah, 8
    sub_1FE4D();                                //call sub_1FE4D
{loc_1FE85(); return; };                        //
}

void sub_1FE4D()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_di);                                 //push di
    _si = _si + memory16(_ds, 0x2);             //add si, ds:2
    _bl = _bh;                                  //mov bl, bh
loc_1FE5D:                                      //loc_1FE5D:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al >>= _cl;                                //shr al, cl
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_1FE5D
      goto loc_1FE5D;
    _di = _pop();                               //pop di
}

void sub_1FE70()
{
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x1003;                               //mov ax, 1003h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0805;                               //mov ax, 805h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0007;                               //mov ax, 7
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
}

void loc_1FE85()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0003;                               //mov ax, 3
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f07;                               //mov ax, 0F07h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
loc_1FE9B:                                      //loc_1FE9B:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_1FEA1()
{
    WORD _cs = _seg001;

    _push(_si);                                 //push si
    _push(_cs);                                 //push cs
    sub_1F57C();                                //call sub_1F57C
    _si = _pop();                               //pop si
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _di = memory16(_ds, _si + 12);              //mov di, [si+0Ch]
    _cx = _seg007;                              //mov cx, seg seg007
    if (!(_di & 0x0001))                        //jz short loc_1FEBD
      goto loc_1FEBD;
    _di -= 1;                                   //dec di
    _cx = _seg008;                              //mov cx, seg seg008
loc_1FEBD:                                      //loc_1FEBD:
    _push(_es);                                 //push es
    _es = _cx;                                  //mov es, cx
    _ax = _ax - memory16(_es, _di);             //sub ax, es:[di]
    _bx = _bx - memory16(_es, _di + 2);         //sub bx, es:[di+2]
    _es = _pop();                               //pop es
    sub_1FEDE();                                //call sub_1FEDE
    _ax += 0x0010;                              //add ax, 10h
    sub_1FEDE();                                //call sub_1FEDE
    _bx += 0x0010;                              //add bx, 10h
    sub_1FEDE();                                //call sub_1FEDE
    _ax -= 0x0010;                              //sub ax, 10h
    sub_1FEDE();                                //call sub_1FEDE
}

void sub_1FEDE()
{
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0xfff0;                              //and cx, 0FFF0h
    _cx >>= 1;                                  //shr cx, 1
    if (_cx >= 0x00a0)                          //jnb short loc_1FF3D
      goto loc_1FF3D;
    _dx = _bx;                                  //mov dx, bx
    _dx = _dx + memory16(_ds, 0x9196);          //add dx, word_316C6
    _dx &= 0xfff0;                              //and dx, 0FFF0h
    _dx = _dx - memory16(_ds, 0x9196);          //sub dx, word_316C6
    _bx = _bx + memory16(_ds, 0x9196);          //add bx, word_316C6
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax &= 0x00fe;                              //and ax, 0FEh
    _si += _ax;                                 //add si, ax
    _ax = 0x0028;                               //mov ax, 28h
    _push(_dx);                                 //push dx
    _ax = _bx * _al;                            //mul bx
    _dx = _pop();                               //pop dx
    _si += _ax;                                 //add si, ax
    _push(_es);                                 //push es
    _ax = _seg000;                              //mov ax, seg seg000
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, 0xEDD1) = _ax;                //mov es:word_1EDD1, ax
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
    _bx = 0x0001;                               //mov bx, 1
    _si = 0xedd1;                               //mov si, 0EDD1h
    sub_1EBD0();                                //call sub_1EBD0
loc_1FF3D:                                      //loc_1FF3D:
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
}

void sub_1FF41()
{
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
loc_1FF46:                                      //loc_1FF46:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
loc_1FF4F:                                      //loc_1FF4F:
    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_1FF5C
      goto loc_1FF5C;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_1FF5C:                                      //loc_1FF5C:
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_1FF78
      goto loc_1FF78;
    goto loc_203D4;                             //jmp loc_203D4
loc_1FF78:                                      //loc_1FF78:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_1FF82
      goto loc_1FF82;
    goto loc_203D4;                             //jmp loc_203D4
loc_1FF82:                                      //loc_1FF82:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_1FF8B
      goto loc_1FF8B;
    goto loc_203D4;                             //jmp loc_203D4
loc_1FF8B:                                      //loc_1FF8B:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_1FF94
      goto loc_1FF94;
    goto loc_203D4;                             //jmp loc_203D4
loc_1FF94:                                      //loc_1FF94:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    memory16(_ds, 0x2) = 0x0000;                //mov word ptr ds:2, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_1FFB1
      goto loc_1FFB1;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
    memory16(_ds, 0x2) = _ax;                   //mov ds:2, ax
loc_1FFB1:                                      //loc_1FFB1:
    if ((short)_dx >= 0)                        //jns short loc_1FFC3
      goto loc_1FFC3;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    memory16(_ds, 0x0) = _dx;                   //mov word ptr unk_54890, dx
    memory16(_ds, 0x2) = _dx;                   //mov ds:2, dx
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_1FFC3:                                      //loc_1FFC3:
    if ((short)_bp <= (short)0x0008)            //jle short loc_20009
      goto loc_20009;
    _ax = memory16(_ds, 0x0);                   //mov ax, word ptr unk_54890
    _ax = _ax | memory16(_ds, 0x2);             //or ax, ds:2
    if (_ax == 0)                               //jz short loc_20009
      goto loc_20009;
    if ((short)_bp > (short)0x0010)             //jg short loc_1FFE0
      goto loc_1FFE0;
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
    goto loc_20009;                             //jmp short loc_20009
loc_1FFE0:                                      //loc_1FFE0:
    if ((short)_bp > (short)0x0018)             //jg short loc_1FFF9
      goto loc_1FFF9;
    _ax = memory16(_ds, 0x0);                   //mov ax, word ptr unk_54890
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x0) += _ax;                  //add word ptr unk_54890, ax
    _ax = memory16(_ds, 0x2);                   //mov ax, ds:2
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x2) += _ax;                  //add ds:2, ax
    goto loc_20009;                             //jmp short loc_20009
loc_1FFF9:                                      //loc_1FFF9:
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x0) <<= 1;                   //shl word ptr unk_54890, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
    memory16(_ds, 0x2) <<= 1;                   //shl word ptr ds:2, 1
loc_20009:                                      //loc_20009:
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _di += _ax;                                 //add di, ax
    if ((short)_cx >= 0)                        //jns short loc_20017
      goto loc_20017;
    goto loc_201E0;                             //jmp loc_201E0
loc_20017:                                      //loc_20017:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax <= (short)0x0140)            //jle short loc_20023
      goto loc_20023;
    goto loc_202CE;                             //jmp loc_202CE
loc_20023:                                      //loc_20023:
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _ch = 0x08;                                 //mov ch, 8
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_20051
      goto loc_20051;
    goto loc_201A2;                             //jmp loc_201A2
loc_20051:                                      //loc_20051:
    if ((short)_bp > (short)0x0010)             //jg short loc_20059
      goto loc_20059;
    goto loc_2014F;                             //jmp loc_2014F
loc_20059:                                      //loc_20059:
    if ((short)_bp > (short)0x0018)             //jg short loc_20061
      goto loc_20061;
    goto loc_200E4;                             //jmp loc_200E4
loc_20061:                                      //loc_20061:
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0020)            //jle short loc_200AD
      goto loc_200AD;
loc_20068:                                      //loc_20068:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 4, _al);           //or es:[di+4], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20068
      goto loc_20068;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_200AD:                                      //loc_200AD:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_200AD
      goto loc_200AD;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_200E4:                                      //loc_200E4:
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0018)            //jle short loc_20124
      goto loc_20124;
loc_200EB:                                      //loc_200EB:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_200EB
      goto loc_200EB;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_20124:                                      //loc_20124:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20124
      goto loc_20124;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_2014F:                                      //loc_2014F:
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0010)            //jle short loc_20183
      goto loc_20183;
loc_20156:                                      //loc_20156:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20156
      goto loc_20156;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_20183:                                      //loc_20183:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20183
      goto loc_20183;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_201A2:                                      //loc_201A2:
    _bp += _cx;                                 //add bp, cx
    if ((short)_bp <= (short)0x0008)            //jle short loc_201CA
      goto loc_201CA;
loc_201A9:                                      //loc_201A9:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_201A9
      goto loc_201A9;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_201CA:                                      //loc_201CA:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_201CA
      goto loc_201CA;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_201E0:                                      //loc_201E0:
    _dx = _cx;                                  //mov dx, cx
    _dx = -_dx;                                 //neg dx
    _dx -= 1;                                   //dec dx
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _bp -= _dx;                                 //sub bp, dx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    memory16(_ds, 0x4) = _dx;                   //mov ds:4, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _ch = 0x08;                                 //mov ch, 8
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_20218
      goto loc_20218;
    goto loc_202B4;                             //jmp loc_202B4
loc_20218:                                      //loc_20218:
    if ((short)_bp <= (short)0x0010)            //jle short loc_2028E
      goto loc_2028E;
    if ((short)_bp <= (short)0x0018)            //jle short loc_2025C
      goto loc_2025C;
loc_20222:                                      //loc_20222:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20222
      goto loc_20222;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_2025C:                                      //loc_2025C:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_2025C
      goto loc_2025C;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_2028E:                                      //loc_2028E:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_2028E
      goto loc_2028E;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_202B4:                                      //loc_202B4:
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_202B4
      goto loc_202B4;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp loc_203C6
loc_202CE:                                      //loc_202CE:
    _dx = _bp;                                  //mov dx, bp
    _bp = 0x0140;                               //mov bp, 140h
    _bp -= _cx;                                 //sub bp, cx
    _ax = _bp;                                  //mov ax, bp
    _ax += 0x0007;                              //add ax, 7
    _dx += 0x0007;                              //add dx, 7
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _ax &= 0xfff8;                              //and ax, 0FFF8h
    _dx -= _ax;                                 //sub dx, ax
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    memory16(_ds, 0x4) = _dx;                   //mov ds:4, dx
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0007;                              //and cx, 7
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _push(_di);                                 //push di
    _bh = _bl;                                  //mov bh, bl
    _ch = 0x08;                                 //mov ch, 8
    _si = _si + memory16(_ds, 0x0);             //add si, word ptr unk_54890
    if ((short)_bp > (short)0x0008)             //jg short loc_2031D
      goto loc_2031D;
    goto loc_203AD;                             //jmp loc_203AD
loc_2031D:                                      //loc_2031D:
    if ((short)_bp <= (short)0x0010)            //jle short loc_2038B
      goto loc_2038B;
    if ((short)_bp <= (short)0x0018)            //jle short loc_2035D
      goto loc_2035D;
loc_20327:                                      //loc_20327:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 3, _al);           //or es:[di+3], al
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_20327
      goto loc_20327;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp short loc_203C6
loc_2035D:                                      //loc_2035D:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 2, _al);           //or es:[di+2], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_2035D
      goto loc_2035D;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp short loc_203C6
loc_2038B:                                      //loc_2038B:
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ror(_ax, _cl);                             //ror ax, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_2038B
      goto loc_2038B;
    _di = _pop();                               //pop di
    goto loc_203C6;                             //jmp short loc_203C6
loc_203AD:                                      //loc_203AD:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _ah >>= _cl;                                //shr ah, cl
    _al = _ch;                                  //mov al, ch
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _si = _si + memory16(_ds, 0x4);             //add si, ds:4
    _di += 0x0028;                              //add di, 28h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_203AD
      goto loc_203AD;
    _di = _pop();                               //pop di
    _STOP_("goto $+2");                         //jmp short $+2
loc_203C6:                                      //loc_203C6:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _al -= 1;                                   //dec al
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
loc_203D4:                                      //loc_203D4:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_203DA() // draw bullet
{
    _bx = memory16(_ds, _si + 18);              //mov bx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _bx = _bx - memory16(_ds, _si);             //sub bx, [si]
    if (_bx < 0x0140)                           //jb short loc_203EE
      goto loc_203EE;
    goto locret_20481;                          //jmp locret_20481
loc_203EE:                                      //loc_203EE:
    _dx = _dx - memory16(_ds, _si + 2);         //sub dx, [si+2]
    if ((short)_dx < (short)0x00c0)             //jl short loc_203FA
      goto loc_203FA;
    goto locret_20481;                          //jmp locret_20481
loc_203FA:                                      //loc_203FA:
    _cx = memory16(_ds, _si + 4);               //mov cx, [si+4]
    _ax = _bx;                                  //mov ax, bx
    _bx &= 0x0007;                              //and bx, 7
    _ax = _ax ^ _bx;                            //xor ax, bx
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + _si + 6);         //mov si, [bx+si+6]
    if ((short)_dx >= 0)                        //jns short loc_20417
      goto loc_20417;
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _cx += _dx;                                 //add cx, dx
    if ((short)_cx <= (short)0)                  //jle short locret_20481
      goto locret_20481;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_20417:                                      //loc_20417:
    _bx = _dx;                                  //mov bx, dx
    _bx += _cx;                                 //add bx, cx
    _bx -= 0x00c0;                              //sub bx, 0C0h
    if ((short)_bx <= 0)                                //jle short loc_20425
      goto loc_20425;
    _cx -= _bx;                                 //sub cx, bx
    if ((short)_cx <= 0)                                //jle short locret_20481
      goto locret_20481;
loc_20425:                                      //loc_20425:
    _bx = _ax;                                  //mov bx, ax
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += _ax;                                 //add di, ax
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _di += _bx;                                 //add di, bx
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    if ((short)_bx >= (short)0x0138)            //jge short loc_20466
      goto loc_20466;
loc_20454:                                      //loc_20454:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di + 1, _al);           //or es:[di+1], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_20454
      goto loc_20454;
    goto loc_20471;                             //jmp short loc_20471
loc_20466:                                      //loc_20466:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _out(_dx, _al);                             //out dx, al
    memoryVideoOr(_es, _di, _al);               //or es:[di], al
    _si += 1;                                   //inc si
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_20466
      goto loc_20466;
loc_20471:                                      //loc_20471:
    _dx -= 1;                                   //dec dx
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _al -= 1;                                   //dec al
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_20481:                                   //locret_20481:
    return;
}

void sub_20482()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0105;                               //mov ax, 105h
    _out(_dx, _ax);                             //out dx, ax
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _dx = memory16(_ds, 0x9196);                //mov dx, word_316C6
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _cx = 0x0010;                               //mov cx, 10h
    _cx -= _dx;                                 //sub cx, dx
    _bl = 0x14;                                 //mov bl, 14h
loc_204A4:                                      //loc_204A4:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _push(_ds);                                 //push ds
    _ax = 0xa400;                               //mov ax, 0A400h
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_204B6:                                      //loc_204B6:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += 0x0026;                              //add di, 26h
    if (--_cx)                                  //loop loc_204B6
      goto loc_204B6;
    _bp = _di;                                  //mov bp, di
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _di += 0x0002;                              //add di, 2
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_204A4
      goto loc_204A4;
    _di = _bp;                                  //mov di, bp
    _di -= 0x0026;                              //sub di, 26h
    _bx = 0x0b14;                               //mov bx, 0B14h
    _bp = 0x0026;                               //mov bp, 26h
loc_204D5:                                      //loc_204D5:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _cx = _ds;                                  //mov cx, ds
    _ax = 0xa400;                               //mov ax, 0A400h
    _ds = _ax;                                  //mov ds, ax
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    _di -= 0x027e;                              //sub di, 27Eh
    _ds = _cx;                                  //mov ds, cx
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_204D5
      goto loc_204D5;
    _bl = 0x14;                                 //mov bl, 14h
    _di += 0x0258;                              //add di, 258h
    _bh -= 1;                                   //dec bh
    if (_bh != 0)                               //jnz short loc_204D5
      goto loc_204D5;
    if (!(_dx & _dx))                           //jz short loc_2055C
      goto loc_2055C;
    _bl = 0x14;                                 //mov bl, 14h
loc_2053D:                                      //loc_2053D:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _push(_ds);                                 //push ds
    _ax = 0xa400;                               //mov ax, 0A400h
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _cx = _dx;                                  //mov cx, dx
loc_2054C:                                      //loc_2054C:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _di += _bp;                                 //add di, bp
    if (--_cx)                                  //loop loc_2054C
      goto loc_2054C;
    _di = _pop();                               //pop di
    _di += 0x0002;                              //add di, 2
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_2053D
      goto loc_2053D;
loc_2055C:                                      //loc_2055C:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_20568()
{
    sub_2058D();                                //call near ptr sub_2058D
    _ax = memory16(_ds, 0x425B);                //mov ax, word_2C78B
    _bx = memory16(_ds, 0x4259);                //mov bx, word_2C789
    memory16(_ds, 0x425B) = _bx;                //mov word_2C78B, bx
    memory16(_ds, 0x4259) = _ax;                //mov word_2C789, ax
    sub_2058D();                                //call near ptr sub_2058D
    _ax = memory16(_ds, 0x425B);                //mov ax, word_2C78B
    _bx = memory16(_ds, 0x4259);                //mov bx, word_2C789
    memory16(_ds, 0x425B) = _bx;                //mov word_2C78B, bx
    memory16(_ds, 0x4259) = _ax;                //mov word_2C789, ax
}

void sub_2058D() // clear
{
    _push(_es);                                 //push es
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _cx = 0x1f40;                               //mov cx, 1F40h
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _es = _pop();                               //pop es
}

void sub_205A9()
{
    sub_2058D();                                //call near ptr sub_2058D
}

void sub_205AE()
{
    sub_10EF1();                                //call sub_10EF1
loc_205B3:                                      //loc_205B3:
//    if (memory16(_ds, 0x3046) == 0x0000)        //jz short loc_205B3
//      goto loc_205B3;
    memory16(_ds, 0x3046) = 0x0000;             //mov word_2B576, 0
    _bx = memory16(_ds, 0x425B);                //mov bx, word_2C78B
    _ax = memory16(_ds, 0x4259);                //mov ax, word_2C789
    memory16(_ds, 0x425B) = _ax;                //mov word_2C78B, ax
    memory16(_ds, 0x4259) = _bx;                //mov word_2C789, bx
    _dx = memory16(_ds, 0x4257);                //mov dx, word_2C787
    _dl += 0x06;                                //add dl, 6
loc_205D5:                                      //loc_205D5:
    _in(_al, _dx);                              //in al, dx
    if (_al & 0x08)                             //jnz short loc_205D5
      goto loc_205D5;
    _dl -= 0x06;                                //sub dl, 6
    _flags.interrupt = false;                   //cli
    _ah = _bh;                                  //mov ah, bh
    _al = 0x0c;                                 //mov al, 0Ch
    _out(_dx, _ax);                             //out dx, ax
    _flags.interrupt = true;                    //sti
    _dl += 0x06;                                //add dl, 6
loc_205E7:                                      //loc_205E7:
    _in(_al, _dx);                              //in al, dx
    if (!(_al & 0x08))                          //jz short loc_205E7
      goto loc_205E7;
}

void sub_205ED()
{
    _push(_ds);                                 //push ds
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _si = 0x0000;                               //mov si, 0
    _di = memory16(_ds, 0x4259);                //mov di, word_2C789
    _di += 0x1e00;                              //add di, 1E00h
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0140;                               //mov cx, 140h
    sub_20627();                                //call sub_20627
    _ds = _pop();                               //pop ds
    _push(_ds);                                 //push ds
    _si = 0x0000;                               //mov si, 0
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x1e00;                              //add di, 1E00h
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0140;                               //mov cx, 140h
    sub_20627();                                //call sub_20627
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_20627()
{
    _dx = 0x03c4;                               //mov dx, 3C4h
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
}

void sub_20653()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _si = 0x9c80;                               //mov si, 9C80h
    _cx = 0x0050;                               //mov cx, 50h
loc_2066C:                                      //loc_2066C:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if ((short)_ax < 0)                         //js short loc_206EA
      goto loc_206EA;
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx = _ax;                                  //mov dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx += _ax;                                 //add bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx += _ax;                                 //add dx, ax
    if (_bx >= 0x013c)                          //jnb short loc_206E3
      goto loc_206E3;
    if (_dx >= 0x00bc)                          //jnb short loc_206E3
      goto loc_206E3;
    memory16(_ds, _si - 8) = _bx;               //mov [si-8], bx
    memory16(_ds, _si - 6) = _dx;               //mov [si-6], dx
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _ax = _bx;                                  //mov ax, bx
    _bx = _dx;                                  //mov bx, dx
    sub_10EDD();                                //call sub_10EDD
    if (_FIXME_)                                //jz short loc_206B3
      goto loc_206B3;
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_es, 0x3DA8);                //mov ax, es:word_2C2D8
    _push(_si);                                 //push si
    sub_10EE1();                                //call sub_10EE1
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _cx = _pop();                               //pop cx
    _sp += 0x0004;                              //add sp, 4
    goto loc_206E3;                             //jmp short loc_206E3
loc_206B3:                                      //loc_206B3:
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _ax = 0x0028;                               //mov ax, 28h
    _ax = _dx * _al;                            //mul dx
    _di += _ax;                                 //add di, ax
    _ax = _pop();                               //pop ax
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0x0007;                              //and cx, 7
    _ax = _ax ^ _cx;                            //xor ax, cx
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _al = 0xc0;                                 //mov al, 0C0h
    _al >>= _cl;                                //shr al, cl
    _cx = _pop();                               //pop cx
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    memory(_es, _di) &= _al;                    //and es:[di], al
    memory(_es, _di + 40) &= _al;               //and es:[di+28h], al
    goto loc_206ED;                             //jmp short loc_206ED
loc_206E3:                                      //loc_206E3:
    memory16(_ds, _si - 8) = 0xffff;            //mov word ptr [si-8], 0FFFFh
    goto loc_206ED;                             //jmp short loc_206ED
loc_206EA:                                      //loc_206EA:
    _si += 0x0006;                              //add si, 6
loc_206ED:                                      //loc_206ED:
    if (--_cx)                                  //loop loc_206F1
      goto loc_206F1;
    goto loc_206F4;                             //jmp short loc_206F4
loc_206F1:                                      //loc_206F1:
    goto loc_2066C;                             //jmp loc_2066C
loc_206F4:                                      //loc_206F4:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
}

void sub_20708()
{
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _push(_si);                                 //push si
    sub_20721();                                //call near ptr sub_20721
    _si = _pop();                               //pop si
}

void sub_20721()
{
    memory16(_ds, 0xFCE2) += 0x0004;            //add word_38212, 4
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0x32C0) = _ax;                //mov word_2B7F0, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    if ((short)memory16(_ds, 0xFCE2) > (short)0xfff0)//jg short loc_20756
      goto loc_20756;
    goto loc_20815;                             //jmp loc_20815
loc_20756:                                      //loc_20756:
    if ((short)memory16(_ds, 0xFCE2) < (short)0x0140)//jl short loc_20761
      goto loc_20761;
    goto loc_20815;                             //jmp loc_20815
loc_20761:                                      //loc_20761:
    if ((short)memory16(_ds, 0x32BE) < (short)0x0041)//jl short loc_2078B
      goto loc_2078B;
    _bx = memory16(_ds, 0xFCFE);                //mov bx, word_3822E
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 12994);           //mov si, [bx+32C2h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    _dx += 1;                                   //inc dx
    sub_1F585();                                //call near ptr sub_1F585
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0x32BC);                //mov ax, word_2B7EC
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
loc_2078B:                                      //loc_2078B:
    _ax = memory16(_ds, 0x32BE);                //mov ax, word_2B7EE
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    _si = 0x32c8;                               //mov si, 32C8h
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 13000);           //mov si, [bx+32C8h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    sub_1F585();                                //call near ptr sub_1F585
    if ((short)memory16(_ds, 0x32BC) < 0 /*CHECK*/)//js short loc_20815
      goto loc_20815;
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, 0x32BC) * _al;          //mul word_2B7EC
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _bp = _di;                                  //mov bp, di
    _di += _ax;                                 //add di, ax
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _di += _ax;                                 //add di, ax
    _dx = memory16(_ds, 0x32BA);                //mov dx, word_2B7EA
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _cx = memory16(_ds, 0x32BA);                //mov cx, word_2B7EA
    _cx &= 0x0007;                              //and cx, 7
    _ah = memory(_ds, _bx + 13246);             //mov ah, [bx+33BEh]
    _ah >>= _cl;                                //shr ah, cl
    sub_20829();                                //call sub_20829
    _di += 1;                                   //inc di
    _dx += 0x0008;                              //add dx, 8
    _ax = memory16(_ds, _bx + 13246);           //mov ax, [bx+33BEh]
    _ror(_ax, _cl);                             //ror ax, cl
    sub_20829();                                //call sub_20829
    _di += 1;                                   //inc di
    _dx += 0x0008;                              //add dx, 8
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al = memory(_ds, _bx + 13247);             //mov al, [bx+33BFh]
    _ror(_ax, _cl);                             //ror ax, cl
    sub_20829();                                //call sub_20829
loc_20815:                                      //loc_20815:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
}

void sub_20829()
{
    if (_dx >= 0x0140)                          //jnb short locret_20853
      goto locret_20853;
    if (!(_ah & _ah))                           //jz short locret_20853
      goto locret_20853;
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _push(_dx);                                 //push dx
    _al = 0x08;                                 //mov al, 8
    _dx = 0x03ce;                               //mov dx, 3CEh
    _out(_dx, _ax);                             //out dx, ax
    _cx = memory16(_ds, 0x32BE);                //mov cx, word_2B7EE
    if (_cx == 0)                               //jcxz short loc_2084F
      goto loc_2084F;
loc_20843:                                      //loc_20843:
    memory(_es, _di) &= _al;                    //and es:[di], al
    _di -= 0x0028;                              //sub di, 28h
    if ((short)_di < (short)_bp)                //jl short loc_2084F
      goto loc_2084F;
    if (--_cx)                                  //loop loc_20843
      goto loc_20843;
loc_2084F:                                      //loc_2084F:
    _dx = _pop();                               //pop dx
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
locret_20853:                                   //locret_20853:
    return;
}

void sub_20854()
{
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    _dx = memory16(_ds, 0x9154);                //mov dx, word_31684
    _flags.carry = _ax < memory16(_ds, 0x9156); //sub ax, word_31686
    _ax = _ax - memory16(_ds, 0x9156);
    _dx -= memory16(_ds, 0x9158) + _flags.carry;//sbb dx, word_31688
    if ((short)_ax < 0)                         //js short loc_208CF
      goto loc_208CF;
    if (_ax != 0)                               //jnz short loc_2086B
      goto loc_2086B;
    if (!(_ax & _ax))                           //jz short locret_208CE
      goto locret_208CE;
loc_2086B:                                      //loc_2086B:
    if (_dx & _dx)                              //jnz short loc_20879
      goto loc_20879;
    if ((short)_ax < (short)0x00c8)             //jl short loc_20894
      goto loc_20894;
    if ((short)_ax < (short)0x07d0)             //jl short loc_20887
      goto loc_20887;
loc_20879:                                      //loc_20879:
    _bx = 0x921f;                               //mov bx, 921Fh
    _di = 0x1e06;                               //mov di, 1E06h
    _flags.carry = (memory16(_ds, 0x9156) + 0x03e8) >= 0x10000;
    memory16(_ds, 0x9156) += 0x03e8;            //add word_31686, 3E8h
    goto loc_2089F;                             //jmp short loc_2089F
loc_20887:                                      //loc_20887:
    _bx = 0x9220;                               //mov bx, 9220h
    _di = 0x1e07;                               //mov di, 1E07h
    _flags.carry = (memory16(_ds, 0x9156) + 0x0064) >= 0x10000;
    memory16(_ds, 0x9156) += 0x0064;            //add word_31686, 64h
    goto loc_2089F;                             //jmp short loc_2089F
loc_20894:                                      //loc_20894:
    _bx = 0x9221;                               //mov bx, 9221h
    _di = 0x1e08;                               //mov di, 1E08h
    _flags.carry = (memory16(_ds, 0x9156) + 0x000a) >= 0x10000;
    memory16(_ds, 0x9156) += 0x000a;            //add word_31686, 0Ah
loc_2089F:                                      //loc_2089F:
    memory16(_ds, 0x9158) = memory16(_ds, 0x9158) + 0x0000 + _flags.carry;
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_208AE
      goto loc_208AE;
    _di += 0x001b;                              //add di, 1Bh
loc_208AE:                                      //loc_208AE:
    _si = 0x0500;                               //mov si, 500h
loc_208B1:                                      //loc_208B1:
    memory(_ds, _bx) += 1;                      //inc byte ptr [bx]
    if ((char)memory(_ds, _bx) < (char)0x0a)    //jl short loc_208BB
      goto loc_208BB;
    memory(_ds, _bx) = 0x00;                    //mov byte ptr [bx], 0
loc_208BB:                                      //loc_208BB:
    _al = memory(_ds, _bx);                     //mov al, [bx]
    sub_20919();                                //call near ptr sub_20919
    if (memory(_ds, _bx) != 0x00)               //jnz short locret_208CE
      goto locret_208CE;
    _di -= 1;                                   //dec di
    _bx -= 1;                                   //dec bx
    if ((short)_bx >= (short)0x921c)            //jge short loc_208B1
      goto loc_208B1;
locret_208CE:                                   //locret_208CE:
    return;                                     //retf
loc_208CF:                                      //loc_208CF:
    _ax = memory16(_ds, 0x9156);                //mov ax, word_31686
    memory16(_ds, 0x9152) = _ax;                //mov word_31682, ax
    _ax = memory16(_ds, 0x9158);                //mov ax, word_31688
    memory16(_ds, 0x9154) = _ax;                //mov word_31684, ax
}

void sub_208DC()
{
    _di = 0x1e03;                               //mov di, 1E03h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_208E9
      goto loc_208E9;
    _di = 0x1e1e;                               //mov di, 1E1Eh
loc_208E9:                                      //loc_208E9:
    _si = 0x0500;                               //mov si, 500h
    _cx = 0x0007;                               //mov cx, 7
loc_208EF:                                      //loc_208EF:
    _al = _al ^ _al;                            //xor al, al
    sub_20919();                                //call near ptr sub_20919
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_208EF
      goto loc_208EF;
}

void sub_208F9()
{
    _ax = memory16(_ds, 0x918A);                //mov ax, word_316BA
    if ((short)_ax <= (short)0x0009)            //jle short loc_20904
      goto loc_20904;
    _ax = 0x0009;                               //mov ax, 9
loc_20904:                                      //loc_20904:
    _si = 0x0640;                               //mov si, 640h
    _di = 0x1e39;                               //mov di, 1E39h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_20914
      goto loc_20914;
    _di = 0x1e3e;                               //mov di, 1E3Eh
loc_20914:                                      //loc_20914:
    sub_20919();                                //call near ptr sub_20919
}

void sub_20919()
{
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    sub_2095F();                                //call sub_2095F
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    sub_2095F();                                //call sub_2095F
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    sub_2095F();                                //call sub_2095F
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    sub_2095F();                                //call sub_2095F
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
}

void sub_2095F()
{
    _push(_di);                                 //push di
    _cx = 0x0008;                               //mov cx, 8
loc_20963:                                      //loc_20963:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    memoryVideoSet(_es, _di + 8192, _al);       //mov es:[di+2000h], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_20963
      goto loc_20963;
    _di = _pop();                               //pop di
}

void sub_20973()
{
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    sub_2098C();                                //call near ptr sub_2098C
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
    memory16(_ds, 0x425B) = memory16(_ds, 0x425B) ^ 0x2000;
    sub_2098C();                                //call near ptr sub_2098C
    memory16(_ds, 0x425B) = memory16(_ds, 0x425B) ^ 0x2000;
}

void sub_2098C()
{
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, 0x3752) * _al;          //mul word_2BC82
    _di = _ax;                                  //mov di, ax
    _push(memory16(_ds, _si + 20));             //push word ptr [si+14h]
    _push(_si);                                 //push si
    memory(_ds, _si + 20) = 0x00;               //mov byte ptr [si+14h], 0
    sub_20A2E();                                //call near ptr sub_20A2E
    _si = _pop();                               //pop si
    memory16(_ds, _si + 20) = _pop();           //pop word ptr [si+14h]
}

void sub_209A6()
{
    _di = 0x1af1;                               //mov di, 1AF1h
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    memory16(_ds, 0xFCE4) = _dx;                //mov word_38214, dx
    _bx = 0x3756;                               //mov bx, 3756h
    _si = 0x0500;                               //mov si, 500h
loc_209B6:                                      //loc_209B6:
    if (memory16(_ds, _bx) == 0x0000)           //jz short locret_209E8
      goto locret_209E8;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_209BD:                                      //loc_209BD:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    _flags.carry = memory16(_ds, 0xFCE2) < _ax;
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, 0xFCE4) -= _ax + _flags.carry;
    //_FIXME_;                                    //sbb word_38214, ax // boss
    if ((short)memory16(_ds, 0xFCE2) < 0)       //js short loc_209CF
      goto loc_209CF;
    _dx += 1;                                   //inc dx
    goto loc_209BD;                             //jmp short loc_209BD
loc_209CF:                                      //loc_209CF:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    _flags.carry = (memory16(_ds, 0xFCE2) + _ax) >= 0x10000;
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, 0xFCE4) = memory16(_ds, 0xFCE4) + _ax + _flags.carry;
    // boss
    _bx += 0x0004;                              //add bx, 4
    _al = _dl;                                  //mov al, dl
    sub_20919();                                //call near ptr sub_20919
    _di += 1;                                   //inc di
    goto loc_209B6;                             //jmp short loc_209B6
locret_209E8:                                   //locret_209E8:
    return;
}

void sub_209E9()
{
    sub_2058D();                                //call near ptr sub_2058D
    memory16(_ds, 0x3752) = 0x000c;             //mov word_2BC82, 0Ch
    _si = 0x352b;                               //mov si, 352Bh
    sub_20973();                                //call near ptr sub_20973
    _si = 0x358f;                               //mov si, 358Fh
    _di = 0x05f4;                               //mov di, 5F4h
    _cx = 0x000a;                               //mov cx, 0Ah
loc_20A03:                                      //loc_20A03:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    sub_20A1D();                                //call near ptr sub_20A1D
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _si += 0x000f;                              //add si, 0Fh
    _di += 0x0280;                              //add di, 280h
    if (--_cx)                                  //loop loc_20A03
      goto loc_20A03;
    sub_1F492();                                //call near ptr sub_1F492
    {__sync = true; sub_205AE(); __sync = false; return; };                        //jmp near ptr sub_205AE
}

void sub_20A1D()
{
    _push(memory16(_ds, _si + 15));             //push word ptr [si+0Fh]
    _push(_si);                                 //push si
    memory(_ds, _si + 15) = 0x00;               //mov byte ptr [si+0Fh], 0
    sub_20A3C();                                //call near ptr sub_20A3C
    _si = _pop();                               //pop si
    memory16(_ds, _si + 15) = _pop();           //pop word ptr [si+0Fh]
}

void sub_20A2E()
{
    _bp = 0x0780;                               //mov bp, 780h
    _cx = 0x0016;                               //mov cx, 16h
    sub_20A47();                                //call near ptr sub_20A47
}

void sub_20A39()
{
    _di = 0x1cd6;                               //mov di, 1CD6h
//    _STOP_("sp-trace-fail");                    //sub_20A39 endp_failed
//    _STOP_("continues");                        //sub_20A3C proc far
    sub_20A3C();
}

void sub_20A3C()
{
    _bp = 0x2300;                               //mov bp, 2300h
    _cx = 0x000e;                               //mov cx, 0Eh
    sub_20A47();                                //call near ptr sub_20A47
}

void sub_20A47()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short locret_20A5B
      goto locret_20A5B;
    _xchg(_si, _bp);                            //xchg si, bp
    _push(_si);                                 //push si
    sub_20A5C();                                //call near ptr sub_20A5C
    _si = _pop();                               //pop si
    _xchg(_si, _bp);                            //xchg si, bp
    _di += 0x0002;                              //add di, 2
{sub_20A47(); return; };                        //jmp short near ptr sub_20A47
locret_20A5B:                                   //locret_20A5B:
    return;
}

void sub_20A5C()
{
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    memory(_ds, 0x33F2) = _al;                  //mov byte_2B922, al
    _di = 0x33ca;                               //mov di, 33CAh
    _cx = 0x33f2;                               //mov cx, 33F2h
    _cx -= 0x33ca;                              //sub cx, 33CAh
    _cx += 1;                                   //inc cx
    _repne_scasb();                             //repne scasb
    _ax = _di;                                  //mov ax, di
    _ax -= 0x33cb;                              //sub ax, 33CBh
    _di = _pop();                               //pop di
    if (_ax == 0x0028)                          //jz short loc_20ABD
      goto loc_20ABD;
    _di = _di + memory16(_ds, 0x425B);          //add di, word_2C78B
    _cx = _pop();                               //pop cx
    _ax = _cx * _al;                            //mul cx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_cx);                                 //push cx
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    sub_20AC0();                                //call sub_20AC0
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    sub_20AC0();                                //call sub_20AC0
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    sub_20AC0();                                //call sub_20AC0
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    sub_20AC0();                                //call sub_20AC0
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
loc_20ABD:                                      //loc_20ABD:
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
}

void sub_20AC0()
{
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_20AC2:                                      //loc_20AC2:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _stosb<MemVideo, DirAuto>();
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _di += 0x0027;                              //add di, 27h
    if (--_cx)                                  //loop loc_20AC2
      goto loc_20AC2;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
}

void sub_20AD0()
{
    if (memory(_ds, 0x8FAF) != 0x00)            //jnz short loc_20ADA
      goto loc_20ADA;
    goto locret_20B5A;                          //jmp locret_20B5A
loc_20ADA:                                      //loc_20ADA:
    memory(_ds, 0x8FAF) = 0x00;                 //mov byte_314DF, 0
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0e00;                               //mov ax, 0E00h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _bx = memory16(_ds, 0x9186);                //mov bx, word_316B6
    if ((short)_bx <= (short)0x0027)            //jle short loc_20AFF
      goto loc_20AFF;
    _bx = 0x0027;                               //mov bx, 27h
loc_20AFF:                                      //loc_20AFF:
    _bx -= 0x0027;                              //sub bx, 27h
    _bx = -_bx;                                 //neg bx
    _di = 0x1e83;                               //mov di, 1E83h
    _al = 0x10;                                 //mov al, 10h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_20B15
      goto loc_20B15;
    _di = 0x1e8f;                               //mov di, 1E8Fh
    _al = 0x02;                                 //mov al, 2
loc_20B15:                                      //loc_20B15:
    _cx = 0x0027;                               //mov cx, 27h
loc_20B18:                                      //loc_20B18:
    if (_cx != _bx)                             //jnz short loc_20B27
      goto loc_20B27;
    _push(_ax);                                 //push ax
    _dx -= 1;                                   //dec dx
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _ax = _pop();                               //pop ax
loc_20B27:                                      //loc_20B27:
    _out(_dx, _al);                             //out dx, al
    memoryVideoAnd(_es, _di, _al);              //and es:[di], al
    memoryVideoAnd(_es, _di + 40, _al);         //and es:[di+28h], al
    memoryVideoAnd(_es, _di + 80, _al);         //and es:[di+50h], al
    memoryVideoAnd(_es, _di + 8192, _al);       //and es:[di+2000h], al
    memoryVideoAnd(_es, _di + 8232, _al);       //and es:[di+2028h], al
    memoryVideoAnd(_es, _di + 8272, _al);       //and es:[di+2050h], al
    _ror(_al, 1);                               //ror al, 1
    _flags.carry = !!(_al & 0x80);
    if (!_flags.carry)                          //jnb short loc_20B47
      goto loc_20B47;
    _di += 1;                                   //inc di
loc_20B47:                                      //loc_20B47:
    if (--_cx)                                  //loop loc_20B18
      goto loc_20B18;
    _dx -= 1;                                   //dec dx
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_20B5A:                                   //locret_20B5A:
    return;
}

void sub_20B5B()
{
    if (memory16(_ds, 0x33BC) != 0x0000)        //jnz short loc_20B85
      goto loc_20B85;
    _push(_ds);                                 //push ds
    _ax = 0xa000;                               //mov ax, 0A000h
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0105;                               //mov ax, 105h
    _out(_dx, _ax);                             //out dx, ax
    _si = 0x1e00;                               //mov si, 1E00h
    _di = 0xfec0;                               //mov di, 0FEC0h
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsb<MemVideo, MemAuto, DirAuto>();
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
loc_20B85:                                      //loc_20B85:
    memory(_ds, 0x33BC) += 1;                   //inc byte ptr word_2B8EC
}

void sub_20B8A()
{
    memory(_ds, 0x33BC) -= 1;                   //dec byte ptr word_2B8EC
    if (memory(_ds, 0x33BC) != 0)               //jnz short locret_20BBE
      goto locret_20BBE;
    _push(_ds);                                 //push ds
    _ax = 0xa000;                               //mov ax, 0A000h
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0105;                               //mov ax, 105h
    _out(_dx, _ax);                             //out dx, ax
    _di = 0x1e00;                               //mov di, 1E00h
    _si = 0xfec0;                               //mov si, 0FEC0h
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _di = 0x3e00;                               //mov di, 3E00h
    _si = 0xfec0;                               //mov si, 0FEC0h
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
locret_20BBE:                                   //locret_20BBE:
    return;
}

void sub_20BBF()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0105;                               //mov ax, 105h
    _out(_dx, _ax);                             //out dx, ax
    _si = memory16(_ds, 0x425B);                //mov si, word_2C78B
    _di = memory16(_ds, 0x4259);                //mov di, word_2C789
    _push(_ds);                                 //push ds
    _ax = 0xa000;                               //mov ax, 0A000h
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _cx = 0x1f40;                               //mov cx, 1F40h
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
}

void sub_20BE5()
{
    WORD _cs = _seg001;

    sub_2058D();                                //call near ptr sub_2058D
    _si = 0x1f4c;                               //mov si, 1F4Ch
loc_20BEC:                                      //loc_20BEC:
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    if (!(_ax & _ax))                           //jz short loc_20C19
      goto loc_20C19;
    _bp = _ax;                                  //mov bp, ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _di = _ax;                                  //mov di, ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _cx = _ax;                                  //mov cx, ax
    _push(_si);                                 //push si
    _si = _bp;                                  //mov si, bp
    sub_20CBB();                                //call sub_20CBB
    _si = _pop();                               //pop si
    goto loc_20BEC;                             //jmp short loc_20BEC
loc_20C19:                                      //loc_20C19:
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_20C1B:                                      //loc_20C1B:
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_20C1D:                                      //loc_20C1D:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xec90;                               //mov si, 0EC90h
    sub_1F585();                                //call near ptr sub_1F585
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xefc0;                               //mov si, 0EFC0h
    sub_1F585();                                //call near ptr sub_1F585
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _cx += 0x0029;                              //add cx, 29h
    if ((short)_cx < (short)0x00cd)             //jl short loc_20C1D
      goto loc_20C1D;
    _dx += 0x0029;                              //add dx, 29h
    if ((short)_dx < (short)0x00a4)             //jl short loc_20C1B
      goto loc_20C1B;
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_20C59
      goto loc_20C59;
    _si = 0xfc20;                               //mov si, 0FC20h
    _cx = 0x00c1;                               //mov cx, 0C1h
    _dx = 0x00bc;                               //mov dx, 0BCh
    sub_1F585();                                //call near ptr sub_1F585
loc_20C59:                                      //loc_20C59:
    sub_20BBF();                                //call near ptr sub_20BBF
}

void sub_20C5E()
{
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    sub_1F585();                                //call near ptr sub_1F585
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _push(memory16(_ds, 0x425B));               //push word_2C78B
    _ax = memory16(_ds, 0x4259);                //mov ax, word_2C789
    memory16(_ds, 0x425B) = _ax;                //mov word_2C78B, ax
    sub_1F585();                                //call near ptr sub_1F585
    memory16(_ds, 0x425B) = _pop();             //pop word_2C78B
}

void sub_20C7B()
{
    sub_2058D();                                //call near ptr sub_2058D
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x0fb4;                              //add di, 0FB4h
    _ax = 0x0608;                               //mov ax, 608h
    _out(_dx, _ax);                             //out dx, ax
    memory(_es, _di) &= _al;                    //and es:[di], al
    memory(_es, _di + 80) &= _al;               //and es:[di+50h], al
    _ax = 0x0f08;                               //mov ax, 0F08h
    _out(_dx, _ax);                             //out dx, ax
    memory(_es, _di + 40) &= _al;               //and es:[di+28h], al
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_20CBB()
{
    _di = _di + memory16(_ds, 0x425B);          //add di, word_2C78B
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _bp = _dx;                                  //mov bp, dx
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    sub_20CFE();                                //call sub_20CFE
    _si += 0x0002;                              //add si, 2
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    sub_20CFE();                                //call sub_20CFE
    _si += 0x0002;                              //add si, 2
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    sub_20CFE();                                //call sub_20CFE
    _si += 0x0002;                              //add si, 2
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    sub_20CFE();                                //call sub_20CFE
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_20CFE() // draw logo
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_bp);                                 //push bp
loc_20D02:                                      //loc_20D02:
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
loc_20D04:                                      //loc_20D04:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _si += 0x0006;                              //add si, 6
    _bp -= 1;                                   //dec bp
    if (_bp != 0)                               //jnz short loc_20D04
      goto loc_20D04;
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_20D02
      goto loc_20D02;
    _bp = _pop();                               //pop bp
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void sub_20D18()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _di = 0x11ea;                               //mov di, 11EAh
    _cx = 0x0045;                               //mov cx, 45h
    sub_20D87();                                //call near ptr sub_20D87
    _di = 0x31ea;                               //mov di, 31EAh
    _cx = 0x0045;                               //mov cx, 45h
    sub_20D87();                                //call near ptr sub_20D87
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void loc_20D45()
{
    _ax = 0x0108;                               //mov ax, 108h
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 1;                                   //inc di
    _ax = 0xfe08;                               //mov ax, 0FE08h
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _di, _al);                    //and es:[di], al
    _di += 0x001c;                              //add di, 1Ch
}

void sub_20D87()
{
    if (--_cx)                                  //loop loc_20D45
    { loc_20D45(); return; }
//    return;                                     //retf
    //_STOP_("sp-trace-fail");                    //sub_20D87 endp_failed
    //_STOP_("continues");                        //sub_20D8A proc far
    sub_20D8A();
}

void sub_20D8A()
{
    _si = 0x8430;                               //mov si, 8430h
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x0182;                              //add di, 182h
    _cx = 0x0034;                               //mov cx, 34h
    sub_20F91();                                //call sub_20F91
    _si = 0x8f90;                               //mov si, 8F90h
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x0ef2;                              //add di, 0EF2h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_20F91();                                //call sub_20F91
    _si = 0x91c0;                               //mov si, 91C0h
    if (memory(_ds, 0x8F40) == 0x00)            //jz short loc_20DCA
      goto loc_20DCA;
    sub_10ED9();                                //call sub_10ED9
    _cx = 0x0004;                               //mov cx, 4
    goto loc_20DC4;                             //jmp short loc_20DC4
loc_20DC0:                                      //loc_20DC0:
    _si += 0x0770;                              //add si, 770h
loc_20DC4:                                      //loc_20DC4:
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_flags.carry)                           //jb short loc_20DCA
      goto loc_20DCA;
    if (--_cx)                                  //loop loc_20DC0
      goto loc_20DC0;
loc_20DCA:                                      //loc_20DCA:
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x09a2;                              //add di, 9A2h
    _cx = 0x0022;                               //mov cx, 22h
    sub_20F91();                                //call sub_20F91
    sub_10EE5();                                //call sub_10EE5
    sub_10EE9();                                //call sub_10EE9
    if (memory16(_ds, 0x8F3C) != 0x0000)        //jnz short loc_20DEC
      goto loc_20DEC;
    goto locret_20F53;                          //jmp locret_20F53
loc_20DEC:                                      //loc_20DEC:
    if ((short)memory16(_ds, 0x8F3C) <= (short)0x0008)
      goto loc_20E34;
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x0182;                              //add di, 182h
    _si = 0x5c18;                               //mov si, 5C18h
    _ax = 0x0030;                               //mov ax, 30h
    _ax = _ax - memory16(_ds, 0x8F3C);          //sub ax, word_3146C
    _dx = 0x0038;                               //mov dx, 38h
    _ax = _dx * _al;                            //mul dx
    _si += _ax;                                 //add si, ax
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_20F91();                                //call sub_20F91
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x11c2;                              //add di, 11C2h
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, 0x8F3C) * _al;          //mul word_3146C
    _di -= _ax;                                 //sub di, ax
    _si = 0x64d8;                               //mov si, 64D8h
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_20F91();                                //call sub_20F91
loc_20E34:                                      //loc_20E34:
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = memory16(_ds, 0x8F3C);                //mov dx, word_3146C
    _dx += 1;                                   //inc dx
    _push(_dx);                                 //push dx
    _si = 0xabe4;                               //mov si, 0ABE4h
    sub_1F585();                                //call near ptr sub_1F585
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xace4;                               //mov si, 0ACE4h
    sub_1F585();                                //call near ptr sub_1F585
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xad94;                               //mov si, 0AD94h
    sub_1F585();                                //call near ptr sub_1F585
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = 0x0070;                               //mov dx, 70h
    _dx = _dx - memory16(_ds, 0x8F3C);          //sub dx, word_3146C
    _push(_dx);                                 //push dx
    _si = 0xae94;                               //mov si, 0AE94h
    sub_1F585();                                //call near ptr sub_1F585
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xaf94;                               //mov si, 0AF94h
    sub_1F585();                                //call near ptr sub_1F585
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xb044;                               //mov si, 0B044h
    sub_1F585();                                //call near ptr sub_1F585
    if ((short)memory16(_ds, 0x8F3C) < (short)0x0008)//jl short loc_20E8E
      goto loc_20E8E;
    goto locret_20F53;                          //jmp locret_20F53
loc_20E8E:                                      //loc_20E8E:
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x001a;                              //add di, 1Ah
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4750;                               //mov si, 4750h
    _cx = 0x0009;                               //mov cx, 9
loc_20EA9:                                      //loc_20EA9:
    _push(_cx);                                 //push cx
    _cx = 0x0007;                               //mov cx, 7
loc_20EAD:                                      //loc_20EAD:
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_20EAD
      goto loc_20EAD;
    _cx = _pop();                               //pop cx
    _di += 0x001a;                              //add di, 1Ah
    _si += 0x0008;                              //add si, 8
    if (--_cx)                                  //loop loc_20EA9
      goto loc_20EA9;
    _ds = _pop();                               //pop ds
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x1082;                              //add di, 1082h
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4990;                               //mov si, 4990h
    _cx = 0x0009;                               //mov cx, 9
loc_20F04:                                      //loc_20F04:
    _push(_cx);                                 //push cx
    _cx = 0x0007;                               //mov cx, 7
loc_20F08:                                      //loc_20F08:
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_20F08
      goto loc_20F08;
    _cx = _pop();                               //pop cx
    _di += 0x001a;                              //add di, 1Ah
    _si += 0x0008;                              //add si, 8
    if (--_cx)                                  //loop loc_20F04
      goto loc_20F04;
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
locret_20F53:                                   //locret_20F53:
    return;
}

void sub_20F54()
{
    if (memory16(_ds, 0x8F3E) == 0x0000)        //jz short locret_20F90
      goto locret_20F90;
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _di += 0x11ea;                              //add di, 11EAh
    _cx = 0x0045;                               //mov cx, 45h
    _cx = _cx - memory16(_ds, 0x8F3E);          //sub cx, word_3146E
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    sub_20D87();                                //call near ptr sub_20D87
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _si = 0x6d98;                               //mov si, 6D98h
    _cx = memory16(_ds, 0x8F3E);                //mov cx, word_3146E
    sub_20F91();                                //call sub_20F91
locret_20F90:                                   //locret_20F90:
    return;
}

void sub_20F91()
{
    _push(_ds);                                 //push ds
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
loc_20F9F:                                      //loc_20F9F:
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0108;                               //mov ax, 108h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);             //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0108;                               //mov ax, 108h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);             //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0108;                               //mov ax, 108h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);             //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0108;                               //mov ax, 108h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);             //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _di += 0x0002;                              //add di, 2
    _push(_cx);                                 //push cx
    _cx = 0x0005;                               //mov cx, 5
loc_2101E:                                      //loc_2101E:
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di + 1, _al);          //mov es:[di+1], al
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_2101E
      goto loc_2101E;
    _cx = _pop();                               //pop cx
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memoryVideoSet(_es, _di, _al);              //mov es:[di], al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _di += 0x001c;                              //add di, 1Ch
    if (--_cx)                                  //loop loc_21083
      goto loc_21083;
    goto loc_21086;                             //jmp short loc_21086
loc_21083:                                      //loc_21083:
    goto loc_20F9F;                             //jmp loc_20F9F
loc_21086:                                      //loc_21086:
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_21090()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _si = memory16(_ds, 0x425B);                //mov si, word_2C78B
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, _di + 4) * _al;         //mul word ptr [di+4]
    _si += _ax;                                 //add si, ax
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0x0007;                              //and cx, 7
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _si += _ax;                                 //add si, ax
    _bl = 0x1c;                                 //mov bl, 1Ch
    _dx = 0x03ce;                               //mov dx, 3CEh
loc_210BD:                                      //loc_210BD:
    sub_10ED9();                                //call sub_10ED9
    _bh = _ah;                                  //mov bh, ah
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _al = 0x08;                                 //mov al, 8
    _ah = _bh;                                  //mov ah, bh
    _ah >>= _cl;                                //shr ah, cl
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si, _al);                    //and es:[si], al
    _ah = _bh;                                  //mov ah, bh
    _ror(_ah, _cl);                             //ror ah, cl
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si + 1, _al);                //and es:[si+1], al
    memoryVideoAnd(_es, _si + 2, _al);                //and es:[si+2], al
    memoryVideoAnd(_es, _si + 3, _al);                //and es:[si+3], al
    _al = _bh;                                  //mov al, bh
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si + 4, _al);                //and es:[si+4], al
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _bh = (~_bh);                               //not bh
    _al = 0x08;                                 //mov al, 8
    _ah = _bh;                                  //mov ah, bh
    _ah >>= _cl;                                //shr ah, cl
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si, _al);                    //and es:[si], al
    _ah = _bh;                                  //mov ah, bh
    _ror(_ah, _cl);                             //ror ah, cl
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si + 1, _al);                //and es:[si+1], al
    memoryVideoAnd(_es, _si + 2, _al);                //and es:[si+2], al
    memoryVideoAnd(_es, _si + 3, _al);                //and es:[si+3], al
    _al = _bh;                                  //mov al, bh
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ror(_ax, _cl);                             //ror ax, cl
    _al = 0x08;                                 //mov al, 8
    _out(_dx, _ax);                             //out dx, ax
    memoryVideoAnd(_es, _si + 4, _al);                //and es:[si+4], al
    _si += 0x0028;                              //add si, 28h
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_210BD
      goto loc_210BD;
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_21132()
{
    if (_al != 0x0d)                            //jnz short loc_2113B
      goto loc_2113B;
{loc_10EED(); return; };                        //
loc_2113B:                                      //loc_2113B:
    _push(_ax);                                 //push ax
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, 0x8F48) * _al;          //mul word_31478
    _di = _ax;                                  //mov di, ax
    _ax = memory16(_ds, 0x8F46);                //mov ax, word_31476
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _ax = _pop();                               //pop ax
    _al -= 0x20;                                //sub al, 20h
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si = 0x7cb0;                               //mov si, 7CB0h
    _si += _ax;                                 //add si, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0xf008;                               //mov ax, 0F008h
    if (!(memory16(_ds, 0x8F46) & 0x0001))      //jz short loc_21175
      goto loc_21175;
    _ah = 0x0f;                                 //mov ah, 0Fh
loc_21175:                                      //loc_21175:
    _out(_dx, _ax);                             //out dx, ax
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    sub_211B0();                                //call sub_211B0
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    sub_211B0();                                //call sub_211B0
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    sub_211B0();                                //call sub_211B0
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    sub_211B0();                                //call sub_211B0
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    memory16(_ds, 0x8F46) += 1;                 //inc word_31476
}

void sub_211B0()
{
    _push(_di);                                 //push di
    _cx = 0x0008;                               //mov cx, 8
loc_211B4:                                      //loc_211B4:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = memoryVideoGet(_es, _di);                     //mov ah, es:[di]
    memoryVideoSet(_es, _di, _al);                     //mov es:[di], al
    _ah = memoryVideoGet(_es, _di + 8192);              //mov ah, es:[di+2000h]
    memoryVideoSet(_es, _di + 8192, _al);              //mov es:[di+2000h], al
    _di += 0x0028;                              //add di, 28h
    if (--_cx)                                  //loop loc_211B4
      goto loc_211B4;
    _di = _pop();                               //pop di
}

void sub_211CC()
{
    _si = 0xaf80;                               //mov si, 0AF80h
    _di = 0x0786;                               //mov di, 786h
    _dx = 0x000d;                               //mov dx, 0Dh
    _cx = 0x0036;                               //mov cx, 36h
    sub_20CBB();                                //call sub_20CBB
}

void sub_2120E()
{
    if ((short)memory16(_ds, _si + 28) < 0 /*CHECK*/)//js short loc_2121A
      goto loc_2121A;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_2122A
      goto loc_2122A;
loc_2121A:                                      //loc_2121A:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32CA);                //mov si, word_2B7FA
    sub_1F585();                                //call near ptr sub_1F585
    _si = _pop();                               //pop si
loc_2122A:                                      //loc_2122A:
    if ((short)memory16(_ds, _si + 28) >= 0 /*CHECK*/)
      goto loc_21236;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_2124A
      goto loc_2124A;
loc_21236:                                      //loc_21236:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx + memory16(_ds, _si + 26);        //add dx, [si+1Ah]
    _dx -= 1;                                   //dec dx
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32C4);                //mov si, word_2B7F4
    sub_1F585();                                //call near ptr sub_1F585
    _si = _pop();                               //pop si
loc_2124A:                                      //loc_2124A:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    _ax -= 1;                                   //dec ax
    if (_FIXME_)                                //jg short loc_2125C
      goto loc_2125C;
    goto locret_212E5;                          //jmp locret_212E5
loc_2125C:                                      //loc_2125C:
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax -= 1;                                   //dec ax
    _dx = memory16(_ds, 0x32BC);                //mov dx, word_2B7EC
    _dx -= 0x00bf;                              //sub dx, 0BFh
    if (_FIXME_)                                //jle short loc_21277
      goto loc_21277;
    _ax -= _dx;                                 //sub ax, dx
    if (_FIXME_)                                //jle short locret_212E5
      goto locret_212E5;
    memory16(_ds, 0x32BC) = 0x00bf;             //mov word_2B7EC, 0BFh
loc_21277:                                      //loc_21277:
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0700;                               //mov ax, 700h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0f01;                               //mov ax, 0F01h
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xa000;                               //mov ax, 0A000h
    _es = _ax;                                  //mov es, ax
    _ax = 0x0028;                               //mov ax, 28h
    _ax = memory16(_ds, 0x32BC) * _al;          //mul word_2B7EC
    _di = memory16(_ds, 0x425B);                //mov di, word_2C78B
    _bp = _di;                                  //mov bp, di
    _di += _ax;                                 //add di, ax
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _di += _ax;                                 //add di, ax
    _dx = memory16(_ds, 0x32BA);                //mov dx, word_2B7EA
    _dx &= 0xfff8;                              //and dx, 0FFF8h
    _cx = memory16(_ds, 0x32BA);                //mov cx, word_2B7EA
    _cx &= 0x0007;                              //and cx, 7
    _ah = 0xff;                                 //mov ah, 0FFh
    _ah >>= _cl;                                //shr ah, cl
    sub_20829();                                //call sub_20829
    _di += 1;                                   //inc di
    _dx += 0x0008;                              //add dx, 8
    _ax = 0xf0ff;                               //mov ax, 0F0FFh
    _ror(_ax, _cl);                             //ror ax, cl
    sub_20829();                                //call sub_20829
    _di += 1;                                   //inc di
    _dx += 0x0008;                              //add dx, 8
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al = 0xf0;                                 //mov al, 0F0h
    _ror(_ax, _cl);                             //ror ax, cl
    sub_20829();                                //call sub_20829
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0000;                               //mov ax, 0
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0001;                               //mov ax, 1
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
locret_212E5:                                   //locret_212E5:
    return;
}

void loc_2130B()
{
    sub_2133E();                                //call sub_2133E
    _dx = 0x03bf;                               //mov dx, 3BFh
    _al = 0x03;                                 //mov al, 3
    _out(_dx, _al);                             //out dx, al
    _dx = 0x03b8;                               //mov dx, 3B8h
    _al = _al ^ _al;                            //xor al, al
    _out(_dx, _al);                             //out dx, al
    _dl -= 0x04;                                //sub dl, 4
    _si = 0x4243;                               //mov si, 4243h
    _cx = 0x0009;                               //mov cx, 9
loc_21323:                                      //loc_21323:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _out(_dx, _ax);                             //out dx, ax
    if (--_cx)                                  //loop loc_21323
      goto loc_21323;
    _push(_es);                                 //push es
    _ax = 0xb000;                               //mov ax, 0B000h
    _es = _ax;                                  //mov es, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x4000;                               //mov cx, 4000h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
    _dl += 0x04;                                //add dl, 4
    _al = 0x0a;                                 //mov al, 0Ah
    _out(_dx, _al);                             //out dx, al
}

void sub_2133E()
{
    _di = 0x973e;                               //mov di, 973Eh
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x00c8;                               //mov cx, 0C8h
loc_21346:                                      //loc_21346:
    _stosw<MemAuto, DirAuto>();                 //stosw
    _ax += 0x0050;                              //add ax, 50h
    if (--_cx)                                  //loop loc_21346
      goto loc_21346;
}

void sub_2134D()
{
    _cx = 0x000a;                               //mov cx, 0Ah
loc_21350:                                      //loc_21350:
    _push(_cx);                                 //push cx
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cx = 0x2000;                               //mov cx, 2000h
    _si = _si ^ _si;                            //xor si, si
loc_2135B:                                      //loc_2135B:
    memory16(_es, _si) = memory16(_es, _si) ^ 0xffff;//xor word ptr es:[si], 0FFFFh
    _si += 0x0002;                              //add si, 2
    if (--_cx)                                  //loop loc_2135B
      goto loc_2135B;
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_21350
      goto loc_21350;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2136C()
{
    _cx = 0x000a;                               //mov cx, 0Ah
loc_2136F:                                      //loc_2136F:
    _push(_cx);                                 //push cx
    _ax = 0xb000;                               //mov ax, 0B000h
    _es = _ax;                                  //mov es, ax
    _cx = 0x4000;                               //mov cx, 4000h
    _si = _si ^ _si;                            //xor si, si
loc_2137A:                                      //loc_2137A:
    memory16(_es, _si) = memory16(_es, _si) ^ 0xffff;//xor word ptr es:[si], 0FFFFh
    _si += 0x0002;                              //add si, 2
    if (--_cx)                                  //loop loc_2137A
      goto loc_2137A;
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_2136F
      goto loc_2136F;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2138B()
{
    WORD _cs = _seg001;

    memory16(_cs, 0x38A5) = 0x38ad;             //mov cs:word_22B35, 38ADh
    _dx = _seg007;                              //mov dx, seg seg007
    _si = _si ^ _si;                            //xor si, si
    _cx = 0x6be6;                               //mov cx, 6BE6h
    sub_214E6();                                //call sub_214E6
    _dx = _seg007;                              //mov dx, seg seg007
    _si = 0x6be6;                               //mov si, 6BE6h
    _cx = 0x3fd6;                               //mov cx, 3FD6h
    sub_214E6();                                //call sub_214E6
    memory16(_cs, 0x38A5) = 0x396d;             //mov cs:word_22B35, 396Dh
    _dx = _seg007;                              //mov dx, seg seg007
    _si = 0xabbc;                               //mov si, 0ABBCh
    _cx = 0x5324;                               //mov cx, 5324h
    sub_214E6();                                //call sub_214E6
    memory16(_cs, 0x38A5) = 0x38ad;             //mov cs:word_22B35, 38ADh
    _si = 0x0000;                               //mov si, 0
    _cx = 0x0140;                               //mov cx, 140h
    sub_2162C();                                //call sub_2162C
    memory16(_cs, 0x38A5) = 0x398d;             //mov cs:word_22B35, 398Dh
    _si = 0x0500;                               //mov si, 500h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_21696();                                //call sub_21696
    memory16(_cs, 0x38A5) = 0x39ad;             //mov cs:word_22B35, 39ADh
    _si = 0x0640;                               //mov si, 640h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_21696();                                //call sub_21696
    memory16(_cs, 0x38A5) = 0x394d;             //mov cs:word_22B35, 394Dh
    _si = 0x0780;                               //mov si, 780h
    _cx = 0x0028;                               //mov cx, 28h
    _dx = 0x0016;                               //mov dx, 16h
    sub_216E8();                                //call sub_216E8
    _si = 0x2300;                               //mov si, 2300h
    _cx = 0x002a;                               //mov cx, 2Ah
    _dx = 0x000e;                               //mov dx, 0Eh
    sub_216E8();                                //call sub_216E8
    _si = 0xaf80;                               //mov si, 0AF80h
    _cx = 0x02be;                               //mov cx, 2BEh
    memory16(_cs, 0x38AB) = 0x0017;             //mov cs:word_22B3B, 17h
    sub_215BB();                                //call sub_215BB
    memory16(_cs, 0x38A5) = 0x398d;             //mov cs:word_22B35, 398Dh
    _si = 0x7cb0;                               //mov si, 7CB0h
    _cx = 0x003c;                               //mov cx, 3Ch
    sub_21696();                                //call sub_21696
    memory16(_cs, 0x38A5) = 0x396d;             //mov cs:word_22B35, 396Dh
    memory16(_cs, 0x38AB) = 0x0007;             //mov cs:word_22B3B, 7
    _si = 0x5c18;                               //mov si, 5C18h
    _cx = 0x0118;                               //mov cx, 118h
    sub_215BB();                                //call sub_215BB
    _si = 0x64d8;                               //mov si, 64D8h
    _cx = 0x0118;                               //mov cx, 118h
    sub_215BB();                                //call sub_215BB
    _si = 0x6d98;                               //mov si, 6D98h
    _cx = 0x01e3;                               //mov cx, 1E3h
    sub_215BB();                                //call sub_215BB
    _si = 0x8430;                               //mov si, 8430h
    _cx = 0x016c;                               //mov cx, 16Ch
    sub_215BB();                                //call sub_215BB
    _si = 0x8f90;                               //mov si, 8F90h
    _cx = 0x0046;                               //mov cx, 46h
    sub_215BB();                                //call sub_215BB
    _si = 0x91c0;                               //mov si, 91C0h
    _cx = 0x03b8;                               //mov cx, 3B8h
    sub_215BB();                                //call sub_215BB
    memory16(_cs, 0x38AB) = 0x0002;             //mov cs:word_22B3B, 2
    _si = 0x3560;                               //mov si, 3560h
    _cx = 0x017e;                               //mov cx, 17Eh
    sub_215BB();                                //call sub_215BB
    memory16(_cs, 0x38AB) = 0x0001;             //mov cs:word_22B3B, 1
    _si = 0x4150;                               //mov si, 4150h
    _cx = 0x00bf;                               //mov cx, 0BFh
    sub_215BB();                                //call sub_215BB
    memory16(_cs, 0x38AB) = 0x0008;             //mov cs:word_22B3B, 8
    _si = 0x4748;                               //mov si, 4748h
    _cx = 0x0048;                               //mov cx, 48h
    sub_215BB();                                //call sub_215BB
    _si = 0x4988;                               //mov si, 4988h
    _cx = 0x0048;                               //mov cx, 48h
    sub_215BB();                                //call sub_215BB
    _si = 0x4bc8;                               //mov si, 4BC8h
    _cx = 0x005a;                               //mov cx, 5Ah
    sub_215BB();                                //call sub_215BB
    memory16(_cs, 0x38AB) = 0x000c;             //mov cs:word_22B3B, 0Ch
    _si = 0x4e98;                               //mov si, 4E98h
    _cx = 0x01b0;                               //mov cx, 1B0h
    sub_215BB();                                //call sub_215BB
}

void sub_214C2()
{
    WORD _cs = _seg001;

    _ax = memory16(_ds, 0x991C);                //mov ax, word_31E4C
    _ax -= 1;                                   //dec ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x38ad;                              //add ax, 38ADh
    memory16(_cs, 0x38A5) = _ax;                //mov cs:word_22B35, ax
    _dx = _seg008;                              //mov dx, seg seg008
    _si = _si ^ _si;                            //xor si, si
    _cx = 0xf468;                               //mov cx, 0F468h
    sub_214E6();                                //call sub_214E6
    sub_2154D();                                //call sub_2154D
}

void sub_214E6()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ds = _dx;                                  //mov ds, dx
    _bp = _si;                                  //mov bp, si
    _bp += _cx;                                 //add bp, cx
    _si += 0x0020;                              //add si, 20h
loc_214F5:                                      //loc_214F5:
    _si += 0x000c;                              //add si, 0Ch
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (!(_ax & _ax))                           //jz short loc_21547
      goto loc_21547;
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _cx = _ax;                                  //mov cx, ax
    _cx += 1;                                   //inc cx
    _dx = _cx;                                  //mov dx, cx
    if ((short)_bx <= (short)0x0008)            //jle short loc_2151B
      goto loc_2151B;
    _dx += _cx;                                 //add dx, cx
    if ((short)_bx <= (short)0x0010)            //jle short loc_2151B
      goto loc_2151B;
    _dx += _cx;                                 //add dx, cx
    if ((short)_bx <= (short)0x0018)            //jle short loc_2151B
      goto loc_2151B;
    _dx += _cx;                                 //add dx, cx
loc_2151B:                                      //loc_2151B:
    _push(_bp);                                 //push bp
    _bp = _si;                                  //mov bp, si
    _push(_si);                                 //push si
    _di = _di ^ _di;                            //xor di, di
    sub_21765();                                //call sub_21765
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _si += 1;                                   //inc si
    _si &= 0xfffe;                              //and si, 0FFFEh
    if (_si < _bp)                              //jb short loc_214F5
      goto loc_214F5;
loc_21547:                                      //loc_21547:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_2154D()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x01c9;                               //mov cx, 1C9h
    _si = _si ^ _si;                            //xor si, si
loc_2155D:                                      //loc_2155D:
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _push(_si);                                 //push si
    _di = _di ^ _di;                            //xor di, di
    sub_21582();                                //call sub_21582
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    _si += 0x0080;                              //add si, 80h
    if (--_cx)                                  //loop loc_2155D
      goto loc_2155D;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_21582()
{
    WORD _cs = _seg001;

    _cx = 0x0010;                               //mov cx, 10h
    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
loc_2158C:                                      //loc_2158C:
    sub_2159D();                                //call sub_2159D
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    if (--_cx)                                  //loop loc_2158C
      goto loc_2158C;
}

void sub_2159D()
{
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    _si += 0x0006;                              //add si, 6
}

void sub_215BB()
{
    WORD _cs = _seg001;

    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _di = _di ^ _di;                            //xor di, di
    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
    _ax = memory16(_cs, 0x38AB);                //mov ax, cs:word_22B3B
    memory16(_cs, 0x38A9) = _ax;                //mov cs:word_22B39, ax
    _push(_si);                                 //push si
loc_215D8:                                      //loc_215D8:
    sub_2160E();                                //call sub_2160E
    memory16(_cs, 0x38A9) -= 1;                 //dec cs:word_22B39
    if (memory16(_cs, 0x38A9) != 0)             //jnz short loc_215F5
      goto loc_215F5;
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    _ax = memory16(_cs, 0x38AB);                //mov ax, cs:word_22B3B
    memory16(_cs, 0x38A9) = _ax;                //mov cs:word_22B39, ax
loc_215F5:                                      //loc_215F5:
    if (--_cx)                                  //loop loc_215D8
      goto loc_215D8;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _push(_si);                                 //push si
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_2160E()
{
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    _si += 0x0006;                              //add si, 6
}

void sub_2162C()
{
    WORD _cs = _seg001;

    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _di = _di ^ _di;                            //xor di, di
    _dx = _cx;                                  //mov dx, cx
    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
    memory16(_cs, 0x38A9) = 0x0028;             //mov cs:word_22B39, 28h
    _push(_si);                                 //push si
loc_2164A:                                      //loc_2164A:
    sub_2167F();                                //call sub_2167F
    memory16(_cs, 0x38A9) -= 1;                 //dec cs:word_22B39
    if (memory16(_cs, 0x38A9) != 0)             //jnz short loc_21666
      goto loc_21666;
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    memory16(_cs, 0x38A9) = 0x0028;             //mov cs:word_22B39, 28h
loc_21666:                                      //loc_21666:
    if (--_cx)                                  //loop loc_2164A
      goto loc_2164A;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _push(_si);                                 //push si
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_2167F()
{
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
}

void sub_21696()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _di = _di ^ _di;                            //xor di, di
    _push(_si);                                 //push si
loc_216A4:                                      //loc_216A4:
    _push(_cx);                                 //push cx
    sub_216C0();                                //call sub_216C0
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_216A4
      goto loc_216A4;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_216C0()
{
    WORD _cs = _seg001;

    _cx = 0x0008;                               //mov cx, 8
    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
loc_216CA:                                      //loc_216CA:
    _ah = memory(_ds, _si + 8);                 //mov ah, [si+8]
    _bl = memory(_ds, _si + 16);                //mov bl, [si+10h]
    _bh = memory(_ds, _si + 24);                //mov bh, [si+18h]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    if (--_cx)                                  //loop loc_216CA
      goto loc_216CA;
    _si += 0x0018;                              //add si, 18h
}

void sub_216E8()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _di = _di ^ _di;                            //xor di, di
    _push(_si);                                 //push si
loc_216F6:                                      //loc_216F6:
    _push(_cx);                                 //push cx
    sub_21712();                                //call sub_21712
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_216F6
      goto loc_216F6;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_21712()
{
    WORD _cs = _seg001;

    _push(_si);                                 //push si
    _cx = _dx;                                  //mov cx, dx
    _dx <<= 1;                                  //shl dx, 1
    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
loc_2171E:                                      //loc_2171E:
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_217DB();                                //call sub_217DB
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    if (--_cx)                                  //loop loc_2171E
      goto loc_2171E;
    _dx >>= 1;                                  //shr dx, 1
    _si = _pop();                               //pop si
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
}

void sub_21765()
{
    WORD _cs = _seg001;

    memory16(_cs, 0x38A7) = 0x0000;             //mov cs:word_22B37, 0
    _push(_cx);                                 //push cx
loc_2176D:                                      //loc_2176D:
    _push(_cx);                                 //push cx
    sub_21781();                                //call sub_21781
    memory16(_cs, 0x38A7) += 1;                 //inc cs:word_22B37
    memory16(_cs, 0x38A7) &= 0x0007;            //and cs:word_22B37, 7
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_2176D
      goto loc_2176D;
    _cx = _pop();                               //pop cx
}

void sub_21781()
{
    _push(_bx);                                 //push bx
loc_21782:                                      //loc_21782:
    _push(_bx);                                 //push bx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _stosb<MemAuto, DirAuto>();                 //stosb
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _stosb<MemAuto, DirAuto>();                 //stosb
    _si += _dx;                                 //add si, dx
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si += 1;                                   //inc si
    sub_217DB();                                //call sub_217DB
    _al = memory(_es, _di + -3);                //mov al, es:[di-3]
    _ah = memory(_es, _di + -2);                //mov ah, es:[di-2]
    memory(_es, _di + -2) = _al;                //mov es:[di-2], al
    memory(_es, _di + -3) = _ah;                //mov es:[di-3], ah
    _bx = _pop();                               //pop bx
    _bx -= 0x0008;                              //sub bx, 8
    if (_FIXME_)                                //jg short loc_21782
      goto loc_21782;
    _bx = _pop();                               //pop bx
}

void sub_217DB()
{
    WORD _cs = _seg001;

    _push(_bp);                                 //push bp
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _cx = 0x0002;                               //mov cx, 2
loc_217E1:                                      //loc_217E1:
    _push(_cx);                                 //push cx
    _cx = 0x0000;                               //mov cx, 0
    _dh = _dh ^ _dh;                            //xor dh, dh
loc_217E7:                                      //loc_217E7:
    _dl = _dl ^ _dl;                            //xor dl, dl
    _flags.carry = !!(_bh & 0x80);              //shl bh, 1
    _bh <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _bp = _dx;                                  //mov bp, dx
    _bp &= 0x000f;                              //and bp, 0Fh
    _bp <<= 1;                                  //shl bp, 1
    _bp = _bp + memory16(_cs, 0x38A5);          //add bp, cs:word_22B35
    _bp = memory16(_cs, _bp);                   //mov bp, cs:[bp+0]
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _bp = _bp + memory16(_cs, 0x38A7);          //add bp, cs:word_22B37
    _dl = memory(_cs, _bp + 14381);             //mov dl, cs:[bp+382Dh]
    _dl <<= _cl;                                //shl dl, cl
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _cx += 0x0002;                              //add cx, 2
    if ((short)_cx < (short)0x0008)             //jl short loc_217E7
      goto loc_217E7;
    memory(_es, _di) = _dh;                     //mov es:[di], dh
    _di += 1;                                   //inc di
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_217E1
      goto loc_217E1;
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
    _bp = _pop();                               //pop bp
}

void sub_21836()
{
    WORD _cs = _seg001;

    memory(_cs, 0x25A5) = 0x01;                 //mov cs:byte_21835, 1
}

void sub_2183D()
{
    WORD _cs = _seg001;

    memory(_cs, 0x25A5) = 0x00;                 //mov cs:byte_21835, 0
}

void sub_21844()
{
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    sub_10ED5();                                //call sub_10ED5
    _push(_es);                                 //push es
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
    _al = 0x08;                                 //mov al, 8
loc_2185A:                                      //loc_2185A:
    _di = memory16(_ds, _si);                   //mov di, [si]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, _si + 2);         //add di, [si+2]
    memory(_es, _di) |= 0x18;                   //or byte ptr es:[di], 18h
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_2185A
      goto loc_2185A;
    _es = _pop();                               //pop es
}

void sub_21870()
{
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
loc_2187B:                                      //loc_2187B:
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax &= 0x7fff;                              //and ax, 7FFFh
    _ax -= 0x0200;                              //sub ax, 200h
    if ((short)_ax > (short)0x0200)             //jg short loc_218A5
      goto loc_218A5;
loc_21889:                                      //loc_21889:
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    sub_10ED9();                                //call sub_10ED9
    _ax &= 0x1fff;                              //and ax, 1FFFh
    if ((short)_ax <= (short)0x0200)            //jle short loc_21889
      goto loc_21889;
loc_218A5:                                      //loc_218A5:
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x00a0;                              //add ax, 0A0h
    if (_ax >= 0x0140)                          //jnb short loc_21889
      goto loc_21889;
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x0064;                              //add ax, 64h
    if (_ax >= 0x00c8)                          //jnb short loc_21889
      goto loc_21889;
    _di = _ax;                                  //mov di, ax
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _push(_cx);                                 //push cx
    _cx = _bx;                                  //mov cx, bx
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _di += _bx;                                 //add di, bx
    _ah = 0xc0;                                 //mov ah, 0C0h
    _ah >>= _cl;                                //shr ah, cl
    _cx = _pop();                               //pop cx
    memory(_es, _di) |= _ah;                    //or es:[di], ah
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_2190C
      goto loc_2190C;
    goto loc_2190F;                             //jmp short loc_2190F
loc_2190C:                                      //loc_2190C:
    goto loc_2187B;                             //jmp loc_2187B
loc_2190F:                                      //loc_2190F:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_21914()
{
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _STOP_("sp-trace-fail");                    //sub_21914 endp_failed
    _STOP_("continues");                        //sub_2191D proc far
}

void sub_2191D()
{
    WORD _cs = _seg001;

    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_2192A
      goto loc_2192A;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_2192A:                                      //loc_2192A:
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_21942
      goto loc_21942;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21942:                                      //loc_21942:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_2194C
      goto loc_2194C;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_2194C:                                      //loc_2194C:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_21955
      goto loc_21955;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21955:                                      //loc_21955:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_2195E
      goto loc_2195E;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_2195E:                                      //loc_2195E:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_21972
      goto loc_21972;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
loc_21972:                                      //loc_21972:
    if ((short)_dx >= 0)                        //jns short loc_219A4
      goto loc_219A4;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    if ((short)_bp <= (short)0x0008)            //jle short loc_2199F
      goto loc_2199F;
    if ((short)_bp > (short)0x0010)             //jg short loc_2198E
      goto loc_2198E;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_2199F;                             //jmp short loc_2199F
loc_2198E:                                      //loc_2198E:
    if ((short)_bp > (short)0x0018)             //jg short loc_2199B
      goto loc_2199B;
    _dx = _ax;                                  //mov dx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    goto loc_2199F;                             //jmp short loc_2199F
loc_2199B:                                      //loc_2199B:
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
loc_2199F:                                      //loc_2199F:
    memory16(_ds, 0x0) = _ax;                   //mov word ptr unk_54890, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_219A4:                                      //loc_219A4:
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ds = _pop();                               //pop ds
    if ((short)_cx >= 0)                        //jns short loc_219BF
      goto loc_219BF;
    goto loc_21C06;                             //jmp loc_21C06
loc_219BF:                                      //loc_219BF:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax <= (short)0x0140)            //jle short loc_219CB
      goto loc_219CB;
    goto loc_21C06;                             //jmp loc_21C06
loc_219CB:                                      //loc_219CB:
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    if ((short)_bp > (short)0x0008)             //jg short loc_219E4
      goto loc_219E4;
    goto loc_21BC2;                             //jmp loc_21BC2
loc_219E4:                                      //loc_219E4:
    if ((short)_bp > (short)0x0010)             //jg short loc_219EC
      goto loc_219EC;
    goto loc_21B54;                             //jmp loc_21B54
loc_219EC:                                      //loc_219EC:
    if ((short)_bp > (short)0x0018)             //jg short loc_219F4
      goto loc_219F4;
    goto loc_21AB9;                             //jmp loc_21AB9
loc_219F4:                                      //loc_219F4:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _al >>= _cl;                                //shr al, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _dl >>= _cl;                                //shr dl, cl
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    _dl = _dl ^ _dl;                            //xor dl, dl
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _dh = memory(_ds, _si - 1);                 //mov dh, [si-1]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _di += 0x0047;                              //add di, 47h
    _bl -= 1;                                   //dec bl
    if ((char)_bl < 0)                          //js short loc_21AB6
      goto loc_21AB6;
    goto loc_219F4;                             //jmp loc_219F4
loc_21AB6:                                      //loc_21AB6:
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21AB9:                                      //loc_21AB9:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _al >>= _cl;                                //shr al, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _dl >>= _cl;                                //shr dl, cl
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    _dl = _dl ^ _dl;                            //xor dl, dl
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _dh = memory(_ds, _si - 1);                 //mov dh, [si-1]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _di += 0x0049;                              //add di, 49h
    _bl -= 1;                                   //dec bl
    if ((char)_bl < 0)                          //js short loc_21B51
      goto loc_21B51;
    goto loc_21AB9;                             //jmp loc_21AB9
loc_21B51:                                      //loc_21B51:
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21B54:                                      //loc_21B54:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _al >>= _cl;                                //shr al, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _dl >>= _cl;                                //shr dl, cl
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    _dl = _dl ^ _dl;                            //xor dl, dl
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _dh = memory(_ds, _si - 1);                 //mov dh, [si-1]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _di += 0x004b;                              //add di, 4Bh
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21B54
      goto loc_21B54;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21BC2:                                      //loc_21BC2:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _al >>= _cl;                                //shr al, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _dl >>= _cl;                                //shr dl, cl
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    _dl = _dl ^ _dl;                            //xor dl, dl
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _dh = memory(_ds, _si - 1);                 //mov dh, [si-1]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _di += 0x004d;                              //add di, 4Dh
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21BC2
      goto loc_21BC2;
    goto loc_21C9B;                             //jmp loc_21C9B
loc_21C06:                                      //loc_21C06:
    _dx = _cx;                                  //mov dx, cx
    _sar(_dx, 1);                               //sar dx, 1
    _sar(_dx, 1);                               //sar dx, 1
    _di += _dx;                                 //add di, dx
    _dx = _cx;                                  //mov dx, cx
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _xchg(_dx, _bp);                            //xchg dx, bp
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    _dx += 0x0007;                              //add dx, 7
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx -= 1;                                   //dec dx
    memory(_cs, 0x2A11) = _dl;                  //mov cs:byte_21CA1, dl
loc_21C2C:                                      //loc_21C2C:
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_bp >= 0x0140)                          //jnb short loc_21C45
      goto loc_21C45;
    _dl = _ah;                                  //mov dl, ah
    _al >>= _cl;                                //shr al, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _dl >>= _cl;                                //shr dl, cl
    _al |= _dl;                                 //or al, dl
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_21C45:                                      //loc_21C45:
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _bh = memory(_cs, 0x2A11);                  //mov bh, cs:byte_21CA1
loc_21C4E:                                      //loc_21C4E:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_bp >= 0x0140)                          //jnb short loc_21C6B
      goto loc_21C6B;
    _dl = _ah;                                  //mov dl, ah
    _ah = memory(_ds, _si - 4);                 //mov ah, [si-4]
    _dh = memory(_ds, _si - 3);                 //mov dh, [si-3]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_21C6B:                                      //loc_21C6B:
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _bh -= 1;                                   //dec bh
    if (_bh != 0)                               //jnz short loc_21C4E
      goto loc_21C4E;
    if (_bp >= 0x0140)                          //jnb short loc_21C91
      goto loc_21C91;
    _al = _al ^ _al;                            //xor al, al
    _dl = _dl ^ _dl;                            //xor dl, dl
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _dh = memory(_ds, _si - 1);                 //mov dh, [si-1]
    _ax >>= _cl;                                //shr ax, cl
    _dx >>= _cl;                                //shr dx, cl
    _al = (~_al);                               //not al
    _al = _al & memory(_es, _di);               //and al, es:[di]
    _al |= _dl;                                 //or al, dl
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_21C91:                                      //loc_21C91:
    _di += 1;                                   //inc di
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _di += 0x0050;                              //add di, 50h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21C2C
      goto loc_21C2C;
loc_21C9B:                                      //loc_21C9B:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_21CA2()
{
    WORD _cs = _seg001;

    _push(_si);                                 //push si
    _push(_cs);                                 //push cs
    sub_21914();                                //call sub_21914
    _si = _pop();                               //pop si
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _di = memory16(_ds, _si + 12);              //mov di, [si+0Ch]
    _cx = _seg007;                              //mov cx, seg seg007
    if (!(_di & 0x0001))                        //jz short loc_21CBE
      goto loc_21CBE;
    _di -= 1;                                   //dec di
    _cx = _seg008;                              //mov cx, seg seg008
loc_21CBE:                                      //loc_21CBE:
    _push(_es);                                 //push es
    _es = _cx;                                  //mov es, cx
    _ax = _ax - memory16(_es, _di);             //sub ax, es:[di]
    _bx = _bx - memory16(_es, _di + 2);         //sub bx, es:[di+2]
    _es = _pop();                               //pop es
    sub_21CDF();                                //call sub_21CDF
    _ax += 0x0010;                              //add ax, 10h
    sub_21CDF();                                //call sub_21CDF
    _bx += 0x0010;                              //add bx, 10h
    sub_21CDF();                                //call sub_21CDF
    _ax -= 0x0010;                              //sub ax, 10h
    sub_21CDF();                                //call sub_21CDF
}

void sub_21CDF()
{
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0xfff0;                              //and cx, 0FFF0h
    _cx >>= 1;                                  //shr cx, 1
    if (_cx >= 0x00a0)                          //jnb short loc_21D3E
      goto loc_21D3E;
    _dx = _bx;                                  //mov dx, bx
    _dx = _dx + memory16(_ds, 0x9196);          //add dx, word_316C6
    _dx &= 0xfff0;                              //and dx, 0FFF0h
    _dx = _dx - memory16(_ds, 0x9196);          //sub dx, word_316C6
    _bx = _bx + memory16(_ds, 0x9196);          //add bx, word_316C6
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax &= 0x00fe;                              //and ax, 0FEh
    _si += _ax;                                 //add si, ax
    _ax = 0x0028;                               //mov ax, 28h
    _push(_dx);                                 //push dx
    _ax = _bx * _al;                            //mul bx
    _dx = _pop();                               //pop dx
    _si += _ax;                                 //add si, ax
    _push(_es);                                 //push es
    _ax = _seg000;                              //mov ax, seg seg000
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, 0xEFE0) = _ax;                //mov es:word_1EFE0, ax
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
    _bx = 0x0001;                               //mov bx, 1
    _si = 0xefe0;                               //mov si, 0EFE0h
    sub_1EDE0();                                //call sub_1EDE0
loc_21D3E:                                      //loc_21D3E:
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
}

void sub_21D42()
{
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
loc_21D47:                                      //loc_21D47:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
loc_21D50:                                      //loc_21D50:
    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_21D5D
      goto loc_21D5D;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_21D5D:                                      //loc_21D5D:
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_21D75
      goto loc_21D75;
    goto loc_21F45;                             //jmp loc_21F45
loc_21D75:                                      //loc_21D75:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_21D7F
      goto loc_21D7F;
    goto loc_21F45;                             //jmp loc_21F45
loc_21D7F:                                      //loc_21D7F:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_21D88
      goto loc_21D88;
    goto loc_21F45;                             //jmp loc_21F45
loc_21D88:                                      //loc_21D88:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_21D91
      goto loc_21D91;
    goto loc_21F45;                             //jmp loc_21F45
loc_21D91:                                      //loc_21D91:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_21DA5
      goto loc_21DA5;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
loc_21DA5:                                      //loc_21DA5:
    if ((short)_dx >= 0)                        //jns short loc_21DD7
      goto loc_21DD7;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    if ((short)_bp <= (short)0x0008)            //jle short loc_21DD2
      goto loc_21DD2;
    if ((short)_bp > (short)0x0010)             //jg short loc_21DC1
      goto loc_21DC1;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_21DD2;                             //jmp short loc_21DD2
loc_21DC1:                                      //loc_21DC1:
    if ((short)_bp > (short)0x0018)             //jg short loc_21DCE
      goto loc_21DCE;
    _dx = _ax;                                  //mov dx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    goto loc_21DD2;                             //jmp short loc_21DD2
loc_21DCE:                                      //loc_21DCE:
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
loc_21DD2:                                      //loc_21DD2:
    memory16(_ds, 0x0) = _ax;                   //mov word ptr unk_54890, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_21DD7:                                      //loc_21DD7:
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ds = _pop();                               //pop ds
    if ((short)_cx >= 0)                        //jns short loc_21DF2
      goto loc_21DF2;
    goto loc_21F41;                             //jmp loc_21F41
loc_21DF2:                                      //loc_21DF2:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax <= (short)0x0140)            //jle short loc_21DFE
      goto loc_21DFE;
    goto loc_21F43;                             //jmp loc_21F43
loc_21DFE:                                      //loc_21DFE:
    _dx = _cx;                                  //mov dx, cx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _di += _dx;                                 //add di, dx
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    if ((short)_bp > (short)0x0008)             //jg short loc_21E17
      goto loc_21E17;
    goto loc_21F1B;                             //jmp loc_21F1B
loc_21E17:                                      //loc_21E17:
    if ((short)_bp > (short)0x0010)             //jg short loc_21E1F
      goto loc_21E1F;
    goto loc_21EDF;                             //jmp loc_21EDF
loc_21E1F:                                      //loc_21E1F:
    if ((short)_bp <= (short)0x0018)            //jle short loc_21E8D
      goto loc_21E8D;
loc_21E24:                                      //loc_21E24:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _al >>= _cl;                                //shr al, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 1);                 //mov ah, [si-1]
    _al = _al ^ _al;                            //xor al, al
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 0x0048;                              //add di, 48h
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21E24
      goto loc_21E24;
    goto loc_21F45;                             //jmp loc_21F45
loc_21E8D:                                      //loc_21E8D:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _al >>= _cl;                                //shr al, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _al = _al ^ _al;                            //xor al, al
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 0x004a;                              //add di, 4Ah
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21E8D
      goto loc_21E8D;
    goto loc_21F45;                             //jmp short loc_21F45
loc_21EDF:                                      //loc_21EDF:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _al >>= _cl;                                //shr al, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _al = _al ^ _al;                            //xor al, al
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 0x004c;                              //add di, 4Ch
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21EDF
      goto loc_21EDF;
    goto loc_21F45;                             //jmp short loc_21F45
loc_21F1B:                                      //loc_21F1B:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _al >>= _cl;                                //shr al, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _si += 1;                                   //inc si
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _al = _al ^ _al;                            //xor al, al
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 0x004e;                              //add di, 4Eh
    _bl -= 1;                                   //dec bl
    if ((char)_bl >= 0)                         //jns short loc_21F1B
      goto loc_21F1B;
    goto loc_21F45;                             //jmp short loc_21F45
loc_21F41:                                      //loc_21F41:
    goto loc_21F45;                             //jmp short loc_21F45
loc_21F43:                                      //loc_21F43:
    _STOP_("goto $+2");                         //jmp short $+2
loc_21F45:                                      //loc_21F45:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_21F4B()
{
    _bx = memory16(_ds, _si + 18);              //mov bx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _bx = _bx - memory16(_ds, _si);             //sub bx, [si]
    if (_bx >= 0x0140)                          //jnb short locret_21FC8
      goto locret_21FC8;
    _dx = _dx - memory16(_ds, _si + 2);         //sub dx, [si+2]
    if ((short)_dx >= (short)0x00c0)            //jge short locret_21FC8
      goto locret_21FC8;
    _cx = memory16(_ds, _si + 4);               //mov cx, [si+4]
    _ax = _bx;                                  //mov ax, bx
    _bx &= 0x0003;                              //and bx, 3
    _ax = _ax ^ _bx;                            //xor ax, bx
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + _si + 6);         //mov si, [bx+si+6]
    if ((short)_dx >= 0)                        //jns short loc_21F82
      goto loc_21F82;
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _cx += _dx;                                 //add cx, dx
    if ((short)_cx <= (short)0)                  //jle short locret_21FC8
      goto locret_21FC8;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_21F82:                                      //loc_21F82:
    _bx = _dx;                                  //mov bx, dx
    _bx += _cx;                                 //add bx, cx
    _bx -= 0x00c0;                              //sub bx, 0C0h
    if (_FIXME_)                                //jle short loc_21F90
      goto loc_21F90;
    _cx -= _bx;                                 //sub cx, bx
    if (_FIXME_)                                //jle short locret_21FC8
      goto locret_21FC8;
loc_21F90:                                      //loc_21F90:
    _bx = _ax;                                  //mov bx, ax
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _di += _bx;                                 //add di, bx
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    if ((short)_bx >= (short)0x0138)            //jge short loc_21FBA
      goto loc_21FBA;
loc_21FAB:                                      //loc_21FAB:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_21FC9();                                //call sub_21FC9
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_21FC9();                                //call sub_21FC9
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_21FAB
      goto loc_21FAB;
    goto loc_21FC4;                             //jmp short loc_21FC4
loc_21FBA:                                      //loc_21FBA:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_21FC9();                                //call sub_21FC9
    _si += 1;                                   //inc si
    _di += 0x004e;                              //add di, 4Eh
    if (--_cx)                                  //loop loc_21FBA
      goto loc_21FBA;
loc_21FC4:                                      //loc_21FC4:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_21FC8:                                   //locret_21FC8:
    return;
}

void sub_21FC9()
{
    _ah = _al;                                  //mov ah, al
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    _rol(_ax, 1);                               //rol ax, 1
    _ASSERT(0); /* unk previous */ _rcl(_al, 1);//rcl al, 1
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
}

void sub_21FF4()
{
    _di = _di ^ _di;                            //xor di, di
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _dx = memory16(_ds, 0x9196);                //mov dx, word_316C6
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _cx = 0x0010;                               //mov cx, 10h
    _cx -= _dx;                                 //sub cx, dx
    _bl = 0x14;                                 //mov bl, 14h
loc_2200D:                                      //loc_2200D:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si += _dx;                                 //add si, dx
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_22021:                                      //loc_22021:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += 0x004c;                              //add di, 4Ch
    if (--_cx)                                  //loop loc_22021
      goto loc_22021;
    _bp = _di;                                  //mov bp, di
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _di += 0x0004;                              //add di, 4
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_2200D
      goto loc_2200D;
    _di = _bp;                                  //mov di, bp
    _di -= 0x004c;                              //sub di, 4Ch
    _bx = 0x0b14;                               //mov bx, 0B14h
    _bp = 0x004c;                               //mov bp, 4Ch
loc_22040:                                      //loc_22040:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _cx = _ds;                                  //mov cx, ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    _di -= 0x04fc;                              //sub di, 4FCh
    _ds = _cx;                                  //mov ds, cx
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_22040
      goto loc_22040;
    _bl = 0x14;                                 //mov bl, 14h
    _di += 0x04b0;                              //add di, 4B0h
    _bh -= 1;                                   //dec bh
    if (_bh != 0)                               //jnz short loc_22040
      goto loc_22040;
    if (!(_dx & _dx))                           //jz short loc_220CF
      goto loc_220CF;
    _bl = 0x14;                                 //mov bl, 14h
loc_220AC:                                      //loc_220AC:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _cx = _dx;                                  //mov cx, dx
loc_220BF:                                      //loc_220BF:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _bp;                                 //add di, bp
    if (--_cx)                                  //loop loc_220BF
      goto loc_220BF;
    _di = _pop();                               //pop di
    _di += 0x0004;                              //add di, 4
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_220AC
      goto loc_220AC;
loc_220CF:                                      //loc_220CF:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_220D4()
{
    sub_22152();                                //call near ptr sub_22152
    sub_220DC();                                //call sub_220DC
}

void sub_220DC()
{
    _push(_ds);                                 //push ds
    if (memory16(_ds, 0x3044) == 0x0004)        //jz short loc_22111
      goto loc_22111;
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _ds = _ax;                                  //mov ds, ax
    _si = _si ^ _si;                            //xor si, si
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x0064;                               //mov cx, 64h
loc_220F5:                                      //loc_220F5:
    _push(_cx);                                 //push cx
    _cx = 0x0028;                               //mov cx, 28h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _di += 0x1fb0;                              //add di, 1FB0h
    _cx = 0x0028;                               //mov cx, 28h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _di -= 0x2000;                              //sub di, 2000h
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_220F5
      goto loc_220F5;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    return;                                     //retn
loc_22111:                                      //loc_22111:
    _ax = 0xb000;                               //mov ax, 0B000h
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _ds = _ax;                                  //mov ds, ax
    _si = _si ^ _si;                            //xor si, si
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x015c;                               //mov cx, 15Ch
    _ax = 0x00ae;                               //mov ax, 0AEh
loc_22125:                                      //loc_22125:
    _push(_cx);                                 //push cx
    _cx = 0x0028;                               //mov cx, 28h
    _di += 0x0005;                              //add di, 5
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _di += 0x0005;                              //add di, 5
    _flags.sign = (short)(_di + 0x1fa6) < 0;    //add di, 1FA6h
    _di += 0x1fa6;
    if (!_flags.sign)                           //jns short loc_2213B
      goto loc_2213B;
    _di -= 0x7fa6;                              //sub di, 7FA6h
loc_2213B:                                      //loc_2213B:
    _ax += 0x0094;                              //add ax, 94h
    if ((short)_ax < (short)0x015c)             //jl short loc_22149
      goto loc_22149;
    _si -= 0x0050;                              //sub si, 50h
    _ax -= 0x015c;                              //sub ax, 15Ch
loc_22149:                                      //loc_22149:
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_22125
      goto loc_22125;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22152()
{
    _push(_es);                                 //push es
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _di = _di ^ _di;                            //xor di, di
    _cx = 0x1f40;                               //mov cx, 1F40h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
}

void sub_22163()
{
    sub_22152();                                //call near ptr sub_22152
}

void sub_22168()
{
    sub_10EF1();                                //call sub_10EF1
loc_2216D:                                      //loc_2216D:
    if (memory16(_ds, 0x3046) == 0x0000)        //jz short loc_2216D
      goto loc_2216D;
    memory16(_ds, 0x3046) = 0x0000;             //mov word_2B576, 0
    sub_220DC();                                //call sub_220DC
}

void sub_2217E()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = 0x0000;                               //mov si, 0
    _di = 0x3c00;                               //mov di, 3C00h
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_2219A()
{
    WORD _cs = _seg001;

    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = 0x9c80;                               //mov si, 9C80h
    _cx = 0x0050;                               //mov cx, 50h
loc_221A5:                                      //loc_221A5:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if ((short)_ax < 0)                         //js short loc_22223
      goto loc_22223;
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx = _ax;                                  //mov dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx += _ax;                                 //add bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx += _ax;                                 //add dx, ax
    if (_bx >= 0x013c)                          //jnb short loc_2221C
      goto loc_2221C;
    if (_dx >= 0x00bc)                          //jnb short loc_2221C
      goto loc_2221C;
    memory16(_ds, _si - 8) = _bx;               //mov [si-8], bx
    memory16(_ds, _si - 6) = _dx;               //mov [si-6], dx
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _ax = _bx;                                  //mov ax, bx
    _bx = _dx;                                  //mov bx, dx
    sub_10EDD();                                //call sub_10EDD
    if (_FIXME_)                                //jz short loc_221EC
      goto loc_221EC;
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_cs, 0x3DA8);                //mov ax, cs:word_23038
    _push(_si);                                 //push si
    sub_10EE1();                                //call sub_10EE1
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _cx = _pop();                               //pop cx
    _sp += 0x0004;                              //add sp, 4
    goto loc_2221C;                             //jmp short loc_2221C
loc_221EC:                                      //loc_221EC:
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = _pop();                               //pop ax
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _ax = 0xf000;                               //mov ax, 0F000h
    _ax >>= _cl;                                //shr ax, cl
    _cx = _pop();                               //pop cx
    memory(_es, _di) |= _ah;                    //or es:[di], ah
    memory(_es, _di + 80) |= _ah;               //or es:[di+50h], ah
    memory(_es, _di + 1) |= _al;                //or es:[di+1], al
    memory(_es, _di + 81) |= _al;               //or es:[di+51h], al
    goto loc_22226;                             //jmp short loc_22226
loc_2221C:                                      //loc_2221C:
    memory16(_ds, _si - 8) = 0xffff;            //mov word ptr [si-8], 0FFFFh
    goto loc_22226;                             //jmp short loc_22226
loc_22223:                                      //loc_22223:
    _si += 0x0006;                              //add si, 6
loc_22226:                                      //loc_22226:
    if (--_cx)                                  //loop loc_2222A
      goto loc_2222A;
    goto loc_2222D;                             //jmp short loc_2222D
loc_2222A:                                      //loc_2222A:
    goto loc_221A5;                             //jmp loc_221A5
loc_2222D:                                      //loc_2222D:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_22232()
{
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _push(_si);                                 //push si
    sub_2224B();                                //call near ptr sub_2224B
    _si = _pop();                               //pop si
}

void sub_2224B()
{
    memory16(_ds, 0xFCE2) += 0x0004;            //add word_38212, 4
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0x32C0) = _ax;                //mov word_2B7F0, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    if ((short)memory16(_ds, 0xFCE2) > (short)0xfff0)//jg short loc_22280
      goto loc_22280;
    goto loc_22349;                             //jmp loc_22349
loc_22280:                                      //loc_22280:
    if ((short)memory16(_ds, 0xFCE2) < (short)0x0140)//jl short loc_2228B
      goto loc_2228B;
    goto loc_22349;                             //jmp loc_22349
loc_2228B:                                      //loc_2228B:
    if ((short)memory16(_ds, 0x32BE) < (short)0x0041)//jl short loc_222B5
      goto loc_222B5;
    _bx = memory16(_ds, 0xFCFE);                //mov bx, word_3822E
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 12994);           //mov si, [bx+32C2h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    _dx += 1;                                   //inc dx
    sub_2191D();                                //call near ptr sub_2191D
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0x32BC);                //mov ax, word_2B7EC
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
loc_222B5:                                      //loc_222B5:
    _ax = memory16(_ds, 0x32BE);                //mov ax, word_2B7EE
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    _si = 0x32c8;                               //mov si, 32C8h
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 13000);           //mov si, [bx+32C8h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    sub_2191D();                                //call near ptr sub_2191D
    if ((short)memory16(_ds, 0x32BC) < 0 /*CHECK*/)//js short loc_22349
      goto loc_22349;
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x32BC);                //mov di, word_2B7EC
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _di += _ax;                                 //add di, ax
    _bp = memory16(_ds, 0x32BA);                //mov bp, word_2B7EA
    _bp &= 0xfffc;                              //and bp, 0FFFCh
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _cx = memory16(_ds, 0x32BA);                //mov cx, word_2B7EA
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _al = 0xff;                                 //mov al, 0FFh
    _al >>= _cl;                                //shr al, cl
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _al = 0xff;                                 //mov al, 0FFh
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _ah = 0xff;                                 //mov ah, 0FFh
    _al = memory(_ds, _bx + 16957);             //mov al, [bx+423Dh]
    _ax >>= _cl;                                //shr ax, cl
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _ah = memory(_ds, _bx + 16957);             //mov ah, [bx+423Dh]
    _al = memory(_ds, _bx + 16958);             //mov al, [bx+423Eh]
    _ax >>= _cl;                                //shr ax, cl
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _ah = memory(_ds, _bx + 16958);             //mov ah, [bx+423Eh]
    _al = _al ^ _al;                            //xor al, al
    _ax >>= _cl;                                //shr ax, cl
    sub_2234E();                                //call sub_2234E
loc_22349:                                      //loc_22349:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2234E()
{
    if (_bp >= 0x0140)                          //jnb short locret_22385
      goto locret_22385;
    if (!(_al & _al))                           //jz short locret_22385
      goto locret_22385;
    if (_al == 0xff)                            //jz short loc_22371
      goto loc_22371;
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _cx = memory16(_ds, 0x32BE);                //mov cx, word_2B7EE
    if (_cx == 0)                               //jcxz short loc_2236E
      goto loc_2236E;
loc_22364:                                      //loc_22364:
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di -= 0x0050;                              //sub di, 50h
    if ((short)_di < 0)                         //js short loc_2236E
      goto loc_2236E;
    if (--_cx)                                  //loop loc_22364
      goto loc_22364;
loc_2236E:                                      //loc_2236E:
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
    return;                                     //retn
loc_22371:                                      //loc_22371:
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    _cx = memory16(_ds, 0x32BE);                //mov cx, word_2B7EE
    if (_cx == 0)                               //jcxz short loc_2236E
      goto loc_2236E;
loc_22379:                                      //loc_22379:
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di -= 0x0050;                              //sub di, 50h
    if ((short)_di < 0)                         //js short loc_2236E
      goto loc_2236E;
    if (--_cx)                                  //loop loc_22379
      goto loc_22379;
    _di = _pop();                               //pop di
    _cx = _pop();                               //pop cx
locret_22385:                                   //locret_22385:
    return;
}

void sub_22386()
{
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    _dx = memory16(_ds, 0x9154);                //mov dx, word_31684
    _flags.carry = _ax < memory16(_ds, 0x9156); //sub ax, word_31686
    _ax = _ax - memory16(_ds, 0x9156);
    _dx -= memory16(_ds, 0x9158) + _flags.carry;//sbb dx, word_31688
    if ((short)_ax < 0)                         //js short loc_22403
      goto loc_22403;
    if (_ax != 0)                               //jnz short loc_2239D
      goto loc_2239D;
    if (!(_ax & _ax))                           //jz short locret_22402
      goto locret_22402;
loc_2239D:                                      //loc_2239D:
    if (_dx & _dx)                              //jnz short loc_223AB
      goto loc_223AB;
    if ((short)_ax < (short)0x00c8)             //jl short loc_223C6
      goto loc_223C6;
    if ((short)_ax < (short)0x07d0)             //jl short loc_223B9
      goto loc_223B9;
loc_223AB:                                      //loc_223AB:
    _bx = 0x921f;                               //mov bx, 921Fh
    _di = 0x3c0c;                               //mov di, 3C0Ch
    memory16(_ds, 0x9156) += 0x03e8;            //add word_31686, 3E8h
    goto loc_223D1;                             //jmp short loc_223D1
loc_223B9:                                      //loc_223B9:
    _bx = 0x9220;                               //mov bx, 9220h
    _di = 0x3c0e;                               //mov di, 3C0Eh
    memory16(_ds, 0x9156) += 0x0064;            //add word_31686, 64h
    goto loc_223D1;                             //jmp short loc_223D1
loc_223C6:                                      //loc_223C6:
    _bx = 0x9221;                               //mov bx, 9221h
    _di = 0x3c10;                               //mov di, 3C10h
    memory16(_ds, 0x9156) += 0x000a;            //add word_31686, 0Ah
loc_223D1:                                      //loc_223D1:
    memory16(_ds, 0x9158) = memory16(_ds, 0x9158) + 0x0000 + _flags.carry; _ASSERT(0);
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_223E0
      goto loc_223E0;
    _di += 0x0036;                              //add di, 36h
loc_223E0:                                      //loc_223E0:
    _si = 0x0500;                               //mov si, 500h
loc_223E3:                                      //loc_223E3:
    memory(_ds, _bx) += 1;                      //inc byte ptr [bx]
    if ((char)memory(_ds, _bx) < (char)0x0a)    //jl short loc_223ED
      goto loc_223ED;
    memory(_ds, _bx) = 0x00;                    //mov byte ptr [bx], 0
loc_223ED:                                      //loc_223ED:
    _al = memory(_ds, _bx);                     //mov al, [bx]
    sub_2244F();                                //call near ptr sub_2244F
    if (memory(_ds, _bx) != 0x00)               //jnz short locret_22402
      goto locret_22402;
    _di -= 0x0002;                              //sub di, 2
    _bx -= 1;                                   //dec bx
    if ((short)_bx >= (short)0x921c)            //jge short loc_223E3
      goto loc_223E3;
locret_22402:                                   //locret_22402:
    return;                                     //retf
loc_22403:                                      //loc_22403:
    _ax = memory16(_ds, 0x9156);                //mov ax, word_31686
    memory16(_ds, 0x9152) = _ax;                //mov word_31682, ax
    _ax = memory16(_ds, 0x9158);                //mov ax, word_31688
    memory16(_ds, 0x9154) = _ax;                //mov word_31684, ax
}

void sub_22410()
{
    _di = 0x3c06;                               //mov di, 3C06h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_2241D
      goto loc_2241D;
    _di = 0x3c3c;                               //mov di, 3C3Ch
loc_2241D:                                      //loc_2241D:
    _si = 0x0500;                               //mov si, 500h
    _cx = 0x0007;                               //mov cx, 7
loc_22423:                                      //loc_22423:
    _al = _al ^ _al;                            //xor al, al
    sub_2244F();                                //call near ptr sub_2244F
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_22423
      goto loc_22423;
}

void sub_2242F()
{
    _ax = memory16(_ds, 0x918A);                //mov ax, word_316BA
    if ((short)_ax <= (short)0x0009)            //jle short loc_2243A
      goto loc_2243A;
    _ax = 0x0009;                               //mov ax, 9
loc_2243A:                                      //loc_2243A:
    _si = 0x0640;                               //mov si, 640h
    _di = 0x3c72;                               //mov di, 3C72h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_2244A
      goto loc_2244A;
    _di = 0x3c7c;                               //mov di, 3C7Ch
loc_2244A:                                      //loc_2244A:
    sub_2244F();                                //call near ptr sub_2244F
}

void sub_2244F()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0008;                               //mov cx, 8
    _ax = 0x004e;                               //mov ax, 4Eh
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_22490()
{
    sub_22495();                                //call near ptr sub_22495
}

void sub_22495()
{
    _di = memory16(_ds, 0x3752);                //mov di, word_2BC82
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _push(memory16(_ds, _si + 20));             //push word ptr [si+14h]
    _push(_si);                                 //push si
    memory(_ds, _si + 20) = 0x00;               //mov byte ptr [si+14h], 0
    sub_2253A();                                //call near ptr sub_2253A
    _si = _pop();                               //pop si
    memory16(_ds, _si + 20) = _pop();           //pop word ptr [si+14h]
}

void sub_224B0()
{
    _di = 0x35e2;                               //mov di, 35E2h
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    memory16(_ds, 0xFCE4) = _dx;                //mov word_38214, dx
    _bx = 0x3756;                               //mov bx, 3756h
    _si = 0x0500;                               //mov si, 500h
loc_224C0:                                      //loc_224C0:
    if (memory16(_ds, _bx) == 0x0000)           //jz short locret_224F4
      goto locret_224F4;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_224C7:                                      //loc_224C7:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    _FIXME_;                                    //sbb word_38214, ax
    if ((short)memory16(_ds, 0xFCE2) < 0)       //js short loc_224D9
      goto loc_224D9;
    _dx += 1;                                   //inc dx
    goto loc_224C7;                             //jmp short loc_224C7
loc_224D9:                                      //loc_224D9:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, 0xFCE4) = memory16(_ds, 0xFCE4) + _ax + _flags.carry; _ASSERT(0);
    _bx += 0x0004;                              //add bx, 4
    _al = _dl;                                  //mov al, dl
    sub_2244F();                                //call near ptr sub_2244F
    _di += 0x0002;                              //add di, 2
    goto loc_224C0;                             //jmp short loc_224C0
locret_224F4:                                   //locret_224F4:
    return;
}

void sub_224F5()
{
    sub_22152();                                //call near ptr sub_22152
    memory16(_ds, 0x3752) = 0x000c;             //mov word_2BC82, 0Ch
    _si = 0x352b;                               //mov si, 352Bh
    sub_22490();                                //call near ptr sub_22490
    _si = 0x358f;                               //mov si, 358Fh
    _di = 0x0be8;                               //mov di, 0BE8h
    _cx = 0x000a;                               //mov cx, 0Ah
loc_2250F:                                      //loc_2250F:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    sub_22529();                                //call near ptr sub_22529
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _si += 0x000f;                              //add si, 0Fh
    _di += 0x0500;                              //add di, 500h
    if (--_cx)                                  //loop loc_2250F
      goto loc_2250F;
    sub_21870();                                //call near ptr sub_21870
{sub_22168(); return; };                        //jmp near ptr sub_22168
}

void sub_22529()
{
    _push(memory16(_ds, _si + 15));             //push word ptr [si+0Fh]
    _push(_si);                                 //push si
    memory(_ds, _si + 15) = 0x00;               //mov byte ptr [si+0Fh], 0
    sub_22548();                                //call near ptr sub_22548
    _si = _pop();                               //pop si
    memory16(_ds, _si + 15) = _pop();           //pop word ptr [si+0Fh]
}

void sub_2253A()
{
    _bp = 0x0780;                               //mov bp, 780h
    _cx = 0x0016;                               //mov cx, 16h
    sub_22553();                                //call near ptr sub_22553
}

void sub_22545()
{
    _di = 0x39ac;                               //mov di, 39ACh
    _STOP_("sp-trace-fail");                    //sub_22545 endp_failed
    _STOP_("continues");                        //sub_22548 proc far
}

void sub_22548()
{
    _bp = 0x2300;                               //mov bp, 2300h
    _cx = 0x000e;                               //mov cx, 0Eh
    sub_22553();                                //call near ptr sub_22553
}

void sub_22553()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short locret_22567
      goto locret_22567;
    _xchg(_si, _bp);                            //xchg si, bp
    _push(_si);                                 //push si
    sub_22568();                                //call near ptr sub_22568
    _si = _pop();                               //pop si
    _xchg(_si, _bp);                            //xchg si, bp
    _di += 0x0004;                              //add di, 4
{sub_22553(); return; };                        //jmp short near ptr sub_22553
locret_22567:                                   //locret_22567:
    return;
}

void sub_22568()
{
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    memory(_ds, 0x33F2) = _al;                  //mov byte_2B922, al
    _di = 0x33ca;                               //mov di, 33CAh
    _cx = 0x33f2;                               //mov cx, 33F2h
    _cx -= 0x33ca;                              //sub cx, 33CAh
    _cx += 1;                                   //inc cx
    _repne_scasb();                             //repne scasb
    _ax = _di;                                  //mov ax, di
    _ax -= 0x33cb;                              //sub ax, 33CBh
    _di = _pop();                               //pop di
    if (_ax == 0x0028)                          //jz short loc_225A9
      goto loc_225A9;
    _cx = _pop();                               //pop cx
    _ax = _cx * _al;                            //mul cx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_cx);                                 //push cx
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x004c;                               //mov ax, 4Ch
loc_2259E:                                      //loc_2259E:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di += _ax;                                 //add di, ax
    if (--_cx)                                  //loop loc_2259E
      goto loc_2259E;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
loc_225A9:                                      //loc_225A9:
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
}

void sub_225AC()
{
    if (memory(_ds, 0x8FAF) == 0x00)            //jz short locret_22615
      goto locret_22615;
    memory(_ds, 0x8FAF) = 0x00;                 //mov byte_314DF, 0
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _bx = memory16(_ds, 0x9186);                //mov bx, word_316B6
    if ((short)_bx <= (short)0x0027)            //jle short loc_225C9
      goto loc_225C9;
    _bx = 0x0027;                               //mov bx, 27h
loc_225C9:                                      //loc_225C9:
    _bx -= 0x0027;                              //sub bx, 27h
    _bx = -_bx;                                 //neg bx
    _di = 0x3d06;                               //mov di, 3D06h
    _al = 0x03;                                 //mov al, 3
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_225DF
      goto loc_225DF;
    _di = 0x3d1f;                               //mov di, 3D1Fh
    _al = 0x0c;                                 //mov al, 0Ch
loc_225DF:                                      //loc_225DF:
    _cx = 0x0027;                               //mov cx, 27h
    _ah = _al;                                  //mov ah, al
    _ah = (~_ah);                               //not ah
loc_225E6:                                      //loc_225E6:
    if (_cx != _bx)                             //jnz short loc_225EC
      goto loc_225EC;
    _al = _al ^ _al;                            //xor al, al
loc_225EC:                                      //loc_225EC:
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di + 80) &= _ah;               //and es:[di+50h], ah
    memory(_es, _di + 160) &= _ah;              //and es:[di+0A0h], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    memory(_es, _di + 80) |= _al;               //or es:[di+50h], al
    memory(_es, _di + 160) |= _al;              //or es:[di+0A0h], al
    _ror(_al, 1);                               //ror al, 1
    _ror(_al, 1);                               //ror al, 1
    _ror(_ah, 1);                               //ror ah, 1
    _ror(_ah, 1);                               //ror ah, 1
    _flags.carry = !!(_ah & 0x80);
    if (_flags.carry)                           //jb short loc_2260F
      goto loc_2260F;
    _di += 1;                                   //inc di
loc_2260F:                                      //loc_2260F:
    if (--_cx)                                  //loop loc_225E6
      goto loc_225E6;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_22615:                                   //locret_22615:
    return;
}

void sub_22616()
{
    if (memory16(_ds, 0x33BC) != 0x0000)        //jnz short loc_2262F
      goto loc_2262F;
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _ds = _ax;                                  //mov ds, ax
    _si = 0x3c00;                               //mov si, 3C00h
    _di = 0x923e;                               //mov di, 923Eh
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _ds = _pop();                               //pop ds
loc_2262F:                                      //loc_2262F:
    memory(_ds, 0x33BC) += 1;                   //inc byte ptr word_2B8EC
}

void sub_22634()
{
    memory(_ds, 0x33BC) -= 1;                   //dec byte ptr word_2B8EC
    if (memory(_ds, 0x33BC) != 0)               //jnz short locret_2264C
      goto locret_2264C;
    _push(_es);                                 //push es
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = 0x923e;                               //mov si, 923Eh
    _di = 0x3c00;                               //mov di, 3C00h
    _cx = 0x0140;                               //mov cx, 140h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _es = _pop();                               //pop es
locret_2264C:                                   //locret_2264C:
    return;
}

void sub_2264D()
{
    sub_220DC();                                //call sub_220DC
}

void sub_22651()
{
    WORD _cs = _seg001;

    sub_22152();                                //call near ptr sub_22152
    _si = 0x3740;                               //mov si, 3740h
loc_22658:                                      //loc_22658:
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    if (!(_ax & _ax))                           //jz short loc_2267F
      goto loc_2267F;
    _bp = _ax;                                  //mov bp, ax
    _di = memory16(_cs, _si);                   //mov di, cs:[si]
    _si += 0x0002;                              //add si, 2
    _dx = memory16(_cs, _si);                   //mov dx, cs:[si]
    _si += 0x0002;                              //add si, 2
    _cx = memory16(_cs, _si);                   //mov cx, cs:[si]
    _si += 0x0002;                              //add si, 2
    _push(_si);                                 //push si
    _si = _bp;                                  //mov si, bp
    sub_2273E();                                //call sub_2273E
    _si = _pop();                               //pop si
    goto loc_22658;                             //jmp short loc_22658
loc_2267F:                                      //loc_2267F:
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_22681:                                      //loc_22681:
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_22683:                                      //loc_22683:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xec90;                               //mov si, 0EC90h
    sub_2191D();                                //call near ptr sub_2191D
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xefc0;                               //mov si, 0EFC0h
    sub_2191D();                                //call near ptr sub_2191D
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _cx += 0x0029;                              //add cx, 29h
    if ((short)_cx < (short)0x00cd)             //jl short loc_22683
      goto loc_22683;
    _dx += 0x0029;                              //add dx, 29h
    if ((short)_dx < (short)0x00a4)             //jl short loc_22681
      goto loc_22681;
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_226BF
      goto loc_226BF;
    _si = 0xfc4a;                               //mov si, 0FC4Ah
    _cx = 0x00c1;                               //mov cx, 0C1h
    _dx = 0x00bc;                               //mov dx, 0BCh
    sub_2191D();                                //call near ptr sub_2191D
loc_226BF:                                      //loc_226BF:
    _si = 0xfe00;                               //mov si, 0FE00h
    _cx = 0x0059;                               //mov cx, 59h
    _dx = 0x00aa;                               //mov dx, 0AAh
    sub_2191D();                                //call near ptr sub_2191D
    _si = 0xfe74;                               //mov si, 0FE74h
    _cx = 0x00a5;                               //mov cx, 0A5h
    _dx = 0x00bc;                               //mov dx, 0BCh
    sub_2191D();                                //call near ptr sub_2191D
    sub_2264D();                                //call near ptr sub_2264D
}

void sub_226DE()
{
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    sub_2191D();                                //call near ptr sub_2191D
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
    _si = 0xfd3a;                               //mov si, 0FD3Ah
    if (_ax == 0xe3ec)                          //jz short loc_22719
      goto loc_22719;
    _si = 0xfd7c;                               //mov si, 0FD7Ch
    if (_ax == 0xe5f0)                          //jz short loc_22719
      goto loc_22719;
    _si = 0xfdbe;                               //mov si, 0FDBEh
    if (_ax == 0xe7f4)                          //jz short loc_22719
      goto loc_22719;
    _si = 0xfc74;                               //mov si, 0FC74h
    if (_ax == 0xdde0)                          //jz short loc_22719
      goto loc_22719;
    _si = 0xfcb6;                               //mov si, 0FCB6h
    if (_ax == 0xdfe4)                          //jz short loc_22719
      goto loc_22719;
    _si = 0xfcf8;                               //mov si, 0FCF8h
    if (_ax == 0xe1e8)                          //jz short loc_22719
      goto loc_22719;
    return;                                     //retf
loc_22719:                                      //loc_22719:
    sub_2191D();                                //call near ptr sub_2191D
}

void sub_2271E()
{
    sub_22152();                                //call near ptr sub_22152
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _di = 0x1f68;                               //mov di, 1F68h
    memory(_es, _di) |= 0x3c;                   //or byte ptr es:[di], 3Ch
    memory(_es, _di + 80) |= 0xff;              //or byte ptr es:[di+50h], 0FFh
    memory(_es, _di + 160) |= 0x3c;             //or byte ptr es:[di+0A0h], 3Ch
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2273E()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
loc_22749:                                      //loc_22749:
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _cx = _dx;                                  //mov cx, dx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _di += 0x0050;                              //add di, 50h
    if (--_cx)                                  //loop loc_22749
      goto loc_22749;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_2275C()
{
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _di = 0x23d4;                               //mov di, 23D4h
    _cx = 0x0045;                               //mov cx, 45h
    sub_2276F();                                //call sub_2276F
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2276F()
{
    goto loc_2278A;                             //jmp short loc_2278A
loc_22771:                                      //loc_22771:
    memory(_es, _di + 1) &= 0xfc;               //and byte ptr es:[di+1], 0FCh
    _di += 0x0002;                              //add di, 2
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_cx);                                 //push cx
    _cx = 0x000b;                               //mov cx, 0Bh
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _cx = _pop();                               //pop cx
    _stosb<MemAuto, DirAuto>();                 //stosb
    memory(_es, _di) &= 0x3f;                   //and byte ptr es:[di], 3Fh
    _di += 0x0037;                              //add di, 37h
loc_2278A:                                      //loc_2278A:
    if (--_cx)                                  //loop loc_22771
      goto loc_22771;
}

void sub_2278D()
{
    _si = 0x8430;                               //mov si, 8430h
    _di = 0x0304;                               //mov di, 304h
    _cx = 0x0034;                               //mov cx, 34h
    sub_228E5();                                //call sub_228E5
    _si = 0x8f90;                               //mov si, 8F90h
    _di = 0x1de4;                               //mov di, 1DE4h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_228E5();                                //call sub_228E5
    _si = 0x91c0;                               //mov si, 91C0h
    if (memory(_ds, 0x8F40) == 0x00)            //jz short loc_227C3
      goto loc_227C3;
    sub_10ED9();                                //call sub_10ED9
    _cx = 0x0004;                               //mov cx, 4
    goto loc_227BD;                             //jmp short loc_227BD
loc_227B9:                                      //loc_227B9:
    _si += 0x03b8;                              //add si, 3B8h
loc_227BD:                                      //loc_227BD:
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_flags.carry)                           //jb short loc_227C3
      goto loc_227C3;
    if (--_cx)                                  //loop loc_227B9
      goto loc_227B9;
loc_227C3:                                      //loc_227C3:
    _di = 0x1344;                               //mov di, 1344h
    _cx = 0x0022;                               //mov cx, 22h
    sub_228E5();                                //call sub_228E5
    sub_10EE5();                                //call sub_10EE5
    sub_10EE9();                                //call sub_10EE9
    if (memory16(_ds, 0x8F3C) != 0x0000)        //jnz short loc_227E0
      goto loc_227E0;
    goto locret_228BC;                          //jmp locret_228BC
loc_227E0:                                      //loc_227E0:
    if ((short)memory16(_ds, 0x8F3C) <= (short)0x0008)
      goto loc_2281E;
    _di = 0x0304;                               //mov di, 304h
    _si = 0x5c18;                               //mov si, 5C18h
    _ax = 0x0030;                               //mov ax, 30h
    _ax = _ax - memory16(_ds, 0x8F3C);          //sub ax, word_3146C
    _dx = 0x001c;                               //mov dx, 1Ch
    _ax = _dx * _al;                            //mul dx
    _si += _ax;                                 //add si, ax
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_228E5();                                //call sub_228E5
    _di = 0x2384;                               //mov di, 2384h
    _ax = 0x0050;                               //mov ax, 50h
    _ax = memory16(_ds, 0x8F3C) * _al;          //mul word_3146C
    _di -= _ax;                                 //sub di, ax
    _si = 0x64d8;                               //mov si, 64D8h
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_228E5();                                //call sub_228E5
loc_2281E:                                      //loc_2281E:
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = memory16(_ds, 0x8F3C);                //mov dx, word_3146C
    _dx += 1;                                   //inc dx
    _push(_dx);                                 //push dx
    _si = 0xabe4;                               //mov si, 0ABE4h
    sub_2191D();                                //call near ptr sub_2191D
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xace4;                               //mov si, 0ACE4h
    sub_2191D();                                //call near ptr sub_2191D
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xad94;                               //mov si, 0AD94h
    sub_2191D();                                //call near ptr sub_2191D
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = 0x0070;                               //mov dx, 70h
    _dx = _dx - memory16(_ds, 0x8F3C);          //sub dx, word_3146C
    _push(_dx);                                 //push dx
    _si = 0xae94;                               //mov si, 0AE94h
    sub_2191D();                                //call near ptr sub_2191D
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xaf94;                               //mov si, 0AF94h
    sub_2191D();                                //call near ptr sub_2191D
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xb044;                               //mov si, 0B044h
    sub_2191D();                                //call near ptr sub_2191D
    if ((short)memory16(_ds, 0x8F3C) >= (short)0x0008)
      goto locret_228BC;
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _di = 0x0034;                               //mov di, 34h
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4758;                               //mov si, 4758h
    _cx = 0x0009;                               //mov cx, 9
loc_22889:                                      //loc_22889:
    _push(_cx);                                 //push cx
    _cx = 0x000e;                               //mov cx, 0Eh
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cx = _pop();                               //pop cx
    _di += 0x0034;                              //add di, 34h
    _si += 0x0010;                              //add si, 10h
    if (--_cx)                                  //loop loc_22889
      goto loc_22889;
    _ds = _pop();                               //pop ds
    _di = 0x2104;                               //mov di, 2104h
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4998;                               //mov si, 4998h
    _cx = 0x0009;                               //mov cx, 9
loc_228A8:                                      //loc_228A8:
    _push(_cx);                                 //push cx
    _cx = 0x000e;                               //mov cx, 0Eh
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cx = _pop();                               //pop cx
    _di += 0x0034;                              //add di, 34h
    _si += 0x0010;                              //add si, 10h
    if (--_cx)                                  //loop loc_228A8
      goto loc_228A8;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
locret_228BC:                                   //locret_228BC:
    return;
}

void sub_228BD()
{
    if (memory16(_ds, 0x8F3E) == 0x0000)        //jz short locret_228E4
      goto locret_228E4;
    _di = 0x23d4;                               //mov di, 23D4h
    _cx = 0x0045;                               //mov cx, 45h
    _cx = _cx - memory16(_ds, 0x8F3E);          //sub cx, word_3146E
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    sub_2276F();                                //call sub_2276F
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _si = 0x6d98;                               //mov si, 6D98h
    _cx = memory16(_ds, 0x8F3E);                //mov cx, word_3146E
    sub_228E5();                                //call sub_228E5
locret_228E4:                                   //locret_228E4:
    return;
}

void sub_228E5()
{
    _push(_ds);                                 //push ds
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
loc_228F0:                                      //loc_228F0:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al &= 0x03;                                //and al, 3
    memory(_es, _di + 1) |= _al;                //or es:[di+1], al
    _di += 0x0002;                              //add di, 2
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _push(_cx);                                 //push cx
    _cx = 0x000b;                               //mov cx, 0Bh
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si += 0x0002;                              //add si, 2
    _cx = _pop();                               //pop cx
    _di += 0x0036;                              //add di, 36h
    if (--_cx)                                  //loop loc_228F0
      goto loc_228F0;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22911()
{
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _si = memory16(_ds, _di + 4);               //mov si, [di+4]
    _si <<= 1;                                  //shl si, 1
    _si = memory16(_ds, _si - 26818);           //mov si, [si-68C2h]
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _si += _ax;                                 //add si, ax
    _bl = 0x1c;                                 //mov bl, 1Ch
loc_22931:                                      //loc_22931:
    _ax = 0xff00;                               //mov ax, 0FF00h
    _ax >>= _cl;                                //shr ax, cl
    _ax = (~_ax);                               //not ax
    memory(_es, _si) &= _ah;                    //and es:[si], ah
    memory(_es, _si + 8) &= _al;                //and es:[si+8], al
    sub_10ED9();                                //call sub_10ED9
    _al = _ah;                                  //mov al, ah
    _ax >>= _cl;                                //shr ax, cl
    memory(_es, _si) |= _ah;                    //or es:[si], ah
    memory(_es, _si + 1) = _al;                 //mov es:[si+1], al
    memory(_es, _si + 2) = _al;                 //mov es:[si+2], al
    memory(_es, _si + 3) = _al;                 //mov es:[si+3], al
    memory(_es, _si + 4) = _al;                 //mov es:[si+4], al
    memory(_es, _si + 5) = _al;                 //mov es:[si+5], al
    memory(_es, _si + 6) = _al;                 //mov es:[si+6], al
    memory(_es, _si + 7) = _al;                 //mov es:[si+7], al
    _al = _al ^ _ah;                            //xor al, ah
    memory(_es, _si + 8) |= _al;                //or es:[si+8], al
    _si += 0x0050;                              //add si, 50h
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_22931
      goto loc_22931;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_22979()
{
    if (_al != 0x0d)                            //jnz short loc_22982
      goto loc_22982;
{loc_10EED(); return; };                        //
loc_22982:                                      //loc_22982:
    _di = memory16(_ds, 0x8F48);                //mov di, word_31478
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, 0x8F46);          //add di, word_31476
    _al -= 0x20;                                //sub al, 20h
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si = 0x7cb0;                               //mov si, 7CB0h
    _si += _ax;                                 //add si, ax
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0008;                               //mov cx, 8
loc_229AF:                                      //loc_229AF:
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _si += 1;                                   //inc si
    _di += 0x004f;                              //add di, 4Fh
    if (--_cx)                                  //loop loc_229AF
      goto loc_229AF;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    memory16(_ds, 0x8F46) += 1;                 //inc word_31476
}

void sub_229C0()
{
    _si = 0xaf80;                               //mov si, 0AF80h
    _di = 0x0f0c;                               //mov di, 0F0Ch
    _dx = 0x001a;                               //mov dx, 1Ah
    _cx = 0x0036;                               //mov cx, 36h
    sub_2273E();                                //call sub_2273E
}

void sub_22A02()
{
    if ((short)memory16(_ds, _si + 28) < 0 /*CHECK*/)//js short loc_22A0E
      goto loc_22A0E;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_22A1E
      goto loc_22A1E;
loc_22A0E:                                      //loc_22A0E:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32CA);                //mov si, word_2B7FA
    sub_2191D();                                //call near ptr sub_2191D
    _si = _pop();                               //pop si
loc_22A1E:                                      //loc_22A1E:
    if ((short)memory16(_ds, _si + 28) >= 0 /*CHECK*/)
      goto loc_22A2A;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_22A3E
      goto loc_22A3E;
loc_22A2A:                                      //loc_22A2A:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx + memory16(_ds, _si + 26);        //add dx, [si+1Ah]
    _dx -= 1;                                   //dec dx
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32C4);                //mov si, word_2B7F4
    sub_2191D();                                //call near ptr sub_2191D
    _si = _pop();                               //pop si
loc_22A3E:                                      //loc_22A3E:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    _ax -= 1;                                   //dec ax
    if (_FIXME_)                                //jle short locret_22ABC
      goto locret_22ABC;
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax -= 1;                                   //dec ax
    _dx = memory16(_ds, 0x32BC);                //mov dx, word_2B7EC
    _dx -= 0x00bf;                              //sub dx, 0BFh
    if (_FIXME_)                                //jle short loc_22A68
      goto loc_22A68;
    _ax -= _dx;                                 //sub ax, dx
    if (_FIXME_)                                //jle short locret_22ABC
      goto locret_22ABC;
    memory16(_ds, 0x32BC) = 0x00bf;             //mov word_2B7EC, 0BFh
loc_22A68:                                      //loc_22A68:
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    _ax = memory16(_ds, 0x4255);                //mov ax, seg_2C785
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x32BC);                //mov di, word_2B7EC
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _di += _ax;                                 //add di, ax
    _bp = memory16(_ds, 0x32BA);                //mov bp, word_2B7EA
    _bp &= 0xfffc;                              //and bp, 0FFFCh
    _cx = memory16(_ds, 0x32BA);                //mov cx, word_2B7EA
    _cx &= 0x0003;                              //and cx, 3
    _cx <<= 1;                                  //shl cx, 1
    _al = 0xff;                                 //mov al, 0FFh
    _al >>= _cl;                                //shr al, cl
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _al = 0xff;                                 //mov al, 0FFh
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _al = 0xff;                                 //mov al, 0FFh
    sub_2234E();                                //call sub_2234E
    _di += 1;                                   //inc di
    _bp += 0x0004;                              //add bp, 4
    _ax = 0xff00;                               //mov ax, 0FF00h
    _ax >>= _cl;                                //shr ax, cl
    sub_2234E();                                //call sub_2234E
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_22ABC:                                   //locret_22ABC:
    return;
}

void sub_22CA8()
{
    memory16(_ds, 0x439D) = _si;                //mov word_2C8CD, si
    _STOP_("sp-trace-fail");                    //sub_22CA8 endp_failed
    _STOP_("continues");                        //sub_22CAC proc near
}

void sub_22CAC()
{
    _bl = _bl ^ _bl;                            //xor bl, bl
loc_22CAE:                                      //loc_22CAE:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _bh = _al;                                  //mov bh, al
    _ax = 0x1000;                               //mov ax, 1000h
    _interrupt(16);                             //int 10h
    _bl += 1;                                   //inc bl
    if ((char)_bl < (char)0x10)                 //jl short loc_22CAE
      goto loc_22CAE;
}

void sub_22CBE()
{
    _bx = _bx ^ _bx;                            //xor bx, bx
    _cx = 0x0010;                               //mov cx, 10h
loc_22CC3:                                      //loc_22CC3:
    _ax = 0x1000;                               //mov ax, 1000h
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _interrupt(16);                             //int 10h
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _bh = _bh ^ 0x0f;                           //xor bh, 0Fh
    if (--_cx)                                  //loop loc_22CC3
      goto loc_22CC3;
    _ax = 0x1000;                               //mov ax, 1000h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _interrupt(16);                             //int 10h
}

void sub_22CD9()
{
    _dx = _seg007;                              //mov dx, seg seg007
    _si = _si ^ _si;                            //xor si, si
    _cx = 0x6be6;                               //mov cx, 6BE6h
    sub_22F4F();                                //call sub_22F4F
    _dx = _seg007;                              //mov dx, seg seg007
    _si = 0x6be6;                               //mov si, 6BE6h
    _cx = 0x3fd6;                               //mov cx, 3FD6h
    sub_22F4F();                                //call sub_22F4F
    _dx = _seg007;                              //mov dx, seg seg007
    _si = 0xabbc;                               //mov si, 0ABBCh
    _cx = 0x5324;                               //mov cx, 5324h
    sub_22F4F();                                //call sub_22F4F
    _si = 0x0000;                               //mov si, 0
    _cx = 0x0140;                               //mov cx, 140h
    sub_22E5D();                                //call sub_22E5D
    _si = 0x0500;                               //mov si, 500h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_22DAE();                                //call sub_22DAE
    _si = 0x0640;                               //mov si, 640h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_22DAE();                                //call sub_22DAE
    _si = 0x0780;                               //mov si, 780h
    _cx = 0x0028;                               //mov cx, 28h
    _dx = 0x0016;                               //mov dx, 16h
    sub_22DF0();                                //call sub_22DF0
    _si = 0x2300;                               //mov si, 2300h
    _cx = 0x002a;                               //mov cx, 2Ah
    _dx = 0x000e;                               //mov dx, 0Eh
    sub_22DF0();                                //call sub_22DF0
    _si = 0xaf80;                               //mov si, 0AF80h
    _cx = 0x02be;                               //mov cx, 2BEh
    sub_22EA0();                                //call sub_22EA0
    _si = 0x7cb0;                               //mov si, 7CB0h
    _cx = 0x003c;                               //mov cx, 3Ch
    sub_22DAE();                                //call sub_22DAE
    _si = 0x5c18;                               //mov si, 5C18h
    _cx = 0x0118;                               //mov cx, 118h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x64d8;                               //mov si, 64D8h
    _cx = 0x0118;                               //mov cx, 118h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x6d98;                               //mov si, 6D98h
    _cx = 0x01e3;                               //mov cx, 1E3h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x8430;                               //mov si, 8430h
    _cx = 0x016c;                               //mov cx, 16Ch
    sub_22EA0();                                //call sub_22EA0
    _si = 0x8f90;                               //mov si, 8F90h
    _cx = 0x0046;                               //mov cx, 46h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x91c0;                               //mov si, 91C0h
    _cx = 0x03b8;                               //mov cx, 3B8h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x3560;                               //mov si, 3560h
    _cx = 0x017e;                               //mov cx, 17Eh
    sub_22EA0();                                //call sub_22EA0
    _si = 0x4150;                               //mov si, 4150h
    _cx = 0x00bf;                               //mov cx, 0BFh
    sub_22EA0();                                //call sub_22EA0
    _si = 0x4748;                               //mov si, 4748h
    _cx = 0x0048;                               //mov cx, 48h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x4988;                               //mov si, 4988h
    _cx = 0x0048;                               //mov cx, 48h
    sub_22EA0();                                //call sub_22EA0
    _si = 0x4bc8;                               //mov si, 4BC8h
    _cx = 0x005a;                               //mov cx, 5Ah
    sub_22EA0();                                //call sub_22EA0
    _si = 0x4e98;                               //mov si, 4E98h
    _cx = 0x01b0;                               //mov cx, 1B0h
    sub_22EA0();                                //call sub_22EA0
}

void sub_22DAE()
{
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _push(_si);                                 //push si
loc_22DBC:                                      //loc_22DBC:
    _push(_cx);                                 //push cx
    sub_22DDA();                                //call sub_22DDA
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_22DBC
      goto loc_22DBC;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22DDA()
{
    _cx = 0x0008;                               //mov cx, 8
loc_22DDD:                                      //loc_22DDD:
    _ah = memory(_ds, _si + 8);                 //mov ah, [si+8]
    _bl = memory(_ds, _si + 16);                //mov bl, [si+10h]
    _bh = memory(_ds, _si + 24);                //mov bh, [si+18h]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    if (--_cx)                                  //loop loc_22DDD
      goto loc_22DDD;
    _si += 0x0018;                              //add si, 18h
}

void sub_22DF0()
{
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _push(_si);                                 //push si
loc_22DFE:                                      //loc_22DFE:
    _push(_cx);                                 //push cx
    sub_22E1C();                                //call sub_22E1C
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_22DFE
      goto loc_22DFE;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22E1C()
{
    _push(_si);                                 //push si
    _cx = _dx;                                  //mov cx, dx
    _dx <<= 1;                                  //shl dx, 1
loc_22E21:                                      //loc_22E21:
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    if (--_cx)                                  //loop loc_22E21
      goto loc_22E21;
    _dx >>= 1;                                  //shr dx, 1
    _si = _pop();                               //pop si
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
}

void sub_22E5D()
{
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _dx = _cx;                                  //mov dx, cx
    _push(_si);                                 //push si
loc_22E6D:                                      //loc_22E6D:
    sub_22E89();                                //call sub_22E89
    if (--_cx)                                  //loop loc_22E6D
      goto loc_22E6D;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22E89()
{
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
}

void sub_22EA0()
{
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _push(_si);                                 //push si
loc_22EAE:                                      //loc_22EAE:
    sub_22ECA();                                //call sub_22ECA
    if (--_cx)                                  //loop loc_22EAE
      goto loc_22EAE;
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22ECA()
{
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _si += 0x0006;                              //add si, 6
}

void sub_22EE8()
{
    _dx = _seg008;                              //mov dx, seg seg008
    _si = _si ^ _si;                            //xor si, si
    _cx = 0xf468;                               //mov cx, 0F468h
    sub_22F4F();                                //call sub_22F4F
    sub_22EF7();                                //call sub_22EF7
}

void sub_22EF7()
{
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cx = 0x01c9;                               //mov cx, 1C9h
    _si = _si ^ _si;                            //xor si, si
loc_22F07:                                      //loc_22F07:
    _push(_cx);                                 //push cx
    _push(_si);                                 //push si
    _di = _di ^ _di;                            //xor di, di
    sub_22F28();                                //call sub_22F28
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_22F07
      goto loc_22F07;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22F28()
{
    _cx = 0x0010;                               //mov cx, 10h
loc_22F2B:                                      //loc_22F2B:
    sub_22F31();                                //call sub_22F31
    if (--_cx)                                  //loop loc_22F2B
      goto loc_22F2B;
}

void sub_22F31()
{
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _ah = memory(_ds, _si + 2);                 //mov ah, [si+2]
    _bl = memory(_ds, _si + 4);                 //mov bl, [si+4]
    _bh = memory(_ds, _si + 6);                 //mov bh, [si+6]
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _si += 0x0006;                              //add si, 6
}

void sub_22F4F()
{
    _push(_ds);                                 //push ds
    _ds = _dx;                                  //mov ds, dx
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _bp = _si;                                  //mov bp, si
    _bp += _cx;                                 //add bp, cx
    _si += 0x0020;                              //add si, 20h
loc_22F5E:                                      //loc_22F5E:
    _si += 0x000c;                              //add si, 0Ch
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (!(_ax & _ax))                           //jz short loc_22FA8
      goto loc_22FA8;
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx = _ax;                                  //mov cx, ax
    _cx += 1;                                   //inc cx
    _dx = _cx;                                  //mov dx, cx
    if ((short)_bx <= (short)0x0008)            //jle short loc_22F83
      goto loc_22F83;
    _dx += _cx;                                 //add dx, cx
    if ((short)_bx <= (short)0x0010)            //jle short loc_22F83
      goto loc_22F83;
    _dx += _cx;                                 //add dx, cx
    if ((short)_bx <= (short)0x0018)            //jle short loc_22F83
      goto loc_22F83;
    _dx += _cx;                                 //add dx, cx
loc_22F83:                                      //loc_22F83:
    _push(_bp);                                 //push bp
    _bp = _si;                                  //mov bp, si
    _push(_si);                                 //push si
    _si += _dx;                                 //add si, dx
    _di = _di ^ _di;                            //xor di, di
    sub_22FAE();                                //call sub_22FAE
    _cx = _di;                                  //mov cx, di
    _di = _pop();                               //pop di
    _si = _si ^ _si;                            //xor si, si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _si = _di;                                  //mov si, di
    _si += 1;                                   //inc si
    _si &= 0xfffe;                              //and si, 0FFFEh
    _bp = _pop();                               //pop bp
    if (_si < _bp)                              //jb short loc_22F5E
      goto loc_22F5E;
loc_22FA8:                                      //loc_22FA8:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_22FAE()
{
    _push(_cx);                                 //push cx
loc_22FAF:                                      //loc_22FAF:
    sub_22FB6();                                //call sub_22FB6
    if (--_cx)                                  //loop loc_22FAF
      goto loc_22FAF;
    _cx = _pop();                               //pop cx
}

void sub_22FB6()
{
    _push(_bx);                                 //push bx
loc_22FB7:                                      //loc_22FB7:
    _push(_bx);                                 //push bx
    _al = memory(_ds, _bp + 0);                 //mov al, ds:[bp+0]
    _bp += 1;                                   //inc bp
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di += 1;                                   //inc di
    _si += _dx;                                 //add si, dx
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += _dx;                                 //add si, dx
    _bl = memory(_ds, _si);                     //mov bl, [si]
    _si += _dx;                                 //add si, dx
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    sub_22FDF();                                //call sub_22FDF
    _bx = _pop();                               //pop bx
    _bx -= 0x0008;                              //sub bx, 8
    if (_FIXME_)                                //jg short loc_22FB7
      goto loc_22FB7;
    _bx = _pop();                               //pop bx
}

void sub_22FDF()
{
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _cx = 0x0004;                               //mov cx, 4
loc_22FE4:                                      //loc_22FE4:
    _flags.carry = !!(_bh & 0x80);              //shl bh, 1
    _bh <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_bh & 0x80);              //shl bh, 1
    _bh <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_dl, 1);                               //rcl dl, 1
    memory(_es, _di) = _dl;                     //mov es:[di], dl
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_22FE4
      goto loc_22FE4;
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
}

void sub_2300D()
{
    _si = 0x439f;                               //mov si, 439Fh
    sub_22CA8();                                //call sub_22CA8
}

void sub_23014()
{
    _si = 0x43af;                               //mov si, 43AFh
    sub_22CA8();                                //call sub_22CA8
}

void sub_2301B()
{
    _si = 0x439f;                               //mov si, 439Fh
    sub_22CA8();                                //call sub_22CA8
}

void sub_23023()
{
    WORD _cs = _seg001;

    _si = 0x43bf;                               //mov si, 43BFh
    sub_22CAC();                                //call sub_22CAC
    memory(_cs, 0x3D92) = 0x01;                 //mov cs:byte_23022, 1
}

void loc_23030()
{
    WORD _cs = _seg001;

    if (memory(_cs, 0x3D92) == 0x00)            //jz short locret_23045
      goto locret_23045;
    _STOP_("word_23038 dw 0C62Eh");             //word_23038 dw 0C62Eh
    _push(_es);                                 //push es
    _xchg(_ax, _dx);                            //xchg ax, dx
    _STOP_("db 36h");                           //db 36h
    _popf();                                    //popf
    _bx += 1;                                   //inc bx
    sub_22CA8();                                //call sub_22CA8
locret_23045:                                   //locret_23045:
    return;
}

void sub_23046()
{
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    sub_10ED5();                                //call sub_10ED5
    _push(_es);                                 //push es
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
    _ah = 0x07;                                 //mov ah, 7
loc_2305C:                                      //loc_2305C:
    _di = memory16(_ds, _si);                   //mov di, [si]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di = _di + memory16(_ds, _si + 2);         //add di, [si+2]
    if (memory(_es, _di) != 0x00)               //jnz short loc_23070
      goto loc_23070;
    memory(_es, _di) = _ah;                     //mov es:[di], ah
loc_23070:                                      //loc_23070:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_2305C
      goto loc_2305C;
    _es = _pop();                               //pop es
}

void sub_23077()
{
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x9a40;                               //mov si, 9A40h
    _cx = 0x0030;                               //mov cx, 30h
loc_23082:                                      //loc_23082:
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _ax &= 0x7fff;                              //and ax, 7FFFh
    _ax -= 0x0200;                              //sub ax, 200h
    if ((short)_ax > (short)0x0200)             //jg short loc_230AC
      goto loc_230AC;
loc_23090:                                      //loc_23090:
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    sub_10ED9();                                //call sub_10ED9
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    sub_10ED9();                                //call sub_10ED9
    _ax &= 0x1fff;                              //and ax, 1FFFh
    if ((short)_ax <= (short)0x0200)            //jle short loc_23090
      goto loc_23090;
loc_230AC:                                      //loc_230AC:
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x00a0;                              //add ax, 0A0h
    if (_ax >= 0x0140)                          //jnb short loc_23090
      goto loc_23090;
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    _cwd();                                     //cwd
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _idiv(memory16(_ds, _si + 4));              //idiv word ptr [si+4]
    _ax += 0x0064;                              //add ax, 64h
    if (_ax >= 0x00c8)                          //jnb short loc_23090
      goto loc_23090;
    _di = _ax;                                  //mov di, ax
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _push(_cx);                                 //push cx
    _cx = _bx;                                  //mov cx, bx
    _cx &= 0x0001;                              //and cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _bx >>= 1;                                  //shr bx, 1
    _di += _bx;                                 //add di, bx
    _ah = 0xf0;                                 //mov ah, 0F0h
    _ah >>= _cl;                                //shr ah, cl
    _cx = _pop();                               //pop cx
    if (memory(_es, _di) & _ah)                 //jnz short loc_23116
      goto loc_23116;
    _ah &= 0x77;                                //and ah, 77h
    memory(_es, _di) |= _ah;                    //or es:[di], ah
    goto loc_2311B;                             //jmp short loc_2311B
loc_23116:                                      //loc_23116:
    memory16(_ds, _si + 4) |= 0x8000;           //or word ptr [si+4], 8000h
loc_2311B:                                      //loc_2311B:
    _si += 0x0006;                              //add si, 6
    if (--_cx)                                  //loop loc_23122
      goto loc_23122;
    goto loc_23125;                             //jmp short loc_23125
loc_23122:                                      //loc_23122:
    goto loc_23082;                             //jmp loc_23082
loc_23125:                                      //loc_23125:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2312A()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2313B
      goto loc_2313B;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23145
      goto loc_23145;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23149;                             //jmp short loc_23149
loc_2313B:                                      //loc_2313B:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23149
      goto loc_23149;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23149;                             //jmp short loc_23149
loc_23145:                                      //loc_23145:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23149:                                      //loc_23149:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23158
      goto loc_23158;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23162
      goto loc_23162;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23166;                             //jmp short loc_23166
loc_23158:                                      //loc_23158:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23166
      goto loc_23166;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23166;                             //jmp short loc_23166
loc_23162:                                      //loc_23162:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23166:                                      //loc_23166:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23175
      goto loc_23175;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2317F
      goto loc_2317F;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23183;                             //jmp short loc_23183
loc_23175:                                      //loc_23175:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23183
      goto loc_23183;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23183;                             //jmp short loc_23183
loc_2317F:                                      //loc_2317F:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23183:                                      //loc_23183:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23192
      goto loc_23192;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2319C
      goto loc_2319C;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_231A0;                             //jmp short loc_231A0
loc_23192:                                      //loc_23192:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231A0
      goto loc_231A0;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_231A0;                             //jmp short loc_231A0
loc_2319C:                                      //loc_2319C:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_231A0:                                      //loc_231A0:
    _di += 1;                                   //inc di
    _si += 0x0004;                              //add si, 4
}

void sub_231A5()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231B6
      goto loc_231B6;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231C0
      goto loc_231C0;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_231C4;                             //jmp short loc_231C4
loc_231B6:                                      //loc_231B6:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231C4
      goto loc_231C4;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_231C4;                             //jmp short loc_231C4
loc_231C0:                                      //loc_231C0:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_231C4:                                      //loc_231C4:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231D3
      goto loc_231D3;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231DD
      goto loc_231DD;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_231E1;                             //jmp short loc_231E1
loc_231D3:                                      //loc_231D3:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231E1
      goto loc_231E1;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_231E1;                             //jmp short loc_231E1
loc_231DD:                                      //loc_231DD:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_231E1:                                      //loc_231E1:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231F0
      goto loc_231F0;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231FA
      goto loc_231FA;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_231FE;                             //jmp short loc_231FE
loc_231F0:                                      //loc_231F0:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_231FE
      goto loc_231FE;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_231FE;                             //jmp short loc_231FE
loc_231FA:                                      //loc_231FA:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_231FE:                                      //loc_231FE:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2320D
      goto loc_2320D;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23217
      goto loc_23217;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_2321B;                             //jmp short loc_2321B
loc_2320D:                                      //loc_2320D:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2321B
      goto loc_2321B;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_2321B;                             //jmp short loc_2321B
loc_23217:                                      //loc_23217:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_2321B:                                      //loc_2321B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2322D
      goto loc_2322D;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23237
      goto loc_23237;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_2323B;                             //jmp short loc_2323B
loc_2322D:                                      //loc_2322D:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2323B
      goto loc_2323B;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_2323B;                             //jmp short loc_2323B
loc_23237:                                      //loc_23237:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_2323B:                                      //loc_2323B:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2324A
      goto loc_2324A;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23254
      goto loc_23254;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23258;                             //jmp short loc_23258
loc_2324A:                                      //loc_2324A:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23258
      goto loc_23258;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23258;                             //jmp short loc_23258
loc_23254:                                      //loc_23254:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23258:                                      //loc_23258:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23267
      goto loc_23267;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23271
      goto loc_23271;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23275;                             //jmp short loc_23275
loc_23267:                                      //loc_23267:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23275
      goto loc_23275;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23275;                             //jmp short loc_23275
loc_23271:                                      //loc_23271:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23275:                                      //loc_23275:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23284
      goto loc_23284;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2328E
      goto loc_2328E;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_23292;                             //jmp short loc_23292
loc_23284:                                      //loc_23284:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23292
      goto loc_23292;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_23292;                             //jmp short loc_23292
loc_2328E:                                      //loc_2328E:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_23292:                                      //loc_23292:
    _di += 1;                                   //inc di
}

void sub_23294()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232A5
      goto loc_232A5;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232AF
      goto loc_232AF;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_232B3;                             //jmp short loc_232B3
loc_232A5:                                      //loc_232A5:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232B3
      goto loc_232B3;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_232B3;                             //jmp short loc_232B3
loc_232AF:                                      //loc_232AF:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_232B3:                                      //loc_232B3:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232C2
      goto loc_232C2;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232CC
      goto loc_232CC;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_232D0;                             //jmp short loc_232D0
loc_232C2:                                      //loc_232C2:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232D0
      goto loc_232D0;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_232D0;                             //jmp short loc_232D0
loc_232CC:                                      //loc_232CC:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_232D0:                                      //loc_232D0:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232DF
      goto loc_232DF;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232E9
      goto loc_232E9;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_232ED;                             //jmp short loc_232ED
loc_232DF:                                      //loc_232DF:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232ED
      goto loc_232ED;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_232ED;                             //jmp short loc_232ED
loc_232E9:                                      //loc_232E9:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_232ED:                                      //loc_232ED:
    _di += 1;                                   //inc di
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_232FC
      goto loc_232FC;
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_23306
      goto loc_23306;
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_2330A;                             //jmp short loc_2330A
loc_232FC:                                      //loc_232FC:
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_2330A
      goto loc_2330A;
    memory(_es, _di) |= 0x07;                   //or byte ptr es:[di], 7
    goto loc_2330A;                             //jmp short loc_2330A
loc_23306:                                      //loc_23306:
    memory(_es, _di) |= 0x70;                   //or byte ptr es:[di], 70h
loc_2330A:                                      //loc_2330A:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
}

void sub_2330D()
{
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _STOP_("sp-trace-fail");                    //sub_2330D endp_failed
    _STOP_("continues");                        //sub_23316 proc far
}

void sub_23316()
{
    WORD _cs = _seg001;

    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_23323
      goto loc_23323;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_23323:                                      //loc_23323:
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _cx &= 0xfffe;                              //and cx, 0FFFEh
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_2333E
      goto loc_2333E;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_2333E:                                      //loc_2333E:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_23348
      goto loc_23348;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23348:                                      //loc_23348:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_23351
      goto loc_23351;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23351:                                      //loc_23351:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_2335A
      goto loc_2335A;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_2335A:                                      //loc_2335A:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_2336E
      goto loc_2336E;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
loc_2336E:                                      //loc_2336E:
    if ((short)_dx >= 0)                        //jns short loc_233A2
      goto loc_233A2;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    if ((short)_bp <= (short)0x0008)            //jle short loc_2339D
      goto loc_2339D;
    if ((short)_bp > (short)0x0010)             //jg short loc_2338C
      goto loc_2338C;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_2339D;                             //jmp short loc_2339D
loc_2338C:                                      //loc_2338C:
    if ((short)_bp > (short)0x0018)             //jg short loc_23399
      goto loc_23399;
    _dx = _ax;                                  //mov dx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    goto loc_2339D;                             //jmp short loc_2339D
loc_23399:                                      //loc_23399:
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
loc_2339D:                                      //loc_2339D:
    memory16(_ds, 0x0) = _ax;                   //mov word ptr unk_54890, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_233A2:                                      //loc_233A2:
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, _di + -26816);          //mov ax, [di-68C0h]
    _ax = _ax - memory16(_ds, _di + -26818);    //sub ax, [di-68C2h]
    memory16(_ss, 32) = _ax;                    //mov ss:20h, ax
    _ax = memory16(_ds, _di + -26814);          //mov ax, [di-68BEh]
    _ax = _ax - memory16(_ds, _di + -26816);    //sub ax, [di-68C0h]
    memory16(_ss, 34) = _ax;                    //mov ss:22h, ax
    _ax = memory16(_ds, _di + -26812);          //mov ax, [di-68BCh]
    _ax = _ax - memory16(_ds, _di + -26814);    //sub ax, [di-68BEh]
    memory16(_ss, 36) = _ax;                    //mov ss:24h, ax
    _ax = memory16(_ds, _di + -26810);          //mov ax, [di-68BAh]
    _ax = _ax - memory16(_ds, _di + -26812);    //sub ax, [di-68BCh]
    memory16(_ss, 38) = _ax;                    //mov ss:26h, ax
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ds = _pop();                               //pop ds
    if ((short)_cx >= 0)                        //jns short loc_233E8
      goto loc_233E8;
    goto loc_23AFA;                             //jmp loc_23AFA
loc_233E8:                                      //loc_233E8:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax <= (short)0x0140)            //jle short loc_233F4
      goto loc_233F4;
    goto loc_23AFA;                             //jmp loc_23AFA
loc_233F4:                                      //loc_233F4:
    _cx >>= 1;                                  //shr cx, 1
    _di += _cx;                                 //add di, cx
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cl = _bl;                                  //mov cl, bl
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cx += 1;                                   //inc cx
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    if ((short)_bp > (short)0x0008)             //jg short loc_2340E
      goto loc_2340E;
    goto loc_23A21;                             //jmp loc_23A21
loc_2340E:                                      //loc_2340E:
    if ((short)_bp > (short)0x0010)             //jg short loc_23416
      goto loc_23416;
    goto loc_238B4;                             //jmp loc_238B4
loc_23416:                                      //loc_23416:
    if ((short)_bp > (short)0x0018)             //jg short loc_2341E
      goto loc_2341E;
    goto loc_236B3;                             //jmp loc_236B3
loc_2341E:                                      //loc_2341E:
    memory16(_ss, 32) -= 0x0010;                //sub word ptr ss:20h, 10h
    memory16(_ss, 34) -= 0x0010;                //sub word ptr ss:22h, 10h
    memory16(_ss, 36) -= 0x0010;                //sub word ptr ss:24h, 10h
    memory16(_ss, 38) -= 0x0010;                //sub word ptr ss:26h, 10h
loc_23436:                                      //loc_23436:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2343F
      goto loc_2343F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2343F:                                      //loc_2343F:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23448
      goto loc_23448;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23448:                                      //loc_23448:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23451
      goto loc_23451;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23451:                                      //loc_23451:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2345A
      goto loc_2345A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2345A:                                      //loc_2345A:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23464
      goto loc_23464;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23464:                                      //loc_23464:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2346D
      goto loc_2346D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2346D:                                      //loc_2346D:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23476
      goto loc_23476;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23476:                                      //loc_23476:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2347F
      goto loc_2347F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2347F:                                      //loc_2347F:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23489
      goto loc_23489;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23489:                                      //loc_23489:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23492
      goto loc_23492;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23492:                                      //loc_23492:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2349B
      goto loc_2349B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2349B:                                      //loc_2349B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234A4
      goto loc_234A4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234A4:                                      //loc_234A4:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234AE
      goto loc_234AE;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234AE:                                      //loc_234AE:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234B7
      goto loc_234B7;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234B7:                                      //loc_234B7:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234C0
      goto loc_234C0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234C0:                                      //loc_234C0:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234C9
      goto loc_234C9;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234C9:                                      //loc_234C9:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    if (--_cx)                                  //loop loc_234D4
      goto loc_234D4;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_234D4:                                      //loc_234D4:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234DD
      goto loc_234DD;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234DD:                                      //loc_234DD:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234E6
      goto loc_234E6;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234E6:                                      //loc_234E6:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234EF
      goto loc_234EF;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234EF:                                      //loc_234EF:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_234F8
      goto loc_234F8;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_234F8:                                      //loc_234F8:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23502
      goto loc_23502;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23502:                                      //loc_23502:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2350B
      goto loc_2350B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2350B:                                      //loc_2350B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23514
      goto loc_23514;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23514:                                      //loc_23514:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2351D
      goto loc_2351D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2351D:                                      //loc_2351D:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23527
      goto loc_23527;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23527:                                      //loc_23527:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23530
      goto loc_23530;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23530:                                      //loc_23530:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23539
      goto loc_23539;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23539:                                      //loc_23539:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23542
      goto loc_23542;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23542:                                      //loc_23542:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2354C
      goto loc_2354C;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2354C:                                      //loc_2354C:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23555
      goto loc_23555;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23555:                                      //loc_23555:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2355E
      goto loc_2355E;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2355E:                                      //loc_2355E:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23567
      goto loc_23567;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23567:                                      //loc_23567:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    if (--_cx)                                  //loop loc_23572
      goto loc_23572;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23572:                                      //loc_23572:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2357B
      goto loc_2357B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2357B:                                      //loc_2357B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23584
      goto loc_23584;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23584:                                      //loc_23584:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2358D
      goto loc_2358D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2358D:                                      //loc_2358D:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23596
      goto loc_23596;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23596:                                      //loc_23596:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235A0
      goto loc_235A0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235A0:                                      //loc_235A0:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235A9
      goto loc_235A9;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235A9:                                      //loc_235A9:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235B2
      goto loc_235B2;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235B2:                                      //loc_235B2:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235BB
      goto loc_235BB;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235BB:                                      //loc_235BB:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235C5
      goto loc_235C5;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235C5:                                      //loc_235C5:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235CE
      goto loc_235CE;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235CE:                                      //loc_235CE:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235D7
      goto loc_235D7;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235D7:                                      //loc_235D7:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235E0
      goto loc_235E0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235E0:                                      //loc_235E0:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235EA
      goto loc_235EA;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235EA:                                      //loc_235EA:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235F3
      goto loc_235F3;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235F3:                                      //loc_235F3:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_235FC
      goto loc_235FC;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_235FC:                                      //loc_235FC:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23605
      goto loc_23605;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23605:                                      //loc_23605:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    if (--_cx)                                  //loop loc_23610
      goto loc_23610;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23610:                                      //loc_23610:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23619
      goto loc_23619;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23619:                                      //loc_23619:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23622
      goto loc_23622;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23622:                                      //loc_23622:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2362B
      goto loc_2362B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2362B:                                      //loc_2362B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23634
      goto loc_23634;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23634:                                      //loc_23634:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2363E
      goto loc_2363E;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2363E:                                      //loc_2363E:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23647
      goto loc_23647;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23647:                                      //loc_23647:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23650
      goto loc_23650;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23650:                                      //loc_23650:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23659
      goto loc_23659;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23659:                                      //loc_23659:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23663
      goto loc_23663;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23663:                                      //loc_23663:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2366C
      goto loc_2366C;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2366C:                                      //loc_2366C:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23675
      goto loc_23675;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23675:                                      //loc_23675:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2367E
      goto loc_2367E;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2367E:                                      //loc_2367E:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23688
      goto loc_23688;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23688:                                      //loc_23688:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23691
      goto loc_23691;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23691:                                      //loc_23691:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2369A
      goto loc_2369A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2369A:                                      //loc_2369A:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236A3
      goto loc_236A3;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236A3:                                      //loc_236A3:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    if (--_cx)                                  //loop loc_236AD
      goto loc_236AD;
    goto loc_236B0;                             //jmp short loc_236B0
loc_236AD:                                      //loc_236AD:
    goto loc_23436;                             //jmp loc_23436
loc_236B0:                                      //loc_236B0:
    goto loc_23C6E;                             //jmp loc_23C6E
loc_236B3:                                      //loc_236B3:
    memory16(_ss, 32) -= 0x000c;                //sub word ptr ss:20h, 0Ch
    memory16(_ss, 34) -= 0x000c;                //sub word ptr ss:22h, 0Ch
    memory16(_ss, 36) -= 0x000c;                //sub word ptr ss:24h, 0Ch
    memory16(_ss, 38) -= 0x000c;                //sub word ptr ss:26h, 0Ch
loc_236CB:                                      //loc_236CB:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236D4
      goto loc_236D4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236D4:                                      //loc_236D4:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236DD
      goto loc_236DD;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236DD:                                      //loc_236DD:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236E6
      goto loc_236E6;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236E6:                                      //loc_236E6:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236EF
      goto loc_236EF;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236EF:                                      //loc_236EF:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_236F9
      goto loc_236F9;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_236F9:                                      //loc_236F9:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23702
      goto loc_23702;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23702:                                      //loc_23702:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2370B
      goto loc_2370B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2370B:                                      //loc_2370B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23714
      goto loc_23714;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23714:                                      //loc_23714:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2371E
      goto loc_2371E;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2371E:                                      //loc_2371E:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23727
      goto loc_23727;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23727:                                      //loc_23727:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23730
      goto loc_23730;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23730:                                      //loc_23730:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23739
      goto loc_23739;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23739:                                      //loc_23739:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    if (--_cx)                                  //loop loc_23744
      goto loc_23744;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23744:                                      //loc_23744:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2374D
      goto loc_2374D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2374D:                                      //loc_2374D:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23756
      goto loc_23756;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23756:                                      //loc_23756:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2375F
      goto loc_2375F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2375F:                                      //loc_2375F:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23768
      goto loc_23768;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23768:                                      //loc_23768:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23772
      goto loc_23772;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23772:                                      //loc_23772:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2377B
      goto loc_2377B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2377B:                                      //loc_2377B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23784
      goto loc_23784;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23784:                                      //loc_23784:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2378D
      goto loc_2378D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2378D:                                      //loc_2378D:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23797
      goto loc_23797;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23797:                                      //loc_23797:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237A0
      goto loc_237A0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237A0:                                      //loc_237A0:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237A9
      goto loc_237A9;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237A9:                                      //loc_237A9:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237B2
      goto loc_237B2;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237B2:                                      //loc_237B2:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    if (--_cx)                                  //loop loc_237BD
      goto loc_237BD;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_237BD:                                      //loc_237BD:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237C6
      goto loc_237C6;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237C6:                                      //loc_237C6:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237CF
      goto loc_237CF;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237CF:                                      //loc_237CF:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237D8
      goto loc_237D8;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237D8:                                      //loc_237D8:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237E1
      goto loc_237E1;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237E1:                                      //loc_237E1:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237EB
      goto loc_237EB;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237EB:                                      //loc_237EB:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237F4
      goto loc_237F4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237F4:                                      //loc_237F4:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_237FD
      goto loc_237FD;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_237FD:                                      //loc_237FD:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23806
      goto loc_23806;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23806:                                      //loc_23806:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23810
      goto loc_23810;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23810:                                      //loc_23810:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23819
      goto loc_23819;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23819:                                      //loc_23819:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23822
      goto loc_23822;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23822:                                      //loc_23822:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2382B
      goto loc_2382B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2382B:                                      //loc_2382B:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    if (--_cx)                                  //loop loc_23836
      goto loc_23836;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23836:                                      //loc_23836:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2383F
      goto loc_2383F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2383F:                                      //loc_2383F:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23848
      goto loc_23848;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23848:                                      //loc_23848:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23851
      goto loc_23851;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23851:                                      //loc_23851:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2385A
      goto loc_2385A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2385A:                                      //loc_2385A:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23864
      goto loc_23864;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23864:                                      //loc_23864:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2386D
      goto loc_2386D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2386D:                                      //loc_2386D:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23876
      goto loc_23876;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23876:                                      //loc_23876:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2387F
      goto loc_2387F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2387F:                                      //loc_2387F:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23889
      goto loc_23889;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23889:                                      //loc_23889:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23892
      goto loc_23892;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23892:                                      //loc_23892:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2389B
      goto loc_2389B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2389B:                                      //loc_2389B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238A4
      goto loc_238A4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238A4:                                      //loc_238A4:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    if (--_cx)                                  //loop loc_238AE
      goto loc_238AE;
    goto loc_238B1;                             //jmp short loc_238B1
loc_238AE:                                      //loc_238AE:
    goto loc_236CB;                             //jmp loc_236CB
loc_238B1:                                      //loc_238B1:
    goto loc_23C6E;                             //jmp loc_23C6E
loc_238B4:                                      //loc_238B4:
    memory16(_ss, 32) -= 0x0008;                //sub word ptr ss:20h, 8
    memory16(_ss, 34) -= 0x0008;                //sub word ptr ss:22h, 8
    memory16(_ss, 36) -= 0x0008;                //sub word ptr ss:24h, 8
    memory16(_ss, 38) -= 0x0008;                //sub word ptr ss:26h, 8
loc_238CC:                                      //loc_238CC:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238D5
      goto loc_238D5;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238D5:                                      //loc_238D5:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238DE
      goto loc_238DE;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238DE:                                      //loc_238DE:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238E7
      goto loc_238E7;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238E7:                                      //loc_238E7:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238F0
      goto loc_238F0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238F0:                                      //loc_238F0:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_238FA
      goto loc_238FA;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_238FA:                                      //loc_238FA:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23903
      goto loc_23903;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23903:                                      //loc_23903:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2390C
      goto loc_2390C;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2390C:                                      //loc_2390C:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23915
      goto loc_23915;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23915:                                      //loc_23915:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    if (--_cx)                                  //loop loc_23920
      goto loc_23920;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23920:                                      //loc_23920:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23929
      goto loc_23929;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23929:                                      //loc_23929:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23932
      goto loc_23932;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23932:                                      //loc_23932:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2393B
      goto loc_2393B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2393B:                                      //loc_2393B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23944
      goto loc_23944;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23944:                                      //loc_23944:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2394E
      goto loc_2394E;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2394E:                                      //loc_2394E:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23957
      goto loc_23957;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23957:                                      //loc_23957:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23960
      goto loc_23960;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23960:                                      //loc_23960:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23969
      goto loc_23969;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23969:                                      //loc_23969:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    if (--_cx)                                  //loop loc_23974
      goto loc_23974;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23974:                                      //loc_23974:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2397D
      goto loc_2397D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2397D:                                      //loc_2397D:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23986
      goto loc_23986;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23986:                                      //loc_23986:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_2398F
      goto loc_2398F;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_2398F:                                      //loc_2398F:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23998
      goto loc_23998;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23998:                                      //loc_23998:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239A2
      goto loc_239A2;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239A2:                                      //loc_239A2:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239AB
      goto loc_239AB;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239AB:                                      //loc_239AB:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239B4
      goto loc_239B4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239B4:                                      //loc_239B4:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239BD
      goto loc_239BD;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239BD:                                      //loc_239BD:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    if (--_cx)                                  //loop loc_239C8
      goto loc_239C8;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_239C8:                                      //loc_239C8:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239D1
      goto loc_239D1;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239D1:                                      //loc_239D1:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239DA
      goto loc_239DA;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239DA:                                      //loc_239DA:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239E3
      goto loc_239E3;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239E3:                                      //loc_239E3:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239EC
      goto loc_239EC;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239EC:                                      //loc_239EC:
    _di += 1;                                   //inc di
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239F6
      goto loc_239F6;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239F6:                                      //loc_239F6:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_239FF
      goto loc_239FF;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_239FF:                                      //loc_239FF:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A08
      goto loc_23A08;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A08:                                      //loc_23A08:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A11
      goto loc_23A11;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A11:                                      //loc_23A11:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    if (--_cx)                                  //loop loc_23A1B
      goto loc_23A1B;
    goto loc_23A1E;                             //jmp short loc_23A1E
loc_23A1B:                                      //loc_23A1B:
    goto loc_238CC;                             //jmp loc_238CC
loc_23A1E:                                      //loc_23A1E:
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23A21:                                      //loc_23A21:
    memory16(_ss, 32) -= 0x0004;                //sub word ptr ss:20h, 4
    memory16(_ss, 34) -= 0x0004;                //sub word ptr ss:22h, 4
    memory16(_ss, 36) -= 0x0004;                //sub word ptr ss:24h, 4
    memory16(_ss, 38) -= 0x0004;                //sub word ptr ss:26h, 4
loc_23A39:                                      //loc_23A39:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A42
      goto loc_23A42;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A42:                                      //loc_23A42:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A4B
      goto loc_23A4B;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A4B:                                      //loc_23A4B:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A54
      goto loc_23A54;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A54:                                      //loc_23A54:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A5D
      goto loc_23A5D;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A5D:                                      //loc_23A5D:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    if (--_cx)                                  //loop loc_23A68
      goto loc_23A68;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23A68:                                      //loc_23A68:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A71
      goto loc_23A71;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A71:                                      //loc_23A71:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A7A
      goto loc_23A7A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A7A:                                      //loc_23A7A:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A83
      goto loc_23A83;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A83:                                      //loc_23A83:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23A8C
      goto loc_23A8C;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23A8C:                                      //loc_23A8C:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    if (--_cx)                                  //loop loc_23A97
      goto loc_23A97;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23A97:                                      //loc_23A97:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AA0
      goto loc_23AA0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AA0:                                      //loc_23AA0:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AA9
      goto loc_23AA9;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AA9:                                      //loc_23AA9:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AB2
      goto loc_23AB2;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AB2:                                      //loc_23AB2:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23ABB
      goto loc_23ABB;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23ABB:                                      //loc_23ABB:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    if (--_cx)                                  //loop loc_23AC6
      goto loc_23AC6;
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23AC6:                                      //loc_23AC6:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23ACF
      goto loc_23ACF;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23ACF:                                      //loc_23ACF:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AD8
      goto loc_23AD8;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AD8:                                      //loc_23AD8:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AE1
      goto loc_23AE1;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AE1:                                      //loc_23AE1:
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short loc_23AEA
      goto loc_23AEA;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23AEA:                                      //loc_23AEA:
    _di += 1;                                   //inc di
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    if (--_cx)                                  //loop loc_23AF4
      goto loc_23AF4;
    goto loc_23AF7;                             //jmp short loc_23AF7
loc_23AF4:                                      //loc_23AF4:
    goto loc_23A39;                             //jmp loc_23A39
loc_23AF7:                                      //loc_23AF7:
    goto loc_23C6E;                             //jmp loc_23C6E
loc_23AFA:                                      //loc_23AFA:
    _dx = _cx;                                  //mov dx, cx
    _sar(_cx, 1);                               //sar cx, 1
    _di += _cx;                                 //add di, cx
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cl = _bl;                                  //mov cl, bl
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cx += 1;                                   //inc cx
    _xchg(_bp, _dx);                            //xchg bp, dx
    _dx += 0x0007;                              //add dx, 7
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    memory(_cs, 0x49E4) = _dl;                  //mov cs:byte_23C74, dl
loc_23B1E:                                      //loc_23B1E:
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _bh = memory(_cs, 0x49E4);                  //mov bh, cs:byte_23C74
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B34
      goto loc_23B34;
    if (!(_al & _al))                           //jz short loc_23B34
      goto loc_23B34;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B34:                                      //loc_23B34:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B46
      goto loc_23B46;
    if (!(_al & _al))                           //jz short loc_23B46
      goto loc_23B46;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B46:                                      //loc_23B46:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B58
      goto loc_23B58;
    if (!(_al & _al))                           //jz short loc_23B58
      goto loc_23B58;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B58:                                      //loc_23B58:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B6A
      goto loc_23B6A;
    if (!(_al & _al))                           //jz short loc_23B6A
      goto loc_23B6A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B6A:                                      //loc_23B6A:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _bh -= 1;                                   //dec bh
    if (_bh != 0)                               //jnz short loc_23B75
      goto loc_23B75;
    goto loc_23C5B;                             //jmp loc_23C5B
loc_23B75:                                      //loc_23B75:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B84
      goto loc_23B84;
    if (!(_al & _al))                           //jz short loc_23B84
      goto loc_23B84;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B84:                                      //loc_23B84:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23B96
      goto loc_23B96;
    if (!(_al & _al))                           //jz short loc_23B96
      goto loc_23B96;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23B96:                                      //loc_23B96:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23BA8
      goto loc_23BA8;
    if (!(_al & _al))                           //jz short loc_23BA8
      goto loc_23BA8;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23BA8:                                      //loc_23BA8:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23BBA
      goto loc_23BBA;
    if (!(_al & _al))                           //jz short loc_23BBA
      goto loc_23BBA;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23BBA:                                      //loc_23BBA:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _bh -= 1;                                   //dec bh
    if (_bh != 0)                               //jnz short loc_23BC5
      goto loc_23BC5;
    goto loc_23C5B;                             //jmp loc_23C5B
loc_23BC5:                                      //loc_23BC5:
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23BD4
      goto loc_23BD4;
    if (!(_al & _al))                           //jz short loc_23BD4
      goto loc_23BD4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23BD4:                                      //loc_23BD4:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23BE6
      goto loc_23BE6;
    if (!(_al & _al))                           //jz short loc_23BE6
      goto loc_23BE6;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23BE6:                                      //loc_23BE6:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23BF8
      goto loc_23BF8;
    if (!(_al & _al))                           //jz short loc_23BF8
      goto loc_23BF8;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23BF8:                                      //loc_23BF8:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23C0A
      goto loc_23C0A;
    if (!(_al & _al))                           //jz short loc_23C0A
      goto loc_23C0A;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23C0A:                                      //loc_23C0A:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _bh -= 1;                                   //dec bh
    if (_bh == 0)                               //jz short loc_23C5B
      goto loc_23C5B;
    _si += 1;                                   //inc si
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23C21
      goto loc_23C21;
    if (!(_al & _al))                           //jz short loc_23C21
      goto loc_23C21;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23C21:                                      //loc_23C21:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23C33
      goto loc_23C33;
    if (!(_al & _al))                           //jz short loc_23C33
      goto loc_23C33;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23C33:                                      //loc_23C33:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23C45
      goto loc_23C45;
    if (!(_al & _al))                           //jz short loc_23C45
      goto loc_23C45;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23C45:                                      //loc_23C45:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_bp >= 0x0140)                          //jnb short loc_23C57
      goto loc_23C57;
    if (!(_al & _al))                           //jz short loc_23C57
      goto loc_23C57;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_23C57:                                      //loc_23C57:
    _bp += 0x0002;                              //add bp, 2
    _di += 1;                                   //inc di
loc_23C5B:                                      //loc_23C5B:
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_23C67
      goto loc_23C67;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23C67:                                      //loc_23C67:
    if (--_cx)                                  //loop loc_23C6B
      goto loc_23C6B;
    goto loc_23C6E;                             //jmp short loc_23C6E
loc_23C6B:                                      //loc_23C6B:
    goto loc_23B1E;                             //jmp loc_23B1E
loc_23C6E:                                      //loc_23C6E:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_23C75()
{
    WORD _cs = _seg001;

    _push(_si);                                 //push si
    _push(_cs);                                 //push cs
    sub_2330D();                                //call sub_2330D
    _si = _pop();                               //pop si
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _di = memory16(_ds, _si + 12);              //mov di, [si+0Ch]
    _cx = _seg007;                              //mov cx, seg seg007
    if (!(_di & 0x0001))                        //jz short loc_23C91
      goto loc_23C91;
    _di -= 1;                                   //dec di
    _cx = _seg008;                              //mov cx, seg seg008
loc_23C91:                                      //loc_23C91:
    _push(_es);                                 //push es
    _es = _cx;                                  //mov es, cx
    _ax = _ax - memory16(_es, _di);             //sub ax, es:[di]
    _bx = _bx - memory16(_es, _di + 2);         //sub bx, es:[di+2]
    _es = _pop();                               //pop es
    sub_23CB2();                                //call sub_23CB2
    _ax += 0x0010;                              //add ax, 10h
    sub_23CB2();                                //call sub_23CB2
    _bx += 0x0010;                              //add bx, 10h
    sub_23CB2();                                //call sub_23CB2
    _ax -= 0x0010;                              //sub ax, 10h
    sub_23CB2();                                //call sub_23CB2
}

void sub_23CB2()
{
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _cx = _ax;                                  //mov cx, ax
    _cx &= 0xfff0;                              //and cx, 0FFF0h
    _cx >>= 1;                                  //shr cx, 1
    if (_cx >= 0x00a0)                          //jnb short loc_23D11
      goto loc_23D11;
    _dx = _bx;                                  //mov dx, bx
    _dx = _dx + memory16(_ds, 0x9196);          //add dx, word_316C6
    _dx &= 0xfff0;                              //and dx, 0FFF0h
    _dx = _dx - memory16(_ds, 0x9196);          //sub dx, word_316C6
    _bx = _bx + memory16(_ds, 0x9196);          //add bx, word_316C6
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax &= 0x00fe;                              //and ax, 0FEh
    _si += _ax;                                 //add si, ax
    _ax = 0x0028;                               //mov ax, 28h
    _push(_dx);                                 //push dx
    _ax = _bx * _al;                            //mul bx
    _dx = _pop();                               //pop dx
    _si += _ax;                                 //add si, ax
    _push(_es);                                 //push es
    _ax = _seg000;                              //mov ax, seg seg000
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, 0xF288) = _ax;                //mov es:word_1F288, ax
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
    _bx = 0x0001;                               //mov bx, 1
    _si = 0xf288;                               //mov si, 0F288h
    sub_1EFF0();                                //call sub_1EFF0
loc_23D11:                                      //loc_23D11:
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
}

void sub_23D15()
{
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
loc_23D1A:                                      //loc_23D1A:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
loc_23D23:                                      //loc_23D23:
    _ax = _seg007;                              //mov ax, seg seg007
    if (!(_si & 0x0001))                        //jz short loc_23D30
      goto loc_23D30;
    _si -= 1;                                   //dec si
    _ax = _seg008;                              //mov ax, seg seg008
loc_23D30:                                      //loc_23D30:
    _push(_ds);                                 //push ds
    _ds = _ax;                                  //mov ds, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _cx -= _ax;                                 //sub cx, ax
    _cx &= 0xfffe;                              //and cx, 0FFFEh
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx -= _ax;                                 //sub dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bp = _ax;                                  //mov bp, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx = _ax;                                  //mov bx, ax
    if ((short)_cx < (short)0x0140)             //jl short loc_23D4B
      goto loc_23D4B;
    goto loc_23E49;                             //jmp loc_23E49
loc_23D4B:                                      //loc_23D4B:
    if ((short)_dx < (short)memory16(_ss, 16))  //jl short loc_23D55
      goto loc_23D55;
    goto loc_23E49;                             //jmp loc_23E49
loc_23D55:                                      //loc_23D55:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > 0)                         //jg short loc_23D5E
      goto loc_23D5E;
    goto loc_23E49;                             //jmp loc_23E49
loc_23D5E:                                      //loc_23D5E:
    _ax = _dx;                                  //mov ax, dx
    _flags.sign = (short)(_ax + _bx) < 0;       //add ax, bx
    _ax += _bx;
    if (!_flags.sign)                           //jns short loc_23D67
      goto loc_23D67;
    goto loc_23E49;                             //jmp loc_23E49
loc_23D67:                                      //loc_23D67:
    memory16(_ds, 0x0) = 0x0000;                //mov word ptr unk_54890, 0
    if ((short)_ax <= (short)memory16(_ss, 16)) //jle short loc_23D7B
      goto loc_23D7B;
    _ax = _ax - memory16(_ss, 16);              //sub ax, ss:10h
    _bx -= _ax;                                 //sub bx, ax
loc_23D7B:                                      //loc_23D7B:
    if ((short)_dx >= 0)                        //jns short loc_23DAF
      goto loc_23DAF;
    _bx += _dx;                                 //add bx, dx
    _dx = -_dx;                                 //neg dx
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    if ((short)_bp <= (short)0x0008)            //jle short loc_23DAA
      goto loc_23DAA;
    if ((short)_bp > (short)0x0010)             //jg short loc_23D99
      goto loc_23D99;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_23DAA;                             //jmp short loc_23DAA
loc_23D99:                                      //loc_23D99:
    if ((short)_bp > (short)0x0018)             //jg short loc_23DA6
      goto loc_23DA6;
    _dx = _ax;                                  //mov dx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    goto loc_23DAA;                             //jmp short loc_23DAA
loc_23DA6:                                      //loc_23DA6:
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
loc_23DAA:                                      //loc_23DAA:
    memory16(_ds, 0x0) = _ax;                   //mov word ptr unk_54890, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_23DAF:                                      //loc_23DAF:
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ds = _pop();                               //pop ds
    if ((short)_cx >= 0)                        //jns short loc_23DC5
      goto loc_23DC5;
    goto loc_23E45;                             //jmp loc_23E45
loc_23DC5:                                      //loc_23DC5:
    _ax = _cx;                                  //mov ax, cx
    _ax += _bp;                                 //add ax, bp
    if ((short)_ax > (short)0x0140)             //jg short loc_23E47
      goto loc_23E47;
    _cx >>= 1;                                  //shr cx, 1
    _di += _cx;                                 //add di, cx
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cl = _bl;                                  //mov cl, bl
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cx += 1;                                   //inc cx
    _si = _si + memory16(_ds, 0x0);             //add si, word_28530
    if ((short)_bp <= (short)0x0008)            //jle short loc_23E34
      goto loc_23E34;
    if ((short)_bp <= (short)0x0010)            //jle short loc_23E20
      goto loc_23E20;
    if ((short)_bp <= (short)0x0018)            //jle short loc_23E09
      goto loc_23E09;
loc_23DEF:                                      //loc_23DEF:
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    _flags.sign = (short)(_di + 0x1ff0) < 0;    //add di, 1FF0h
    _di += 0x1ff0;
    if (!_flags.sign)                           //jns short loc_23E05
      goto loc_23E05;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23E05:                                      //loc_23E05:
    if (--_cx)                                  //loop loc_23DEF
      goto loc_23DEF;
    goto loc_23E49;                             //jmp short loc_23E49
loc_23E09:                                      //loc_23E09:
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    _flags.sign = (short)(_di + 0x1ff4) < 0;    //add di, 1FF4h
    _di += 0x1ff4;
    if (!_flags.sign)                           //jns short loc_23E1C
      goto loc_23E1C;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23E1C:                                      //loc_23E1C:
    if (--_cx)                                  //loop loc_23E09
      goto loc_23E09;
    goto loc_23E49;                             //jmp short loc_23E49
loc_23E20:                                      //loc_23E20:
    sub_2312A();                                //call sub_2312A
    sub_2312A();                                //call sub_2312A
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_23E30
      goto loc_23E30;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23E30:                                      //loc_23E30:
    if (--_cx)                                  //loop loc_23E20
      goto loc_23E20;
    goto loc_23E49;                             //jmp short loc_23E49
loc_23E34:                                      //loc_23E34:
    sub_2312A();                                //call sub_2312A
    _flags.sign = (short)(_di + 0x1ffc) < 0;    //add di, 1FFCh
    _di += 0x1ffc;
    if (!_flags.sign)                           //jns short loc_23E41
      goto loc_23E41;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23E41:                                      //loc_23E41:
    if (--_cx)                                  //loop loc_23E34
      goto loc_23E34;
    goto loc_23E49;                             //jmp short loc_23E49
loc_23E45:                                      //loc_23E45:
    goto loc_23E49;                             //jmp short loc_23E49
loc_23E47:                                      //loc_23E47:
    _STOP_("goto $+2");                         //jmp short $+2
loc_23E49:                                      //loc_23E49:
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_23E4F()
{
    _bx = memory16(_ds, _si + 18);              //mov bx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _si = memory16(_ds, _si + 12);              //mov si, [si+0Ch]
    _bx = _bx - memory16(_ds, _si);             //sub bx, [si]
    _bx &= 0xfffe;                              //and bx, 0FFFEh
    if (_bx >= 0x0140)                          //jnb short locret_23ED1
      goto locret_23ED1;
    _dx = _dx - memory16(_ds, _si + 2);         //sub dx, [si+2]
    if ((short)_dx >= (short)0x00c0)            //jge short locret_23ED1
      goto locret_23ED1;
    _cx = memory16(_ds, _si + 4);               //mov cx, [si+4]
    _ax = _bx;                                  //mov ax, bx
    _bx &= 0x0001;                              //and bx, 1
    _ax = _ax ^ _bx;                            //xor ax, bx
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + _si + 6);         //mov si, [bx+si+6]
    if ((short)_dx >= 0)                        //jns short loc_23E89
      goto loc_23E89;
    _si -= _dx;                                 //sub si, dx
    _si -= _dx;                                 //sub si, dx
    _cx += _dx;                                 //add cx, dx
    if ((short)_cx <= (short)0)                  //jle short locret_23ED1
      goto locret_23ED1;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_23E89:                                      //loc_23E89:
    _bx = _dx;                                  //mov bx, dx
    _bx += _cx;                                 //add bx, cx
    _bx -= 0x00c0;                              //sub bx, 0C0h
    if (_FIXME_)                                //jle short loc_23E97
      goto loc_23E97;
    _cx -= _bx;                                 //sub cx, bx
    if (_FIXME_)                                //jle short locret_23ED1
      goto locret_23ED1;
loc_23E97:                                      //loc_23E97:
    _di = _dx;                                  //mov di, dx
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _bx = 0xb800;                               //mov bx, 0B800h
    _es = _bx;                                  //mov es, bx
    if ((short)_ax >= (short)0x0138)            //jge short loc_23EBE
      goto loc_23EBE;
loc_23EAD:                                      //loc_23EAD:
    sub_231A5();                                //call sub_231A5
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_23EBA
      goto loc_23EBA;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23EBA:                                      //loc_23EBA:
    if (--_cx)                                  //loop loc_23EAD
      goto loc_23EAD;
    goto loc_23ECD;                             //jmp short loc_23ECD
loc_23EBE:                                      //loc_23EBE:
    sub_23294();                                //call sub_23294
    _flags.sign = (short)(_di + 0x1ffc) < 0;    //add di, 1FFCh
    _di += 0x1ffc;
    if (!_flags.sign)                           //jns short loc_23ECB
      goto loc_23ECB;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23ECB:                                      //loc_23ECB:
    if (--_cx)                                  //loop loc_23EBE
      goto loc_23EBE;
loc_23ECD:                                      //loc_23ECD:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_23ED1:                                   //locret_23ED1:
    return;
}

void sub_23ED2()
{
    _di = _di ^ _di;                            //xor di, di
    _si = 0x0000;                               //mov si, 0
    _si = _si + memory16(_ds, 0x918E);          //add si, word_316BE
    _dx = memory16(_ds, 0x9196);                //mov dx, word_316C6
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _cx = 0x0010;                               //mov cx, 10h
    _cx -= _dx;                                 //sub cx, dx
    _bl = 0x14;                                 //mov bl, 14h
loc_23EEB:                                      //loc_23EEB:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si += _dx;                                 //add si, dx
    _si += _dx;                                 //add si, dx
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
loc_23F01:                                      //loc_23F01:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_23F0F
      goto loc_23F0F;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_23F0F:                                      //loc_23F0F:
    if (--_cx)                                  //loop loc_23F01
      goto loc_23F01;
    _bp = _di;                                  //mov bp, di
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _di += 0x0008;                              //add di, 8
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_23EEB
      goto loc_23EEB;
    _di = _bp;                                  //mov di, bp
    _di -= 0x0098;                              //sub di, 98h
    _bx = 0x0010;                               //mov bx, 10h
    _bx = _bx - memory16(_ds, 0x9196);          //sub bx, word_316C6
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + -26816);          //mov ax, [bx-68C0h]
    _ax = _ax - memory16(_ds, _bx + -26818);    //sub ax, [bx-68C2h]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ss, 32) = _ax;                    //mov ss:20h, ax
    _ax = memory16(_ds, _bx + -26814);          //mov ax, [bx-68BEh]
    _ax = _ax - memory16(_ds, _bx + -26816);    //sub ax, [bx-68C0h]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ss, 34) = _ax;                    //mov ss:22h, ax
    _ax = memory16(_ds, _bx + -26812);          //mov ax, [bx-68BCh]
    _ax = _ax - memory16(_ds, _bx + -26814);    //sub ax, [bx-68BEh]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ss, 36) = _ax;                    //mov ss:24h, ax
    _ax = memory16(_ds, _bx + -26810);          //mov ax, [bx-68BAh]
    _ax = _ax - memory16(_ds, _bx + -26812);    //sub ax, [bx-68BCh]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ss, 38) = _ax;                    //mov ss:26h, ax
    _bx = 0x0b14;                               //mov bx, 0B14h
loc_23F6C:                                      //loc_23F6C:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    if (_ax != 0)                               //jnz short loc_23F75
      goto loc_23F75;
    goto loc_24016;                             //jmp loc_24016
loc_23F75:                                      //loc_23F75:
    _si = _ax;                                  //mov si, ax
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _cx = _ds;                                  //mov cx, ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    goto loc_240B0;                             //jmp loc_240B0
loc_24016:                                      //loc_24016:
    _cx = _ds;                                  //mov cx, ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _ax = _ax ^ _ax;                            //xor ax, ax
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 32);              //add di, ss:20h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 34);              //add di, ss:22h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 36);              //add di, ss:24h
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _stosw<MemAuto, DirAuto>();                 //stosw
    _di = _di + memory16(_ss, 38);              //add di, ss:26h
loc_240B0:                                      //loc_240B0:
    _bp = _di;                                  //mov bp, di
    _di = _pop();                               //pop di
    _di += 0x0008;                              //add di, 8
    _ds = _cx;                                  //mov ds, cx
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl == 0)                               //jz short loc_240C0
      goto loc_240C0;
    goto loc_23F6C;                             //jmp loc_23F6C
loc_240C0:                                      //loc_240C0:
    _bl = 0x14;                                 //mov bl, 14h
    _di = _bp;                                  //mov di, bp
    _di -= 0x0098;                              //sub di, 98h
    _bh -= 1;                                   //dec bh
    if (_bh == 0)                               //jz short loc_240CF
      goto loc_240CF;
    goto loc_23F6C;                             //jmp loc_23F6C
loc_240CF:                                      //loc_240CF:
    _dx = memory16(_ds, 0x9196);                //mov dx, ds:9196h
    if (!(_dx & _dx))                           //jz short loc_24106
      goto loc_24106;
    _bl = 0x14;                                 //mov bl, 14h
loc_240D9:                                      //loc_240D9:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _push(_si);                                 //push si
    _ax >>= 1;                                  //shr ax, 1
    _si = _ax;                                  //mov si, ax
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _push(_ds);                                 //push ds
    _ax = _seg009;                              //mov ax, seg seg009
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _cx = _dx;                                  //mov cx, dx
loc_240EC:                                      //loc_240EC:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_240FA
      goto loc_240FA;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_240FA:                                      //loc_240FA:
    if (--_cx)                                  //loop loc_240EC
      goto loc_240EC;
    _di = _pop();                               //pop di
    _di += 0x0008;                              //add di, 8
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_240D9
      goto loc_240D9;
loc_24106:                                      //loc_24106:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2410B()
{
    sub_2411A();                                //call near ptr sub_2411A
    sub_24130();                                //call sub_24130
    sub_2411A();                                //call near ptr sub_2411A
    sub_24130();                                //call sub_24130
}

void sub_2411A()
{
    _push(_es);                                 //push es
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = _di ^ _di;                            //xor di, di
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x4000;                               //mov cx, 4000h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
}

void sub_2412B()
{
    sub_2411A();                                //call near ptr sub_2411A
}

void sub_24130()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = 0x0583;                               //mov ax, 583h
    _bx = memory16(_ds, 0x4255);                //mov bx, seg_2C785
    _xchg(_bh, _bl);                            //xchg bh, bl
    memory16(_ds, 0x4255) = _bx;                //mov seg_2C785, bx
    _interrupt(16);                             //int 10h
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_24144()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = 0x0583;                               //mov ax, 583h
    _bx = memory16(_ds, 0x4255);                //mov bx, seg_2C785
    _bl = _bh;                                  //mov bl, bh
    _interrupt(16);                             //int 10h
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_24154()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = 0x0583;                               //mov ax, 583h
    _bx = memory16(_ds, 0x4255);                //mov bx, seg_2C785
    _interrupt(16);                             //int 10h
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_24162()
{
    sub_10EF1();                                //call sub_10EF1
loc_24167:                                      //loc_24167:
    if (memory16(_ds, 0x3046) == 0x0000)        //jz short loc_24167
      goto loc_24167;
    sub_24130();                                //call sub_24130
    memory16(_ds, 0x3046) = 0x0000;             //mov word_2B576, 0
}

void sub_24178()
{
    sub_24185();                                //call sub_24185
    sub_24130();                                //call sub_24130
    sub_24185();                                //call sub_24185
    sub_24130();                                //call sub_24130
}

void sub_24185()
{
    _push(_ds);                                 //push ds
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x0000;                               //mov si, 0
    _di = memory16(_ds, 0x98BE);                //mov di, word_31DEE
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0008;                               //mov cx, 8
loc_2419A:                                      //loc_2419A:
    _push(_cx);                                 //push cx
    _cx = 0x0050;                               //mov cx, 50h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _flags.sign = (short)(_di + 0x1f60) < 0;    //add di, 1F60h
    _di += 0x1f60;
    if (!_flags.sign)                           //jns short loc_241AA
      goto loc_241AA;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_241AA:                                      //loc_241AA:
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_2419A
      goto loc_2419A;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_241B3()
{
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x9c80;                               //mov si, 9C80h
    _cx = 0x0050;                               //mov cx, 50h
loc_241BE:                                      //loc_241BE:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if ((short)_ax < 0)                         //js short loc_2422D
      goto loc_2422D;
    _bx = _ax;                                  //mov bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx = _ax;                                  //mov dx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _bx += _ax;                                 //add bx, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _dx += _ax;                                 //add dx, ax
    if (_bx >= 0x013c)                          //jnb short loc_24226
      goto loc_24226;
    if (_dx >= 0x00bc)                          //jnb short loc_24226
      goto loc_24226;
    memory16(_ds, _si - 8) = _bx;               //mov [si-8], bx
    memory16(_ds, _si - 6) = _dx;               //mov [si-6], dx
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _ax = _bx;                                  //mov ax, bx
    _bx = _dx;                                  //mov bx, dx
    sub_10EDD();                                //call sub_10EDD
    if (_FIXME_)                                //jz short loc_24205
      goto loc_24205;
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _ax = memory16(_es, 0x3DA8);                //mov ax, es:word_2C2D8
    _push(_si);                                 //push si
    sub_10EE1();                                //call sub_10EE1
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _cx = _pop();                               //pop cx
    _sp += 0x0004;                              //add sp, 4
    goto loc_24226;                             //jmp short loc_24226
loc_24205:                                      //loc_24205:
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _ax = _pop();                               //pop ax
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_24220
      goto loc_24220;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24220:                                      //loc_24220:
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    goto loc_24230;                             //jmp short loc_24230
loc_24226:                                      //loc_24226:
    memory16(_ds, _si - 8) = 0xffff;            //mov word ptr [si-8], 0FFFFh
    goto loc_24230;                             //jmp short loc_24230
loc_2422D:                                      //loc_2422D:
    _si += 0x0006;                              //add si, 6
loc_24230:                                      //loc_24230:
    if (--_cx)                                  //loop loc_241BE
      goto loc_241BE;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_24237()
{
    _ax = memory16(_ds, _si + 52);              //mov ax, [si+34h]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _push(_si);                                 //push si
    sub_24250();                                //call near ptr sub_24250
    _si = _pop();                               //pop si
}

void sub_24250()
{
    memory16(_ds, 0xFCE2) += 0x0004;            //add word_38212, 4
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, 0xFCFE);                //mov ax, word_3822E
    memory16(_ds, 0x32C0) = _ax;                //mov word_2B7F0, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    if ((short)memory16(_ds, 0xFCE2) > (short)0xfff0)//jg short loc_24285
      goto loc_24285;
    goto loc_2431E;                             //jmp loc_2431E
loc_24285:                                      //loc_24285:
    if ((short)memory16(_ds, 0xFCE2) < (short)0x0140)//jl short loc_24290
      goto loc_24290;
    goto loc_2431E;                             //jmp loc_2431E
loc_24290:                                      //loc_24290:
    if ((short)memory16(_ds, 0x32BE) < (short)0x0041)//jl short loc_242BA
      goto loc_242BA;
    _bx = memory16(_ds, 0xFCFE);                //mov bx, word_3822E
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 12994);           //mov si, [bx+32C2h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    _dx += 1;                                   //inc dx
    sub_23316();                                //call near ptr sub_23316
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _ax = memory16(_ds, 0x32BC);                //mov ax, word_2B7EC
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
loc_242BA:                                      //loc_242BA:
    _ax = memory16(_ds, 0x32BE);                //mov ax, word_2B7EE
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    _si = 0x32c8;                               //mov si, 32C8h
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _si = memory16(_ds, _bx + 13000);           //mov si, [bx+32C8h]
    _cx = memory16(_ds, 0xFCE2);                //mov cx, word_38212
    _dx = memory16(_ds, 0xFCE6);                //mov dx, word_38216
    sub_23316();                                //call near ptr sub_23316
    if ((short)memory16(_ds, 0x32BC) < 0 /*CHECK*/)//js short loc_2431E
      goto loc_2431E;
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x32BC);                //mov di, word_2B7EC
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _bx = memory16(_ds, 0x32C0);                //mov bx, word_2B7F0
    _bx <<= 1;                                  //shl bx, 1
    _cx = memory16(_ds, _bx + 13252);           //mov cx, [bx+33C4h]
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _sar(_ax, 1);                               //sar ax, 1
    if (_FIXME_)                                //jns short loc_24307
      goto loc_24307;
    _cx += _ax;                                 //add cx, ax
    if ((short)_cx <= (short)0)                  //jle short loc_2431E
      goto loc_2431E;
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_24307:                                      //loc_24307:
    _bx = _ax;                                  //mov bx, ax
    _bx += _cx;                                 //add bx, cx
    if ((short)_bx <= (short)0x00a0)            //jle short loc_24319
      goto loc_24319;
    _bx -= 0x00a0;                              //sub bx, 0A0h
    _cx -= _bx;                                 //sub cx, bx
    if (_FIXME_)                                //jle short loc_2431E
      goto loc_2431E;
loc_24319:                                      //loc_24319:
    _di += _ax;                                 //add di, ax
    sub_24323();                                //call sub_24323
loc_2431E:                                      //loc_2431E:
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_24323()
{
    _dx = memory16(_ds, 0x32BE);                //mov dx, word_2B7EE
    if (!(_dx & _dx))                           //jz short locret_24347
      goto locret_24347;
    _ax = 0x7777;                               //mov ax, 7777h
loc_2432E:                                      //loc_2432E:
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    if ((short)_di < (short)0x00a0)             //jl short locret_24347
      goto locret_24347;
    _di -= 0x2000;                              //sub di, 2000h
    if ((short)_di >= 0)                        //jns short loc_24344
      goto loc_24344;
    _di += 0x7f60;                              //add di, 7F60h
loc_24344:                                      //loc_24344:
    _dx -= 1;                                   //dec dx
    if (_dx != 0)                               //jnz short loc_2432E
      goto loc_2432E;
locret_24347:                                   //locret_24347:
    return;
}

void sub_24348()
{
    _ax = memory16(_ds, 0x9152);                //mov ax, word_31682
    _dx = memory16(_ds, 0x9154);                //mov dx, word_31684
    _flags.carry = _ax < memory16(_ds, 0x9156); //sub ax, word_31686
    _ax = _ax - memory16(_ds, 0x9156);
    _dx -= memory16(_ds, 0x9158) + _flags.carry;//sbb dx, word_31688
    if ((short)_ax < 0)                         //js short loc_243C9
      goto loc_243C9;
    if (_ax != 0)                               //jnz short loc_2435F
      goto loc_2435F;
    if (!(_ax & _ax))                           //jz short locret_243C8
      goto locret_243C8;
loc_2435F:                                      //loc_2435F:
    _di = memory16(_ds, 0x98BE);                //mov di, word_31DEE
    if (_dx & _dx)                              //jnz short loc_24371
      goto loc_24371;
    if ((short)_ax < (short)0x00c8)             //jl short loc_2438C
      goto loc_2438C;
    if ((short)_ax < (short)0x07d0)             //jl short loc_2437F
      goto loc_2437F;
loc_24371:                                      //loc_24371:
    _bx = 0x921f;                               //mov bx, 921Fh
    _di += 0x0018;                              //add di, 18h
    memory16(_ds, 0x9156) += 0x03e8;            //add word_31686, 3E8h
    goto loc_24397;                             //jmp short loc_24397
loc_2437F:                                      //loc_2437F:
    _bx = 0x9220;                               //mov bx, 9220h
    _di += 0x001c;                              //add di, 1Ch
    memory16(_ds, 0x9156) += 0x0064;            //add word_31686, 64h
    goto loc_24397;                             //jmp short loc_24397
loc_2438C:                                      //loc_2438C:
    _bx = 0x9221;                               //mov bx, 9221h
    _di += 0x0020;                              //add di, 20h
    memory16(_ds, 0x9156) += 0x000a;            //add word_31686, 0Ah
loc_24397:                                      //loc_24397:
    memory16(_ds, 0x9158) = memory16(_ds, 0x9158) + 0x0000 + _flags.carry; _ASSERT(0);
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_243A6
      goto loc_243A6;
    _di += 0x006c;                              //add di, 6Ch
loc_243A6:                                      //loc_243A6:
    _si = 0x0500;                               //mov si, 500h
loc_243A9:                                      //loc_243A9:
    memory(_ds, _bx) += 1;                      //inc byte ptr [bx]
    if ((char)memory(_ds, _bx) < (char)0x0a)    //jl short loc_243B3
      goto loc_243B3;
    memory(_ds, _bx) = 0x00;                    //mov byte ptr [bx], 0
loc_243B3:                                      //loc_243B3:
    _al = memory(_ds, _bx);                     //mov al, [bx]
    sub_2441D();                                //call near ptr sub_2441D
    if (memory(_ds, _bx) != 0x00)               //jnz short locret_243C8
      goto locret_243C8;
    _di -= 0x0004;                              //sub di, 4
    _bx -= 1;                                   //dec bx
    if ((short)_bx >= (short)0x921c)            //jge short loc_243A9
      goto loc_243A9;
locret_243C8:                                   //locret_243C8:
    return;                                     //retf
loc_243C9:                                      //loc_243C9:
    _ax = memory16(_ds, 0x9156);                //mov ax, word_31686
    memory16(_ds, 0x9152) = _ax;                //mov word_31682, ax
    _ax = memory16(_ds, 0x9158);                //mov ax, word_31688
    memory16(_ds, 0x9154) = _ax;                //mov word_31684, ax
}

void sub_243D6()
{
    _di = memory16(_ds, 0x98BE);                //mov di, word_31DEE
    _di += 0x000c;                              //add di, 0Ch
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_243E7
      goto loc_243E7;
    _di += 0x006c;                              //add di, 6Ch
loc_243E7:                                      //loc_243E7:
    _si = 0x0500;                               //mov si, 500h
    _cx = 0x0007;                               //mov cx, 7
loc_243ED:                                      //loc_243ED:
    _al = _al ^ _al;                            //xor al, al
    sub_2441D();                                //call near ptr sub_2441D
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_243ED
      goto loc_243ED;
}

void sub_243F9()
{
    _ax = memory16(_ds, 0x918A);                //mov ax, word_316BA
    if ((short)_ax <= (short)0x0009)            //jle short loc_24404
      goto loc_24404;
    _ax = 0x0009;                               //mov ax, 9
loc_24404:                                      //loc_24404:
    _si = 0x0640;                               //mov si, 640h
    _di = memory16(_ds, 0x98C0);                //mov di, word_31DF0
    _di += 0x0044;                              //add di, 44h
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_24418
      goto loc_24418;
    _di += 0x0014;                              //add di, 14h
loc_24418:                                      //loc_24418:
    sub_2441D();                                //call near ptr sub_2441D
}

void sub_2441D()
{
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _cx = 0x0008;                               //mov cx, 8
loc_2443D:                                      //loc_2443D:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ffc) < 0;    //add di, 1FFCh
    _di += 0x1ffc;
    if (!_flags.sign)                           //jns short loc_24449
      goto loc_24449;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24449:                                      //loc_24449:
    if (--_cx)                                  //loop loc_2443D
      goto loc_2443D;
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ds = _pop();                               //pop ds
    sub_24144();                                //call sub_24144
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _cx = 0x0008;                               //mov cx, 8
loc_2445B:                                      //loc_2445B:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ffc) < 0;    //add di, 1FFCh
    _di += 0x1ffc;
    if (!_flags.sign)                           //jns short loc_24467
      goto loc_24467;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24467:                                      //loc_24467:
    if (--_cx)                                  //loop loc_2445B
      goto loc_2445B;
    _di = _pop();                               //pop di
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    sub_24154();                                //call sub_24154
}

void sub_24475()
{
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    sub_24488();                                //call near ptr sub_24488
    sub_24144();                                //call sub_24144
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
    sub_24488();                                //call near ptr sub_24488
    sub_24154();                                //call sub_24154
}

void sub_24488()
{
    _di = memory16(_ds, 0x3752);                //mov di, word_2BC82
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _push(memory16(_ds, _si + 20));             //push word ptr [si+14h]
    _push(_si);                                 //push si
    memory(_ds, _si + 20) = 0x00;               //mov byte ptr [si+14h], 0
    sub_24535();                                //call near ptr sub_24535
    _si = _pop();                               //pop si
    memory16(_ds, _si + 20) = _pop();           //pop word ptr [si+14h]
}

void sub_244A3()
{
    _di = memory16(_ds, 0x9896);                //mov di, word_31DC6
    _di += 0x0044;                              //add di, 44h
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    memory16(_ds, 0xFCE4) = _dx;                //mov word_38214, dx
    _bx = 0x3756;                               //mov bx, 3756h
    _si = 0x0500;                               //mov si, 500h
loc_244B7:                                      //loc_244B7:
    if (memory16(_ds, _bx) == 0x0000)           //jz short locret_244EB
      goto locret_244EB;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_244BE:                                      //loc_244BE:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) -= _ax;               //sub word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    _FIXME_;                                    //sbb word_38214, ax
    if ((short)memory16(_ds, 0xFCE2) < 0)       //js short loc_244D0
      goto loc_244D0;
    _dx += 1;                                   //inc dx
    goto loc_244BE;                             //jmp short loc_244BE
loc_244D0:                                      //loc_244D0:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    memory16(_ds, 0xFCE2) += _ax;               //add word_38212, ax
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_ds, 0xFCE4) = memory16(_ds, 0xFCE4) + _ax + _flags.carry; _ASSERT(0);
    _bx += 0x0004;                              //add bx, 4
    _al = _dl;                                  //mov al, dl
    sub_2441D();                                //call near ptr sub_2441D
    _di += 0x0004;                              //add di, 4
    goto loc_244B7;                             //jmp short loc_244B7
locret_244EB:                                   //locret_244EB:
    return;
}

void sub_244EC()
{
    sub_2411A();                                //call near ptr sub_2411A
    memory16(_ds, 0x3752) = 0x000c;             //mov word_2BC82, 0Ch
    _si = 0x352b;                               //mov si, 352Bh
    sub_24475();                                //call near ptr sub_24475
    _si = 0x358f;                               //mov si, 358Fh
    _di = memory16(_ds, 0x978A);                //mov di, word_31CBA
    _di += 0x0010;                              //add di, 10h
    _cx = 0x000a;                               //mov cx, 0Ah
loc_2450A:                                      //loc_2450A:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    sub_24524();                                //call near ptr sub_24524
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _si += 0x000f;                              //add si, 0Fh
    _di += 0x0280;                              //add di, 280h
    if (--_cx)                                  //loop loc_2450A
      goto loc_2450A;
    sub_23077();                                //call near ptr sub_23077
{sub_24162(); return; };                        //jmp near ptr sub_24162
}

void sub_24524()
{
    _push(memory16(_ds, _si + 15));             //push word ptr [si+0Fh]
    _push(_si);                                 //push si
    memory(_ds, _si + 15) = 0x00;               //mov byte ptr [si+0Fh], 0
    sub_24547();                                //call near ptr sub_24547
    _si = _pop();                               //pop si
    memory16(_ds, _si + 15) = _pop();           //pop word ptr [si+0Fh]
}

void sub_24535()
{
    _bp = 0x0780;                               //mov bp, 780h
    _cx = 0x0016;                               //mov cx, 16h
    sub_24552();                                //call near ptr sub_24552
}

void sub_24540()
{
    _di = memory16(_ds, 0x98AE);                //mov di, word_31DDE
    _di += 0x0058;                              //add di, 58h
    _STOP_("sp-trace-fail");                    //sub_24540 endp_failed
    _STOP_("continues");                        //sub_24547 proc far
}

void sub_24547()
{
    _bp = 0x2300;                               //mov bp, 2300h
    _cx = 0x000e;                               //mov cx, 0Eh
    sub_24552();                                //call near ptr sub_24552
}

void sub_24552()
{
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & _al))                           //jz short locret_24566
      goto locret_24566;
    _xchg(_si, _bp);                            //xchg si, bp
    _push(_si);                                 //push si
    sub_24567();                                //call near ptr sub_24567
    _si = _pop();                               //pop si
    _xchg(_si, _bp);                            //xchg si, bp
    _di += 0x0008;                              //add di, 8
{sub_24552(); return; };                        //jmp short near ptr sub_24552
locret_24566:                                   //locret_24566:
    return;
}

void sub_24567()
{
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _push(_di);                                 //push di
    memory(_ds, 0x33F2) = _al;                  //mov byte_2B922, al
    _di = 0x33ca;                               //mov di, 33CAh
    _cx = 0x33f2;                               //mov cx, 33F2h
    _cx -= 0x33ca;                              //sub cx, 33CAh
    _cx += 1;                                   //inc cx
    _repne_scasb();                             //repne scasb
    _ax = _di;                                  //mov ax, di
    _ax -= 0x33cb;                              //sub ax, 33CBh
    _di = _pop();                               //pop di
    if (_ax == 0x0028)                          //jz short loc_245B1
      goto loc_245B1;
    _cx = _pop();                               //pop cx
    _ax = _cx * _al;                            //mul cx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    _push(_cx);                                 //push cx
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
loc_2459C:                                      //loc_2459C:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _flags.sign = (short)(_di + 0x1ff8) < 0;    //add di, 1FF8h
    _di += 0x1ff8;
    if (!_flags.sign)                           //jns short loc_245AA
      goto loc_245AA;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_245AA:                                      //loc_245AA:
    if (--_cx)                                  //loop loc_2459C
      goto loc_2459C;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
loc_245B1:                                      //loc_245B1:
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
}

void sub_245B4()
{
    if (memory(_ds, 0x8FAF) == 0x00)            //jz short locret_245CC
      goto locret_245CC;
    memory(_ds, 0x8FAF) = 0x00;                 //mov byte_314DF, 0
    sub_245CD();                                //call sub_245CD
    sub_24144();                                //call sub_24144
    sub_245CD();                                //call sub_245CD
    sub_24154();                                //call sub_24154
locret_245CC:                                   //locret_245CC:
    return;
}

void sub_245CD()
{
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _bx = memory16(_ds, 0x9186);                //mov bx, word_316B6
    if ((short)_bx <= (short)0x0027)            //jle short loc_245DE
      goto loc_245DE;
    _bx = 0x0027;                               //mov bx, 27h
loc_245DE:                                      //loc_245DE:
    _bx -= 0x0027;                              //sub bx, 27h
    _bx = -_bx;                                 //neg bx
    _di = memory16(_ds, 0x98C4);                //mov di, word_31DF4
    _di += 0x002d;                              //add di, 2Dh
    _ax = 0x0f0e;                               //mov ax, 0F0Eh
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_245FE
      goto loc_245FE;
    _di = memory16(_ds, 0x98C4);                //mov di, word_31DF4
    _di += 0x005f;                              //add di, 5Fh
    _ax = 0xf0e0;                               //mov ax, 0F0E0h
loc_245FE:                                      //loc_245FE:
    _cx = 0x0027;                               //mov cx, 27h
loc_24601:                                      //loc_24601:
    if (_cx != _bx)                             //jnz short loc_24607
      goto loc_24607;
    _al = _al ^ _al;                            //xor al, al
loc_24607:                                      //loc_24607:
    _push(_di);                                 //push di
    _ah = (~_ah);                               //not ah
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_2461A
      goto loc_2461A;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_2461A:                                      //loc_2461A:
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_2462A
      goto loc_2462A;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_2462A:                                      //loc_2462A:
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    _ah = (~_ah);                               //not ah
    _di = _pop();                               //pop di
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    if (!(_al & 0xf0))                          //jz short loc_24642
      goto loc_24642;
    _xchg(_al, _ah);                            //xchg al, ah
    _di += 1;                                   //inc di
loc_24642:                                      //loc_24642:
    if (--_cx)                                  //loop loc_24601
      goto loc_24601;
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_24649()
{
    if (memory16(_ds, 0x33BC) != 0x0000)        //jnz short loc_24674
      goto loc_24674;
    _si = memory16(_ds, 0x98BE);                //mov si, word_31DEE
    _push(_ds);                                 //push ds
    _ax = 0xb800;                               //mov ax, 0B800h
    _ds = _ax;                                  //mov ds, ax
    _di = 0x923e;                               //mov di, 923Eh
    _cx = 0x0008;                               //mov cx, 8
loc_24660:                                      //loc_24660:
    _push(_cx);                                 //push cx
    _cx = 0x0050;                               //mov cx, 50h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _flags.sign = (short)(_si + 0x1f60) < 0;    //add si, 1F60h
    _si += 0x1f60;
    if (!_flags.sign)                           //jns short loc_24670
      goto loc_24670;
    _si -= 0x7f60;                              //sub si, 7F60h
loc_24670:                                      //loc_24670:
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_24660
      goto loc_24660;
    _ds = _pop();                               //pop ds
loc_24674:                                      //loc_24674:
    memory(_ds, 0x33BC) += 1;                   //inc byte ptr word_2B8EC
}

void sub_24679()
{
    memory(_ds, 0x33BC) -= 1;                   //dec byte ptr word_2B8EC
    if (memory(_ds, 0x33BC) != 0)               //jnz short locret_2468B
      goto locret_2468B;
    sub_2468C();                                //call sub_2468C
    sub_24144();                                //call sub_24144
    sub_2468C();                                //call sub_2468C
    sub_24154();                                //call sub_24154
locret_2468B:                                   //locret_2468B:
    return;
}

void sub_2468C()
{
    _push(_es);                                 //push es
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x923e;                               //mov si, 923Eh
    _di = memory16(_ds, 0x98BE);                //mov di, word_31DEE
    _cx = 0x0008;                               //mov cx, 8
loc_2469C:                                      //loc_2469C:
    _push(_cx);                                 //push cx
    _cx = 0x0050;                               //mov cx, 50h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _flags.sign = (short)(_di + 0x1f60) < 0;    //add di, 1F60h
    _di += 0x1f60;
    if (!_flags.sign)                           //jns short loc_246AC
      goto loc_246AC;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_246AC:                                      //loc_246AC:
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_2469C
      goto loc_2469C;
    _es = _pop();                               //pop es
}

void sub_246B1()
{
    _cx = 0x0080;                               //mov cx, 80h
    _si = _si ^ _si;                            //xor si, si
    _di = _di ^ _di;                            //xor di, di
loc_246B8:                                      //loc_246B8:
    _push(_cx);                                 //push cx
    _push(_ds);                                 //push ds
    _push(_di);                                 //push di
    _ax = 0xb800;                               //mov ax, 0B800h
    _ds = _ax;                                  //mov ds, ax
    _di = 0x43cf;                               //mov di, 43CFh
    _cx = 0x0080;                               //mov cx, 80h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
    sub_24144();                                //call sub_24144
    _push(_es);                                 //push es
    _push(_si);                                 //push si
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = 0x43cf;                               //mov si, 43CFh
    _cx = 0x0080;                               //mov cx, 80h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    sub_24154();                                //call sub_24154
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_246B8
      goto loc_246B8;
}

void sub_246E5()
{
    WORD _cs = _seg001;

    sub_2411A();                                //call near ptr sub_2411A
    _si = 0x582e;                               //mov si, 582Eh
loc_246EC:                                      //loc_246EC:
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    if (!(_ax & _ax))                           //jz short loc_24721
      goto loc_24721;
    _bp = _ax;                                  //mov bp, ax
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _di = memory16(_cs, _si);                   //mov di, cs:[si]
    _si += 0x0002;                              //add si, 2
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di += _ax;                                 //add di, ax
    _dx = memory16(_cs, _si);                   //mov dx, cs:[si]
    _si += 0x0002;                              //add si, 2
    _cx = memory16(_cs, _si);                   //mov cx, cs:[si]
    _si += 0x0002;                              //add si, 2
    _push(_si);                                 //push si
    _si = _bp;                                  //mov si, bp
    sub_247BF();                                //call sub_247BF
    _si = _pop();                               //pop si
    goto loc_246EC;                             //jmp short loc_246EC
loc_24721:                                      //loc_24721:
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_24723:                                      //loc_24723:
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_24725:                                      //loc_24725:
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xec90;                               //mov si, 0EC90h
    sub_23316();                                //call near ptr sub_23316
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _si = 0xefc0;                               //mov si, 0EFC0h
    sub_23316();                                //call near ptr sub_23316
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _cx += 0x0029;                              //add cx, 29h
    if ((short)_cx < (short)0x00cd)             //jl short loc_24725
      goto loc_24725;
    _dx += 0x0029;                              //add dx, 29h
    if ((short)_dx < (short)0x00a4)             //jl short loc_24723
      goto loc_24723;
    if (memory16(_ds, 0x8E7A) == 0x0000)        //jz short loc_24761
      goto loc_24761;
    _si = 0xfc20;                               //mov si, 0FC20h
    _cx = 0x00c1;                               //mov cx, 0C1h
    _dx = 0x00bc;                               //mov dx, 0BCh
    sub_23316();                                //call near ptr sub_23316
loc_24761:                                      //loc_24761:
    sub_246B1();                                //call near ptr sub_246B1
}

void sub_24766()
{
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    sub_23316();                                //call near ptr sub_23316
    sub_24144();                                //call sub_24144
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    sub_23316();                                //call near ptr sub_23316
    sub_24154();                                //call sub_24154
}

void sub_2477B()
{
    sub_2411A();                                //call near ptr sub_2411A
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x9806);                //mov di, word_31D36
    _di += 0x0052;                              //add di, 52h
    memory(_es, _di) = 0x07;                    //mov byte ptr es:[di], 7
    memory(_es, _di + 1) = 0x70;                //mov byte ptr es:[di+1], 70h
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_2479E
      goto loc_2479E;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_2479E:                                      //loc_2479E:
    memory(_es, _di) = 0x77;                    //mov byte ptr es:[di], 77h
    memory(_es, _di + 1) = 0x77;                //mov byte ptr es:[di+1], 77h
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_247B1
      goto loc_247B1;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_247B1:                                      //loc_247B1:
    memory(_es, _di) = 0x07;                    //mov byte ptr es:[di], 7
    memory(_es, _di + 1) = 0x70;                //mov byte ptr es:[di+1], 70h
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_247BF()
{
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
loc_247CA:                                      //loc_247CA:
    _push(_cx);                                 //push cx
    _cx = _dx;                                  //mov cx, dx
    _push(_di);                                 //push di
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_247DB
      goto loc_247DB;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_247DB:                                      //loc_247DB:
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_247CA
      goto loc_247CA;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_247E4()
{
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x9822);                //mov di, word_31D52
    _di += 0x0068;                              //add di, 68h
    _cx = 0x0045;                               //mov cx, 45h
    sub_2480E();                                //call sub_2480E
    sub_24144();                                //call sub_24144
    _di = memory16(_ds, 0x9822);                //mov di, word_31D52
    _di += 0x0068;                              //add di, 68h
    _cx = 0x0045;                               //mov cx, 45h
    sub_2480E();                                //call sub_2480E
    sub_24154();                                //call sub_24154
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_2480E()
{
    goto loc_24832;                             //jmp short loc_24832
loc_24810:                                      //loc_24810:
    _push(_di);                                 //push di
    _di += 0x0003;                              //add di, 3
    memory(_es, _di) &= 0xf0;                   //and byte ptr es:[di], 0F0h
    _di += 1;                                   //inc di
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_cx);                                 //push cx
    _cx = 0x0017;                               //mov cx, 17h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _stosb<MemAuto, DirAuto>();                 //stosb
    _cx = _pop();                               //pop cx
    memory(_es, _di) &= 0x0f;                   //and byte ptr es:[di], 0Fh
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_24832
      goto loc_24832;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24832:                                      //loc_24832:
    if (--_cx)                                  //loop loc_24810
      goto loc_24810;
}

void sub_24835()
{
    _si = 0x8430;                               //mov si, 8430h
    _di = memory16(_ds, 0x9750);                //mov di, word_31C80
    _di += 0x0068;                              //add di, 68h
    _cx = 0x0034;                               //mov cx, 34h
    sub_249C3();                                //call sub_249C3
    _si = 0x8f90;                               //mov si, 8F90h
    _di = memory16(_ds, 0x97FC);                //mov di, word_31D2C
    _di += 0x0068;                              //add di, 68h
    _cx = 0x000a;                               //mov cx, 0Ah
    sub_249C3();                                //call sub_249C3
    _si = 0x91c0;                               //mov si, 91C0h
    if (memory(_ds, 0x8F40) == 0x00)            //jz short loc_24873
      goto loc_24873;
    sub_10ED9();                                //call sub_10ED9
    _cx = 0x0004;                               //mov cx, 4
    goto loc_2486D;                             //jmp short loc_2486D
loc_24869:                                      //loc_24869:
    _si += 0x0770;                              //add si, 770h
loc_2486D:                                      //loc_2486D:
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_flags.carry)                           //jb short loc_24873
      goto loc_24873;
    if (--_cx)                                  //loop loc_24869
      goto loc_24869;
loc_24873:                                      //loc_24873:
    _di = memory16(_ds, 0x97B8);                //mov di, word_31CE8
    _di += 0x0068;                              //add di, 68h
    _cx = 0x0022;                               //mov cx, 22h
    sub_249C3();                                //call sub_249C3
    sub_10EE5();                                //call sub_10EE5
    sub_10EE9();                                //call sub_10EE9
    if (memory16(_ds, 0x8F3C) != 0x0000)        //jnz short loc_24894
      goto loc_24894;
    goto locret_24996;                          //jmp locret_24996
loc_24894:                                      //loc_24894:
    if ((short)memory16(_ds, 0x8F3C) <= (short)0x0008)
      goto loc_248DA;
    _di = memory16(_ds, 0x9750);                //mov di, word_31C80
    _di += 0x0068;                              //add di, 68h
    _si = 0x5c18;                               //mov si, 5C18h
    _ax = 0x0030;                               //mov ax, 30h
    _ax = _ax - memory16(_ds, 0x8F3C);          //sub ax, word_3146C
    _dx = 0x0038;                               //mov dx, 38h
    _ax = _dx * _al;                            //mul dx
    _si += _ax;                                 //add si, ax
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_249C3();                                //call sub_249C3
    _di = 0x0071;                               //mov di, 71h
    _di = _di - memory16(_ds, 0x8F3C);          //sub di, word_3146C
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _di += 0x0068;                              //add di, 68h
    _si = 0x64d8;                               //mov si, 64D8h
    _cx = memory16(_ds, 0x8F3C);                //mov cx, word_3146C
    _cx -= 0x0008;                              //sub cx, 8
    sub_249C3();                                //call sub_249C3
loc_248DA:                                      //loc_248DA:
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = memory16(_ds, 0x8F3C);                //mov dx, word_3146C
    _dx += 1;                                   //inc dx
    _push(_dx);                                 //push dx
    _si = 0xabe4;                               //mov si, 0ABE4h
    sub_23316();                                //call near ptr sub_23316
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xace4;                               //mov si, 0ACE4h
    sub_23316();                                //call near ptr sub_23316
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xad94;                               //mov si, 0AD94h
    sub_23316();                                //call near ptr sub_23316
    _cx = 0x00d7;                               //mov cx, 0D7h
    _dx = 0x0070;                               //mov dx, 70h
    _dx = _dx - memory16(_ds, 0x8F3C);          //sub dx, word_3146C
    _push(_dx);                                 //push dx
    _si = 0xae94;                               //mov si, 0AE94h
    sub_23316();                                //call near ptr sub_23316
    _cx = 0x00f7;                               //mov cx, 0F7h
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _si = 0xaf94;                               //mov si, 0AF94h
    sub_23316();                                //call near ptr sub_23316
    _cx = 0x0117;                               //mov cx, 117h
    _dx = _pop();                               //pop dx
    _si = 0xb044;                               //mov si, 0B044h
    sub_23316();                                //call near ptr sub_23316
    if ((short)memory16(_ds, 0x8F3C) >= (short)0x0008)
      goto locret_24996;
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = 0x0068;                               //mov di, 68h
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4750;                               //mov si, 4750h
    _cx = 0x0009;                               //mov cx, 9
loc_24945:                                      //loc_24945:
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _cx = 0x0007;                               //mov cx, 7
loc_2494A:                                      //loc_2494A:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    if (--_cx)                                  //loop loc_2494A
      goto loc_2494A;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_2495C
      goto loc_2495C;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_2495C:                                      //loc_2495C:
    _si += 0x0008;                              //add si, 8
    if (--_cx)                                  //loop loc_24945
      goto loc_24945;
    _ds = _pop();                               //pop ds
    _di = memory16(_ds, 0x9810);                //mov di, word_31D40
    _di += 0x0068;                              //add di, 68h
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _si = 0x4990;                               //mov si, 4990h
    _cx = 0x0009;                               //mov cx, 9
loc_24975:                                      //loc_24975:
    _push(_di);                                 //push di
    _push(_cx);                                 //push cx
    _cx = 0x0007;                               //mov cx, 7
loc_2497A:                                      //loc_2497A:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    if (--_cx)                                  //loop loc_2497A
      goto loc_2497A;
    _cx = _pop();                               //pop cx
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_2498C
      goto loc_2498C;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_2498C:                                      //loc_2498C:
    _si += 0x0008;                              //add si, 8
    if (--_cx)                                  //loop loc_24975
      goto loc_24975;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
locret_24996:                                   //locret_24996:
    return;
}

void sub_24997()
{
    if (memory16(_ds, 0x8F3E) == 0x0000)        //jz short locret_249C2
      goto locret_249C2;
    _di = memory16(_ds, 0x9822);                //mov di, word_31D52
    _di += 0x0068;                              //add di, 68h
    _cx = 0x0045;                               //mov cx, 45h
    _cx = _cx - memory16(_ds, 0x8F3E);          //sub cx, word_3146E
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    sub_2480E();                                //call sub_2480E
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _si = 0x6d98;                               //mov si, 6D98h
    _cx = memory16(_ds, 0x8F3E);                //mov cx, word_3146E
    sub_249C3();                                //call sub_249C3
locret_249C2:                                   //locret_249C2:
    return;
}

void sub_249C3()
{
    _push(_ds);                                 //push ds
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
loc_249CE:                                      //loc_249CE:
    _push(_di);                                 //push di
    _di += 0x0003;                              //add di, 3
    _si += 0x0003;                              //add si, 3
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _push(_cx);                                 //push cx
    _cx = 0x0017;                               //mov cx, 17h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _movsb<MemAuto, MemAuto, DirAuto>();        //movsb
    _cx = _pop();                               //pop cx
    _si += 0x0005;                              //add si, 5
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_249EC
      goto loc_249EC;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_249EC:                                      //loc_249EC:
    if (--_cx)                                  //loop loc_249CE
      goto loc_249CE;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
}

void sub_249F4()
{
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _si = memory16(_ds, _di + 4);               //mov si, [di+4]
    _si <<= 1;                                  //shl si, 1
    _si = memory16(_ds, _si - 26818);           //mov si, [si-68C2h]
    _ax = memory16(_ds, _di + 2);               //mov ax, [di+2]
    _ax += 1;                                   //inc ax
    _ax >>= 1;                                  //shr ax, 1
    _si += _ax;                                 //add si, ax
    _xchg(_si, _di);                            //xchg si, di
    _bl = 0x1c;                                 //mov bl, 1Ch
loc_24A0E:                                      //loc_24A0E:
    sub_10ED9();                                //call sub_10ED9
    _push(_di);                                 //push di
    _cx = 0x000f;                               //mov cx, 0Fh
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _di = _pop();                               //pop di
    _flags.sign = (short)(_di + 0x2000) < 0;    //add di, 2000h
    _di += 0x2000;
    if (!_flags.sign)                           //jns short loc_24A24
      goto loc_24A24;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24A24:                                      //loc_24A24:
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_24A0E
      goto loc_24A0E;
    _di = _si;                                  //mov di, si
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
}

void sub_24A2F()
{
    if (_al != 0x0d)                            //jnz short loc_24A38
      goto loc_24A38;
{loc_10EED(); return; };                        //
loc_24A38:                                      //loc_24A38:
    _push(_ax);                                 //push ax
    _di = memory16(_ds, 0x8F48);                //mov di, word_31478
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x8F46);                //mov ax, word_31476
    _ax <<= 1;                                  //shl ax, 1
    _di += _ax;                                 //add di, ax
    _ax = _pop();                               //pop ax
    _al -= 0x20;                                //sub al, 20h
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si = 0x7cb0;                               //mov si, 7CB0h
    _si += _ax;                                 //add si, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0008;                               //mov cx, 8
loc_24A6E:                                      //loc_24A6E:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _si += 0x0002;                              //add si, 2
    _flags.sign = (short)(_di + 0x1ffe) < 0;    //add di, 1FFEh
    _di += 0x1ffe;
    if (!_flags.sign)                           //jns short loc_24A7C
      goto loc_24A7C;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24A7C:                                      //loc_24A7C:
    if (--_cx)                                  //loop loc_24A6E
      goto loc_24A6E;
    _ds = _pop();                               //pop ds
    sub_24144();                                //call sub_24144
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _push(_ds);                                 //push ds
    _ax = _seg005;                              //mov ax, seg seg005
    _ds = _ax;                                  //mov ds, ax
    _cx = 0x0008;                               //mov cx, 8
loc_24A8D:                                      //loc_24A8D:
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _si += 0x0002;                              //add si, 2
    _flags.sign = (short)(_di + 0x1ffe) < 0;    //add di, 1FFEh
    _di += 0x1ffe;
    if (!_flags.sign)                           //jns short loc_24A9B
      goto loc_24A9B;
    _di -= 0x7f60;                              //sub di, 7F60h
loc_24A9B:                                      //loc_24A9B:
    if (--_cx)                                  //loop loc_24A8D
      goto loc_24A8D;
    _ax = _pop();                               //pop ax
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    sub_24154();                                //call sub_24154
    memory16(_ds, 0x8F46) += 1;                 //inc word_31476
}

void sub_24AAA()
{
    _si = 0xaf80;                               //mov si, 0AF80h
    _di = memory16(_ds, 0x979E);                //mov di, word_31CCE
    _di += 0x0018;                              //add di, 18h
    _dx = 0x0068;                               //mov dx, 68h
    _cx = 0x0036;                               //mov cx, 36h
    sub_247BF();                                //call sub_247BF
}

void sub_24AFC()
{
    if ((short)memory16(_ds, _si + 28) < 0 /*CHECK*/)//js short loc_24B08
      goto loc_24B08;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_24B18
      goto loc_24B18;
loc_24B08:                                      //loc_24B08:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32CA);                //mov si, word_2B7FA
    sub_23316();                                //call near ptr sub_23316
    _si = _pop();                               //pop si
loc_24B18:                                      //loc_24B18:
    if ((short)memory16(_ds, _si + 28) >= 0 /*CHECK*/)
      goto loc_24B24;
    if (memory16(_ds, _si + 26) != 0x0030)      //jnz short loc_24B38
      goto loc_24B38;
loc_24B24:                                      //loc_24B24:
    _cx = memory16(_ds, _si + 18);              //mov cx, [si+12h]
    _dx = memory16(_ds, _si + 22);              //mov dx, [si+16h]
    _dx = _dx + memory16(_ds, _si + 26);        //add dx, [si+1Ah]
    _dx -= 1;                                   //dec dx
    _push(_si);                                 //push si
    _si = memory16(_ds, 0x32C4);                //mov si, word_2B7F4
    sub_23316();                                //call near ptr sub_23316
    _si = _pop();                               //pop si
loc_24B38:                                      //loc_24B38:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    memory16(_ds, 0x32BA) = _ax;                //mov word_2B7EA, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    _ax -= 1;                                   //dec ax
    if (_FIXME_)                                //jle short locret_24B89
      goto locret_24B89;
    memory16(_ds, 0x32BC) = _ax;                //mov word_2B7EC, ax
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    _ax -= 1;                                   //dec ax
    _dx = memory16(_ds, 0x32BC);                //mov dx, word_2B7EC
    if ((short)_dx <= (short)0x00bf)            //jle short loc_24B66
      goto loc_24B66;
    _dx -= 0x00bf;                              //sub dx, 0BFh
    _ax -= _dx;                                 //sub ax, dx
    if (_FIXME_)                                //jle short locret_24B89
      goto locret_24B89;
    memory16(_ds, 0x32BC) = 0x00bf;             //mov word_2B7EC, 0BFh
loc_24B66:                                      //loc_24B66:
    memory16(_ds, 0x32BE) = _ax;                //mov word_2B7EE, ax
    _ax = 0xb800;                               //mov ax, 0B800h
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x32BC);                //mov di, word_2B7EC
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -26818);          //mov di, [di-68C2h]
    _ax = memory16(_ds, 0x32BA);                //mov ax, word_2B7EA
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _cx = 0x0006;                               //mov cx, 6
    sub_24323();                                //call sub_24323
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
locret_24B89:                                   //locret_24B89:
    return;
}

void sub_24B90()
{
    WORD _cs = _seg002;

    _flags.interrupt = true;                    //sti
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _push(_cs);                                 //push cs
    _ds = _pop();                               //pop ds
    _bh = _bh ^ _bh;                            //xor bh, bh
    _bl = _ah;                                  //mov bl, ah
    _flags.carry2 = _ah <= 0x10;
    _ah -= 0x10;                                //sub ah, 10h
    if (_flags.carry2)                                //jbe short loc_24BA5
      goto loc_24BA5;
    goto loc_24CC0;                             //jmp loc_24CC0
loc_24BA5:                                      //loc_24BA5:
    _bl <<= 1;                                  //shl bl, 1
    switch (_bx)                                //call off_24BDA[bx]
    {
      case 0: sub_24D57(); break;
      case 2: sub_24EFC(); break;
      case 4: sub_24CD5(); break;
      case 6: sub_24D33(); break;
      case 8: sub_24F05(); break;
      default:
        _ASSERT(0);
    }
loc_24BAB:                                      //loc_24BAB:
    _ds = _pop();                               //pop ds
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    return;                                     //iret
    _STOP_("db 3 dup(0), 1, 5 dup(0), 90h, 4 dup(0), 4...");
    _STOP_("db 2, 0B9h, 2, 0E7h, 2, 0EAh, 2, 8Dh, 2, 0...");
    _STOP_("db 3, 0A9h, 2, 0E2h, 2, 0F3h, 2, 0A4h, 2, ...");
    _STOP_("db 10h, 99h, 79h, 90h, 5Dh, 88h, 0B6h, 80h...");
    _STOP_("db 72h, 3Bh, 6Ch, 28h, 66h, 6Ch, 60h, 3, 5...");
    _STOP_("db 15h, 51h, 88h, 4Ch, 3Ch, 48h, 2Fh, 44h,...");
    _STOP_("db 3Ch, 55h, 39h, 1Eh, 36h, 14h, 33h, 36h,...");
    _STOP_("db 0F4h, 2Ah, 8Bh, 28h, 44h, 26h, 1Eh, 24h...");
    _STOP_("db 20h, 5Fh, 1Eh, 0ABh, 1Ch, 0Fh, 1Bh, 8Ah...");
    _STOP_("db 0C1h, 16h, 7Ah, 15h, 45h, 14h, 22h, 13h...");
    _STOP_("db 11h, 17h, 10h, 30h, 0Fh, 55h, 0Eh, 87h,...");
    _STOP_("db 0Eh, 0Ch, 60h, 0Bh, 0BDh, 0Ah, 23h, 0Ah...");
    _STOP_("db 9, 86h, 8, 0Bh, 8, 98h, 7, 2Bh, 7, 0C4h...");
    _STOP_("db 7, 6, 0B0h, 5, 5Eh, 5, 11h, 5, 0C9h, 4,...");
    _STOP_("db 4, 6, 4, 0CCh, 3, 95h, 3, 62h, 3, 31h, ...");
    _STOP_("db 2, 0AFh, 2, 89h, 2, 64h, 2, 42h, 2, 21h...");
    _STOP_("db 1, 0CBh, 1, 0B1h, 1, 99h, 1, 82h, 1, 6C...");
    _STOP_("db 44h, 1, 32h, 1, 21h, 1, 30h dup(0)");//db 44h, 1, 32h, 1, 21h, 1, 30h dup(0)
loc_24CC0:                                      //loc_24CC0:
    _flags.carry2 = _bl < 0x20;
    _bl -= 0x20;                                //sub bl, 20h
    if (_flags.carry2)                                //jb short loc_24CCC
      goto loc_24CCC;
    memory(_ds, _bx + 34) = _al;                //mov [bx+22h], al
    goto loc_24BAB;                             //jmp loc_24BAB
loc_24CCC:                                      //loc_24CCC:
    _bl = _ah;                                  //mov bl, ah
    _al = memory(_ds, _bx + 34);                //mov al, [bx+22h]
    goto loc_24BAB;                             //jmp loc_24BAB
}

void sub_24CD5()
{
    _cl = 0x09;                                 //mov cl, 9
    _ax = _cl * _al;                            //imul cl
    _bx = _ax;                                  //mov bx, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory(_ds, 0x22) = _al;                    //mov byte_28552, al
    memory(_ds, 0x29) = _al;                    //mov byte_28559, al
    memory(_ds, 0x28) = _al;                    //mov byte_28558, al
    _cx = 0x0018;                               //mov cx, 18h
    _si = 0x0100;                               //mov si, 100h
loc_24CEC:                                      //loc_24CEC:
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _si += 0x0002;                              //add si, 2
    if (--_cx)                                  //loop loc_24CEC
      goto loc_24CEC;
    _al = memory(_ds, _bx + 1506);              //mov al, [bx+5E2h]
    memory(_ds, 0x25) = _al;                    //mov byte_28555, al
    memory(_ds, 0x26) = _al;                    //mov byte_28556, al
    _al = 0xff;                                 //mov al, 0FFh
    memory(_ds, 0x27) = _al;                    //mov byte_28557, al
    _di = 0x0100;                               //mov di, 100h
    _push(_bx);                                 //push bx
    sub_24D1C();                                //call sub_24D1C
    _bx = _pop();                               //pop bx
    _bx += 0x0004;                              //add bx, 4
    _di = 0x0118;                               //mov di, 118h
    sub_24D1C();                                //call sub_24D1C
    memory(_ds, 0x22) -= 1;                     //dec byte_28552
    memory(_ds, 0x29) -= 1;                     //dec byte_28559
}

void sub_24D1C()
{
    _ax = memory16(_ds, _bx + 1509);            //mov ax, [bx+5E5h]
    memory16(_ds, _di + 4) = _ax;               //mov [di+4], ax
    _bx = memory16(_ds, _bx + 1507);            //mov bx, [bx+5E3h]
    memory16(_ds, _di) = _bx;                   //mov [di], bx
    _bx = memory16(_ds, _bx);                   //mov bx, [bx]
    memory16(_ds, _di + 2) = _bx;               //mov [di+2], bx
    memory(_ds, _di + 6) = 0x01;                //mov byte ptr [di+6], 1
}

void sub_24D33()
{
    _cx = 0x000f;                               //mov cx, 0Fh
    _bx = 0x0420;                               //mov bx, 420h
    _ax = _cl * _al;                            //imul cl
    _bx += _ax;                                 //add bx, ax
    _si = 0x0410;                               //mov si, 410h
    memory(_ds, 0x23) = _ch;                    //mov byte_28553, ch
loc_24D44:                                      //loc_24D44:
    _al = memory(_ds, _bx);                     //mov al, [bx]
    memory(_ds, _si) = _al;                     //mov [si], al
    _bx += 1;                                   //inc bx
    _si += 1;                                   //inc si
    if (--_cx)                                  //loop loc_24D44
      goto loc_24D44;
    _ax = memory16(_ds, 0x41D);                 //mov ax, word_2894D
    memory16(_ds, 0x40D) = _ax;                 //mov word_2893D, ax
    memory(_ds, 0x23) -= 1;                     //dec byte_28553
}

void sub_24D57()
{
    _cx = 0x0002;                               //mov cx, 2
    _bh = _ch;                                  //mov bh, ch
    _al = memory(_ds, 0x24);                    //mov al, byte_28554
    _flags.carry = (memory(_ds, 0x28) + _al) >= 0x100;
    memory(_ds, 0x28) += _al;
    if (_flags.carry)                           //jb short loc_24DA8
      goto loc_24DA8;
    if (memory(_ds, 0x22) == _bh)               //jz short loc_24DA8
      goto loc_24DA8;
    _al = memory(_ds, 0x25);                    //mov al, byte_28555
    _flags.carry = (memory(_ds, 0x27) + _al) >= 0x100;
    memory(_ds, 0x27) += _al;
    if (!_flags.carry)                          //jnb short loc_24D80
      goto loc_24D80;
    _di = 0x0100;                               //mov di, 100h
    sub_24E8B();                                //call sub_24E8B
    _di = 0x0118;                               //mov di, 118h
    sub_24E8B();                                //call sub_24E8B
loc_24D80:                                      //loc_24D80:
    _di = 0x0100;                               //mov di, 100h
    sub_24F12();                                //call sub_24F12
    memory16(_ds, 0x2E) = _cx;                  //mov word_2855E, cx
    _di = 0x0118;                               //mov di, 118h
    sub_24F12();                                //call sub_24F12
    _ax = 0x0002;                               //mov ax, 2
    if (memory(_ds, 0x10A) == _bh)              //jz short loc_24DA0
      goto loc_24DA0;
    memory(_ds, 0x10A) -= 1;                    //dec byte_2863A
    _ax = memory16(_ds, 0x2E);                  //mov ax, word_2855E
loc_24DA0:                                      //loc_24DA0:
    _flags.carry = memory(_ds, 0x122) & 1;      //shr byte_28652, 1
    memory(_ds, 0x122) >>= 1;
    if (_flags.carry)                           //jb short loc_24DA8
      goto loc_24DA8;
    _cx = _ax;                                  //mov cx, ax
loc_24DA8:                                      //loc_24DA8:
    if (memory(_ds, 0x23) == _bh)               //jz short loc_24E00
      goto loc_24E00;
    if (memory(_ds, 0x41C) == _bh)              //jz short loc_24DC0
      goto loc_24DC0;
    memory(_ds, 0x41C) -= 1;                    //dec byte_2894C
    if (memory(_ds, 0x41C) != 0)                //jnz short loc_24DC0
      goto loc_24DC0;
    memory(_ds, 0x23) = _bh;                    //mov byte_28553, bh
    goto loc_24E00;                             //jmp short loc_24E00
loc_24DC0:                                      //loc_24DC0:
    _ax = memory16(_ds, 0x41D);                 //mov ax, word_2894D
    memory(_ds, 0x40E) -= 1;                    //dec byte ptr word_2893D+1
    if (memory(_ds, 0x40E) != 0)                //jnz short loc_24DDF
      goto loc_24DDF;
    memory(_ds, 0x40E) = _ah;                   //mov byte ptr word_2893D+1, ah
    _ror(memory(_ds, 0x41A), 1);                //ror byte_2894A, 1
    _flags.carry = !!(memory(_ds, 0x41A) & 0x80);
    _dx = memory16(_ds, 0x416);                 //mov dx, word_28946
    if (_flags.carry)                           //jb short loc_24DDB
      goto loc_24DDB;
    _dx = memory16(_ds, 0x418);                 //mov dx, word_28948
loc_24DDB:                                      //loc_24DDB:
    memory16(_ds, 0x412) += _dx;                //add word_28942, dx
loc_24DDF:                                      //loc_24DDF:
    _dx = memory16(_ds, 0x412);                 //mov dx, word_28942
    _dx = _dx + memory16(_ds, 0x410);           //add dx, word_28940
    memory(_ds, 0x40D) -= 1;                    //dec byte ptr word_2893D
    if (memory(_ds, 0x40D) != 0)                //jnz short loc_24DF4
      goto loc_24DF4;
    memory(_ds, 0x40D) = _al;                   //mov byte ptr word_2893D, al
    _dx = memory16(_ds, 0x414);                 //mov dx, word_28944
loc_24DF4:                                      //loc_24DF4:
    memory16(_ds, 0x412) = _dx;                 //mov word_28942, dx
    _ror(memory(_ds, 0x41B), 1);                //ror byte_2894B, 1
    _flags.carry = !!(memory(_ds, 0x41B) & 0x80);
    if (_flags.carry)                           //jb short loc_24E00
      goto loc_24E00;
    _cx = _dx;                                  //mov cx, dx
loc_24E00:                                      //loc_24E00:
    if (memory16(_ds, 0x2C) == _cx)             //jz short loc_24E16
      goto loc_24E16;
    _al = 0xb6;                                 //mov al, 0B6h
    _out(67, _al);                              //out 43h, al
    _al = _cl;                                  //mov al, cl
    _out(66, _al);                              //out 42h, al
    _al = _ch;                                  //mov al, ch
    _out(66, _al);                              //out 42h, al
    memory16(_ds, 0x2C) = _cx;                  //mov word_2855C, cx
loc_24E16:                                      //loc_24E16:
    _in(_al, 97);                               //in al, 61h
    _al |= 0x03;                                //or al, 3
    _out(97, _al);                              //out 61h, al
}

void loc_24E2D()
{
    _si = memory16(_ds, _bx + _si);             //mov si, [bx+si]
    memory(_ds, _di + 19) = _bl;                //mov [di+13h], bl
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _dl |= 0x04;                                //or dl, 4
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, _di + 23) = _al;                //mov [di+17h], al
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, 0x2A) = _al;                    //mov byte_2855A, al
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _si += 0x0002;                              //add si, 2
    memory16(_ds, _di + 20) = _ax;              //mov [di+14h], ax
    _dl |= 0x08;                                //or dl, 8
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, _di + 14) = _al;                //mov [di+0Eh], al
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, _di + 16) = _al;                //mov [di+10h], al
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, _di + 17) = _al;                //mov [di+11h], al
    _al <<= 1;                                  //shl al, 1
    memory(_ds, _di + 15) = _al;                //mov [di+0Fh], al
    _dl |= 0x10;                                //or dl, 10h
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _dl |= 0x02;                                //or dl, 2
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _dl |= 0x80;                                //or dl, 80h
    _dl |= 0x40;                                //or dl, 40h
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _dl = _bh;                                  //mov dl, bh
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    memory(_ds, _di + 8) = _al;                 //mov [di+8], al
    _STOP_("goto loc_24E99");                   //jmp short loc_24E99
}

void sub_24E8B()
{
    _dl = memory(_ds, _di + 18);                //mov dl, [di+12h]
    memory(_ds, _di + 6) -= 1;                  //dec byte ptr [di+6]
    if (memory(_ds, _di + 6) != 0)              //jnz short loc_24EBF
      goto loc_24EBF;
    _dl &= 0x30;                                //and dl, 30h
    _si = memory16(_ds, _di + 2);               //mov si, [di+2]
loc_24E99:                                      //loc_24E99:
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
    if (_al < 0xa0)                             //jb short loc_24EB5
      goto loc_24EB5;
    _flags.carry = (_al + 0x20) >= 0x100;       //add al, 20h
    _al += 0x20;
    if (_flags.carry)                           //jb short loc_24EAF
      goto loc_24EAF;
    _bl = _al;                                  //mov bl, al
    _al = memory(_ds, _bx + 1254);              //mov al, [bx+4E6h]
    memory(_ds, _di + 9) = _al;                 //mov [di+9], al
    goto loc_24E99;                             //jmp short loc_24E99
loc_24EAF:                                      //loc_24EAF:
    _ax += 1;                                   //inc ax
    memory(_ds, _di + 7) = _al;                 //mov [di+7], al
    goto loc_24E99;                             //jmp short loc_24E99
loc_24EB5:                                      //loc_24EB5:
    _bl = _al;                                  //mov bl, al
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    if (!_flags.carry)                          //jnb short loc_24ED6
      goto loc_24ED6;
    _STOP_("goto word ptr [bx+30h]");           //jmp word ptr [bx+30h]
loc_24EBF:                                      //loc_24EBF:
    if (!(_dl & 0x40))                          //jz short locret_24ED0
      goto locret_24ED0;
    if (!(_dl & 0x80))                          //jz short loc_24ECD
      goto loc_24ECD;
    memory(_ds, _di + 22) -= 1;                 //dec byte ptr [di+16h]
    return;                                     //retn
loc_24ECD:                                      //loc_24ECD:
    memory(_ds, _di + 22) += 1;                 //inc byte ptr [di+16h]
locret_24ED0:                                   //locret_24ED0:
    return;                                     //retn
    memory(_ds, _di + 10) = _bh;                //mov [di+0Ah], bh
    goto loc_24EEC;                             //jmp short loc_24EEC
loc_24ED6:                                      //loc_24ED6:
    memory16(_ds, _di + 12) = 0x0000;           //mov word ptr [di+0Ch], 0
    memory(_ds, _di + 18) = _dl;                //mov [di+12h], dl
    memory(_ds, _di + 22) = _al;                //mov [di+16h], al
    if (_dl & 0x04)                             //jnz short loc_24EEC
      goto loc_24EEC;
    _ax = memory16(_ds, _di + 8);               //mov ax, [di+8]
    memory16(_ds, _di + 10) = _ax;              //mov [di+0Ah], ax
loc_24EEC:                                      //loc_24EEC:
    _al = memory(_ds, _di + 7);                 //mov al, [di+7]
    memory(_ds, _di + 6) = _al;                 //mov [di+6], al
    memory16(_ds, _di + 2) = _si;               //mov [di+2], si
}

void sub_24EFC()
{
    _al = _al ^ _al;                            //xor al, al
    memory(_ds, 0x23) = _al;                    //mov byte_28553, al
    memory(_ds, 0x22) = _al;                    //mov byte_28552, al
}

void sub_24F05()
{
    if (memory(_ds, 0x29) == 0x00)              //jz short locret_24F11
      goto locret_24F11;
    memory(_ds, 0x22) = 0xff;                   //mov byte_28552, 0FFh
locret_24F11:                                   //locret_24F11:
    return;
}

void sub_24F12()
{
    _bl = memory(_ds, _di + 11);                //mov bl, [di+0Bh]
    _bl += 1;                                   //inc bl
    _al = memory(_ds, _bx + 1460);              //mov al, [bx+5B4h]
    _flags.sign = !!(_al & 0x80);               //or al, al
    _al |= _al;
    if (!_flags.sign)                           //jns short loc_24F28
      goto loc_24F28;
    _al += 1;                                   //inc al
    if (_al == 0)                               //jz short loc_24F2B
      goto loc_24F2B;
    _al += 0x7f;                                //add al, 7Fh
    _bl = memory(_ds, _di + 9);                 //mov bl, [di+9]
loc_24F28:                                      //loc_24F28:
    memory(_ds, _di + 11) = _bl;                //mov [di+0Bh], bl
loc_24F2B:                                      //loc_24F2B:
    _al = _al + memory(_ds, _di + 22);          //add al, [di+16h]
    _al = _al + memory(_ds, 0x2A);              //add al, byte_2855A
    _al = _al + memory(_ds, _di + 23);          //add al, [di+17h]
    _al <<= 1;                                  //shl al, 1
    _bl = _al;                                  //mov bl, al
    _cx = memory16(_ds, _bx + 84);              //mov cx, [bx+54h]
    _bl = memory(_ds, _di + 18);                //mov bl, [di+12h]
    _bl = _bl ^ 0x01;                           //xor bl, 1
    if (!(_bl & 0x10))                          //jz short loc_24F77
      goto loc_24F77;
    _al = _al ^ _al;                            //xor al, al
    _al = _al | memory(_ds, _di + 16);          //or al, [di+10h]
    if (_al != 0)                               //jnz short loc_24F52
      goto loc_24F52;
    _ax += 1;                                   //inc ax
    _al &= _bl;                                 //and al, bl
loc_24F52:                                      //loc_24F52:
    _ah = memory(_ds, _di + 17);                //mov ah, [di+11h]
    _dl = memory(_ds, _di + 15);                //mov dl, [di+0Fh]
    if (_bl & 0x20)                             //jnz short loc_24F61
      goto loc_24F61;
    _ah -= _al;                                 //sub ah, al
    goto loc_24F65;                             //jmp short loc_24F65
loc_24F61:                                      //loc_24F61:
    _ah += _al;                                 //add ah, al
loc_24F65:                                      //loc_24F65:
    if (_ah != _dl)                             //jnz short loc_24F6A
      goto loc_24F6A;
    _bl = _bl ^ 0x20;                           //xor bl, 20h
loc_24F6A:                                      //loc_24F6A:
    memory(_ds, _di + 17) = _ah;                //mov [di+11h], ah
    _dl >>= 1;                                  //shr dl, 1
    _ah -= _dl;                                 //sub ah, dl
    _al = _ah;                                  //mov al, ah
    _FIXME_;                                    //sbb ah, ah
    _cx += _ax;                                 //add cx, ax
loc_24F77:                                      //loc_24F77:
    if (!(_bl & 0x08))                          //jz short loc_24F8F
      goto loc_24F8F;
    memory(_ds, _di + 14) -= 1;                 //dec byte ptr [di+0Eh]
    if (memory(_ds, _di + 14) != 0)             //jnz short loc_24F8F
      goto loc_24F8F;
    memory(_ds, _di + 14) += 1;                 //inc byte ptr [di+0Eh]
    _ax = memory16(_ds, _di + 20);              //mov ax, [di+14h]
    _ax = _ax + memory16(_ds, _di + 12);        //add ax, [di+0Ch]
    memory16(_ds, _di + 12) = _ax;              //mov [di+0Ch], ax
    _cx += _ax;                                 //add cx, ax
loc_24F8F:                                      //loc_24F8F:
    memory(_ds, _di + 18) = _bl;                //mov [di+12h], bl
    _bl = (~_bl);                               //not bl
    _bl &= 0x03;                                //and bl, 3
    if (_bl != 0)                               //jnz short locret_24F9C
      goto locret_24F9C;
    _cx = 0x0002;                               //mov cx, 2
locret_24F9C:                                   //locret_24F9C:
    return;
}




void sub_11F4D()
{
    WORD _cs = _seg000;

    sub_141B1();                                //call sub_141B1
    _bx = memory16(_ds, _si + 28);              //mov bx, [si+1Ch]
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_cs, _bx + 7949);            //mov ax, cs:[bx+1F0Dh]
    _imul(memory16(_ds, _si + 66));
    //_ax = (short)memory16(_ds, _si + 66) * (char)_al;        //imul word ptr [si+42h]
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = (memory16(_ds, _si + 20) + _ax) >= 0x10000;
    memory16(_ds, _si + 20) += _ax;
    memory16(_ds, _si + 18) = memory16(_ds, _si + 18) + _dx + _flags.carry;
    _ax = memory16(_cs, _bx + 7981);            //mov ax, cs:[bx+1F2Dh]
    _imul(memory16(_ds, _si + 66));        //imul word ptr [si+42h]
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    _flags.carry = (memory16(_ds, _si + 24) + _ax) >= 0x10000;
    memory16(_ds, _si + 24) += _ax;
    memory16(_ds, _si + 22) = memory16(_ds, _si + 22) + _dx + _flags.carry;
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    if (memory16(_ds, _si + 18) >= 0x0140)      //jnb short loc_11FB0
      goto loc_11FB0;
    if (memory16(_ds, _si + 22) >= 0x00c0)      //jnb short loc_11FB0
      goto loc_11FB0;
    sub_13589();                                //call sub_13589
    sub_142AE();                                //call sub_142AE
    if (_flags.zero)                                //jz short locret_11FB3
      goto locret_11FB3;
    if (memory16(_ds, 0x9188) != 0x0000)        //jnz short loc_11FB0
      goto loc_11FB0;
    _ax = 0x0004;                               //mov ax, 4
    sub_13C4F();                                //call sub_13C4F
    memory16(_ds, 0x9F04) = 0x08b9;             //mov word_32434, 8B9h
loc_11FB0:                                      //loc_11FB0:
    sub_107C0();                                //call sub_107C0
locret_11FB3:                                   //locret_11FB3:
    return;
}

void sub_13835()
{
    sub_141B1();                                //call sub_141B1
    _ax = memory16(_ds, 0x9F12);                //mov ax, word_32442
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0x9F16);                //mov ax, word_32446
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    if (memory16(_ds, 0x991E) == 0x0000)        //jz short loc_1384E
      goto loc_1384E;
{loc_147A9(); return; };                        //
loc_1384E:                                      //loc_1384E:
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    if (memory(_ds, 0x8FAE) == 0x00)            //jz short locret_13871
      goto locret_13871;
    memory16(_ds, _si + 14) = 0x0001;           //mov word ptr [si+0Eh], 1
    _ax = 0x0000;                               //mov ax, 0
    _bx = 0x0009;                               //mov bx, 9
    _cx = 0x0000;                               //mov cx, 0
    _dx = 0x0012;                               //mov dx, 12h
    _bp = 0x12c4;                               //mov bp, 12C4h
    sub_145F4();                                //call sub_145F4
locret_13871:                                   //locret_13871:
    return;
}

void sub_16823();

void sub_16807()
{
    _si = 0x9226;                               //mov si, 9226h
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_1680C:                                      //loc_1680C:
    if (memory(_ds, _si) != 0x00)               //jnz short loc_1681B
      goto loc_1681B;
    memory(_ds, _si) = 0xff;                    //mov byte ptr [si], 0FFh
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    sub_16823();                                //call sub_16823
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
loc_1681B:                                      //loc_1681B:
    _si += 1;                                   //inc si
    _cx += 1;                                   //inc cx
    if ((short)_cx < (short)0x0005)             //jl short loc_1680C
      goto loc_1680C;
}

void sub_16823()
{
    WORD _cs = _seg000;

    _bx = _cx;                                  //mov bx, cx
    memory16(_ds, 0xFCFA) = _cx;                //mov word_3822A, cx
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + -28172);          //mov ax, [bx-6E0Ch]
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    memory16(_ds, _bx + -28172) = _ax;          //mov [bx-6E0Ch], ax
    _ax &= 0x000f;                              //and ax, 0Fh
    _bx = _ax;                                  //mov bx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += _bx;                                 //add ax, bx
    _ax <<= 1;                                  //shl ax, 1
    _di = 0x6767;                               //mov di, 6767h
    _di += _ax;                                 //add di, ax
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _bx = memory16(_cs, _di + 2);               //mov bx, cs:[di+2]
    _bx = _bx - memory16(_ds, 0x919A);          //sub bx, word_316CA
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    memory16(_ds, 0xFCE6) = _bx;                //mov word_38216, bx
    _bp = memory16(_cs, _di + 4);               //mov bp, cs:[di+4]
    _bp <<= 1;                                  //shl bp, 1
    if (memory16(_ds, _bp + 28204) != 0x0000)   //jnz short loc_16876
      goto loc_16876;
    memory16(_ds, _bp + 28204) = 0x0014;        //mov word ptr ds:[bp-6E2Ch], 14h
loc_16876:                                      //loc_16876:
    _dx = memory16(_cs, _di + 6);               //mov dx, cs:[di+6]
    memory16(_ds, 0xFCEE) = _dx;                //mov word_3821E, dx
    memory16(_ds, 0xFCEA) = 0x0000;             //mov word_3821A, 0
    _di = memory16(_cs, _di + 8);               //mov di, cs:[di+8]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -8482);           //mov di, [di-2122h]
    _bx = 0x670d;                               //mov bx, 670Dh
    _cx = memory16(_cs, _bx);                   //mov cx, cs:[bx]
    _bx += 0x0002;                              //add bx, 2
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x010c;                //mov word ptr [si], 10Ch
    memory16(_ds, _si + 2) = 0x6aad;            //mov word ptr [si+2], 6AADh
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x69c8;            //mov word ptr [si+6], 69C8h
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, _si + 32) = _ax;              //mov [si+20h], ax
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory16(_ds, _si + 56) = _di;              //mov [si+38h], di
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    _ax = memory(_cs, 0x6282);                  //mov ax, word ptr cs:byte_16260+22h
    memory16(_ds, _si + 66) = _ax;              //mov [si+42h], ax
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    memory16(_ds, _si + 52) = 0x0000;           //mov word ptr [si+34h], 0
loc_16900:                                      //loc_16900:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    memory16(_ds, _si + 2) = 0x6a0a;            //mov word ptr [si+2], 6A0Ah
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_ds, _si + 52) = _ax;              //mov [si+34h], ax
    _bx += 0x0008;                              //add bx, 8
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, _si + 32) = _ax;              //mov [si+20h], ax
    memory16(_ds, _si + 36) = 0x0001;           //mov word ptr [si+24h], 1
    memory(_ds, _si + 39) = 0x00;               //mov byte ptr [si+27h], 0
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    memory16(_ds, _si + 56) = _di;              //mov [si+38h], di
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    memory16(_ds, _si + 66) = 0x0004;           //mov word ptr [si+42h], 4
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, 0xFCEA) -= 0x0007;            //sub word_3821A, 7
    sub_13589();                                //call sub_13589
    if (--_cx)                                  //loop loc_16900
      goto loc_16900;
    sub_11022();                                //call sub_11022
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x00b8;                //mov word ptr [si], 0B8h
    memory16(_ds, _si + 2) = 0x0761;            //mov word ptr [si+2], 761h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x0761;            //mov word ptr [si+6], 761h
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    memory16(_ds, _si + 70) = _di;              //mov [si+46h], di
    memory16(_ds, _di) = 0x00bc;                //mov word ptr [di], 0BCh
    memory16(_ds, _di + 2) = 0x25a8;            //mov word ptr [di+2], 25A8h
    memory16(_ds, _di + 4) = 0x0761;            //mov word ptr [di+4], 761h
    memory16(_ds, _di + 6) = 0x0761;            //mov word ptr [di+6], 761h
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 44) = 0x03e8;           //mov word ptr [di+2Ch], 3E8h
    memory16(_ds, _di + 68) = _si;              //mov [di+44h], si
}

void sub_16A0A()
{
    WORD _cs = _seg000;

    _bx = memory16(_ds, _si + 34);              //mov bx, [si+22h]
    memory(_ds, _bx + -28122) = 0xff;           //mov byte ptr [bx-6DDAh], 0FFh
    _di = memory16(_ds, _si + 10);              //mov di, [si+0Ah]
    if (memory16(_ds, _di) != 0x00bc)           //jnz short loc_16A33
      goto loc_16A33;
    _bx = memory16(_ds, _si + 32);              //mov bx, [si+20h]
    _bx <<= 1;                                  //shl bx, 1
    if (memory16(_ds, _bx + -28204) != 0x0000)  //jnz short loc_16A2D
      goto loc_16A2D;
    memory16(_ds, _bx + -28204) = 0x0014;       //mov word ptr [bx-6E2Ch], 14h
loc_16A2D:                                      //loc_16A2D:
    sub_107C0();                                //call sub_107C0
    _indirectCall(_seg000, memory16(_ds, _si+2));
    return;
    //_STOP_("goto word ptr [si+2]");             //jmp word ptr [si+2]
loc_16A33:                                      //loc_16A33:
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    _ax = _ax + memory16(_ds, 0x9198);          //add ax, word_316C8
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_ds, _di + 28);              //mov ax, [di+1Ch]
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    _ax = memory16(_ds, _di + 30);              //mov ax, [di+1Eh]
    memory16(_ds, _si + 30) = _ax;              //mov [si+1Eh], ax
    _ax = memory16(_ds, _di + 26);              //mov ax, [di+1Ah]
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    if (memory16(_ds, _si + 4) != 0x0761)       //jnz short loc_16A67
      goto loc_16A67;
    if ((short)memory16(_ds, _si + 26) < 0 /*CHECK*/)//js short loc_16A67
      goto loc_16A67;
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
loc_16A67:                                      //loc_16A67:
    _bx = memory16(_ds, _si + 28);              //mov bx, [si+1Ch]
    _bx += 0x0010;                              //add bx, 10h
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx &= 0x000e;                              //and bx, 0Eh
    _di = 0x6a8d;                               //mov di, 6A8Dh
    if (memory16(_ds, _si) != 0x0110)           //jnz short loc_16A84
      goto loc_16A84;
    _di = 0x6a9d;                               //mov di, 6A9Dh
loc_16A84:                                      //loc_16A84:
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
{sub_13589(); return; };                        //
}

void sub_125A8()
{
    _di = memory16(_ds, _si + 68);              //mov di, [si+44h]
    _bp = memory16(_ds, _di + 10);              //mov bp, [di+0Ah]
    if (_bp == _si)                             //jz short loc_12624
      goto loc_12624;
loc_125B2:                                      //loc_125B2:
    if (memory16(_ds, _bp + 4) != 0x0761)       //jnz short loc_125CD
      goto loc_125CD;
    _bp = memory16(_ds, _bp + 10);              //mov bp, ds:[bp+0Ah]
    if (_bp != _si)                             //jnz short loc_125B2
      goto loc_125B2;
    memory16(_ds, _di + 40) = 0x03e8;           //mov word ptr [di+28h], 3E8h
    memory16(_ds, _di + 44) = 0x03e8;           //mov word ptr [di+2Ch], 3E8h
    return;                                     //retn
loc_125CD:                                      //loc_125CD:
    _ax = memory16(_ds, _bp + 40);              //mov ax, ds:[bp+28h]
    _bx = memory16(_ds, _bp + 42);              //mov bx, ds:[bp+2Ah]
    _cx = memory16(_ds, _bp + 44);              //mov cx, ds:[bp+2Ch]
    _dx = memory16(_ds, _bp + 46);              //mov dx, ds:[bp+2Eh]
loc_125DD:                                      //loc_125DD:
    _bp = memory16(_ds, _bp + 10);              //mov bp, ds:[bp+0Ah]
    if (_si == _bp)                             //jz short loc_12617
      goto loc_12617;
    if (memory16(_ds, _bp + 4) == 0x0761)       //jz short loc_125DD
      goto loc_125DD;
    if ((short)_ax <= (short)memory16(_ds, _bp + 40))//jle short loc_125F7
      goto loc_125F7;
    _ax = memory16(_ds, _bp + 40);              //mov ax, ds:[bp+28h]
loc_125F7:                                      //loc_125F7:
    if ((short)_bx <= (short)memory16(_ds, _bp + 42))//jle short loc_12601
      goto loc_12601;
    _bx = memory16(_ds, _bp + 42);              //mov bx, ds:[bp+2Ah]
loc_12601:                                      //loc_12601:
    if ((short)_cx >= (short)memory16(_ds, _bp + 44))//jge short loc_1260B
      goto loc_1260B;
    _cx = memory16(_ds, _bp + 44);              //mov cx, ds:[bp+2Ch]
loc_1260B:                                      //loc_1260B:
    if ((short)_dx >= (short)memory16(_ds, _bp + 46))//jge short loc_125DD
      goto loc_125DD;
    _dx = memory16(_ds, _bp + 46);              //mov dx, ds:[bp+2Eh]
    goto loc_125DD;                             //jmp short loc_125DD
loc_12617:                                      //loc_12617:
    memory16(_ds, _di + 40) = _ax;              //mov [di+28h], ax
    memory16(_ds, _di + 42) = _bx;              //mov [di+2Ah], bx
    memory16(_ds, _di + 44) = _cx;              //mov [di+2Ch], cx
    memory16(_ds, _di + 46) = _dx;              //mov [di+2Eh], dx
    return;                                     //retn
loc_12624:                                      //loc_12624:
    _push(_di);                                 //push di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
    sub_107C0();                                //call sub_107C0
}

void sub_16AAD()
{
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    _bx = memory16(_ds, _si + 34);              //mov bx, [si+22h]
    memory(_ds, _bx + -28122) = 0xff;           //mov byte ptr [bx-6DDAh], 0FFh
    sub_14871();                                //call sub_14871
    if (memory16(_ds, _si) != 0x0004)           //jnz short locret_16AC6
      goto locret_16AC6;
    _indirectCall(_seg000, memory16(_ds, _si+2));
//    _STOP_("goto word ptr [si+2]");             //jmp word ptr [si+2]
locret_16AC6:                                   //locret_16AC6:
    return;
}

void sub_16696()
{
    memory16(_ds, _di + 4) = 0x08b9;            //mov word ptr [di+4], 8B9h
    _flags.carry2 = memory16(_ds, _di + 36) <= _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //jbe short loc_166A1
      goto loc_166A1;
    return;                                     //retn
loc_166A1:                                      //loc_166A1:
    _bp = 0x650d;                               //mov bp, 650Dh
    loc_166B6();
    //_STOP_("goto loc_166B6");                   //jmp short loc_166B6
}

void sub_169D0()
{
    WORD _cs = _seg000;

    sub_141B1();                                //call sub_141B1
    _bx = memory16(_ds, _si + 28);              //mov bx, [si+1Ch]
    _al = memory(_cs, _bx + 24854);             //mov al, cs:[bx+6116h]
    _cbw();                                     //cbw
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _ax = _ax + memory16(_ds, _si + 22);        //add ax, [si+16h]
    if (_ax >= 0x00c0)                          //jnb short loc_16A06
      goto loc_16A06;
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _al = memory(_cs, _bx + 24918);             //mov al, cs:[bx+6156h]
    _cbw();                                     //cbw
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _ax = _ax + memory16(_ds, _si + 18);        //add ax, [si+12h]
    if (_ax >= 0x0140)                          //jnb short loc_16A06
      goto loc_16A06;
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    return;                                     //retn
loc_16A06:                                      //loc_16A06:
    sub_107C0();                                //call sub_107C0
}

void sub_166A6()
{
    WORD _cs = _seg000;

    memory16(_ds, _di + 4) = 0x08b9;            //mov word ptr [di+4], 8B9h
    _flags.carry2 = memory16(_ds, _di + 36) <= _ax;
    memory16(_ds, _di + 36) -= _ax;             //sub [di+24h], ax
    if (_flags.carry2)                                //jbe short loc_166B1
      goto loc_166B1;
    return;                                     //retn
loc_166B1:                                      //loc_166B1:
    _bp = 0x6523;                               //mov bp, 6523h
    //_STOP_("goto $+2");                         //jmp short $+2
loc_166B6:                                      //loc_166B6:
    _push(_si);                                 //push si
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    memory16(_ds, _si + 2) = 0x69d0;            //mov word ptr [si+2], 69D0h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_ds, _di + 18);              //mov ax, [di+12h]
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 22);              //mov ax, [di+16h]
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    sub_14191();                                //call sub_14191
    memory(_ds, _si + 28) = _al;                //mov [si+1Ch], al
    memory(_ds, _si + 29) = 0x00;               //mov byte ptr [si+1Dh], 0
    _ax = memory16(_ds, _di + 52);              //mov ax, [di+34h]
    _flags.carry = (memory16(_ds, 0x9152) + _ax) >= 0x10000;
    memory16(_ds, 0x9152) += _ax;
    memory16(_ds, 0x9154) = memory16(_ds, 0x9154) + 0x0000 + _flags.carry;
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_12AD0()
{
    memory16(_ds, 0x8E88) = 0x000b;             //mov word_313B8, 0Bh
    sub_10EB3();                                //call sub_10EB3
    _di = memory16(_ds, 0x9054);                //mov di, word_31584
loc_12ADD:                                      //loc_12ADD:
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    if (!(_ax & _ax))                           //jz short loc_12AFE
      goto loc_12AFE;
    _si = _di;                                  //mov si, di
    sub_11689();                                //call sub_11689
    _push(_di);                                 //push di
    if (_ax == 0x0050)                          //jz short loc_12AFB
      goto loc_12AFB;
    if (_ax == 0x0054)                          //jz short loc_12AFB
      goto loc_12AFB;
    _di = _si;                                  //mov di, si
    _si = 0x8ffe;                               //mov si, 8FFEh
    sub_13A33();                                //call sub_13A33
loc_12AFB:                                      //loc_12AFB:
    _di = _pop();                               //pop di
    goto loc_12ADD;                             //jmp short loc_12ADD
loc_12AFE:                                      //loc_12AFE:
    _di = memory16(_ds, 0x90A0);                //mov di, word_315D0
loc_12B02:                                      //loc_12B02:
    if (memory16(_ds, _di) == 0x0000)           //jz short loc_12B17
      goto loc_12B17;
    _push(memory16(_ds, _di + 10));             //push word ptr [di+0Ah]
    if (memory16(_ds, _di) != 0x0014)           //jnz short loc_12B14
      goto loc_12B14;
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
loc_12B14:                                      //loc_12B14:
    _di = _pop();                               //pop di
    goto loc_12B02;                             //jmp short loc_12B02
loc_12B17:                                      //loc_12B17:
    _di = 0x8e8c;                               //mov di, 8E8Ch
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x0010;                               //mov cx, 10h
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
}

void sub_16E2C()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    _ax += 0x00d0;                              //add ax, 0D0h
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    if ((short)_ax >= (short)memory16(_ds, _si + 22))//jge short loc_16E3E
      goto loc_16E3E;
    goto loc_16EEB;                             //jmp loc_16EEB
loc_16E3E:                                      //loc_16E3E:
    sub_141B1();                                //call sub_141B1
    _ax = memory16(_ds, 0x9198);                //mov ax, word_316C8
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    if (memory16(_ds, _si + 26) != 0x0000)      //jnz short loc_16E50
      goto loc_16E50;
    goto locret_16ED0;                          //jmp locret_16ED0
loc_16E50:                                      //loc_16E50:
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax - memory16(_ds, 0x9F16);          //sub ax, word_32446
    if ((short)_ax > (short)0x000a)             //jg short loc_16ED1
      goto loc_16ED1;
    if ((short)_ax < (short)0xffe2)             //jl short loc_16ED1
      goto loc_16ED1;
    sub_14191();                                //call sub_14191
    if (_al >= 0x32)                            //jnb short loc_16ED1
      goto loc_16ED1;
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    sub_107DC();                                //call sub_107DC
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = 0x64fd;                               //mov di, 64FDh
    if (memory16(_ds, _si) == 0x00d4)           //jz short loc_16E82
      goto loc_16E82;
    _di = 0x64d7;                               //mov di, 64D7h
loc_16E82:                                      //loc_16E82:
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _di += 0x0002;                              //add di, 2
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    memory16(_ds, 0xFCFE) = 0x0002;             //mov word_3822E, 2
loc_16E9D:                                      //loc_16E9D:
    _bp = memory(_cs, 0x6274);                  //mov bp, word ptr cs:byte_16260+14h
    _bp <<= 1;                                  //shl bp, 1
    _bp = memory16(_cs, _bp + 30294);           //mov bp, cs:[bp+7656h]
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _bx += 0x0007;                              //add bx, 7
    _cx = 0x0005;                               //mov cx, 5
    if (memory16(_ds, _si) == 0x00d4)           //jz short loc_16EBE
      goto loc_16EBE;
    _cx = 0x0001;                               //mov cx, 1
loc_16EBE:                                      //loc_16EBE:
    _cx = _cx + memory16(_ds, 0xFCFE);          //add cx, word_3822E
    _dx = memory(_cs, 0x6276);                  //mov dx, word ptr cs:byte_16260+16h
    sub_11ED3();                                //call sub_11ED3
    memory16(_ds, 0xFCFE) -= 1;                 //dec word_3822E
    if ((short)memory16(_ds, 0xFCFE) >= 0)      //jns short loc_16E9D
      goto loc_16E9D;
locret_16ED0:                                   //locret_16ED0:
    return;                                     //retn
loc_16ED1:                                      //loc_16ED1:
    _ax = memory16(_ds, _si + 26);              //mov ax, [si+1Ah]
    memory16(_ds, _si + 22) += _ax;             //add [si+16h], ax
    memory16(_ds, _si + 34) += _ax;             //add [si+22h], ax
    if (memory16(_ds, _si + 34) == 0)           //jz short loc_16EE4
      goto loc_16EE4;
    _ax = memory16(_ds, _si + 34);              //mov ax, [si+22h]
    if (_ax != memory16(_ds, _si + 28))         //jnz short loc_16EE7
      goto loc_16EE7;
loc_16EE4:                                      //loc_16EE4:
    memory16(_ds, _si + 26) = -memory16(_ds, _si + 26);
loc_16EE7:                                      //loc_16EE7:
    sub_13589();                                //call sub_13589
    return;                                     //retn
loc_16EEB:                                      //loc_16EEB:
    sub_107C0();                                //call sub_107C0
}


void sub_12A48()
{
    memory16(_ds, 0x9186) += 0x0014;            //add word_316B6, 14h
loc_12A4D:                                      //loc_12A4D:
    memory16(_ds, 0x8E88) = 0x0012;             //mov word_313B8, 12h
    if ((short)memory16(_ds, 0x9186) <= (short)0x0027)
      goto loc_12A60;
    memory16(_ds, 0x9186) = 0x0027;             //mov word_316B6, 27h
loc_12A60:                                      //loc_12A60:
    memory(_ds, 0x8FAF) = 0xff;                 //mov byte_314DF, 0FFh
}

void sub_16AC7()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    _ax += 0x00d0;                              //add ax, 0D0h
    if ((short)_ax >= (short)memory16(_ds, _si + 22))//jge short loc_16AD5
      goto loc_16AD5;
    goto loc_16B76;                             //jmp loc_16B76
loc_16AD5:                                      //loc_16AD5:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, _si + 40) = _ax;              //mov [si+28h], ax
    _ax += 0x0018;                              //add ax, 18h
    memory16(_ds, _si + 44) = _ax;              //mov [si+2Ch], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax += 0x0018;                              //add ax, 18h
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    _bx = memory16(_ds, _si + 26);              //mov bx, [si+1Ah]
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _di = 0x6b7a;                               //mov di, 6B7Ah
    if (memory16(_ds, _si) == 0x00e0)           //jz short loc_16B0C
      goto loc_16B0C;
    _di = 0x6b9a;                               //mov di, 6B9Ah
loc_16B0C:                                      //loc_16B0C:
    _bx += _di;                                 //add bx, di
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _ax = memory16(_cs, _bx + 4);               //mov ax, cs:[bx+4]
    memory16(_ds, _di + 40) = _ax;              //mov [di+28h], ax
    _ax = memory16(_cs, _bx + 6);               //mov ax, cs:[bx+6]
    memory16(_ds, _di + 42) = _ax;              //mov [di+2Ah], ax
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    memory16(_ds, _si + 26) &= 0x0003;          //and word ptr [si+1Ah], 3
    _al = memory(_cs, 0x6262);                  //mov al, cs:byte_16260+2
    _flags.carry = (memory(_ds, _si + 72) + _al) >= 0x100;
    memory(_ds, _si + 72) += _al;
    if (!_flags.carry)                          //jnb short locret_16B79
      goto locret_16B79;
    sub_14191();                                //call sub_14191
    _al &= 0x3f;                                //and al, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x0010;                              //add ax, 10h
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    _bx += 0x000e;                              //add bx, 0Eh
    _cx = 0x0002;                               //mov cx, 2
    _bp = memory(_cs, 0x6264);                  //mov bp, word ptr cs:byte_16260+4
    _bp <<= 1;                                  //shl bp, 1
    _bp = memory16(_cs, _bp + 30294);           //mov bp, cs:[bp+7656h]
    if (memory16(_ds, _si) == 0x00e4)           //jz short loc_16B6E
      goto loc_16B6E;
    _cx = 0x0006;                               //mov cx, 6
    _ax -= 0x0010;                              //sub ax, 10h
loc_16B6E:                                      //loc_16B6E:
    _dx = memory(_cs, 0x6266);                  //mov dx, word ptr cs:byte_16260+6
{sub_11ED3(); return; };                        //
loc_16B76:                                      //loc_16B76:
    sub_107C0();                                //call sub_107C0
locret_16B79:                                   //locret_16B79:
    return;
}

void sub_16BCA()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x91AA);                //mov ax, word_316DA
    _ax += 0x00d0;                              //add ax, 0D0h
    if ((short)_ax >= (short)memory16(_ds, _si + 22))//jge short loc_16BD8
      goto loc_16BD8;
    goto loc_16C7E;                             //jmp loc_16C7E
loc_16BD8:                                      //loc_16BD8:
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x0008;                              //add ax, 8
    memory16(_ds, _si + 40) = _ax;              //mov [si+28h], ax
    _ax += 0x0010;                              //add ax, 10h
    memory16(_ds, _si + 44) = _ax;              //mov [si+2Ch], ax
    _ax = memory16(_ds, _si + 22);              //mov ax, [si+16h]
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    _ax += 0x0008;                              //add ax, 8
    memory16(_ds, _si + 42) = _ax;              //mov [si+2Ah], ax
    _ax += 0x0010;                              //add ax, 10h
    memory16(_ds, _si + 46) = _ax;              //mov [si+2Eh], ax
    _bx = memory16(_ds, _si + 26);              //mov bx, [si+1Ah]
    _bx &= 0xfffe;                              //and bx, 0FFFEh
    _bx <<= 1;                                  //shl bx, 1
    _di = 0x6cd2;                               //mov di, 6CD2h
    if (memory16(_ds, _si) == 0x00d8)           //jz short loc_16C0E
      goto loc_16C0E;
    _di = 0x6c82;                               //mov di, 6C82h
loc_16C0E:                                      //loc_16C0E:
    _bx += _di;                                 //add bx, di
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    if (memory16(_ds, _si + 26) != 0x0000)      //jnz short loc_16C36
      goto loc_16C36;
    _al = memory(_cs, 0x6268);                  //mov al, cs:byte_16260+8
    _flags.carry = (memory(_ds, _si + 72) + _al) >= 0x100;
    memory(_ds, _si + 72) += _al;
    if (!_flags.carry)                          //jnb short locret_16C81
      goto locret_16C81;
    sub_14191();                                //call sub_14191
    _al &= 0x3f;                                //and al, 3Fh
    memory(_ds, _si + 72) = _al;                //mov [si+48h], al
loc_16C36:                                      //loc_16C36:
    memory16(_ds, _si + 26) += 1;               //inc word ptr [si+1Ah]
    if (memory16(_ds, _si + 26) != 0x0028)      //jnz short loc_16C45
      goto loc_16C45;
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    return;                                     //retn
loc_16C45:                                      //loc_16C45:
    if (memory16(_ds, _si + 26) != 0x0018)      //jnz short locret_16C81
      goto locret_16C81;
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax += 0x001a;                              //add ax, 1Ah
    _bx = memory16(_ds, _si + 22);              //mov bx, [si+16h]
    _bx = _bx - memory16(_ds, 0x9190);          //sub bx, word_316C0
    _bx += 0x0002;                              //add bx, 2
    _bp = memory(_cs, 0x626A);                  //mov bp, word ptr cs:byte_16260+0Ah
    _bp <<= 1;                                  //shl bp, 1
    _bp = memory16(_cs, _bp + 30294);           //mov bp, cs:[bp+7656h]
    _cx = 0x0002;                               //mov cx, 2
    if (memory16(_ds, _si) == 0x00dc)           //jz short loc_16C76
      goto loc_16C76;
    _cx = 0x0006;                               //mov cx, 6
    _ax -= 0x001a;                              //sub ax, 1Ah
loc_16C76:                                      //loc_16C76:
    _dx = memory(_cs, 0x626C);                  //mov dx, word ptr cs:byte_16260+0Ch
{sub_11ED3(); return; };                        //
loc_16C7E:                                      //loc_16C7E:
    sub_107C0();                                //call sub_107C0
locret_16C81:                                   //locret_16C81:
    return;
}

void sub_169C8()
{
    _push(_si);                                 //push si
    _si = _di;                                  //mov si, di
    sub_107C0();                                //call sub_107C0
    _si = _pop();                               //pop si
}

void sub_13A99()
{
    if (memory16(_ds, _si) == 0x0000)           //jz short locret_13AA6
      goto locret_13AA6;
    if (memory16(_ds, _si) == 0x0008)           //jz short locret_13AA6
      goto locret_13AA6;
    sub_107C0();                                //call sub_107C0
locret_13AA6:                                   //locret_13AA6:
    return;
}

void sub_115E4()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
loc_115E5:                                      //loc_115E5:
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1078E();                                //call sub_1078E
    _di = 0x11f2;                               //mov di, 11F2h
    memory16(_ds, _si) = 0x0060;                //mov word ptr [si], 60h
    memory16(_ds, _si + 2) = 0x28df;            //mov word ptr [si+2], 28DFh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0004;                              //add di, 4
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    _ax = 0x012c;                               //mov ax, 12Ch
    sub_141A1();                                //call sub_141A1
    _ax += 0x000a;                              //add ax, 0Ah
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = 0x00b4;                               //mov ax, 0B4h
    sub_141A1();                                //call sub_141A1
    _ax += 0x0006;                              //add ax, 6
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 26) = 0x0007;           //mov word ptr [si+1Ah], 7
    memory16(_ds, 0x9164) += 1;                 //inc word_31694
    sub_11022();                                //call sub_11022
    _di = 0x9096;                               //mov di, 9096h
    sub_1078E();                                //call sub_1078E
    _di = 0x11b4;                               //mov di, 11B4h
    memory16(_ds, _si) = 0x0018;                //mov word ptr [si], 18h
    memory16(_ds, _si + 2) = 0x28df;            //mov word ptr [si+2], 28DFh
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _di += 0x0004;                              //add di, 4
    memory16(_ds, _si + 16) = _di;              //mov [si+10h], di
    _ax = 0x012c;                               //mov ax, 12Ch
    sub_141A1();                                //call sub_141A1
    _ax += 0x000a;                              //add ax, 0Ah
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = 0x00b4;                               //mov ax, 0B4h
    sub_141A1();                                //call sub_141A1
    _ax += 0x0006;                              //add ax, 6
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 26) = 0x0007;           //mov word ptr [si+1Ah], 7
    memory16(_ds, 0x9164) += 1;                 //inc word_31694
    _cx -= 1;                                   //dec cx
    if ((short)_cx < 0)                         //js short loc_11687
      goto loc_11687;
    goto loc_115E5;                             //jmp loc_115E5
loc_11687:                                      //loc_11687:
    _si = _pop();                               //pop si
}

void sub_11588()
{
    WORD _cs = _seg000;

    _push(_si);                                 //push si
loc_11589:                                      //loc_11589:
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x9096;                               //mov di, 9096h
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x000c;                //mov word ptr [si], 0Ch
    memory16(_ds, _si + 2) = 0x3998;            //mov word ptr [si+2], 3998h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = _dx;                                  //mov ax, dx
    sub_141A1();                                //call sub_141A1
    _ax += _cx;                                 //add ax, cx
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = _di;                                  //mov ax, di
    sub_141A1();                                //call sub_141A1
    _ax += _bx;                                 //add ax, bx
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bp += 0x0004;                              //add bp, 4
    memory16(_ds, _si + 16) = _bp;              //mov [si+10h], bp
    _bp -= 0x0004;                              //sub bp, 4
    _ax = _cx;                                  //mov ax, cx
    _cx = _pop();                               //pop cx
    _cx -= 1;                                   //dec cx
    if ((short)_cx >= 0)                        //jns short loc_11589
      goto loc_11589;
    _si = _pop();                               //pop si
    memory16(_ds, 0x8E88) = 0x0006;             //mov word_313B8, 6
    memory16(_ds, 0x8E8A) = 0x0006;             //mov word_313BA, 6
}

void sub_18CA7()
{
    WORD _cs = _seg000;

    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCE6) += _ax;               //add word_38216, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCEE) += _ax;               //add word_3821E, ax
    if ((short)memory16(_ds, 0xFCE6) >= (short)0x01b0)
      goto loc_18D08;
    sub_18C85();                                //call sub_18C85
    _cx = memory16(_cs, _di);                   //mov cx, cs:[di]
    _di += 0x0002;                              //add di, 2
loc_18CC6:                                      //loc_18CC6:
    _push(_cx);                                 //push cx
    if (memory(_cs, _di) == 0x0000)             //jz short loc_18CFF
      goto loc_18CFF;
    _ax = memory16(_cs, _di + 2);               //mov ax, cs:[di+2]
    memory16(_ds, 0xFCF2) = _ax;                //mov word_38222, ax
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    if ((short)memory16(_ds, 0xFCF2) > (short)_ax)//jg short loc_18D07
      goto loc_18D07;
    _ax = memory16(_cs, _di + 4);               //mov ax, cs:[di+4]
    memory16(_ds, 0xFCF6) = _ax;                //mov word_38226, ax
    _ax = memory16(_ds, 0xFCF2);                //mov ax, word_38222
    memory16(_ds, 0xFCFA) = _ax;                //mov word_3822A, ax
    memory16(_ds, 0xFCFA) += 0x000f;            //add word_3822A, 0Fh
    _ax = memory16(_ds, 0xFCF6);                //mov ax, word_38226
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    memory16(_ds, 0xFCFE) += 0x000f;            //add word_3822E, 0Fh
    sub_10F2F();                                //call sub_10F2F
    if (!_flags.zero)                                //jnz short loc_18D0B
      goto loc_18D0B;
loc_18CFF:                                      //loc_18CFF:
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_18CC6
      goto loc_18CC6;
    goto loc_18D08;                             //jmp short loc_18D08
loc_18D07:                                      //loc_18D07:
    _cx = _pop();                               //pop cx
loc_18D08:                                      //loc_18D08:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.zero = true;
    return;                                     //retn
loc_18D0B:                                      //loc_18D0B:
    _bx = 0x98ce;                               //mov bx, 98CEh
    memory16(_ds, _bx + 12) = _di;              //mov [bx+0Ch], di
    _di = _bx;                                  //mov di, bx
    _cx = _pop();                               //pop cx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _ax -= 1;                                   //dec ax
    _flags.zero = false;
}

void sub_17F79()
{
    WORD _cs = _seg000;

    _di = _si;                                  //mov di, si
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //jmp cs:off_190FD[bx]
    {
        case 0: loc_135CE(); return;
      case 2: goto loc_17F82;
      case 4: goto loc_17FDB;
      case 6: goto loc_18018;
      case 8: goto loc_180A3;
      case 10: goto loc_180BB;
      case 12: assert(0); //goto loc_13360;
      case 14: goto loc_180D1;
      case 16: goto loc_180D7;
      case 18: goto loc_180DD;
      case 20: goto loc_180E3;
      case 22: goto loc_180E9;
      case 24: goto loc_180EF;
      default:
        _ASSERT(0);
    }
loc_17F82:                                      //loc_17F82:
    _ax = 0x00e8;                               //mov ax, 0E8h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_17F8E
      goto loc_17F8E;
    _ax = 0x00ec;                               //mov ax, 0ECh
loc_17F8E:                                      //loc_17F8E:
    _bx = 0x7dde;                               //mov bx, 7DDEh
    sub_13529();                                //call sub_13529
    memory16(_ds, _si + 6) = 0x3b76;            //mov word ptr [si+6], 3B76h
    _ax = memory(_cs, 0x771C);                  //mov ax, word ptr cs:byte_176E6+36h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 40) = 0x03e8;           //mov word ptr [si+28h], 3E8h
    memory16(_ds, _si + 44) = 0x03e8;           //mov word ptr [si+2Ch], 3E8h
    _bx = memory16(_ds, _si + 56);              //mov bx, [si+38h]
    _bp = 0x90df;                               //mov bp, 90DFh
    _dx = 0x90bf;                               //mov dx, 90BFh
    if (memory16(_ds, _di + 12) == 0x0000)      //jz short loc_17FBF
      goto loc_17FBF;
    _bp = 0x90c1;                               //mov bp, 90C1h
    _dx = 0x90bd;                               //mov dx, 90BDh
loc_17FBF:                                      //loc_17FBF:
    memory16(_ds, _si + 12) = _bp;              //mov [si+0Ch], bp
    memory16(_ds, _si + 16) = _dx;              //mov [si+10h], dx
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    memory16(_ds, _si + 52) = 0x0064;           //mov word ptr [si+34h], 64h
    memory16(_ds, _si + 48) = 0x0000;           //mov word ptr [si+30h], 0
    memory16(_ds, _si + 50) = 0x0000;           //mov word ptr [si+32h], 0
    return;                                     //retn
loc_17FDB:                                      //loc_17FDB:
    _ax = 0x00f0;                               //mov ax, 0F0h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_17FE7
      goto loc_17FE7;
    _ax = 0x00f4;                               //mov ax, 0F4h
loc_17FE7:                                      //loc_17FE7:
    _bx = 0x7ce6;                               //mov bx, 7CE6h
    assert(0); //loc_13536();                                //call loc_13536
    _bx = memory16(_ds, _si + 56);              //mov bx, [si+38h]
    _bp = 0x906d;                               //mov bp, 906Dh
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_17FFC
      goto loc_17FFC;
    _bp = 0x9095;                               //mov bp, 9095h
loc_17FFC:                                      //loc_17FFC:
    _ax = memory16(_cs, _bp);                   //mov ax, cs:[bp+0]
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    _ax = memory16(_cs, _bp + 4);               //mov ax, cs:[bp+4]
    memory16(_ds, _bx + 40) = _ax;              //mov [bx+28h], ax
    _ax = memory16(_cs, _bp + 6);               //mov ax, cs:[bp+6]
    memory16(_ds, _bx + 42) = _ax;              //mov [bx+2Ah], ax
    return;                                     //retn
loc_18018:                                      //loc_18018:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x0100;                //mov word ptr [si], 100h
    _bx = 0x7a56;                               //mov bx, 7A56h
    if (memory16(_ds, _di + 12) != 0x0000)      //jnz short loc_18037
      goto loc_18037;
    memory16(_ds, _si) = 0x0104;                //mov word ptr [si], 104h
    _bx = 0x7a2c;                               //mov bx, 7A2Ch
loc_18037:                                      //loc_18037:
    memory16(_ds, _si + 2) = 0x7e87;            //mov word ptr [si+2], 7E87h
    memory16(_ds, _si + 4) = 0x0853;            //mov word ptr [si+4], 853h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _ax = memory16(_cs, _bx + 2);               //mov ax, cs:[bx+2]
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _bx += 0x0004;                              //add bx, 4
    memory16(_ds, _si + 16) = _bx;              //mov [si+10h], bx
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory16(_ds, _si + 6) = 0x3aa7;            //mov word ptr [si+6], 3AA7h
    _ax = memory(_cs, 0x771E);                  //mov ax, word ptr cs:byte_176E6+38h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory(_ds, _si + 39) = 0x00;               //mov byte ptr [si+27h], 0
    memory16(_ds, _si + 52) = 0x00c8;           //mov word ptr [si+34h], 0C8h
    _ax = memory16(_ds, _di + 8);               //mov ax, [di+8]
    _ax -= 0x0008;                              //sub ax, 8
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, _di + 10);              //mov ax, [di+0Ah]
    _ax -= 0x0008;                              //sub ax, 8
    _ax = _ax - memory16(_ds, 0x9190);          //sub ax, word_316C0
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 26) = 0xffff;           //mov word ptr [si+1Ah], 0FFFFh
    _ax = memory16(_ds, _di + 4);               //mov ax, [di+4]
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, _si + 28) = _ax;              //mov [si+1Ch], ax
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    sub_13589();                                //call sub_13589
    return;                                     //retn
loc_180A3:                                      //loc_180A3:
    _ax = 0x00fc;                               //mov ax, 0FCh
    _bx = 0x7bef;                               //mov bx, 7BEFh
    assert(0); //loc_13536();                                //call loc_13536
    memory16(_ds, _si + 34) = 0x0001;           //mov word ptr [si+22h], 1
    _di = memory16(_ds, _si + 56);              //mov di, [si+38h]
    _ax = memory16(_cs, 0x8FD7);                //mov ax, cs:word_18FD7
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    return;                                     //retn
loc_180BB:                                      //loc_180BB:
    _ax = 0x00f8;                               //mov ax, 0F8h
    _bx = 0x7ac4;                               //mov bx, 7AC4h
    assert(0); //loc_13536();                                //call loc_13536
    memory16(_ds, _si + 34) = 0x0001;           //mov word ptr [si+22h], 1
    return;                                     //retn
    _STOP_("db 0D1h");                          //db 0D1h
    _STOP_("db 0E3h");                          //db 0E3h
    _STOP_("db  2Eh");                          //db  2Eh
    _STOP_("db 0FFh");                          //db 0FFh
    _STOP_("db 0A7h");                          //db 0A7h
    _STOP_("db  91h");                          //db  91h
loc_180D1:                                      //loc_180D1:
    _bx = 0x7736;                               //mov bx, 7736h
{sub_13389(); return; };                        //
loc_180D7:                                      //loc_180D7:
    _bx = 0x7748;                               //mov bx, 7748h
{sub_13389(); return; };                        //
loc_180DD:                                      //loc_180DD:
    _bx = 0x775a;                               //mov bx, 775Ah
{sub_13389(); return; };                        //
loc_180E3:                                      //loc_180E3:
    _bx = 0x776c;                               //mov bx, 776Ch
{sub_13389(); return; };                        //
loc_180E9:                                      //loc_180E9:
    _bx = 0x777e;                               //mov bx, 777Eh
{sub_13389(); return; };                        //
loc_180EF:                                      //loc_180EF:
    _bx = 0x7790;                               //mov bx, 7790h
{sub_13389(); return; };                        //
    _STOP_("sp-trace-fail");                    //sub_17F79 endp_failed
    _STOP_("continues");                        //db 0C7h
}

void sub_1818C();

void sub_17F32()
{
    if (memory(_ds, 0x9230) != 0x00)            //jnz short loc_17F4E
      goto loc_17F4E;
    if ((short)memory16(_ds, 0x9190) < (short)0x09d0)//jl short loc_17F6E
      goto loc_17F6E;
    if ((short)memory16(_ds, 0x9190) > (short)0x0b50)//jg short loc_17F6E
      goto loc_17F6E;
    sub_1818C();                                //call sub_1818C
    goto loc_17F6E;                             //jmp short loc_17F6E
loc_17F4E:                                      //loc_17F4E:
    if ((short)memory16(_ds, 0x9190) <= (short)0x09f0)
      goto loc_17F6E;
    memory16(_ds, 0x9190) = 0x09f0;             //mov word_316C0, 9F0h
    memory16(_ds, 0x91AA) = 0x09f0;             //mov word_316DA, 9F0h
    memory16(_ds, 0x918E) = 0x18d8;             //mov word_316BE, 18D8h
    memory16(_ds, 0x9196) = 0x0000;             //mov word_316C6, 0
loc_17F6E:                                      //loc_17F6E:
    memory(_ds, 0x922D) = 0x00;                 //mov byte_3175D, 0
    memory(_ds, 0x922E) = 0x00;                 //mov byte_3175E, 0
}

void loc_181E7();

void sub_1818C()
{
    if (memory(_ds, 0x9230) != 0x00)            //jnz short locret_181BD
      goto locret_181BD;
    if (memory(_ds, 0x922D) != 0x00)            //jnz short loc_181A8
      goto loc_181A8;
    memory16(_ds, 0xFCFA) = 0x0000;             //mov word_3822A, 0
    loc_181E7();                                //call loc_181E7
    memory(_ds, 0x922D) = 0xff;                 //mov byte_3175D, 0FFh
loc_181A8:                                      //loc_181A8:
    if (memory(_ds, 0x922E) != 0x00)            //jnz short locret_181BD
      goto locret_181BD;
    memory16(_ds, 0xFCFA) = 0x0001;             //mov word_3822A, 1
    loc_181E7();                                //call loc_181E7
    memory(_ds, 0x922E) = 0xff;                 //mov byte_3175E, 0FFh
locret_181BD:                                   //locret_181BD:
    return;
}

void sub_181BE();

void loc_181E7()
{
    WORD _cs = _seg000;

    if (memory16(_ds, 0x9200) == 0x0001)        //jz short loc_181F9
      goto loc_181F9;
    if (memory(_ds, 0x922F) == 0x00)            //jz short loc_18201
      goto loc_18201;
    memory(_ds, 0x922F) -= 1;                   //dec byte_3175F
loc_181F9:                                      //loc_181F9:
    sub_181BE();                                //call sub_181BE
    _ax &= 0x0006;                              //and ax, 6
    goto loc_1820A;                             //jmp short loc_1820A
loc_18201:                                      //loc_18201:
    sub_181BE();                                //call sub_181BE
    _ax &= 0x0006;                              //and ax, 6
    _ax += 0x0008;                              //add ax, 8
loc_1820A:                                      //loc_1820A:
    _ax = _ax + memory16(_ds, 0xFCFA);          //add ax, word_3822A
    _dx = 0x000a;                               //mov dx, 0Ah
    _ax = _dx * _al;                            //mul dx
    _di = 0x9179;                               //mov di, 9179h
    _di += _ax;                                 //add di, ax
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, 0xFCE2) = _ax;                //mov word_38212, ax
    _di += 0x0002;                              //add di, 2
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, 0xFCE6) = _ax;                //mov word_38216, ax
    _di += 0x0002;                              //add di, 2
    _ax = memory16(_ds, 0x919A);                //mov ax, word_316CA
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    _ax = memory16(_ds, 0x9190);                //mov ax, word_316C0
    memory16(_ds, 0xFCE6) -= _ax;               //sub word_38216, ax
    _bx = memory16(_cs, _di);                   //mov bx, cs:[di]
    _di += 0x0002;                              //add di, 2
    _bx <<= 1;                                  //shl bx, 1
    if (memory16(_ds, _bx + -28206) != 0x0000)  //jnz short loc_1824D
      goto loc_1824D;
    memory16(_ds, _bx + -28206) = 0x0018;       //mov word ptr [bx-6E2Eh], 18h
loc_1824D:                                      //loc_1824D:
    _ax = memory16(_cs, _di);                   //mov ax, cs:[di]
    memory16(_ds, 0xFCEE) = _ax;                //mov word_3821E, ax
    _di += 0x0002;                              //add di, 2
    memory16(_ds, 0xFCEA) = 0x0000;             //mov word_3821A, 0
    _di = memory16(_cs, _di);                   //mov di, cs:[di]
    _di <<= 1;                                  //shl di, 1
    _di = memory16(_ds, _di + -8524);           //mov di, [di-214Ch]
    _bx = 0x9117;                               //mov bx, 9117h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, 0xFCFE) = _ax;                //mov word_3822E, ax
    _bx += 0x0002;                              //add bx, 2
loc_18271:                                      //loc_18271:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _bx += 0x0002;                              //add bx, 2
    memory16(_ds, _si + 2) = 0x866d;            //mov word ptr [si+2], 866Dh
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_ds, _si + 52) = _ax;              //mov [si+34h], ax
    _bx += 0x0002;                              //add bx, 2
    _ax = memory16(_ds, 0xFCEE);                //mov ax, word_3821E
    memory16(_ds, _si + 32) = _ax;              //mov [si+20h], ax
    _ax = memory(_cs, 0x7720);                  //mov ax, word ptr cs:byte_176E6+3Ah
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory(_ds, _si + 39) = 0x00;               //mov byte ptr [si+27h], 0
    memory16(_ds, _si + 14) = 0x0000;           //mov word ptr [si+0Eh], 0
    memory16(_ds, _si + 56) = _di;              //mov [si+38h], di
    memory16(_ds, _si + 58) = _di;              //mov [si+3Ah], di
    _ax = memory16(_ds, 0xFCE2);                //mov ax, word_38212
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    _ax = memory16(_ds, 0xFCE6);                //mov ax, word_38216
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    _ax = memory16(_ds, 0xFCEA);                //mov ax, word_3821A
    memory16(_ds, _si + 26) = _ax;              //mov [si+1Ah], ax
    _ax = memory(_cs, 0x7722);                  //mov ax, word ptr cs:byte_176E6+3Ch
    memory16(_ds, _si + 66) = _ax;              //mov [si+42h], ax
    _ax = memory16(_ds, 0xFCFA);                //mov ax, word_3822A
    memory16(_ds, _si + 34) = _ax;              //mov [si+22h], ax
    memory16(_ds, 0xFCEA) -= 0x000a;            //sub word_3821A, 0Ah
    sub_13589();                                //call sub_13589
    memory16(_ds, 0xFCFE) -= 1;                 //dec word_3822E
    if ((short)memory16(_ds, 0xFCFE) < 0)       //js short near ptr unk_182FF
      _STOP_("goto near ptr unk_182FF");
    goto loc_18271;                             //jmp loc_18271
    _STOP_("unk_182FF db 0B0h");                //unk_182FF db 0B0h
    _stack16(_bp + _di + -1522) += _cx;         //add [bp+di-5F2h], cx
    _flags.direction = false;                   //cld
    _al <<= _cl;                                //shl al, cl
    memory(_ds, 0x9202) |= _al;                 //or byte ptr word_31732, al
    return;                                     //retn
}

void sub_181BE()
{
    if (memory16(_ds, 0xFCFA) != 0x0000)        //jnz short loc_181D6
      goto loc_181D6;
    _ax = memory16(_ds, 0x91F4);                //mov ax, word_31724
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    memory16(_ds, 0x91F4) = _ax;                //mov word_31724, ax
    return;                                     //retn
loc_181D6:                                      //loc_181D6:
    _ax = memory16(_ds, 0x91F6);                //mov ax, word_31726
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    _ror(_ax, 1);                               //ror ax, 1
    memory16(_ds, 0x91F6) = _ax;                //mov word_31726, ax
}

void sub_18E01()
{
    WORD _cs = _seg000;

    memory16(_ds, 0x91A8) = 0x09e0;             //mov word_316D8, 9E0h
    memory16(_ds, 0x91AA) = 0x11ff;             //mov word_316DA, 11FFh
    memory16(_ds, 0x8EAC) = 0x0fa0;             //mov word_313DC, 0FA0h
    memory16(_ds, 0x8EAE) = 0x04b0;             //mov word_313DE, 4B0h
    memory(_ds, 0x9230) = 0x00;                 //mov byte_31760, 0
    sub_11022();                                //call sub_11022
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    memory16(_ds, _si) = 0x0050;                //mov word ptr [si], 50h
    memory16(_ds, _si + 2) = 0x89ae;            //mov word ptr [si+2], 89AEh
    memory16(_ds, _si + 4) = 0x8c3e;            //mov word ptr [si+4], 8C3Eh
    memory16(_ds, _si + 6) = 0x8745;            //mov word ptr [si+6], 8745h
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    memory(_ds, _si + 75) = 0xff;               //mov byte ptr [si+4Bh], 0FFh
    memory16(_ds, _si + 22) = 0x0060;           //mov word ptr [si+16h], 60h
    _ax = memory(_cs, 0x772C);                  //mov ax, word ptr cs:byte_176E6+46h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory16(_ds, _si + 26) = 0xffff;           //mov word ptr [si+1Ah], 0FFFFh
    memory16(_ds, _si + 32) = 0x0000;           //mov word ptr [si+20h], 0
    memory16(_ds, _si + 48) = 0x0000;           //mov word ptr [si+30h], 0
    memory16(_ds, _si + 34) = 0x0000;           //mov word ptr [si+22h], 0
    memory16(_ds, _si + 54) = 0x0000;           //mov word ptr [si+36h], 0
    _cx = 0x0003;                               //mov cx, 3
    _di = 0x33b0;                               //mov di, 33B0h
loc_18E72:                                      //loc_18E72:
    sub_11022();                                //call sub_11022
    _push(_di);                                 //push di
    _di = 0x904a;                               //mov di, 904Ah
    sub_1077C();                                //call sub_1077C
    _di = _pop();                               //pop di
    memory16(_ds, _si) = 0x0054;                //mov word ptr [si], 54h
    memory16(_ds, _si + 2) = 0x88a9;            //mov word ptr [si+2], 88A9h
    memory16(_ds, _si + 4) = 0x0761;            //mov word ptr [si+4], 761h
    memory16(_ds, _si + 6) = 0x87d5;            //mov word ptr [si+6], 87D5h
    _ax = memory(_cs, 0x772E);                  //mov ax, word ptr cs:byte_176E6+48h
    memory16(_ds, _si + 36) = _ax;              //mov [si+24h], ax
    memory(_ds, _si + 74) = 0xff;               //mov byte ptr [si+4Ah], 0FFh
    memory(_ds, _si + 75) = 0xff;               //mov byte ptr [si+4Bh], 0FFh
    memory16(_ds, _si + 72) = 0x0000;           //mov word ptr [si+48h], 0
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 18) = _bx;              //mov [si+12h], bx
    _ax = memory16(_ds, _di);                   //mov ax, [di]
    _di += 0x0002;                              //add di, 2
    memory16(_ds, _si + 22) = _ax;              //mov [si+16h], ax
    _dx = 0x0014;                               //mov dx, 14h
    _ax = _dx * _al;                            //mul dx
    _ax += _bx;                                 //add ax, bx
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x0000;                              //add ax, 0
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    memory16(_ds, _si + 26) = 0x0000;           //mov word ptr [si+1Ah], 0
    _cx -= 1;                                   //dec cx
    memory16(_ds, _si + 34) = _cx;              //mov [si+22h], cx
    _cx += 1;                                   //inc cx
    if (--_cx)                                  //loop loc_18E72
      goto loc_18E72;
    memory16(_ds, 0x9200) = 0x0003;             //mov word_31730, 3
    memory16(_ds, 0x9202) = 0x0000;             //mov word_31732, 0
    memory(_ds, 0x922D) = 0x00;                 //mov byte_3175D, 0
    memory(_ds, 0x922E) = 0x00;                 //mov byte_3175E, 0
    memory(_ds, 0x922F) = 0x02;                 //mov byte_3175F, 2
    memory16(_ds, 0x91D4) = 0x0000;             //mov word_31704, 0
    memory16(_ds, 0x91D6) = 0x0000;             //mov word_31706, 0
    memory16(_ds, 0x91D8) = 0x0000;             //mov word_31708, 0
    memory16(_ds, 0x91DA) = 0x0000;             //mov word_3170A, 0
    memory16(_ds, 0x91DC) = 0x0000;             //mov word_3170C, 0
    memory16(_ds, 0x91DE) = 0x0000;             //mov word_3170E, 0
    memory16(_ds, 0x91E0) = 0x0000;             //mov word_31710, 0
    memory16(_ds, 0x91E2) = 0x0000;             //mov word_31712, 0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0000;                              //add si, 0
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0062;                              //add si, 62h
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x00c4;                              //add si, 0C4h
    sub_18DF0();                                //call sub_18DF0
    _si = 0x938b;                               //mov si, 938Bh
    _si += 0x0116;                              //add si, 116h
    sub_18DF0();                                //call sub_18DF0
    _bx = 0x98ce;                               //mov bx, 98CEh
    memory16(_ds, _bx) = 0x0000;                //mov word ptr [bx], 0
    memory16(_ds, _bx + 10) = _bx;              //mov [bx+0Ah], bx
    memory16(_ds, _bx + 8) = _bx;               //mov [bx+8], bx
    memory16(_ds, _bx + 2) = 0x0761;            //mov word ptr [bx+2], 761h
    memory16(_ds, _bx + 4) = 0x0761;            //mov word ptr [bx+4], 761h
    memory16(_ds, _bx + 6) = 0x8d18;            //mov word ptr [bx+6], 8D18h
    memory16(_ds, 0x91F4) = 0x45d2;             //mov word_31724, 45D2h
    memory16(_ds, 0x91F6) = 0xaa6a;             //mov word_31726, 0AA6Ah
    _ax = memory16(_ds, 0x991A);                //mov ax, word_31E4A
    memory16(_ds, 0x8E76) = _ax;                //mov word_313A6, ax
    _ax = memory16(_ds, 0x991A);                //mov ax, word_31E4A
    _ax <<= 1;                                  //shl ax, 1
    memory16(_ds, 0x8E78) = _ax;                //mov word_313A8, ax
    _si = 0x938b;                               //mov si, 938Bh
    _di = 0xd10c;                               //mov di, 0D10Ch
    _cx = 0x00b4;                               //mov cx, 0B4h
loc_18F7F:                                      //loc_18F7F:
    _ax = memory16(_cs, _si);                   //mov ax, cs:[si]
    _si += 0x0002;                              //add si, 2
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_18F7F
      goto loc_18F7F;
    memory16(_ds, 0x8E72) = 0x1b55;             //mov word_313A2, 1B55h
}
