void sub_1012F();
void sub_101E2();
void _main();
void sub_10258();
void sub_10282();
void sub_103EA();
void sub_10416();
void sub_10569();
void sub_105E7();
void sub_10604();
void sub_1063B();
void loc_106A4();
void sub_107AD();
void sub_107F0();
void sub_10816();
void sub_108D1();
void sub_10A07();
void sub_10A90();
void sub_10B88();
void sub_10BF9();
void sub_10C18();
void sub_10D9D();
void sub_10F7A();
void sub_111EB();
void sub_11349();
void sub_1138C();
void sub_113B2();
void sub_113DF();
void sub_11473();
void sub_114E4();
void sub_115A1();
void sub_1165E();
void sub_117C7();
void sub_119A1();
void sub_119E4();
void sub_11A20();
void sub_11A67();
void sub_11B2B();
void sub_11BD7();
void sub_11C41();
void sub_11CB2();
void sub_11CEA();
void sub_11D26();
void sub_11DDE();
void sub_11E02();
void sub_11E3D();
void sub_11E5E();
void sub_11E90();
void sub_11EC2();
void sub_11F03();
void sub_11F3E();
void sub_11F7F();
void sub_11FBE();
void sub_1207D();
void sub_12138();
void sub_121BB();
void sub_121E7();
void sub_12261();
void sub_1228D();
void sub_122B0();
void sub_122C1();
void sub_122D2();
void sub_122FC();
void sub_1233A();
void sub_1236F();
void sub_1238E();
void sub_123B6();
void sub_12423();
void sub_12470();
void sub_1248E();
void sub_124D7();
void sub_1250A();
void sub_1253F();
void sub_125AD();
void sub_12634();
void sub_126A1();
void sub_1270C();
void sub_12776();
void sub_127DE();
void sub_12810();
void sub_128E0();
void sub_128F9();
void sub_12965();
void sub_129A6();
void sub_12A0A();
void sub_12A78();
void sub_12D14();
void sub_12EF8();
void sub_12FAC();
void sub_130DD();
void sub_131DE();
void sub_1328F();
void sub_132B0();
void sub_133C5();
void sub_13467();
void sub_135A5();
void sub_13852();
void sub_13A88();
void sub_13AB2();
void sub_13B0F();
void sub_13B6C();
void sub_13BC9();
void sub_13C26();
void sub_13C4F();
void sub_13C9D();
void sub_13CF7();
void sub_13DFD();
void sub_13E74();
void sub_13E8A();
void sub_13ED4();
void sub_14015();
void sub_14263();
void sub_142D9();
void sub_14305();
void sub_1431B();
void sub_14344();
void sub_14361();
void sub_14398();
void sub_143B5();
void sub_143D2();
void sub_143EF();
void sub_1440C();
void sub_14437();
void sub_14454();
void sub_1448A();
void sub_144C0();
void sub_1450C();
void sub_14532();
void sub_1457A();
void sub_145A0();
void sub_145CF();
void sub_14605();
void sub_1463D();
void sub_1465E();
void sub_1467D();
void sub_1469C();
void sub_146BB();
void sub_1472D();
void sub_14747();
void sub_147CB();
void sub_14802();
void sub_1483C();
void sub_148A9();
void sub_14906();
void sub_1495C();
void sub_14995();
void sub_149D7();
void sub_14B4E();
void sub_14BC6();
void sub_14C14();
void sub_14C99();
void sub_14DBF();
void sub_14DFA();
void sub_14E44();
void sub_14E7F();
void sub_14EC9();
void sub_14F04();
void sub_14F4E();
void sub_14F89();
void sub_14FD3();
void sub_15003();
void sub_15025();
void sub_1503F();
void sub_15059();
void sub_1506F();
void sub_15085();
void sub_150C0();
void sub_150FB();
void sub_15181();
void sub_151D8();
void sub_1535E();
void sub_15681();
void sub_157E1();
void sub_159D3();
void sub_15C87();
void sub_15FDB();
void sub_1603D();
void sub_16130();
void sub_16183();
void sub_16272();
void sub_1629C();
void loc_16311();
void sub_163BE();
void loc_1641A();
void sub_1654E();
void sub_16587();
void loc_165DE();
void sub_165FB();
void sub_16611();
void loc_16633();
void sub_16648();
void loc_166A5();
void sub_16717();
void loc_16746();
void sub_167E2();
void loc_16807();
void sub_16813();
void loc_1683E();
void sub_1686A();
void loc_1689C();
void sub_168FE();
void loc_1692E();
void sub_1693A();
void sub_1695E();
void sub_16987();
void sub_169AA();
void sub_16A89();
void sub_16BB5();
void sub_16BD4();
void sub_16BF4();
void sub_16C14();
void sub_16C95();
void sub_16D26();
void sub_16D6A();
void sub_16D94();
void loc_16DBD();
void sub_16DE3();
void sub_16E11();
void sub_16E30();
void sub_17111();
void sub_17120();
void loc_17155();
void sub_17235();
void sub_172EF();
void sub_17307();
void sub_17319();
void sub_1736F();
void sub_1745E();
void sub_174D5();
void sub_17532();
void sub_17563();
void sub_1757B();
void sub_175A2();
void sub_1773C();
void sub_177D9();
void sub_17861();
void sub_1798A();
void loc_17A0E();
void sub_17A77();
void sub_17AB4();
void sub_17ABB();
void loc_17ADC();
void sub_17B01();
void sub_17B4A();
void sub_17B5A();
void sub_17B93();
void sub_17BA7();
void sub_17BAD();
void sub_17BBD();
void sub_17BCA();
void sub_17BD7();
void sub_17BDD();
void sub_17BFA();
void sub_17BFE();
void loc_17C40();
void sub_17CDE();
void sub_17DB2();
void sub_17DB9();
void sub_17DF9();
void sub_17E18();
void sub_17E1F();
void loc_17E5F();
void sub_17E62();
void loc_17E86();
void sub_17F90();
void sub_17F9A();
void sub_17FB0();
void sub_17FEF();
void sub_1808E();
void sub_1809E();
void sub_180AC();
void sub_180BC();
void sub_185B5();
void sub_185DB();
void sub_18600();
void sub_18626();
void loc_18660();
void sub_186E9();
void sub_18722();
void sub_1872E();
void sub_1873C();
void sub_187A2();
void sub_187CD();
void sub_18809();
void sub_18891();
void sub_188E5();
void sub_1891E();
void sub_18977();
void sub_18999();
void sub_189A8();
void loc_189E0();
void sub_189E2();
void sub_18A07();
void sub_18A23();
void sub_18A3B();
void loc_18A50();
void sub_18A65();
void sub_18A75();
void sub_18AD0();
void sub_18AF6();
void sub_18B04();
void sub_18B0D();
void sub_18B2A();
void sub_18B6B();
void sub_18B81();
void sub_18BC8();
void sub_18E2F();
void sub_18E48();
void sub_18E50();
void sub_18E58();
void sub_18E93();
void loc_18E9E();
void sub_18EA3();
void loc_18EC7();
void sub_18EEB();
void sub_18FB6();
void sub_19007();
void sub_19056();
void sub_1905D();
void sub_19115();
void loc_19147();
void sub_191B9();
void sub_191CF();
void sub_191D7();
void sub_191DF();
void sub_1922C();
void sub_1927C();
void loc_192D6();
void sub_193A4();
void sub_193B1();
void sub_193B8();
void sub_193C8();
void sub_193D8();
void sub_19406();
void sub_19410();
void sub_19424();
void sub_1942A();
void sub_19434();
void sub_19439();
void sub_19440();
void sub_19451();
void sub_1945B();
void sub_1946E();
void sub_19488();
void sub_19502();
void loc_195AD();
void sub_197A4();
void sub_197AA();
void sub_197AE();
void sub_197C5();
void sub_197D5();
void sub_197F1();
void sub_19804();
void sub_19814();
void sub_19821();
void sub_19837();
void sub_19864();
void __setupio();
void sub_1AADD();
void loc_1AB05();
void sub_1ABD7();
void locret_1AC01();
void sub_1AC74();
void sub_1AD09();
void sub_1AD51();
void sub_1AD71();
void sub_1AD8F();
void sub_1ADAB();
void sub_1ADC2();
void sub_1AE41();
void sub_1AE5E();
void sub_1AEE1();
void sub_1AF14();
void sub_1AFB7();
void sub_1B0BD();
void sub_1B146();
void sub_1B15F();
void sub_1B196();
void sub_1B1B0();
void sub_1B1DD();
void sub_1B1F2();
void sub_1B207();
void sub_1B251();
void sub_1B380();
void loc_1B3B6();
void sub_1B3E8();
void locret_1B421();
void sub_1B603();
void sub_1B630();
void sub_1B660();
void sub_1B6C3();
void sub_1B78D();
void sub_1B795();
void sub_1B79D();
void loc_1B7CE();
void sub_1B907();
void sub_1B940();
void loc_1B979();
void sub_1B999();
void locret_1B9CB();
void sub_1BBB8();
void sub_1BBF0();
void loc_1BC30();
void sub_1BDFE();
void sub_1BE40();
void sub_1BE65();
void sub_1BEA1();
void sub_1BEBB();
void sub_1BEE5();
void sub_1BEF8();
void sub_1BF0B();
void sub_1BF4C();
void sub_1BF7C();
void sub_1BF99();
void sub_1BFB2();
void sub_1BFD1();
void sub_1BFE8();
void sub_1BFFB();
void sub_1C01E();
void sub_1C063();
void sub_1C07F();
void sub_1C08F();
void sub_1C0C0();
void sub_1C0EF();
void sub_1C11E();
void sub_1C14D();
void sub_1C197();
void sub_1C280();
void sub_1C2FE();
void loc_1C4A0();
void sub_1CC89();
void sub_1CD50();
void sub_1CD82();
void sub_1CDA0();
void sub_1CDE5();
void sub_1CE29();
void sub_1CE50();
void sub_1CE6F();
void loc_1CF08();
void sub_1D12D();
void sub_1D141();
void loc_1D1DC();
void sub_1D20C();
void sub_1D2E6();
void loc_1D34E();
void sub_1DB37();
void sub_1DCAF();
void sub_1DCE9();
void sub_1DCF4();
void sub_1DD08();
void loc_1DDC8();
void sub_1DE10();
void sub_1DEFD();
void sub_1DFA1();
void loc_1F4EC();
void sub_1F9B0();
void sub_1FBAD();
void sub_1FBD5();
void sub_1FC03();
void sub_1FC2D();
void sub_1FC68();
void sub_1FC92();
void sub_1FCAD();
void loc_1FF67();
void sub_1FFF7();
void sub_20077();
void sub_202C0();
void sub_20360();
void sub_20375();
void sub_20385();


// imports
void _close() { _ASSERT(0); }
void _exit() { _ASSERT(0); }
void _findnext() { _ASSERT(0); }
void _getcurdir() { _ASSERT(0); }
void _getdisk() { _ASSERT(0); }
void _harderr() { _ASSERT(0); }
void _isatty() { _ASSERT(0); }
void _open() {
    const int arg_path = 4;
    WORD a = memory16(_ss, _sp + 0);
    WORD b = memory16(_ss, _sp + 2);
    WORD c = memory16(_ss, _sp + 4);
    WORD d = memory16(_ss, _sp + 6);
    WORD e = memory16(_ss, _sp + 8);
    for (int i = 0; i<10; i++)
        std::cout << (char)memory(c, b+i); // 1ab9
    int f = 9;
}
void _setvbuf() { _ASSERT(0); }
void ax() { _ASSERT(0); }
void bp() { _ASSERT(0); }
void loc_137E0() { _ASSERT(0); }
void loc_137E8() { _ASSERT(0); }
void loc_146F2() { _ASSERT(0); }
void loc_146F7() { _ASSERT(0); }
void loc_146FC() { _ASSERT(0); }
void loc_14701() { _ASSERT(0); }
void loc_16E83() { _ASSERT(0); }
void loc_16E9A() { _ASSERT(0); }
void loc_16EB5() { _ASSERT(0); }
void loc_16ED3() { _ASSERT(0); }
void loc_16EF1() { _ASSERT(0); }
void loc_16F0F() { _ASSERT(0); }
void loc_16F2D() { _ASSERT(0); }
void loc_16F4B() { _ASSERT(0); }
void loc_16F69() { _ASSERT(0); }
void loc_16F80() { _ASSERT(0); }
void loc_16F9E() { _ASSERT(0); }
void loc_16FBF() { _ASSERT(0); }
void loc_16FD9() { _ASSERT(0); }
void loc_16FF7() { _ASSERT(0); }
void loc_17014() { _ASSERT(0); }
void loc_17032() { _ASSERT(0); }
void loc_1704C() { _ASSERT(0); }
void loc_1706C() { _ASSERT(0); }
void loc_1708C() { _ASSERT(0); }
void loc_170A6() { _ASSERT(0); }
void loc_170C2() { _ASSERT(0); }
void loc_1B4D7() { _ASSERT(0); }
void loc_1B6CC() { _ASSERT(0); }
void loc_1BA83() { _ASSERT(0); }
void loc_1BD26() { _ASSERT(0); }
void nullsub_13() { _ASSERT(0); }
void nullsub_14() { _ASSERT(0); }
void nullsub_15() { _ASSERT(0); }
void nullsub_16() { _ASSERT(0); }
void nullsub_17() { _ASSERT(0); }
void nullsub_18() { _ASSERT(0); }
void nullsub_19() { _ASSERT(0); }
void nullsub_2() { _ASSERT(0); }
void nullsub_20() { _ASSERT(0); }
void nullsub_21() { _ASSERT(0); }
void nullsub_22() { _ASSERT(0); }
void nullsub_23() { _ASSERT(0); }
void nullsub_24() { _ASSERT(0); }
void nullsub_25() { _ASSERT(0); }
void nullsub_26() { _ASSERT(0); }
void nullsub_27() { _ASSERT(0); }
void nullsub_28() { _ASSERT(0); }
void nullsub_29() { _ASSERT(0); }
void nullsub_30() { _ASSERT(0); }
void nullsub_31() { _ASSERT(0); }
void nullsub_32() { _ASSERT(0); }
void nullsub_33() { _ASSERT(0); }
void nullsub_34() { _ASSERT(0); }
void nullsub_35() { _ASSERT(0); }
void nullsub_36() { _ASSERT(0); }
void nullsub_37() { _ASSERT(0); }
void nullsub_4() { _ASSERT(0); }
void nullsub_8() { _ASSERT(0); }
void word_2A568() { _ASSERT(0); }
void word_2A5AE() { _ASSERT(0); }




void sub_1012F()
{
    WORD _cs = _seg000;

    _push(_ds);                                 //push ds
    _ax = 0x3500;                               //mov ax, 3500h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x59) = _bx;                  //mov word ptr dword_20409, bx
    memory16(_ds, 0x5B) = _es;                  //mov word ptr dword_20409+2, es
    _ax = 0x3504;                               //mov ax, 3504h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x5D) = _bx;                  //mov word ptr dword_2040D, bx
    memory16(_ds, 0x5F) = _es;                  //mov word ptr dword_2040D+2, es
    _ax = 0x3505;                               //mov ax, 3505h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x61) = _bx;                  //mov word ptr dword_20411, bx
    memory16(_ds, 0x63) = _es;                  //mov word ptr dword_20411+2, es
    _ax = 0x3506;                               //mov ax, 3506h
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x65) = _bx;                  //mov word ptr dword_20415, bx
    memory16(_ds, 0x67) = _es;                  //mov word ptr dword_20415+2, es
    _ax = 0x2500;                               //mov ax, 2500h
    _dx = _cs;                                  //mov dx, cs
    _ds = _dx;                                  //mov ds, dx
    _dx = 0x0126;                               //mov dx, 126h
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
}

void sub_101E2()
{
    _ah = 0x40;                                 //mov ah, 40h
    _bx = 0x0002;                               //mov bx, 2
    _interrupt(33);                             //int 21h
}

void _main()
{
    const int argc = 4;                         //argc  = word ptr  4
    const int argv = 6;                         //argv  = dword ptr  6
    const int envp = 10;                        //envp  = dword ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1020F
        goto loc_1020F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1020F:                                      //loc_1020F:
    if (memory(_ss, _bp + argc) != 0x01)        //jnz short loc_10256
        goto loc_10256;
    sub_10416();                                //call sub_10416
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10256
        goto loc_10256;
    _les(_bx, _ss, _bp + argv);                 //les bx, [bp+argv]
    _ax = memoryBiosGet16(_es, _bx + 6);               //mov ax, es:[bx+6]
    _dx = memoryBiosGet16(_es, _bx + 4);               //mov dx, es:[bx+4]
    memory16(_ds, 0x6BE4) = _dx;                //mov word_26F94, dx
    memory16(_ds, 0x6BE6) = _ax;                //mov word_26F96, ax
    sub_10282();                                //call sub_10282
    sub_17BA7();                                //call sub_17BA7
    sub_10A07();                                //call sub_10A07
    sub_10258();                                //call sub_10258
    sub_10569();                                //call sub_10569
    sub_17A77();                                //call sub_17A77
    sub_17DB9();                                //call sub_17DB9
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    sub_17120();                                //call sub_17120
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _exit();                                    //call _exit
    _STOP_("db 2 dup(44h)");                    //db 2 dup(44h)
loc_10256:                                      //loc_10256:
    _bp = _pop();                               //pop bp
}

void sub_10258()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10264
        goto loc_10264;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10264:                                      //loc_10264:
    memory(_ds, 0x79B2) = 0x01;                 //mov byte_27D62, 1
    sub_1535E();                                //call sub_1535E
    sub_16DE3();                                //call sub_16DE3
loc_1026F:                                      //loc_1026F:
    sub_10C18();                                //call sub_10C18
    if (memory(_ds, 0x9D30) != 0x00)            //jnz short loc_1026F
        goto loc_1026F;
    if (memory(_ds, 0x856D) != 0x00)            //jnz short loc_1026F
        goto loc_1026F;
    _bp = _pop();                               //pop bp
}

void sub_10282()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1028E
        goto loc_1028E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1028E:                                      //loc_1028E:
    _ax = 0x06a9;                               //mov ax, 6A9h
    _push(_ax);                                 //push ax
    _ax = 0x0698;                               //mov ax, 698h
    _push(_ax);                                 //push ax
    sub_172EF();                                //call sub_172EF
    _sp += 0x0004;                              //add sp, 4
    _push(_ds);                                 //push ds
    _ax = 0x6fac;                               //mov ax, 6FACh
    _push(_ax);                                 //push ax
    sub_17BAD();                                //call sub_17BAD
    _sp += 0x0004;                              //add sp, 4
    sub_17CDE();                                //call sub_17CDE
    sub_1798A();                                //call sub_1798A
    sub_17532();                                //call sub_17532
    sub_1927C();                                //call sub_1927C
    _push(_ds);                                 //push ds
    _ax = 0x4cd0;                               //mov ax, 4CD0h
    _push(_ax);                                 //push ax
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_17563();                                //call sub_17563
    _sp += 0x0006;                              //add sp, 6
    sub_17BD7();                                //call sub_17BD7
    sub_197A4();                                //call sub_197A4
    _al = 0x02;                                 //mov al, 2
    _push(_ax);                                 //push ax
    sub_17BBD();                                //call sub_17BBD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    // changes ds
    sub_197F1();                                //call sub_197F1
    _ax = 0x00c7;                               //mov ax, 0C7h
    _push(_ax);                                 //push ax
    _ax = 0x013f;                               //mov ax, 13Fh
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    sub_19821();                                //call sub_19821
    _sp += 0x0008;                              //add sp, 8
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x000e;                               //mov ax, 0Eh
    _push(_ax);                                 //push ax
    sub_197C5();                                //call sub_197C5
    _sp += 0x0004;                              //add sp, 4
    _push(_ds);                                 //push ds
    _ax = 0x0090;                               //mov ax, 90h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x6BEC) = _al;                  //mov byte_26F9C, al
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ds, 0x7310) = _ax;                //mov word_276C0, ax
    memory(_ds, 0x7312) = _al;                  //mov byte_276C2, al
    memory(_ds, 0x6BC9) = _al;                  //mov byte_26F79, al
    memory(_ds, 0x7314) = _al;                  //mov byte_276C4, al
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x731B) = _al;                  //mov byte_276CB, al
    memory(_ds, 0x6BBA) = _al;                  //mov byte_26F6A, al
    memory(_ds, 0x75ED) = _al;                  //mov byte_2799D, al
    memory(_ds, 0x75EC) = _al;                  //mov byte_2799C, al
    memory(_ds, 0x75EB) = _al;                  //mov byte_2799B, al
    memory(_ds, 0x75CE) = _al;                  //mov byte_2797E, al
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x6C34) = _al;                  //mov byte_26FE4, al
    memory(_ds, 0x6BC8) = _al;                  //mov byte_26F78, al
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ds, 0x6BC2) = _ax;                //mov word_26F72, ax
    memory16(_ds, 0x6BC0) = _ax;                //mov word_26F70, ax
    memory16(_ds, 0x6C40) = _ax;                //mov word_26FF0, ax
    memory16(_ds, 0x6C3E) = _ax;                //mov word_26FEE, ax
    memory16(_ds, 0x75C8) = _ax;                //mov word_27978, ax
    memory(_ds, 0x6BC5) = 0x01;                 //mov byte_26F75, 1
    memory(_ds, 0x6BC4) = 0x14;                 //mov byte_26F74, 14h
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x6FAA) = _al;                  //mov byte_2735A, al
    memory(_ds, 0x75E2) = _al;                  //mov byte_27992, al
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x75CF) = _al;                  //mov byte_2797F, al
    memory(_ds, 0x75C6) = _al;                  //mov byte_27976, al
    memory(_ds, 0x6BDF) = _al;                  //mov byte_26F8F, al
    memory(_ds, 0x6BC6) = _al;                  //mov byte_26F76, al
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x6BF8) = _ax;                //mov word_26FA8, ax
    memory16(_ds, 0x6BBE) = _ax;                //mov word_26F6E, ax
    memory16(_ds, 0x6BBC) = _ax;                //mov word_26F6C, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x6BD6) = _ax;                //mov word_26F86, ax
    memory16(_ds, 0x6BCE) = _ax;                //mov word_26F7E, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x6BDC) = _ax;                //mov word_26F8C, ax
    memory16(_ds, 0x6BD0) = _ax;                //mov word_26F80, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x6BDA) = _ax;                //mov word_26F8A, ax
    memory16(_ds, 0x6BD8) = _ax;                //mov word_26F88, ax
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0x6BF6) = _al;                  //mov byte_26FA6, al
    memory(_ds, 0x6C26) = _al;                  //mov byte_26FD6, al
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x6BE2) = _ax;                //mov word_26F92, ax
    memory16(_ds, 0x6BE0) = _ax;                //mov word_26F90, ax
    memory16(_ds, 0x7316) = 0x006c;             //mov word_276C6, 6Ch
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x6BBB) = _al;                  //mov byte_26F6B, al
    memory(_ds, 0x6BDE) = _al;                  //mov byte_26F8E, al
    memory(_ds, 0x6BC7) = 0x09;                 //mov byte_26F77, 9
    memory(_ds, 0x75EA) = 0x00;                 //mov byte_2799A, 0
    _ax = memory16(_ds, 0x7310);                //mov ax, word_276C0
    _dx = 0x032c;                               //mov dx, 32Ch
    _imul(_dx);                                 //imul dx
    _dx = memory16(_ds, 0x6BD4);                //mov dx, word_26F84
    _bx = memory16(_ds, 0x6BD2);                //mov bx, word_26F82
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, 0x6BCA) = _bx;                //mov word ptr dword_26F7A, bx
    memory16(_ds, 0x6BCC) = _dx;                //mov word ptr dword_26F7A+2, dx
    _ax = memory16(_ds, 0x7310);                //mov ax, word_276C0
    _dx = 0x00c2;                               //mov dx, 0C2h
    _imul(_dx);                                 //imul dx
    _dx = memory16(_ds, 0x6BF4);                //mov dx, word_26FA4
    _bx = memory16(_ds, 0x6BF2);                //mov bx, word_26FA2
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, 0x75D0) = _bx;                //mov word ptr dword_27980, bx
    memory16(_ds, 0x75D2) = _dx;                //mov word ptr dword_27980+2, dx
    sub_103EA();                                //call sub_103EA
    _bp = _pop();                               //pop bp
}

void sub_103EA()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_103F6
        goto loc_103F6;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_103F6:                                      //loc_103F6:
    sub_19424();                                //call sub_19424
    _ax = 0x00c7;                               //mov ax, 0C7h
    _push(_ax);                                 //push ax
    _ax = 0x013f;                               //mov ax, 13Fh
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    sub_19406();                                //call sub_19406
    _sp += 0x0008;                              //add sp, 8
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_10416()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10424
        goto loc_10424;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10424:                                      //loc_10424:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x07c3;                               //mov dx, 7C3h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x75DA) = _ax;                //mov word_2798A, ax
    memory16(_ds, 0x75DC) = _dx;                //mov word_2798C, dx
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x0898;                               //mov dx, 898h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x6C2C) = _ax;                //mov word_26FDC, ax
    memory16(_ds, 0x6C2E) = _dx;                //mov word_26FDE, dx
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7806;                               //mov dx, 7806h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x6FA6) = _ax;                //mov word_27356, ax
    memory16(_ds, 0x6FA8) = _dx;                //mov word_27358, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_10475
        goto loc_10475;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
loc_10475:                                      //loc_10475:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1049E
        goto loc_1049E;
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _dx = 0x5c70;                               //mov dx, 5C70h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0xA0C6) = _ax;                //mov word_2A476, ax
    memory16(_ds, 0xA0C8) = _dx;                //mov word_2A478, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_1049E
        goto loc_1049E;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
loc_1049E:                                      //loc_1049E:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_104D8
        goto loc_104D8;
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x2f96;                               //mov dx, 2F96h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x6BE8) = _ax;                //mov word_26F98, ax
    memory16(_ds, 0x6BEA) = _dx;                //mov word_26F9A, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_104C8
        goto loc_104C8;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
    goto loc_104D8;                             //jmp short loc_104D8
loc_104C8:                                      //loc_104C8:
    _ax = memory16(_ds, 0x6BEA);                //mov ax, word_26F9A
    _dx = memory16(_ds, 0x6BE8);                //mov dx, word_26F98
    _dx += 1;                                   //inc dx
    _dx += 1;                                   //inc dx
    memory16(_ds, 0x6BD2) = _dx;                //mov word_26F82, dx
    memory16(_ds, 0x6BD4) = _ax;                //mov word_26F84, ax
loc_104D8:                                      //loc_104D8:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10500
        goto loc_10500;
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x0500;                               //mov dx, 500h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x6C30) = _ax;                //mov word_26FE0, ax
    memory16(_ds, 0x6C32) = _dx;                //mov word_26FE2, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_10500
        goto loc_10500;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
loc_10500:                                      //loc_10500:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10528
        goto loc_10528;
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x7926) = _ax;                //mov word_27CD6, ax
    memory16(_ds, 0x7928) = _dx;                //mov word_27CD8, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_10528
        goto loc_10528;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
loc_10528:                                      //loc_10528:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10562
        goto loc_10562;
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x0b60;                               //mov dx, 0B60h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1808E();                                //call sub_1808E
    _sp += 0x0006;                              //add sp, 6
    memory16(_ds, 0x75DE) = _ax;                //mov word_2798E, ax
    memory16(_ds, 0x75E0) = _dx;                //mov word_27990, dx
    _ax |= _dx;                                 //or ax, dx
    if (_ax != 0)                               //jnz short loc_10552
        goto loc_10552;
    memory(_ss, _bp + var_1) = 0xff;            //mov [bp+var_1], 0FFh
    goto loc_10562;                             //jmp short loc_10562
loc_10552:                                      //loc_10552:
    _ax = memory16(_ds, 0x75E0);                //mov ax, word_27990
    _dx = memory16(_ds, 0x75DE);                //mov dx, word_2798E
    _dx += 1;                                   //inc dx
    _dx += 1;                                   //inc dx
    memory16(_ds, 0x6BF2) = _dx;                //mov word_26FA2, dx
    memory16(_ds, 0x6BF4) = _ax;                //mov word_26FA4, ax
loc_10562:                                      //loc_10562:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_10569()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10575
        goto loc_10575;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10575:                                      //loc_10575:
    _push(memory16(_ds, 0x75E0));               //push word_27990
    _push(memory16(_ds, 0x75DE));               //push word_2798E
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x6C32));               //push word_26FE2
    _push(memory16(_ds, 0x6C30));               //push word_26FE0
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x6BEA));               //push word_26F9A
    _push(memory16(_ds, 0x6BE8));               //push word_26F98
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0xA0C8));               //push word_2A478
    _push(memory16(_ds, 0xA0C6));               //push word_2A476
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x6FA8));               //push word_27358
    _push(memory16(_ds, 0x6FA6));               //push word_27356
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x6C2E));               //push word_26FDE
    _push(memory16(_ds, 0x6C2C));               //push word_26FDC
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x75DC));               //push word_2798C
    _push(memory16(_ds, 0x75DA));               //push word_2798A
    sub_1809E();                                //call sub_1809E
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_105E7()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_105F8
        goto loc_105F8;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
    goto loc_105F8;                             //jmp short loc_105F8
loc_105F5:                                      //loc_105F5:
    sub_19864();                                //call sub_19864
loc_105F8:                                      //loc_105F8:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _FIXME_ -= 1;                               //dec [bp+arg_0]
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_105F5
        goto loc_105F5;
    _bp = _pop();                               //pop bp
}

void sub_10604()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10610
        goto loc_10610;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10610:                                      //loc_10610:
    _al = memory(_ds, 0x75CF);                  //mov al, byte_2797F
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10629
        goto loc_10629;
    _les(_bx, _ds, 0x6BCA);                     //les bx, dword_26F7A
    if (memory16(_es, _bx + 28) == 0x0000)      //jz short loc_10629
        goto loc_10629;
    sub_1063B();                                //call sub_1063B
    goto loc_1062E;                             //jmp short loc_1062E
loc_10629:                                      //loc_10629:
    memory(_ds, 0x75CF) = 0x01;                 //mov byte_2797F, 1
loc_1062E:                                      //loc_1062E:
    _push(_ds);                                 //push ds
    _ax = 0x0578;                               //mov ax, 578h
    _push(_ax);                                 //push ax
    sub_108D1();                                //call sub_108D1
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_1063B()
{
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1064C
        goto loc_1064C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1064C:                                      //loc_1064C:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_1068C;                             //jmp short loc_1068C
loc_10652:                                      //loc_10652:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ds, 0x6BCA);                     //les bx, dword_26F7A
    _bx += _ax;                                 //add bx, ax
    _si = memory16(_es, _bx);                   //mov si, es:[bx]
    _ax = _si;                                  //mov ax, si
    _ax &= 0x00ff;                              //and ax, 0FFh
    _cl = 0x08;                                 //mov cl, 8
    _ax <<= _cl;                                //shl ax, cl
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    _ax = _si;                                  //mov ax, si
    _ax &= 0xff00;                              //and ax, 0FF00h
    _ax >>= _cl;                                //shr ax, cl
    _di = _ax;                                  //mov di, ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _dx = memory16(_ss, _bp + var_4);           //mov dx, [bp+var_4]
    _dx |= _di;                                 //or dx, di
    _bx = _ax;                                  //mov bx, ax
    memory16(_ds, _bx + 1400) = _dx;            //mov [bx+578h], dx
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_1068C:                                      //loc_1068C:
    if (memory(_ss, _bp + var_1) < 0x10)        //jb short loc_10652
        goto loc_10652;
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void loc_106A4()
{
    _ax = 0x0001;                               //mov ax, 1
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_106B5
        goto loc_106B5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_106B5:                                      //loc_106B5:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx) = 0x0000;                //mov word ptr es:[bx], 0
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0014;            //mov word ptr es:[bx+8], 14h
    _ax = memory16(_ds, 0x6C32);                //mov ax, word_26FE2
    _dx = memory16(_ds, 0x6C30);                //mov dx, word_26FE0
    memory16(_es, _bx + 16) = _dx;              //mov es:[bx+10h], dx
    memory16(_es, _bx + 18) = _ax;              //mov es:[bx+12h], ax
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0014;           //mov word ptr es:[bx+18h], 14h
    memory16(_es, _bx + 26) = 0x0001;           //mov word ptr es:[bx+1Ah], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
    _al = 0x14;                                 //mov al, 14h
    _push(_ax);                                 //push ax
    _al = 0x03;                                 //mov al, 3
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x0606;                               //mov ax, 606h
    _push(_ax);                                 //push ax
    sub_107AD();                                //call sub_107AD
    _sp += 0x0008;                              //add sp, 8
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    goto loc_10734;                             //jmp short loc_10734
loc_10731:                                      //loc_10731:
    sub_11DDE();                                //call sub_11DDE
loc_10734:                                      //loc_10734:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_10731
        goto loc_10731;
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _ax = memory16(_ds, 0x6C32);                //mov ax, word_26FE2
    _dx = memory16(_ds, 0x6C30);                //mov dx, word_26FE0
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0001;           //mov word ptr es:[bx+0Ch], 1
    memory16(_es, _bx + 14) = 0x0000;           //mov word ptr es:[bx+0Eh], 0
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0014;           //mov word ptr es:[bx+16h], 14h
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    goto loc_107A4;                             //jmp short loc_107A4
loc_1079C:                                      //loc_1079C:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    sub_11DDE();                                //call sub_11DDE
loc_107A4:                                      //loc_107A4:
    if (memory(_ds, 0x8244) != 0x00)            //jnz short loc_1079C
        goto loc_1079C;
    _bp = _pop();                               //pop bp
}

void sub_107AD()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = byte ptr  8
    const int arg_6 = 10;                       //arg_6  = byte ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_107BB
        goto loc_107BB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_107BB:                                      //loc_107BB:
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _di = _ax;                                  //mov di, ax
    _al = memory(_ss, _bp + arg_6);             //mov al, [bp+arg_6]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x0007;                              //add ax, 7
    _si = _ax;                                  //mov si, ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    sub_19837();                                //call sub_19837
    _sp += 0x0004;                              //add sp, 4
    _push(_FIXME_);                             //push [bp+arg_2]
    _push(_FIXME_);                             //push [bp+arg_0]
    sub_19804();                                //call sub_19804
    _sp += 0x0004;                              //add sp, 4
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_107F0()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_107FC
        goto loc_107FC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_107FC:                                      //loc_107FC:
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_FIXME_);                             //push [bp+arg_4]
    sub_19837();                                //call sub_19837
    _sp += 0x0004;                              //add sp, 4
    _push(_FIXME_);                             //push [bp+arg_2]
    _push(_FIXME_);                             //push [bp+arg_0]
    sub_19804();                                //call sub_19804
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_10816()
{
    const int var_B = -11;                      //var_B  = byte ptr -0Bh
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = byte ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000c;                              //sub sp, 0Ch
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10825
        goto loc_10825;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10825:                                      //loc_10825:
    if (_FIXME_ <= 0x07)                        //jbe short loc_1082E
        goto loc_1082E;
    goto loc_108BC;                             //jmp loc_108BC
loc_1082E:                                      //loc_1082E:
    memory(_ss, _bp + var_B) = 0x00;            //mov [bp+var_B], 0
    goto loc_10847;                             //jmp short loc_10847
loc_10834:                                      //loc_10834:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    memory(_ss, _bp + var_B) += 1;              //inc [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = 0x20;                    //mov byte ptr ss:[bx], 20h
loc_10847:                                      //loc_10847:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    if (_al <= memory(_ss, _bp + arg_4))        //jbe short loc_10834
        goto loc_10834;
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = 0x00;                    //mov byte ptr ss:[bx], 0
    goto loc_108A6;                             //jmp short loc_108A6
loc_10861:                                      //loc_10861:
    _al = memory(_ss, _bp + arg_0);             //mov al, byte ptr [bp+arg_0]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x000a;                               //mov dx, 0Ah
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_FIXME_);                             //push [bp+arg_2]
    _push(_FIXME_);                             //push [bp+arg_0]
    _STOP_("call near ptr N_LUDIV@");           //call near ptr N_LUDIV@
    memory16(_ss, _bp + arg_0) = _ax;           //mov [bp+arg_0], ax
    _bx = _ax;                                  //mov bx, ax
    memory16(_ss, _bp + arg_2) = _dx;           //mov [bp+arg_2], dx
    _cx = _dx;                                  //mov cx, dx
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = 0x000a;                               //mov ax, 0Ah
    _STOP_("call N_LXMUL@");                    //call N_LXMUL@
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dl -= _al;                                 //sub dl, al
    memory(_ss, _bp + var_1) = _dl;             //mov [bp+var_1], dl
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dl += 0x30;                                //add dl, 30h
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = _dl;                     //mov ss:[bx], dl
loc_108A6:                                      //loc_108A6:
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _FIXME_ -= 1;                               //dec [bp+arg_4]
    _FIXME_;                                    //or al, al
    _al |= _al;
    if (!_flags.carry && (_al != 0))            //ja short loc_10861
        goto loc_10861;
    _push(_FIXME_);                             //push [bp+arg_8]
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_A);                //lea ax, [bp+var_A]
    goto loc_108C6;                             //jmp short loc_108C6
loc_108BC:                                      //loc_108BC:
    _push(_FIXME_);                             //push [bp+arg_8]
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_ds);                                 //push ds
    _ax = 0x062e;                               //mov ax, 62Eh
loc_108C6:                                      //loc_108C6:
    _push(_ax);                                 //push ax
    sub_107F0();                                //call sub_107F0
    _sp += 0x0008;                              //add sp, 8
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_10816 endp_failed
    _STOP_("continues");                        //sub_108D1 proc near
}

void sub_108D1()
{
    const int var_9 = -9;                       //var_9  = byte ptr -9
    const int var_8 = -8;                       //var_8  = byte ptr -8
    const int var_7 = -7;                       //var_7  = byte ptr -7
    const int var_6 = -6;                       //var_6  = byte ptr -6
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = dword ptr -4
    const int arg_0 = 4;                        //arg_0  = dword ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000a;                              //sub sp, 0Ah
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_108E1
        goto loc_108E1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_108E1:                                      //loc_108E1:
    memory16(_ss, _bp + var_4) = _FIXME_;       //mov word ptr [bp+var_4], offset unk_26FF2
    memory16(_ss, _bp + var_4 + 2) = _ds;       //mov word ptr [bp+var_4+2], ds
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_10926
        goto loc_10926;
    memory16(_ds, 0x9B96) = _FIXME_;            //mov word ptr dword_29F46, offset unk_26FF2
    memory16(_ds, 0x9B98) = _ds;                //mov word ptr dword_29F46+2, ds
    memory(_ss, _bp + var_6) = 0x00;            //mov [bp+var_6], 0
    goto loc_1091D;                             //jmp short loc_1091D
loc_10900:                                      //loc_10900:
    _al = memory(_ss, _bp + var_6);             //mov al, [bp+var_6]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_6);             //mov al, [bp+var_6]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _al = memory(_ds, _si + 1806);              //mov al, [si+70Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_6) += 1;              //inc [bp+var_6]
loc_1091D:                                      //loc_1091D:
    if (memory(_ss, _bp + var_6) < 0x10)        //jb short loc_10900
        goto loc_10900;
    goto loc_109E9;                             //jmp loc_109E9
loc_10926:                                      //loc_10926:
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    goto loc_109E0;                             //jmp loc_109E0
loc_1092D:                                      //loc_1092D:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ss, _bp + arg_0);                //les bx, [bp+arg_0]
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    _cl = 0x08;                                 //mov cl, 8
    _ax >>= _cl;                                //shr ax, cl
    memory(_ss, _bp + var_7) = _al;             //mov [bp+var_7], al
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = memory16(_ss, _bp + arg_0);           //mov bx, word ptr [bp+arg_0]
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    _dl = memory(_ds, 0x75EB);                  //mov dl, byte_2799B
    _dh = 0x00;                                 //mov dh, 0
    _dx <<= _cl;                                //shl dx, cl
    _ax -= _dx;                                 //sub ax, dx
    _cl = 0x04;                                 //mov cl, 4
    _ax >>= _cl;                                //shr ax, cl
    memory(_ss, _bp + var_8) = _al;             //mov [bp+var_8], al
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = memory16(_ss, _bp + arg_0);           //mov bx, word ptr [bp+arg_0]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _dl = memory(_ds, 0x75EB);                  //mov dl, byte_2799B
    _cl = 0x08;                                 //mov cl, 8
    _dl <<= _cl;                                //shl dl, cl
    _bl = memory(_ds, 0x75EC);                  //mov bl, byte_2799C
    _cl = 0x04;                                 //mov cl, 4
    _bl <<= _cl;                                //shl bl, cl
    _dl += _bl;                                 //add dl, bl
    _al -= _dl;                                 //sub al, dl
    memory(_ss, _bp + var_9) = _al;             //mov [bp+var_9], al
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0003;                               //mov dx, 3
    _imul(_dx);                                 //imul dx
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_7);             //mov al, [bp+var_7]
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    memory(_es, _bx + 51) = _al;                //mov es:[bx+33h], al
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0003;                               //mov dx, 3
    _imul(_dx);                                 //imul dx
    _bx = memory16(_ss, _bp + var_4);           //mov bx, word ptr [bp+var_4]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_8);             //mov al, [bp+var_8]
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    memory(_es, _bx + 52) = _al;                //mov es:[bx+34h], al
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0003;                               //mov dx, 3
    _imul(_dx);                                 //imul dx
    _bx = memory16(_ss, _bp + var_4);           //mov bx, word ptr [bp+var_4]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    memory(_es, _bx + 53) = _al;                //mov es:[bx+35h], al
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
loc_109E0:                                      //loc_109E0:
    if (memory(_ss, _bp + var_5) >= 0x10)       //jnb short loc_109E9
        goto loc_109E9;
    goto loc_1092D;                             //jmp loc_1092D
loc_109E9:                                      //loc_109E9:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x6c42;                               //mov ax, 6C42h
    _push(_ax);                                 //push ax
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_10A07()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10A14
        goto loc_10A14;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10A14:                                      //loc_10A14:
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xC0));                 //push word_20470
    _push(memory16(_ds, 0xBE));                 //push word_2046E
    _push(memory16(_ds, 0x75DC));               //push word_2798C
    _push(memory16(_ds, 0x75DA));               //push word_2798A
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0x75DC));               //push word_2798C
    _push(memory16(_ds, 0x75DA));               //push word_2798A
    sub_197D5();                                //call sub_197D5
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0009;                               //mov ax, 9
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xF2));                 //push word_204A2
    _push(memory16(_ds, 0xF0));                 //push word_204A0
    _push(memory16(_ds, 0x6C2E));               //push word_26FDE
    _push(memory16(_ds, 0x6C2C));               //push word_26FDC
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0x6C2E));               //push word_26FDE
    _push(memory16(_ds, 0x6C2C));               //push word_26FDC
    sub_193D8();                                //call sub_193D8
    _sp += 0x0004;                              //add sp, 4
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_10A90()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10AA0
        goto loc_10AA0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10AA0:                                      //loc_10AA0:
    _ax = memory16(_ds, 0x6FA8);                //mov ax, word_27358
    _dx = memory16(_ds, 0x6FA6);                //mov dx, word_27356
    _dx += 0x0006;                              //add dx, 6
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0018;           //mov word ptr es:[bx+0Ch], 18h
    _ax = memory16(_ss, _bp + arg_6);           //mov ax, [bp+arg_6]
    memory16(_es, _bx + 14) = _ax;              //mov es:[bx+0Eh], ax
    memory16(_es, _bx + 28) = 0x0006;           //mov word ptr es:[bx+1Ch], 6
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    if (_FIXME_ != 0x0018)                      //jnz short loc_10AE3
        goto loc_10AE3;
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    goto loc_10AED;                             //jmp short loc_10AED
loc_10AE3:                                      //loc_10AE3:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
loc_10AED:                                      //loc_10AED:
    if (_FIXME_ <= 0xf0)                        //jbe short loc_10B01
        goto loc_10B01;
    memory(_ss, _bp + var_2) = 0x01;            //mov [bp+var_2], 1
    _al = 0xfb;                                 //mov al, 0FBh
    _al = _al - memory(_ss, _bp + arg_0);       //sub al, [bp+arg_0]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_10B7A;                             //jmp short loc_10B7A
loc_10B01:                                      //loc_10B01:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    memory(_ss, _bp + var_1) = 0x01;            //mov [bp+var_1], 1
    goto loc_10B7A;                             //jmp short loc_10B7A
loc_10B0B:                                      //loc_10B0B:
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    _dx = 0x0027;                               //mov dx, 27h
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x6BCA);                     //les bx, dword_26F7A
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    _sar(_ax, 1);                               //sar ax, 1
    _dx = 0x0003;                               //mov dx, 3
    _imul(_dx);                                 //imul dx
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 32);                //mov al, es:[bx+20h]
    _al += 0xff;                                //add al, 0FFh
    memory(_ss, _bp + arg_0) = _al;             //mov [bp+arg_0], al
    _ah = 0x00;                                 //mov ah, 0
    _bx = 0x0014;                               //mov bx, 14h
    _cwd();                                     //cwd
    _idiv(_bx);                                 //idiv bx
    _ax <<= 1;                                  //shl ax, 1
    _si = _ax;                                  //mov si, ax
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _dl = memory(_ss, _bp + arg_0);             //mov dl, [bp+arg_0]
    _dh = 0x00;                                 //mov dh, 0
    _dx -= _ax;                                 //sub dx, ax
    _di = _dx;                                  //mov di, dx
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 6) = _di;               //mov es:[bx+6], di
    memory16(_es, _bx + 8) = _si;               //mov es:[bx+8], si
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_10B7A:                                      //loc_10B7A:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    if (_al < memory(_ss, _bp + var_1))         //jb short loc_10B0B
        goto loc_10B0B;
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_10B88()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10B94
        goto loc_10B94;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10B94:                                      //loc_10B94:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_es, _bx + 14) = _ax;              //mov es:[bx+0Eh], ax
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    if (_FIXME_ != 0x0018)                      //jnz short loc_10BC7
        goto loc_10BC7;
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    goto loc_10BD1;                             //jmp short loc_10BD1
loc_10BC7:                                      //loc_10BC7:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
loc_10BD1:                                      //loc_10BD1:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory(_es, _bx + 34) = 0x00;               //mov byte ptr es:[bx+22h], 0
    memory(_es, _bx + 35) = 0x00;               //mov byte ptr es:[bx+23h], 0
    memory(_es, _bx + 36) = 0x00;               //mov byte ptr es:[bx+24h], 0
    memory(_es, _bx + 37) = 0x00;               //mov byte ptr es:[bx+25h], 0
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_10BF9()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10C05
        goto loc_10C05;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10C05:                                      //loc_10C05:
    sub_132B0();                                //call sub_132B0
    sub_12A78();                                //call sub_12A78
    sub_131DE();                                //call sub_131DE
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x9D30) = _al;                  //mov byte_2A0E0, al
    memory(_ds, 0x856D) = _al;                  //mov byte_2891D, al
    _bp = _pop();                               //pop bp
}

void sub_10C18()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10C26
        goto loc_10C26;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10C26:                                      //loc_10C26:
    sub_133C5();                                //call sub_133C5
    sub_12EF8();                                //call sub_12EF8
loc_10C2C:                                      //loc_10C2C:
    memory(_ds, 0x928D) = 0x00;                 //mov byte_2963D, 0
    memory(_ds, 0x791A) = 0x05;                 //mov byte_27CCA, 5
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x79B5) = _al;                  //mov byte_27D65, al
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ds, 0xA0D4) = _ax;                //mov word_2A484, ax
    memory16(_ds, 0xA0D6) = 0x0000;             //mov word_2A486, 0
    goto loc_10C56;                             //jmp short loc_10C56
loc_10C48:                                      //loc_10C48:
    if (memory(_ss, _bp + var_1) != 0x01)       //jnz short loc_10C53
        goto loc_10C53;
    sub_15681();                                //call sub_15681
    goto loc_10C56;                             //jmp short loc_10C56
loc_10C53:                                      //loc_10C53:
    sub_10F7A();                                //call sub_10F7A
loc_10C56:                                      //loc_10C56:
    sub_135A5();                                //call sub_135A5
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_10C48
        goto loc_10C48;
    goto loc_10D8A;                             //jmp loc_10D8A
loc_10C63:                                      //loc_10C63:
    sub_13852();                                //call sub_13852
    if (memory(_ds, 0x928D) != 0xff)            //jnz short loc_10C72
        goto loc_10C72;
    sub_111EB();                                //call sub_111EB
    goto loc_10C2C;                             //jmp short loc_10C2C
loc_10C72:                                      //loc_10C72:
    _al = memory(_ds, 0x854E);                  //mov al, byte_288FE
    _ah = 0x00;                                 //mov ah, 0
    _ax -= 1;                                   //dec ax
    memory16(_ds, 0x7310) = _ax;                //mov word_276C0, ax
    sub_13467();                                //call sub_13467
    sub_10BF9();                                //call sub_10BF9
    _al = memory(_ds, 0x8562);                  //mov al, byte_28912
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_15181();                                //call sub_15181
    _sp += 0x0004;                              //add sp, 4
    sub_11CB2();                                //call sub_11CB2
    sub_11CEA();                                //call sub_11CEA
    sub_10604();                                //call sub_10604
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1328F();                                //call sub_1328F
    sub_11473();                                //call sub_11473
    sub_14B4E();                                //call sub_14B4E
    sub_1138C();                                //call sub_1138C
    sub_113B2();                                //call sub_113B2
    sub_11BD7();                                //call sub_11BD7
    sub_11C41();                                //call sub_11C41
    sub_1138C();                                //call sub_1138C
    sub_113B2();                                //call sub_113B2
    sub_119A1();                                //call sub_119A1
    sub_119E4();                                //call sub_119E4
    sub_11473();                                //call sub_11473
    sub_14B4E();                                //call sub_14B4E
    goto loc_10D49;                             //jmp short loc_10D49
loc_10CDA:                                      //loc_10CDA:
    sub_193B1();                                //call sub_193B1
    memory(_ds, 0x79B3) = _al;                  //mov byte_27D63, al
    sub_1138C();                                //call sub_1138C
    sub_113B2();                                //call sub_113B2
    sub_113DF();                                //call sub_113DF
    sub_14C14();                                //call sub_14C14
    sub_11473();                                //call sub_11473
    sub_14B4E();                                //call sub_14B4E
    sub_114E4();                                //call sub_114E4
    sub_115A1();                                //call sub_115A1
    sub_119A1();                                //call sub_119A1
    sub_119E4();                                //call sub_119E4
    sub_11A20();                                //call sub_11A20
    sub_1165E();                                //call sub_1165E
    sub_117C7();                                //call sub_117C7
    sub_15085();                                //call sub_15085
    sub_150C0();                                //call sub_150C0
    sub_11A67();                                //call sub_11A67
    sub_11B2B();                                //call sub_11B2B
    sub_11BD7();                                //call sub_11BD7
    sub_11C41();                                //call sub_11C41
    sub_11CB2();                                //call sub_11CB2
    sub_11CEA();                                //call sub_11CEA
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_11349();                                //call sub_11349
    sub_1629C();                                //call sub_1629C
    sub_11D26();                                //call sub_11D26
    sub_14C99();                                //call sub_14C99
    sub_150FB();                                //call sub_150FB
    sub_1233A();                                //call sub_1233A
    _al = 0x19;                                 //mov al, 19h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_10D49
        goto loc_10D49;
    sub_149D7();                                //call sub_149D7
loc_10D49:                                      //loc_10D49:
    if (memory(_ds, 0x928D) != 0x00)            //jnz short loc_10D61
        goto loc_10D61;
    if (memory(_ds, 0x856D) != 0x00)            //jnz short loc_10D61
        goto loc_10D61;
    if (memory(_ds, 0x9D30) != 0x00)            //jnz short loc_10D61
        goto loc_10D61;
    goto loc_10CDA;                             //jmp loc_10CDA
loc_10D61:                                      //loc_10D61:
    if (memory(_ds, 0x928D) != 0xff)            //jnz short loc_10D70
        goto loc_10D70;
    sub_111EB();                                //call sub_111EB
    sub_15681();                                //call sub_15681
    goto loc_10D8D;                             //jmp short loc_10D8D
loc_10D70:                                      //loc_10D70:
    sub_13E8A();                                //call sub_13E8A
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_10D8D
        goto loc_10D8D;
    memory(_ds, 0x79B2) += 1;                   //inc byte_27D62
    if (memory(_ds, 0x79B2) != 0x0a)            //jnz short loc_10D87
        goto loc_10D87;
    sub_13ED4();                                //call sub_13ED4
    goto loc_10D8D;                             //jmp short loc_10D8D
loc_10D87:                                      //loc_10D87:
    sub_10D9D();                                //call sub_10D9D
loc_10D8A:                                      //loc_10D8A:
    sub_12D14();                                //call sub_12D14
loc_10D8D:                                      //loc_10D8D:
    _al = memory(_ds, 0x928D);                  //mov al, byte_2963D
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_10D99
        goto loc_10D99;
    goto loc_10C63;                             //jmp loc_10C63
loc_10D99:                                      //loc_10D99:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_10D9D()
{
    const int var_D = -13;                      //var_D  = byte ptr -0Dh
    const int var_C = -12;                      //var_C  = byte ptr -0Ch
    const int var_B = -11;                      //var_B  = byte ptr -0Bh
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_9 = -9;                       //var_9  = byte ptr -9
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000e;                              //sub sp, 0Eh
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10DAE
        goto loc_10DAE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10DAE:                                      //loc_10DAE:
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_4);                //lea ax, [bp+var_4]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x119e;                               //mov ax, 119Eh
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x857E) = _dx;                //mov word_2892E, dx
    memory16(_ds, 0x8580) = _ax;                //mov word_28930, ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _dx = 0x0063;                               //mov dx, 63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_10E4A
        goto loc_10E4A;
    _ax = memory16(_ds, 0x8580);                //mov ax, word_28930
    _dx = memory16(_ds, 0x857E);                //mov dx, word_2892E
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_D) = 0x00;            //mov [bp+var_D], 0
    goto loc_10E44;                             //jmp short loc_10E44
loc_10E27:                                      //loc_10E27:
    _al = memory(_ss, _bp + var_D);             //mov al, [bp+var_D]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_D);             //mov al, [bp+var_D]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1822);              //mov al, [di+71Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_D) += 1;              //inc [bp+var_D]
loc_10E44:                                      //loc_10E44:
    if (memory(_ss, _bp + var_D) < 0x10)        //jb short loc_10E27
        goto loc_10E27;
loc_10E4A:                                      //loc_10E4A:
    sub_13467();                                //call sub_13467
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    memory(_ss, _bp + var_9) = 0x04;            //mov [bp+var_9], 4
    memory(_ss, _bp + var_A) = 0x05;            //mov [bp+var_A], 5
    _ax = memory16(_ss, _bp + var_2);           //mov ax, [bp+var_2]
    _dx = memory16(_ss, _bp + var_4);           //mov dx, [bp+var_4]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_C) = 0x00;            //mov [bp+var_C], 0
    goto loc_10ED4;                             //jmp short loc_10ED4
loc_10E94:                                      //loc_10E94:
    _al = memory(_ss, _bp + var_C);             //mov al, [bp+var_C]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_B) = _al;             //mov [bp+var_B], al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    if (memory(_ss, _bp + var_B) == 0x20)       //jz short loc_10ECE
        goto loc_10ECE;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_10ECE:                                      //loc_10ECE:
    memory(_ss, _bp + var_9) += 1;              //inc [bp+var_9]
    memory(_ss, _bp + var_C) += 1;              //inc [bp+var_C]
loc_10ED4:                                      //loc_10ED4:
    if (memory(_ss, _bp + var_C) < 0x0d)        //jb short loc_10E94
        goto loc_10E94;
    memory(_ss, _bp + var_9) = 0x07;            //mov [bp+var_9], 7
    memory(_ss, _bp + var_A) = 0x07;            //mov [bp+var_A], 7
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 4950);            //mov ax, [bx+1356h]
    _dx = memory16(_ds, _bx + 4948);            //mov dx, [bx+1354h]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_C) = 0x00;            //mov [bp+var_C], 0
    goto loc_10F4C;                             //jmp short loc_10F4C
loc_10F12:                                      //loc_10F12:
    _al = memory(_ss, _bp + var_C);             //mov al, [bp+var_C]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_B) = _al;             //mov [bp+var_B], al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_9) += 1;              //inc [bp+var_9]
    memory(_ss, _bp + var_C) += 1;              //inc [bp+var_C]
loc_10F4C:                                      //loc_10F4C:
    if (memory(_ss, _bp + var_C) < 0x06)        //jb short loc_10F12
        goto loc_10F12;
loc_10F52:                                      //loc_10F52:
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _cbw();                                     //cbw
    if (!(_ax & 0x0010))                        //jz short loc_10F52
        goto loc_10F52;
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(_ds);                                 //push ds
    _ax = 0x0090;                               //mov ax, 90h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_10D9D endp_failed
    _STOP_("continues");                        //sub_10F7A proc near
}

void sub_10F7A()
{
    const int var_16 = -22;                     //var_16  = byte ptr -16h
    const int var_15 = -21;                     //var_15  = byte ptr -15h
    const int var_14 = -20;                     //var_14  = byte ptr -14h
    const int var_13 = -19;                     //var_13  = byte ptr -13h
    const int var_12 = -18;                     //var_12  = byte ptr -12h
    const int var_11 = -17;                     //var_11  = byte ptr -11h
    const int var_10 = -16;                     //var_10  = dword ptr -10h
    const int var_C = -12;                      //var_C  = word ptr -0Ch
    const int var_A = -10;                      //var_A  = word ptr -0Ah
    const int var_8 = -8;                       //var_8  = word ptr -8
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0016;                              //sub sp, 16h
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_10F8B
        goto loc_10F8B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_10F8B:                                      //loc_10F8B:
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_4);                //lea ax, [bp+var_4]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11a2;                               //mov ax, 11A2h
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_8);                //lea ax, [bp+var_8]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11a6;                               //mov ax, 11A6h
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_C);                //lea ax, [bp+var_C]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11aa;                               //mov ax, 11AAh
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x857E) = _dx;                //mov word_2892E, dx
    memory16(_ds, 0x8580) = _ax;                //mov word_28930, ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _dx = 0x0063;                               //mov dx, 63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_11047
        goto loc_11047;
    _ax = memory16(_ds, 0x8580);                //mov ax, word_28930
    _dx = memory16(_ds, 0x857E);                //mov dx, word_2892E
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_16) = 0x00;           //mov [bp+var_16], 0
    goto loc_11041;                             //jmp short loc_11041
loc_11024:                                      //loc_11024:
    _al = memory(_ss, _bp + var_16);            //mov al, [bp+var_16]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_16);            //mov al, [bp+var_16]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1822);              //mov al, [di+71Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_16) += 1;             //inc [bp+var_16]
loc_11041:                                      //loc_11041:
    if (memory(_ss, _bp + var_16) < 0x10)       //jb short loc_11024
        goto loc_11024;
loc_11047:                                      //loc_11047:
    sub_13467();                                //call sub_13467
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    memory(_ss, _bp + var_11) = 0x00;           //mov [bp+var_11], 0
    memory(_ss, _bp + var_12) = 0x01;           //mov [bp+var_12], 1
    _ax = memory16(_ss, _bp + var_2);           //mov ax, [bp+var_2]
    _dx = memory16(_ss, _bp + var_4);           //mov dx, [bp+var_4]
    memory16(_ss, _bp + var_10) = _dx;          //mov word ptr [bp+var_10], dx
    memory16(_ss, _bp + var_10 + 2) = _ax;      //mov word ptr [bp+var_10+2], ax
    _al = memory(_ss, _bp + var_12);            //mov al, [bp+var_12]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_14) = 0x00;           //mov [bp+var_14], 0
    goto loc_110D1;                             //jmp short loc_110D1
loc_11091:                                      //loc_11091:
    _al = memory(_ss, _bp + var_14);            //mov al, [bp+var_14]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_13) = _al;            //mov [bp+var_13], al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_11);            //mov al, [bp+var_11]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    if (memory(_ss, _bp + var_13) == 0x20)      //jz short loc_110CB
        goto loc_110CB;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_110CB:                                      //loc_110CB:
    memory(_ss, _bp + var_11) += 1;             //inc [bp+var_11]
    memory(_ss, _bp + var_14) += 1;             //inc [bp+var_14]
loc_110D1:                                      //loc_110D1:
    if (memory(_ss, _bp + var_14) < 0x13)       //jb short loc_11091
        goto loc_11091;
    memory(_ss, _bp + var_11) = 0x07;           //mov [bp+var_11], 7
    memory(_ss, _bp + var_12) = 0x0a;           //mov [bp+var_12], 0Ah
    _al = memory(_ss, _bp + var_12);            //mov al, [bp+var_12]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_14) = 0x00;           //mov [bp+var_14], 0
    goto loc_11127;                             //jmp short loc_11127
loc_110F6:                                      //loc_110F6:
    memory(_ss, _bp + var_13) = 0x41;           //mov [bp+var_13], 41h
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _al = memory(_ss, _bp + var_13);            //mov al, [bp+var_13]
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_11);            //mov al, [bp+var_11]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_11) += 1;             //inc [bp+var_11]
    memory(_ss, _bp + var_14) += 1;             //inc [bp+var_14]
loc_11127:                                      //loc_11127:
    if (memory(_ss, _bp + var_14) < 0x06)       //jb short loc_110F6
        goto loc_110F6;
    _al = 0x07;                                 //mov al, 7
    _push(_ax);                                 //push ax
    _al = 0x0a;                                 //mov al, 0Ah
    _push(_ax);                                 //push ax
    sub_15C87();                                //call sub_15C87
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_15) = _al;            //mov [bp+var_15], al
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11154
        goto loc_11154;
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _dx = memory16(_ss, _bp + var_8);           //mov dx, [bp+var_8]
    memory16(_ss, _bp + var_10) = _dx;          //mov word ptr [bp+var_10], dx
    memory16(_ss, _bp + var_10 + 2) = _ax;      //mov word ptr [bp+var_10+2], ax
    _al = memory(_ss, _bp + var_15);            //mov al, [bp+var_15]
    memory(_ds, 0x79B2) = _al;                  //mov byte_27D62, al
    goto loc_11165;                             //jmp short loc_11165
loc_11154:                                      //loc_11154:
    _ax = memory16(_ss, _bp + var_A);           //mov ax, [bp+var_A]
    _dx = memory16(_ss, _bp + var_C);           //mov dx, [bp+var_C]
    memory16(_ss, _bp + var_10) = _dx;          //mov word ptr [bp+var_10], dx
    memory16(_ss, _bp + var_10 + 2) = _ax;      //mov word ptr [bp+var_10+2], ax
    memory(_ds, 0x79B2) = 0x01;                 //mov byte_27D62, 1
loc_11165:                                      //loc_11165:
    memory(_ss, _bp + var_11) = 0x03;           //mov [bp+var_11], 3
    memory(_ss, _bp + var_12) = 0x06;           //mov [bp+var_12], 6
    _al = memory(_ss, _bp + var_12);            //mov al, [bp+var_12]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_14) = 0x00;           //mov [bp+var_14], 0
    goto loc_111C4;                             //jmp short loc_111C4
loc_11184:                                      //loc_11184:
    _al = memory(_ss, _bp + var_14);            //mov al, [bp+var_14]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_13) = _al;            //mov [bp+var_13], al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_11);            //mov al, [bp+var_11]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    if (memory(_ss, _bp + var_13) == 0x20)      //jz short loc_111BE
        goto loc_111BE;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_111BE:                                      //loc_111BE:
    memory(_ss, _bp + var_11) += 1;             //inc [bp+var_11]
    memory(_ss, _bp + var_14) += 1;             //inc [bp+var_14]
loc_111C4:                                      //loc_111C4:
    if (memory(_ss, _bp + var_14) < 0x0e)       //jb short loc_11184
        goto loc_11184;
    memory(_ss, _bp + var_14) = 0x00;           //mov [bp+var_14], 0
    goto loc_111D6;                             //jmp short loc_111D6
loc_111D0:                                      //loc_111D0:
    sub_13E74();                                //call sub_13E74
    memory(_ss, _bp + var_14) += 1;             //inc [bp+var_14]
loc_111D6:                                      //loc_111D6:
    if (memory(_ss, _bp + var_14) < 0x03)       //jb short loc_111D0
        goto loc_111D0;
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_10F7A endp_failed
    _STOP_("continues");                        //sub_111EB proc near
}

void sub_111EB()
{
    const int var_D = -13;                      //var_D  = byte ptr -0Dh
    const int var_C = -12;                      //var_C  = byte ptr -0Ch
    const int var_B = -11;                      //var_B  = byte ptr -0Bh
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_9 = -9;                       //var_9  = byte ptr -9
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000e;                              //sub sp, 0Eh
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_111FC
        goto loc_111FC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_111FC:                                      //loc_111FC:
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_4);                //lea ax, [bp+var_4]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11ae;                               //mov ax, 11AEh
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x857E) = _dx;                //mov word_2892E, dx
    memory16(_ds, 0x8580) = _ax;                //mov word_28930, ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _dx = 0x0063;                               //mov dx, 63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_11298
        goto loc_11298;
    _ax = memory16(_ds, 0x8580);                //mov ax, word_28930
    _dx = memory16(_ds, 0x857E);                //mov dx, word_2892E
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_D) = 0x00;            //mov [bp+var_D], 0
    goto loc_11292;                             //jmp short loc_11292
loc_11275:                                      //loc_11275:
    _al = memory(_ss, _bp + var_D);             //mov al, [bp+var_D]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_D);             //mov al, [bp+var_D]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1822);              //mov al, [di+71Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_D) += 1;              //inc [bp+var_D]
loc_11292:                                      //loc_11292:
    if (memory(_ss, _bp + var_D) < 0x10)        //jb short loc_11275
        goto loc_11275;
loc_11298:                                      //loc_11298:
    sub_13467();                                //call sub_13467
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    _al = 0x06;                                 //mov al, 6
    memory(_ss, _bp + var_A) = _al;             //mov [bp+var_A], al
    memory(_ss, _bp + var_9) = _al;             //mov [bp+var_9], al
    _ax = memory16(_ss, _bp + var_2);           //mov ax, [bp+var_2]
    _dx = memory16(_ss, _bp + var_4);           //mov dx, [bp+var_4]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_C) = 0x00;            //mov [bp+var_C], 0
    goto loc_11322;                             //jmp short loc_11322
loc_112E2:                                      //loc_112E2:
    _al = memory(_ss, _bp + var_C);             //mov al, [bp+var_C]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_B) = _al;             //mov [bp+var_B], al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    if (memory(_ss, _bp + var_B) == 0x20)       //jz short loc_1131C
        goto loc_1131C;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_1131C:                                      //loc_1131C:
    memory(_ss, _bp + var_9) += 1;              //inc [bp+var_9]
    memory(_ss, _bp + var_C) += 1;              //inc [bp+var_C]
loc_11322:                                      //loc_11322:
    if (memory(_ss, _bp + var_C) < 0x09)        //jb short loc_112E2
        goto loc_112E2;
    memory(_ss, _bp + var_C) = 0x00;            //mov [bp+var_C], 0
    goto loc_11334;                             //jmp short loc_11334
loc_1132E:                                      //loc_1132E:
    sub_13E74();                                //call sub_13E74
    memory(_ss, _bp + var_C) += 1;              //inc [bp+var_C]
loc_11334:                                      //loc_11334:
    if (memory(_ss, _bp + var_C) < 0x02)        //jb short loc_1132E
        goto loc_1132E;
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_111EB endp_failed
    _STOP_("continues");                        //sub_11349 proc near
}

void sub_11349()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11357
        goto loc_11357;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11357:                                      //loc_11357:
    memory(_ss, _bp + var_2) = 0x01;            //mov [bp+var_2], 1
    if (!(memory(_ds, 0x854F) & 0x01))          //jz short loc_11366
        goto loc_11366;
    _al = 0x80;                                 //mov al, 80h
    goto loc_11368;                             //jmp short loc_11368
loc_11366:                                      //loc_11366:
    _al = 0x00;                                 //mov al, 0
loc_11368:                                      //loc_11368:
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11372
        goto loc_11372;
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_11372:                                      //loc_11372:
    _al = memory(_ds, 0x854F);                  //mov al, byte_288FF
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _al = _al | memory(_ss, _bp + var_1);       //or al, [bp+var_1]
    memory(_ds, 0x854F) = _al;                  //mov byte_288FF, al
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_1138C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11398
        goto loc_11398;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11398:                                      //loc_11398:
    _ax = memory16(_ds, 0x857A);                //mov ax, word_2892A
    memory16(_ds, 0x8882) = _ax;                //mov word_28C32, ax
    _ax = memory16(_ds, 0x857C);                //mov ax, word_2892C
    memory16(_ds, 0x8E88) = _ax;                //mov word_29238, ax
    _ax = memory16(_ds, 0x9D36);                //mov ax, word_2A0E6
    memory16(_ds, 0x857A) = _ax;                //mov word_2892A, ax
    _ax = memory16(_ds, 0x9D38);                //mov ax, word_2A0E8
    memory16(_ds, 0x857C) = _ax;                //mov word_2892C, ax
    _bp = _pop();                               //pop bp
}

void sub_113B2()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_113BE
        goto loc_113BE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_113BE:                                      //loc_113BE:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_113DD
        goto loc_113DD;
    _ax = memory16(_ds, 0x8558);                //mov ax, word_28908
    memory16(_ds, 0x928E) = _ax;                //mov word_2963E, ax
    _ax = memory16(_ds, 0x855A);                //mov ax, word_2890A
    memory16(_ds, 0x9B94) = _ax;                //mov word_29F44, ax
    _ax = memory16(_ds, 0xA0CA);                //mov ax, word_2A47A
    memory16(_ds, 0x8558) = _ax;                //mov word_28908, ax
    _ax = memory16(_ds, 0xA0CC);                //mov ax, word_2A47C
    memory16(_ds, 0x855A) = _ax;                //mov word_2890A, ax
loc_113DD:                                      //loc_113DD:
    _bp = _pop();                               //pop bp
}

void sub_113DF()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_113EB
        goto loc_113EB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_113EB:                                      //loc_113EB:
    _al = memory(_ds, 0x8242);                  //mov al, byte_285F2
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_11471
        goto loc_11471;
    if (memory(_ds, 0x824D) == 0x00)            //jz short loc_11471
        goto loc_11471;
    if (memory(_ds, 0x792C) == 0x05)            //jz short loc_11471
        goto loc_11471;
    if (memory(_ds, 0x792C) == 0x0b)            //jz short loc_11471
        goto loc_11471;
    if (memory(_ds, 0x792C) == 0x1c)            //jz short loc_11471
        goto loc_11471;
    _les(_bx, _ds, 0xA1AC);                     //les bx, dword_2A55C
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    memory16(_ds, 0x824A) = _ax;                //mov word_285FA, ax
    if (memory(_ds, 0x9BAE) == 0x00)            //jz short loc_11435
        goto loc_11435;
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _ax = -_ax;                                 //neg ax
    _dx = memory16(_ds, 0x9290);                //mov dx, word_29640
    _dx += _ax;                                 //add dx, ax
    memory16(_ds, 0x9290) = _dx;                //mov word_29640, dx
    _ax = _dx;                                  //mov ax, dx
    goto loc_11444;                             //jmp short loc_11444
loc_11435:                                      //loc_11435:
    _les(_bx, _ds, 0xA1AC);                     //les bx, dword_2A55C
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    memory16(_ds, 0x9290) += _ax;               //add word_29640, ax
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
loc_11444:                                      //loc_11444:
    _les(_bx, _ds, 0xA1AC);                     //les bx, dword_2A55C
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    memory16(_ds, 0x9292) += _ax;               //add word_29642, ax
    memory16(_ds, 0xA1AC) += 0x0006;            //add word ptr dword_2A55C, 6
    _al = memory(_ds, 0x824D);                  //mov al, byte_285FD
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x824D) = _al;                  //mov byte_285FD, al
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1146A
        goto loc_1146A;
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x792A) = _al;                  //mov byte_27CDA, al
    goto loc_11471;                             //jmp short loc_11471
loc_1146A:                                      //loc_1146A:
    memory(_ds, 0x792A) += 1;                   //inc byte_27CDA
    _al = memory(_ds, 0x792A);                  //mov al, byte_27CDA
loc_11471:                                      //loc_11471:
    _bp = _pop();                               //pop bp
}

void sub_11473()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11481
        goto loc_11481;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11481:                                      //loc_11481:
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _di = memory16(_es, _bx + 20);              //mov di, es:[bx+14h]
    _si = memory16(_es, _bx + 22);              //mov si, es:[bx+16h]
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax -= _di;                                 //sub ax, di
    _cl = 0x04;                                 //mov cl, 4
    _sar(_ax, _cl);                             //sar ax, cl
    _ax -= 1;                                   //dec ax
    memory16(_ds, 0x9D36) = _ax;                //mov word_2A0E6, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax -= _si;                                 //sub ax, si
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0x9D38) = _ax;                //mov word_2A0E8, ax
    if ((short)memory16(_ds, 0x9D36) >= (short)0x0000)
        goto loc_114B7;
    memory16(_ds, 0x9D36) = 0x0000;             //mov word_2A0E6, 0
    goto loc_114C4;                             //jmp short loc_114C4
loc_114B7:                                      //loc_114B7:
    if ((short)memory16(_ds, 0x9D36) <= (short)0x0012)
        goto loc_114C4;
    memory16(_ds, 0x9D36) = 0x0012;             //mov word_2A0E6, 12h
loc_114C4:                                      //loc_114C4:
    if ((short)memory16(_ds, 0x9D38) >= (short)0x0000)
        goto loc_114D3;
    memory16(_ds, 0x9D38) = 0x0000;             //mov word_2A0E8, 0
    goto loc_114E0;                             //jmp short loc_114E0
loc_114D3:                                      //loc_114D3:
    if ((short)memory16(_ds, 0x9D38) <= (short)0x0016)
        goto loc_114E0;
    memory16(_ds, 0x9D38) = 0x0016;             //mov word_2A0E8, 16h
loc_114E0:                                      //loc_114E0:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_114E4()
{
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = dword ptr -4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0008;                              //sub sp, 8
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_114F4
        goto loc_114F4;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_114F4:                                      //loc_114F4:
    memory(_ds, 0x856C) = 0x00;                 //mov byte_2891C, 0
    _cl = 0x00;                                 //mov cl, 0
    goto loc_11594;                             //jmp loc_11594
loc_114FE:                                      //loc_114FE:
    _al = memory(_ds, 0x856C);                  //mov al, byte_2891C
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19570);           //mov ax, [bx+4C72h]
    _dx = memory16(_ds, _bx + 19568);           //mov dx, [bx+4C70h]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    if (memory(_es, _bx) == 0x00)               //jz short loc_1158E
        goto loc_1158E;
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    memory16(_ds, 0xA0BE) = _dx;                //mov word ptr dword_2A46E, dx
    memory16(_ds, 0xA0C0) = _ax;                //mov word ptr dword_2A46E+2, ax
    _les(_bx, _ds, 0xA0BE);                     //les bx, dword_2A46E
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x8578) = _al;                  //mov byte_28928, al
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 2) += 1;                //inc word ptr es:[bx+2]
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    if (memory(_ds, 0x8578) != 0xff)            //jnz short loc_11551
        goto loc_11551;
    memory(_es, _bx) = 0x00;                    //mov byte ptr es:[bx], 0
    goto loc_1158E;                             //jmp short loc_1158E
loc_11551:                                      //loc_11551:
    if (memory(_ds, 0x8578) == 0x00)            //jz short loc_1158E
        goto loc_1158E;
    _al = memory(_ds, 0x8578);                  //mov al, byte_28928
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 15724);           //mov ax, [bx+3D6Ch]
    _dx = memory16(_ds, _bx + 15722);           //mov dx, [bx+3D6Ah]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _push(_es);                                 //push es
    _les(_si, _ss, _bp + var_4);                //les si, [bp+var_4]
    _ax = memory16(_es, _si);                   //mov ax, es:[si]
    _es = _pop();                               //pop es
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 10) = _ax;              //mov es:[bx+0Ah], ax
loc_1158E:                                      //loc_1158E:
    memory(_ds, 0x856C) += 1;                   //inc byte_2891C
    _cl += 1;                                   //inc cl
loc_11594:                                      //loc_11594:
    if (_cl >= 0x03)                            //jnb short loc_1159C
        goto loc_1159C;
    goto loc_114FE;                             //jmp loc_114FE
loc_1159C:                                      //loc_1159C:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_115A1()
{
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = dword ptr -4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0008;                              //sub sp, 8
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_115B1
        goto loc_115B1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_115B1:                                      //loc_115B1:
    memory(_ds, 0x8566) = 0x00;                 //mov byte_28916, 0
    _cl = 0x00;                                 //mov cl, 0
    goto loc_11651;                             //jmp loc_11651
loc_115BB:                                      //loc_115BB:
    _al = memory(_ds, 0x8566);                  //mov al, byte_28916
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19646);           //mov ax, [bx+4CBEh]
    _dx = memory16(_ds, _bx + 19644);           //mov dx, [bx+4CBCh]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    if (memory(_es, _bx) == 0x00)               //jz short loc_1164B
        goto loc_1164B;
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    memory16(_ds, 0xA0C2) = _dx;                //mov word ptr dword_2A472, dx
    memory16(_ds, 0xA0C4) = _ax;                //mov word ptr dword_2A472+2, ax
    _les(_bx, _ds, 0xA0C2);                     //les bx, dword_2A472
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x8579) = _al;                  //mov byte_28929, al
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 2) += 1;                //inc word ptr es:[bx+2]
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    if (memory(_ds, 0x8579) != 0xff)            //jnz short loc_1160E
        goto loc_1160E;
    memory(_es, _bx) = 0x00;                    //mov byte ptr es:[bx], 0
    goto loc_1164B;                             //jmp short loc_1164B
loc_1160E:                                      //loc_1160E:
    if (memory(_ds, 0x8579) == 0x00)            //jz short loc_1164B
        goto loc_1164B;
    _al = memory(_ds, 0x8579);                  //mov al, byte_28929
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 16552);           //mov ax, [bx+40A8h]
    _dx = memory16(_ds, _bx + 16550);           //mov dx, [bx+40A6h]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _push(_es);                                 //push es
    _les(_si, _ss, _bp + var_4);                //les si, [bp+var_4]
    _ax = memory16(_es, _si);                   //mov ax, es:[si]
    _es = _pop();                               //pop es
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 10) = _ax;              //mov es:[bx+0Ah], ax
loc_1164B:                                      //loc_1164B:
    memory(_ds, 0x8566) += 1;                   //inc byte_28916
    _cl += 1;                                   //inc cl
loc_11651:                                      //loc_11651:
    if (_cl >= 0x04)                            //jnb short loc_11659
        goto loc_11659;
    goto loc_115BB;                             //jmp loc_115BB
loc_11659:                                      //loc_11659:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_1165E()
{
    const int var_C = -12;                      //var_C  = dword ptr -0Ch
    const int var_8 = -8;                       //var_8  = word ptr -8
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000c;                              //sub sp, 0Ch
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1166F
        goto loc_1166F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1166F:                                      //loc_1166F:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
loc_11673:                                      //loc_11673:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19570);           //mov ax, [bx+4C72h]
    _dx = memory16(_ds, _bx + 19568);           //mov dx, [bx+4C70h]
    memory16(_ss, _bp + var_C) = _dx;           //mov word ptr [bp+var_C], dx
    memory16(_ss, _bp + var_C + 2) = _ax;       //mov word ptr [bp+var_C+2], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_1169E
        goto loc_1169E;
    goto loc_117B5;                             //jmp loc_117B5
loc_1169E:                                      //loc_1169E:
    if (memory(_ss, _bp + var_1) != 0xff)       //jnz short loc_116A7
        goto loc_116A7;
    goto loc_117B5;                             //jmp loc_117B5
loc_116A7:                                      //loc_116A7:
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _di = memory16(_ds, _bx + 12990);           //mov di, [bx+32BEh]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _si = memory16(_ds, _bx + 12992);           //mov si, [bx+32C0h]
    _les(_bx, _ds, 0x8D4);                      //les bx, dword ptr word_20C84
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    if (!(memory(_ss, _bp + var_3) & 0x01))     //jz short loc_116E4
        goto loc_116E4;
    _ax = memory16(_es, _bx + 28);              //mov ax, es:[bx+1Ch]
    _ax |= 0x0600;                              //or ax, 600h
    memory16(_es, _bx + 28) = _ax;              //mov es:[bx+1Ch], ax
loc_116E4:                                      //loc_116E4:
    _les(_bx, _ds, 0x8D4);                      //les bx, dword ptr word_20C84
    _ax = _di;                                  //mov ax, di
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    memory16(_es, _bx + 6) = _ax;               //mov es:[bx+6], ax
    _ax = _si;                                  //mov ax, si
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _push(memory16(_ds, 0x8D6));                //push seg_20C86
    _push(memory16(_ds, 0x8D4));                //push word_20C84
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 244);             //mov ax, [bx+0F4h]
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 246);             //mov ax, [bx+0F6h]
    memory16(_ss, _bp + var_8) = _ax;           //mov [bp+var_8], ax
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _ax = memory16(_ss, _bp + var_8);           //mov ax, [bp+var_8]
    _ax = _ax + memory16(_es, _bx + 8);         //add ax, es:[bx+8]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _ax = memory16(_es, _bx + 10);              //mov ax, es:[bx+0Ah]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    if (memory16(_es, _bx + 10) & 0x0200)       //jnz short loc_1176F
        goto loc_1176F;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_1176F:                                      //loc_1176F:
    _les(_bx, _ds, 0x8E0);                      //les bx, dword ptr word_20C90
    memory16(_es, _bx + 6) = _di;               //mov es:[bx+6], di
    memory16(_es, _bx + 8) = _si;               //mov es:[bx+8], si
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0180;                               //mov dx, 180h
    _imul(_dx);                                 //imul dx
    _ax += 0x79be;                              //add ax, 79BEh
    memory16(_es, _bx + 16) = _ax;              //mov es:[bx+10h], ax
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    if (!(memory(_ss, _bp + var_3) & 0x01))     //jz short loc_117A7
        goto loc_117A7;
    _ax = memory16(_es, _bx + 28);              //mov ax, es:[bx+1Ch]
    _ax |= 0x0200;                              //or ax, 200h
    memory16(_es, _bx + 28) = _ax;              //mov es:[bx+1Ch], ax
loc_117A7:                                      //loc_117A7:
    _push(memory16(_ds, 0x8E2));                //push seg_20C92
    _push(memory16(_ds, 0x8E0));                //push word_20C90
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
loc_117B5:                                      //loc_117B5:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_117C1
        goto loc_117C1;
    goto loc_11673;                             //jmp loc_11673
loc_117C1:                                      //loc_117C1:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_117C7()
{
    const int var_C = -12;                      //var_C  = dword ptr -0Ch
    const int var_8 = -8;                       //var_8  = word ptr -8
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000c;                              //sub sp, 0Ch
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_117D8
        goto loc_117D8;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_117D8:                                      //loc_117D8:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
loc_117DC:                                      //loc_117DC:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19646);           //mov ax, [bx+4CBEh]
    _dx = memory16(_ds, _bx + 19644);           //mov dx, [bx+4CBCh]
    memory16(_ss, _bp + var_C) = _dx;           //mov word ptr [bp+var_C], dx
    memory16(_ss, _bp + var_C + 2) = _ax;       //mov word ptr [bp+var_C+2], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_11807
        goto loc_11807;
    goto loc_1198F;                             //jmp loc_1198F
loc_11807:                                      //loc_11807:
    if (memory(_ss, _bp + var_1) != 0xff)       //jnz short loc_11810
        goto loc_11810;
    goto loc_1198F;                             //jmp loc_1198F
loc_11810:                                      //loc_11810:
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _di = memory16(_ds, _bx + 13374);           //mov di, [bx+343Eh]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _si = memory16(_ds, _bx + 13376);           //mov si, [bx+3440h]
    _les(_bx, _ds, 0x8C8);                      //les bx, dword ptr word_20C78
    memory16(_es, _bx + 6) = _di;               //mov es:[bx+6], di
    memory16(_es, _bx + 8) = _si;               //mov es:[bx+8], si
    _push(memory16(_ds, 0x8CA));                //push seg_20C7A
    _push(memory16(_ds, 0x8C8));                //push word_20C78
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 10) = 0x0001;           //mov word ptr es:[bx+0Ah], 1
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    memory16(_es, _bx + 28) = 0x0004;           //mov word ptr es:[bx+1Ch], 4
    if (!(memory(_ss, _bp + var_3) & 0x01))     //jz short loc_11890
        goto loc_11890;
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_2A36A
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    _push(memory16(_ds, 0x8CE));                //push seg_20C7E
    _push(memory16(_ds, 0x8CC));                //push word_20C7C
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 2) = 0x9eba;            //mov word ptr es:[bx+2], 9EBAh
    goto loc_118B6;                             //jmp short loc_118B6
loc_11890:                                      //loc_11890:
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_2A26A
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    _push(memory16(_ds, 0x8CE));                //push seg_20C7E
    _push(memory16(_ds, 0x8CC));                //push word_20C7C
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_2A36A
loc_118B6:                                      //loc_118B6:
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 20) = _di;              //mov es:[bx+14h], di
    memory16(_es, _bx + 22) = _si;              //mov es:[bx+16h], si
    _push(memory16(_ds, 0x8CE));                //push seg_20C7E
    _push(memory16(_ds, 0x8CC));                //push word_20C7C
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_28C38
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    memory16(_es, _bx + 10) = 0x0003;           //mov word ptr es:[bx+0Ah], 3
    memory16(_es, _bx + 28) = 0x0003;           //mov word ptr es:[bx+1Ch], 3
    _push(memory16(_ds, 0x8CE));                //push seg_20C7E
    _push(memory16(_ds, 0x8CC));                //push word_20C7C
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 1012);            //mov ax, [bx+3F4h]
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 1014);            //mov ax, [bx+3F6h]
    memory16(_ss, _bp + var_8) = _ax;           //mov [bp+var_8], ax
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _ax = memory16(_ss, _bp + var_8);           //mov ax, [bp+var_8]
    _ax = _ax + memory16(_es, _bx + 8);         //add ax, es:[bx+8]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    if (memory16(_es, _bx + 10) & 0x0200)       //jnz short loc_11961
        goto loc_11961;
    _ax = memory16(_es, _bx + 10);              //mov ax, es:[bx+0Ah]
    _ax += 0x00f1;                              //add ax, 0F1h
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_11961:                                      //loc_11961:
    _les(_bx, _ds, 0x8D0);                      //les bx, dword ptr word_20C80
    memory16(_es, _bx + 6) = _di;               //mov es:[bx+6], di
    memory16(_es, _bx + 8) = _si;               //mov es:[bx+8], si
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x08;                                 //mov cl, 8
    _ax <<= _cl;                                //shl ax, cl
    _ax += 0x7e3e;                              //add ax, 7E3Eh
    memory16(_es, _bx + 16) = _ax;              //mov es:[bx+10h], ax
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    _push(memory16(_ds, 0x8D2));                //push seg_20C82
    _push(memory16(_ds, 0x8D0));                //push word_20C80
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
loc_1198F:                                      //loc_1198F:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_1199B
        goto loc_1199B;
    goto loc_117DC;                             //jmp loc_117DC
loc_1199B:                                      //loc_1199B:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_119A1()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_119AD
        goto loc_119AD;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_119AD:                                      //loc_119AD:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_119E2
        goto loc_119E2;
    _les(_bx, _ds, 0x8E8);                      //les bx, dword ptr word_20C98
    _ax = memory16(_ds, 0x928E);                //mov ax, word_2963E
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ds, 0x9B94);                //mov ax, word_29F44
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _ax = memory16(_ds, 0x9D34);                //mov ax, word_2A0E4
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    _ax = memory16(_ds, 0x9D32);                //mov ax, word_2A0E2
    memory16(_es, _bx + 32) = _ax;              //mov es:[bx+20h], ax
    _push(memory16(_ds, 0x8EA));                //push seg_20C9A
    _push(memory16(_ds, 0x8E8));                //push word_20C98
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
loc_119E2:                                      //loc_119E2:
    _bp = _pop();                               //pop bp
}

void sub_119E4()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_119F0
        goto loc_119F0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_119F0:                                      //loc_119F0:
    _les(_bx, _ds, 0x8C4);                      //les bx, dword ptr word_20C74
    _ax = memory16(_ds, 0x8882);                //mov ax, word_28C32
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ds, 0x8E88);                //mov ax, word_29238
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _ax = memory16(_ds, 0x9BA4);                //mov ax, word_29F54
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    _ax = memory16(_ds, 0x9B9C);                //mov ax, word_29F4C
    memory16(_es, _bx + 32) = _ax;              //mov es:[bx+20h], ax
    _push(memory16(_ds, 0x8C6));                //push seg_20C76
    _push(memory16(_ds, 0x8C4));                //push word_20C74
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_11A20()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11A2C
        goto loc_11A2C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11A2C:                                      //loc_11A2C:
    if (memory(_ds, 0xA1A8) == 0x00)            //jz short loc_11A65
        goto loc_11A65;
    memory(_ds, 0xA1A8) -= 1;                   //dec byte_2A558
    _les(_bx, _ds, 0x8E4);                      //les bx, dword ptr word_20C94
    _ax = memory16(_ds, 0x9B9A);                //mov ax, word_29F4A
    memory16(_es, _bx + 6) = _ax;               //mov es:[bx+6], ax
    _ax = memory16(_ds, 0x9BA2);                //mov ax, word_29F52
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _ax = memory16(_ds, 0x9B9A);                //mov ax, word_29F4A
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ds, 0x9BA2);                //mov ax, word_29F52
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _push(memory16(_ds, 0x8E6));                //push seg_20C96
    _push(memory16(_ds, 0x8E4));                //push word_20C94
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
loc_11A65:                                      //loc_11A65:
    _bp = _pop();                               //pop bp
}

void sub_11A67()
{
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0008;                              //sub sp, 8
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11A76
        goto loc_11A76;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11A76:                                      //loc_11A76:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
loc_11A7A:                                      //loc_11A7A:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19570);           //mov ax, [bx+4C72h]
    _dx = memory16(_ds, _bx + 19568);           //mov dx, [bx+4C70h]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_11B1B
        goto loc_11B1B;
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_11B1B
        goto loc_11B1B;
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0180;                               //mov dx, 180h
    _imul(_dx);                                 //imul dx
    _ax += 0x79be;                              //add ax, 79BEh
    _les(_bx, _ds, 0x8C0);                      //les bx, dword ptr word_20C70
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 12990);           //mov ax, [bx+32BEh]
    _bx = memory16(_ds, 0x8C0);                 //mov bx, word_20C70
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 12992);           //mov ax, [bx+32C0h]
    _bx = memory16(_ds, 0x8C0);                 //mov bx, word_20C70
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    if (!(memory(_ss, _bp + var_3) & 0x01))     //jz short loc_11B0D
        goto loc_11B0D;
    _ax = memory16(_es, _bx + 28);              //mov ax, es:[bx+1Ch]
    _ax |= 0x0400;                              //or ax, 400h
    memory16(_es, _bx + 28) = _ax;              //mov es:[bx+1Ch], ax
loc_11B0D:                                      //loc_11B0D:
    _push(memory16(_ds, 0x8C2));                //push seg_20C72
    _push(memory16(_ds, 0x8C0));                //push word_20C70
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
loc_11B1B:                                      //loc_11B1B:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_11B27
        goto loc_11B27;
    goto loc_11A7A;                             //jmp loc_11A7A
loc_11B27:                                      //loc_11B27:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_11B2B()
{
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0008;                              //sub sp, 8
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11B3A
        goto loc_11B3A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11B3A:                                      //loc_11B3A:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
loc_11B3E:                                      //loc_11B3E:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19646);           //mov ax, [bx+4CBEh]
    _dx = memory16(_ds, _bx + 19644);           //mov dx, [bx+4CBCh]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_11BC7
        goto loc_11BC7;
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_11BC7
        goto loc_11BC7;
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x08;                                 //mov cl, 8
    _ax <<= _cl;                                //shl ax, cl
    _ax += 0x7e3e;                              //add ax, 7E3Eh
    _les(_bx, _ds, 0x8BC);                      //les bx, dword ptr word_20C6C
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 13374);           //mov ax, [bx+343Eh]
    _bx = memory16(_ds, 0x8BC);                 //mov bx, word_20C6C
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 13376);           //mov ax, [bx+3440h]
    _bx = memory16(_ds, 0x8BC);                 //mov bx, word_20C6C
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _push(memory16(_ds, 0x8BE));                //push seg_20C6E
    _push(memory16(_ds, 0x8BC));                //push word_20C6C
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
loc_11BC7:                                      //loc_11BC7:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    if (memory(_ss, _bp + var_1) == 0xff)       //jz short loc_11BD3
        goto loc_11BD3;
    goto loc_11B3E;                             //jmp loc_11B3E
loc_11BD3:                                      //loc_11BD3:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_11BD7()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11BE3
        goto loc_11BE3;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11BE3:                                      //loc_11BE3:
    memory16(_ds, 0x9BA4) = 0x0004;             //mov word_29F54, 4
    if ((short)memory16(_ds, 0x857A) <= (short)0x0010)
        goto loc_11BFA;
    _ax = 0x0014;                               //mov ax, 14h
    _ax = _ax - memory16(_ds, 0x857A);          //sub ax, word_2892A
    memory16(_ds, 0x9BA4) = _ax;                //mov word_29F54, ax
loc_11BFA:                                      //loc_11BFA:
    memory16(_ds, 0x9B9C) = 0x0004;             //mov word_29F4C, 4
    if ((short)memory16(_ds, 0x857C) <= (short)0x0015)
        goto loc_11C11;
    _ax = 0x0019;                               //mov ax, 19h
    _ax = _ax - memory16(_ds, 0x857C);          //sub ax, word_2892C
    memory16(_ds, 0x9B9C) = _ax;                //mov word_29F4C, ax
loc_11C11:                                      //loc_11C11:
    _les(_bx, _ds, 0x8B8);                      //les bx, dword ptr word_20C68
    _ax = memory16(_ds, 0x857A);                //mov ax, word_2892A
    memory16(_es, _bx + 6) = _ax;               //mov es:[bx+6], ax
    _ax = memory16(_ds, 0x857C);                //mov ax, word_2892C
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _ax = memory16(_ds, 0x9BA4);                //mov ax, word_29F54
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    _ax = memory16(_ds, 0x9B9C);                //mov ax, word_29F4C
    memory16(_es, _bx + 32) = _ax;              //mov es:[bx+20h], ax
    _push(memory16(_ds, 0x8BA));                //push seg_20C6A
    _push(memory16(_ds, 0x8B8));                //push word_20C68
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_11C41()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11C4D
        goto loc_11C4D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11C4D:                                      //loc_11C4D:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_11CB0
        goto loc_11CB0;
    memory16(_ds, 0x9D34) = 0x0004;             //mov word_2A0E4, 4
    if ((short)memory16(_ds, 0x8558) <= (short)0x0010)
        goto loc_11C6B;
    _ax = 0x0014;                               //mov ax, 14h
    _ax = _ax - memory16(_ds, 0x8558);          //sub ax, word_28908
    memory16(_ds, 0x9D34) = _ax;                //mov word_2A0E4, ax
loc_11C6B:                                      //loc_11C6B:
    memory16(_ds, 0x9D32) = 0x0004;             //mov word_2A0E2, 4
    if ((short)memory16(_ds, 0x855A) <= (short)0x0015)
        goto loc_11C82;
    _ax = 0x0019;                               //mov ax, 19h
    _ax = _ax - memory16(_ds, 0x855A);          //sub ax, word_2890A
    memory16(_ds, 0x9D32) = _ax;                //mov word_2A0E2, ax
loc_11C82:                                      //loc_11C82:
    _les(_bx, _ds, 0x8EC);                      //les bx, dword ptr word_20C9C
    _ax = memory16(_ds, 0x8558);                //mov ax, word_28908
    memory16(_es, _bx + 6) = _ax;               //mov es:[bx+6], ax
    _ax = memory16(_ds, 0x855A);                //mov ax, word_2890A
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _ax = memory16(_ds, 0x9D34);                //mov ax, word_2A0E4
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    _ax = memory16(_ds, 0x9D32);                //mov ax, word_2A0E2
    memory16(_es, _bx + 32) = _ax;              //mov es:[bx+20h], ax
    _push(memory16(_ds, 0x8EE));                //push seg_20C9E
    _push(memory16(_ds, 0x8EC));                //push word_20C9C
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
loc_11CB0:                                      //loc_11CB0:
    _bp = _pop();                               //pop bp
}

void sub_11CB2()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11CBE
        goto loc_11CBE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11CBE:                                      //loc_11CBE:
    if (memory16(_ds, 0x824A) == 0x0064)        //jz short loc_11CE8
        goto loc_11CE8;
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ds, 0x824A);                //mov ax, word_285FA
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_11CE8:                                      //loc_11CE8:
    _bp = _pop();                               //pop bp
}

void sub_11CEA()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11CF6
        goto loc_11CF6;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11CF6:                                      //loc_11CF6:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_11D24
        goto loc_11D24;
    _les(_bx, _ds, 0x9B9E);                     //les bx, dword_29F4E
    _ax = memory16(_ds, 0xA0DE);                //mov ax, word_2A48E
    _ax = _ax + memory16(_ds, 0x8560);          //add ax, word_28910
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _ax = memory16(_ds, 0x79BA);                //mov ax, word_27D6A
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _ax = memory16(_ds, 0x79BC);                //mov ax, word_27D6C
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _push(_ds);                                 //push ds
    _ax = 0x795a;                               //mov ax, 795Ah
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_11D24:                                      //loc_11D24:
    _bp = _pop();                               //pop bp
}

void sub_11D26()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11D32
        goto loc_11D32;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11D32:                                      //loc_11D32:
    _al = 0x3b;                                 //mov al, 3Bh
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11D45
        goto loc_11D45;
    memory(_ds, 0x854F) = 0x00;                 //mov byte_288FF, 0
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11D45:                                      //loc_11D45:
    _al = 0x3c;                                 //mov al, 3Ch
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11D58
        goto loc_11D58;
    memory(_ds, 0x854F) = 0x88;                 //mov byte_288FF, 88h
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11D58:                                      //loc_11D58:
    _al = 0x3d;                                 //mov al, 3Dh
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11D6B
        goto loc_11D6B;
    memory(_ds, 0x854F) = 0xaa;                 //mov byte_288FF, 0AAh
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11D6B:                                      //loc_11D6B:
    _al = 0x3e;                                 //mov al, 3Eh
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11D7E
        goto loc_11D7E;
    memory(_ds, 0x854F) = 0xee;                 //mov byte_288FF, 0EEh
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11D7E:                                      //loc_11D7E:
    _al = 0x3f;                                 //mov al, 3Fh
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11D91
        goto loc_11D91;
    memory(_ds, 0x854F) = 0xff;                 //mov byte_288FF, 0FFh
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11D91:                                      //loc_11D91:
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11DA2
        goto loc_11DA2;
    sub_122FC();                                //call sub_122FC
    goto loc_11DBB;                             //jmp short loc_11DBB
loc_11DA2:                                      //loc_11DA2:
    _al = 0x44;                                 //mov al, 44h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11DBB
        goto loc_11DBB;
    memory(_ds, 0x928D) = 0x01;                 //mov byte_2963D, 1
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x9D30) = _al;                  //mov byte_2A0E0, al
    memory(_ds, 0x856D) = _al;                  //mov byte_2891D, al
loc_11DBB:                                      //loc_11DBB:
    if (memory(_ds, 0xA1AA) == 0x00)            //jz short loc_11DC7
        goto loc_11DC7;
    sub_1228D();                                //call sub_1228D
    goto loc_11DDC;                             //jmp short loc_11DDC
loc_11DC7:                                      //loc_11DC7:
    sub_1236F();                                //call sub_1236F
    sub_11DDE();                                //call sub_11DDE
    if (memory(_ds, 0x824D) == 0x00)            //jz short loc_11DD9
        goto loc_11DD9;
    sub_1238E();                                //call sub_1238E
    goto loc_11DDC;                             //jmp short loc_11DDC
loc_11DD9:                                      //loc_11DD9:
    sub_11E02();                                //call sub_11E02
loc_11DDC:                                      //loc_11DDC:
    _bp = _pop();                               //pop bp
}

void sub_11DDE()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11DEC
        goto loc_11DEC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11DEC:                                      //loc_11DEC:
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_11DFE
        goto loc_11DFE;
    memory(_ds, 0x8244) = _al;                  //mov byte_285F4, al
loc_11DFE:                                      //loc_11DFE:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_11E02()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11E0E
        goto loc_11E0E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11E0E:                                      //loc_11E0E:
    memory(_ds, 0x7923) = 0x00;                 //mov byte_27CD3, 0
    _al = memory(_ds, 0x792C);                  //mov al, byte_27CDC
    memory(_ds, 0x8552) = _al;                  //mov byte_28902, al
    if (memory(_ds, 0xA0CE) != 0x00)            //jnz short loc_11E29
        goto loc_11E29;
    _al = memory(_ds, 0xA1A7);                  //mov al, byte_2A557
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_11E38
        goto loc_11E38;
loc_11E29:                                      //loc_11E29:
    _al = memory(_ds, 0x792C);                  //mov al, byte_27CDC
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    switch (_bx)                                //call off_20B7A[bx]
    {
      case 0: sub_128F9(); break;
      case 2: sub_128F9(); break;
      case 4: sub_128F9(); break;
      case 6: sub_123B6(); break;
      case 8: sub_128F9(); break;
      case 10: sub_12423(); break;
      case 12: sub_128F9(); break;
      case 14: sub_128F9(); break;
      case 16: sub_128F9(); break;
      case 18: sub_128F9(); break;
      case 20: sub_12470(); break;
      case 22: sub_1248E(); break;
      case 24: sub_124D7(); break;
      case 26: sub_1250A(); break;
      case 28: sub_125AD(); break;
      case 30: sub_123B6(); break;
      case 32: sub_122B0(); break;
      case 34: sub_128F9(); break;
      case 36: sub_128F9(); break;
      case 38: sub_128F9(); break;
      case 40: sub_128F9(); break;
      case 42: sub_128F9(); break;
      case 44: sub_128F9(); break;
      case 46: sub_128F9(); break;
      case 48: sub_128F9(); break;
      case 50: sub_128F9(); break;
      case 52: sub_128F9(); break;
      case 54: sub_128F9(); break;
      case 56: sub_14344(); break;
      case 58: sub_14437(); break;
      case 60: sub_14437(); break;
      case 62: sub_14437(); break;
      case 64: sub_14437(); break;
      case 66: sub_11E5E(); break;
      case 68: sub_11E90(); break;
      case 70: sub_11EC2(); break;
      case 72: sub_11F3E(); break;
      case 74: sub_12138(); break;
      case 76: sub_121E7(); break;
      case 78: sub_128F9(); break;
      case 80: sub_128F9(); break;
      case 82: sub_128F9(); break;
      case 84: sub_128F9(); break;
      case 86: sub_128F9(); break;
      case 88: sub_122B0(); break;
      case 90: sub_122C1(); break;
      case 92: sub_122D2(); break;
      case 94: sub_12810(); break;
      case 96: sub_11E3D(); break;
      case 98: sub_128F9(); break;
      case 100: sub_128F9(); break;
      case 102: sub_128F9(); break;
      case 104: sub_128F9(); break;
      case 106: sub_128F9(); break;
      case 108: sub_128F9(); break;
      case 110: sub_128F9(); break;
      case 112: sub_128F9(); break;
      case 114: sub_128F9(); break;
      case 116: sub_128F9(); break;
      case 118: sub_128F9(); break;
      case 120: sub_128F9(); break;
      case 122: sub_128F9(); break;
      case 124: sub_128F9(); break;
      case 126: sub_128F9(); break;
      default:
        _ASSERT(0);
    }
    goto loc_11E3B;                             //jmp short loc_11E3B
loc_11E38:                                      //loc_11E38:
    sub_127DE();                                //call sub_127DE
loc_11E3B:                                      //loc_11E3B:
    _bp = _pop();                               //pop bp
}

void sub_11E3D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11E49
        goto loc_11E49;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11E49:                                      //loc_11E49:
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0x9D30) = _al;                  //mov byte_2A0E0, al
    memory(_ds, 0xA1A9) = _al;                  //mov byte_2A559, al
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ds, 0x9BAA);                     //les bx, dword_29F5A
    memory(_es, _bx) = 0x01;                    //mov byte ptr es:[bx], 1
    _bp = _pop();                               //pop bp
}

void sub_11E5E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11E6A
        goto loc_11E6A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11E6A:                                      //loc_11E6A:
    if (memory(_ds, 0x8551) != 0x08)            //jnz short loc_11E89
        goto loc_11E89;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_11E7C
        goto loc_11E7C;
    _al = 0x0f;                                 //mov al, 0Fh
    goto loc_11E7E;                             //jmp short loc_11E7E
loc_11E7C:                                      //loc_11E7C:
    _al = 0x2b;                                 //mov al, 2Bh
loc_11E7E:                                      //loc_11E7E:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_121E7();                                //call sub_121E7
    goto loc_11E8E;                             //jmp short loc_11E8E
loc_11E89:                                      //loc_11E89:
    memory(_ds, 0x792C) = 0x24;                 //mov byte_27CDC, 24h
loc_11E8E:                                      //loc_11E8E:
    _bp = _pop();                               //pop bp
}

void sub_11E90()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11E9C
        goto loc_11E9C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11E9C:                                      //loc_11E9C:
    if (memory(_ds, 0x8551) != 0x08)            //jnz short loc_11EBB
        goto loc_11EBB;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_11EAE
        goto loc_11EAE;
    _al = 0x0f;                                 //mov al, 0Fh
    goto loc_11EB0;                             //jmp short loc_11EB0
loc_11EAE:                                      //loc_11EAE:
    _al = 0x2b;                                 //mov al, 2Bh
loc_11EB0:                                      //loc_11EB0:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_12138();                                //call sub_12138
    goto loc_11EC0;                             //jmp short loc_11EC0
loc_11EBB:                                      //loc_11EBB:
    memory(_ds, 0x792C) = 0x23;                 //mov byte_27CDC, 23h
loc_11EC0:                                      //loc_11EC0:
    _bp = _pop();                               //pop bp
}

void sub_11EC2()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11ED1
        goto loc_11ED1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11ED1:                                      //loc_11ED1:
    memory(_ss, _bp + var_1) = 0x0b;            //mov [bp+var_1], 0Bh
    memory(_ss, _bp + var_2) = 0x05;            //mov [bp+var_2], 5
    memory16(_ss, _bp + var_6) = _FIXME_;       //mov [bp+var_6], offset unk_22054
    memory16(_ss, _bp + var_4) = _ds;           //mov [bp+var_4], ds
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_1495C();                                //call sub_1495C
    _sp += 0x0008;                              //add sp, 8
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_11EFF
        goto loc_11EFF;
    sub_11F03();                                //call sub_11F03
loc_11EFF:                                      //loc_11EFF:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_11F03()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11F0F
        goto loc_11F0F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11F0F:                                      //loc_11F0F:
    memory(_ds, 0x792C) = 0x01;                 //mov byte_27CDC, 1
    memory16(_ds, 0xA1AC) = _FIXME_;            //mov word ptr dword_2A55C, offset unk_217BC
    memory16(_ds, 0xA1AE) = _ds;                //mov word ptr dword_2A55C+2, ds
    memory(_ds, 0x824D) = 0x04;                 //mov byte_285FD, 4
    _al = 0x09;                                 //mov al, 9
    memory(_ds, 0x9BAE) = _al;                  //mov byte_29F5E, al
    memory(_ds, 0x792A) = _al;                  //mov byte_27CDA, al
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _al = 0x16;                                 //mov al, 16h
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_11F3E()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11F4D
        goto loc_11F4D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11F4D:                                      //loc_11F4D:
    memory(_ss, _bp + var_1) = 0x0b;            //mov [bp+var_1], 0Bh
    memory(_ss, _bp + var_2) = 0x05;            //mov [bp+var_2], 5
    memory16(_ss, _bp + var_6) = _FIXME_;       //mov [bp+var_6], offset unk_2206A
    memory16(_ss, _bp + var_4) = _ds;           //mov [bp+var_4], ds
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_1495C();                                //call sub_1495C
    _sp += 0x0008;                              //add sp, 8
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_11F7B
        goto loc_11F7B;
    sub_11F7F();                                //call sub_11F7F
loc_11F7B:                                      //loc_11F7B:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_11F7F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11F8B
        goto loc_11F8B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11F8B:                                      //loc_11F8B:
    memory(_ds, 0x792C) = 0x02;                 //mov byte_27CDC, 2
    memory16(_ds, 0xA1AC) = _FIXME_;            //mov word ptr dword_2A55C, offset unk_21810
    memory16(_ds, 0xA1AE) = _ds;                //mov word ptr dword_2A55C+2, ds
    memory(_ds, 0x824D) = 0x04;                 //mov byte_285FD, 4
    memory(_ds, 0x792A) = 0x09;                 //mov byte_27CDA, 9
    memory(_ds, 0x9BAE) = 0x00;                 //mov byte_29F5E, 0
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _al = 0x16;                                 //mov al, 16h
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_11FBE()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_11FCA
        goto loc_11FCA;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_11FCA:                                      //loc_11FCA:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_11FDA
        goto loc_11FDA;
    _al = 0x02;                                 //mov al, 2
    goto loc_11FDC;                             //jmp short loc_11FDC
loc_11FDA:                                      //loc_11FDA:
    _al = 0x26;                                 //mov al, 26h
loc_11FDC:                                      //loc_11FDC:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x855E);                  //mov al, byte_2890E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_11FF4
        goto loc_11FF4;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x38;                                 //mov al, 38h
    goto loc_12072;                             //jmp short loc_12072
loc_11FF4:                                      //loc_11FF4:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    if (memory(_ds, _bx + 17238) != 0x38)       //jnz short loc_12014
        goto loc_12014;
    _al = 0x38;                                 //mov al, 38h
    goto loc_12072;                             //jmp short loc_12072
loc_12014:                                      //loc_12014:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_1202A
        goto loc_1202A;
    _al = 0x3a;                                 //mov al, 3Ah
    goto loc_12072;                             //jmp short loc_12072
loc_1202A:                                      //loc_1202A:
    if (memory(_ds, 0x855E) != 0x01)            //jnz short loc_1203A
        goto loc_1203A;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x34;                                 //mov al, 34h
    goto loc_12072;                             //jmp short loc_12072
loc_1203A:                                      //loc_1203A:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xfe;                                //add al, 0FEh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    if (memory(_ds, _bx + 17174) != 0x34)       //jnz short loc_1205A
        goto loc_1205A;
    _al = 0x34;                                 //mov al, 34h
    goto loc_12072;                             //jmp short loc_12072
loc_1205A:                                      //loc_1205A:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xfe;                                //add al, 0FEh
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_12070
        goto loc_12070;
    _al = 0x36;                                 //mov al, 36h
    goto loc_12072;                             //jmp short loc_12072
loc_12070:                                      //loc_12070:
    _al = 0x1a;                                 //mov al, 1Ah
loc_12072:                                      //loc_12072:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_1207D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12089
        goto loc_12089;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12089:                                      //loc_12089:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12099
        goto loc_12099;
    _al = 0x02;                                 //mov al, 2
    goto loc_1209B;                             //jmp short loc_1209B
loc_12099:                                      //loc_12099:
    _al = 0x26;                                 //mov al, 26h
loc_1209B:                                      //loc_1209B:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x855E) != 0x07)            //jnz short loc_120B1
        goto loc_120B1;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x39;                                 //mov al, 39h
    goto loc_1212D;                             //jmp short loc_1212D
loc_120B1:                                      //loc_120B1:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    if (memory(_ds, _bx + 17270) != 0x39)       //jnz short loc_120CF
        goto loc_120CF;
    _al = 0x39;                                 //mov al, 39h
    goto loc_1212D;                             //jmp short loc_1212D
loc_120CF:                                      //loc_120CF:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_120E5
        goto loc_120E5;
    _al = 0x3b;                                 //mov al, 3Bh
    goto loc_1212D;                             //jmp short loc_1212D
loc_120E5:                                      //loc_120E5:
    if (memory(_ds, 0x855E) != 0x06)            //jnz short loc_120F5
        goto loc_120F5;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x35;                                 //mov al, 35h
    goto loc_1212D;                             //jmp short loc_1212D
loc_120F5:                                      //loc_120F5:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    if (memory(_ds, _bx + 17206) != 0x35)       //jnz short loc_12115
        goto loc_12115;
    _al = 0x35;                                 //mov al, 35h
    goto loc_1212D;                             //jmp short loc_1212D
loc_12115:                                      //loc_12115:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0x02;                                //add al, 2
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_1212B
        goto loc_1212B;
    _al = 0x37;                                 //mov al, 37h
    goto loc_1212D;                             //jmp short loc_1212D
loc_1212B:                                      //loc_1212B:
    _al = 0x1b;                                 //mov al, 1Bh
loc_1212D:                                      //loc_1212D:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_12138()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12146
        goto loc_12146;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12146:                                      //loc_12146:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    if (!(memory(_ds, 0x8244) & 0x12))          //jz short loc_1216F
        goto loc_1216F;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_1215D
        goto loc_1215D;
    _al = 0x15;                                 //mov al, 15h
    goto loc_1215F;                             //jmp short loc_1215F
loc_1215D:                                      //loc_1215D:
    _al = 0x2a;                                 //mov al, 2Ah
loc_1215F:                                      //loc_1215F:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x32;                                 //mov al, 32h
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_121B4;                             //jmp short loc_121B4
loc_1216F:                                      //loc_1216F:
    _al = memory(_ds, 0x855E);                  //mov al, byte_2890E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_12187
        goto loc_12187;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x27;                                 //mov al, 27h
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_121B4;                             //jmp short loc_121B4
loc_12187:                                      //loc_12187:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17110);             //mov al, [bx+42D6h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x25)       //jz short loc_121B1
        goto loc_121B1;
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_121B4;                             //jmp short loc_121B4
loc_121B1:                                      //loc_121B1:
    sub_121BB();                                //call sub_121BB
loc_121B4:                                      //loc_121B4:
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_121BB()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_121C7
        goto loc_121C7;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_121C7:                                      //loc_121C7:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_121DD
        goto loc_121DD;
    _al = 0x29;                                 //mov al, 29h
    goto loc_121DF;                             //jmp short loc_121DF
loc_121DD:                                      //loc_121DD:
    _al = 0x25;                                 //mov al, 25h
loc_121DF:                                      //loc_121DF:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_121E7()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_121F5
        goto loc_121F5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_121F5:                                      //loc_121F5:
    if (!(memory(_ds, 0x8244) & 0x12))          //jz short loc_12219
        goto loc_12219;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12207
        goto loc_12207;
    _al = 0x15;                                 //mov al, 15h
    goto loc_12209;                             //jmp short loc_12209
loc_12207:                                      //loc_12207:
    _al = 0x2a;                                 //mov al, 2Ah
loc_12209:                                      //loc_12209:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x33;                                 //mov al, 33h
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_1225A;                             //jmp short loc_1225A
loc_12219:                                      //loc_12219:
    if (memory(_ds, 0x855E) != 0x07)            //jnz short loc_1222F
        goto loc_1222F;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x28;                                 //mov al, 28h
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_1225A;                             //jmp short loc_1225A
loc_1222F:                                      //loc_1222F:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17142);             //mov al, [bx+42F6h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x26)       //jz short loc_12257
        goto loc_12257;
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_1225A;                             //jmp short loc_1225A
loc_12257:                                      //loc_12257:
    sub_12261();                                //call sub_12261
loc_1225A:                                      //loc_1225A:
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12261()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1226D
        goto loc_1226D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1226D:                                      //loc_1226D:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_12283
        goto loc_12283;
    _al = 0x2a;                                 //mov al, 2Ah
    goto loc_12285;                             //jmp short loc_12285
loc_12283:                                      //loc_12283:
    _al = 0x26;                                 //mov al, 26h
loc_12285:                                      //loc_12285:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_1228D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12299
        goto loc_12299;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12299:                                      //loc_12299:
    memory(_ds, 0xA0CE) = 0x01;                 //mov byte_2A47E, 1
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x792A) = _al;                  //mov byte_27CDA, al
    memory(_ds, 0xA1AA) = _al;                  //mov byte_2A55A, al
    _al = 0x2e;                                 //mov al, 2Eh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_122B0()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_122BC
        goto loc_122BC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_122BC:                                      //loc_122BC:
    sub_122FC();                                //call sub_122FC
    _bp = _pop();                               //pop bp
}

void sub_122C1()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_122CD
        goto loc_122CD;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_122CD:                                      //loc_122CD:
    sub_122FC();                                //call sub_122FC
    _bp = _pop();                               //pop bp
}

void sub_122D2()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_122DE
        goto loc_122DE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_122DE:                                      //loc_122DE:
    _al = memory(_ds, 0xA0CE);                  //mov al, byte_2A47E
    _al += 1;                                   //inc al
    memory(_ds, 0xA0CE) = _al;                  //mov byte_2A47E, al
    if (_al != 0x03)                            //jnz short loc_122EF
        goto loc_122EF;
    sub_122FC();                                //call sub_122FC
    goto loc_122FA;                             //jmp short loc_122FA
loc_122EF:                                      //loc_122EF:
    _al = 0x2e;                                 //mov al, 2Eh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
loc_122FA:                                      //loc_122FA:
    _bp = _pop();                               //pop bp
}

void sub_122FC()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12309
        goto loc_12309;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12309:                                      //loc_12309:
    memory(_ds, 0xA0CE) = 0x00;                 //mov byte_2A47E, 0
    _si = 0x03e8;                               //mov si, 3E8h
    goto loc_12317;                             //jmp short loc_12317
loc_12313:                                      //loc_12313:
    sub_1236F();                                //call sub_1236F
    _si -= 1;                                   //dec si
loc_12317:                                      //loc_12317:
    _si |= _si;                                 //or si, si
    if (_si != 0)                               //jnz short loc_12313
        goto loc_12313;
    memory(_ds, 0x856D) = 0x01;                 //mov byte_2891D, 1
    _al = memory(_ds, 0x791A);                  //mov al, byte_27CCA
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_12330
        goto loc_12330;
    _al = 0xff;                                 //mov al, 0FFh
    memory(_ds, 0x928D) = _al;                  //mov byte_2963D, al
    goto loc_12337;                             //jmp short loc_12337
loc_12330:                                      //loc_12330:
    memory(_ds, 0x791A) -= 1;                   //dec byte_27CCA
    _al = memory(_ds, 0x791A);                  //mov al, byte_27CCA
loc_12337:                                      //loc_12337:
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_1233A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12346
        goto loc_12346;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12346:                                      //loc_12346:
    if (memory(_ds, 0xA1B1) == 0x00)            //jz short loc_1236D
        goto loc_1236D;
    if (memory(_ds, 0x8550) == 0x09)            //jz short loc_1235A
        goto loc_1235A;
    memory(_ds, 0x8550) += 1;                   //inc byte_28900
    goto loc_1236D;                             //jmp short loc_1236D
loc_1235A:                                      //loc_1235A:
    memory(_ds, 0x8550) = 0x00;                 //mov byte_28900, 0
    _al = memory(_ds, 0x8572);                  //mov al, byte_28922
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x5a;                                 //mov al, 5Ah
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_1236D:                                      //loc_1236D:
    _bp = _pop();                               //pop bp
}

void sub_1236F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1237B
        goto loc_1237B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1237B:                                      //loc_1237B:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x7924) = _al;                  //mov byte_27CD4, al
    _bp = _pop();                               //pop bp
}

void sub_1238E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1239A
        goto loc_1239A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1239A:                                      //loc_1239A:
    _al = memory(_ds, 0x792C);                  //mov al, byte_27CDC
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0022;                               //mov dx, 22h
    _imul(_dx);                                 //imul dx
    _dl = memory(_ds, 0x792A);                  //mov dl, byte_27CDA
    _dh = 0x00;                                 //mov dh, 0
    _dx <<= 1;                                  //shl dx, 1
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    switch (_bx)                                //call off_24770[bx]
    {
      case 0: sub_16648(); break;
      case 2: sub_17111(); break;
      case 4: sub_17111(); break;
      case 6: sub_17111(); break;
      case 8: sub_17111(); break;
      case 10: sub_17111(); break;
      case 12: sub_17111(); break;
      case 14: sub_16717(); break;
      case 16: sub_1654E(); break;
      case 18: sub_16587(); break;
      case 20: sub_17111(); break;
      case 22: sub_17111(); break;
      case 24: sub_17111(); break;
      case 26: sub_165FB(); break;
      default:
        _ASSERT(0);
    }
    _bp = _pop();                               //pop bp
}

void sub_123B6()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_123C2
        goto loc_123C2;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_123C2:                                      //loc_123C2:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_123CE
        goto loc_123CE;
    sub_12634();                                //call sub_12634
    goto loc_12421;                             //jmp short loc_12421
loc_123CE:                                      //loc_123CE:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_123DA
        goto loc_123DA;
    sub_126A1();                                //call sub_126A1
    goto loc_12421;                             //jmp short loc_12421
loc_123DA:                                      //loc_123DA:
    if (memory(_ds, 0x856E) < 0x08)             //jb short loc_123F9
        goto loc_123F9;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _es = memory16(_ds, 0xA0DA);                //mov es, word ptr dword_2A488+2
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    if (memory(_es, _bx + -8) != 0x0e)          //jnz short loc_123F9
        goto loc_123F9;
    goto loc_1241E;                             //jmp short loc_1241E
loc_123F9:                                      //loc_123F9:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_1241E
        goto loc_1241E;
    sub_14747();                                //call sub_14747
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12414
        goto loc_12414;
    _al = 0x14;                                 //mov al, 14h
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_12421;                             //jmp short loc_12421
loc_12414:                                      //loc_12414:
    _al = 0x2a;                                 //mov al, 2Ah
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_12421;                             //jmp short loc_12421
loc_1241E:                                      //loc_1241E:
    sub_127DE();                                //call sub_127DE
loc_12421:                                      //loc_12421:
    _bp = _pop();                               //pop bp
}

void sub_12423()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12432
        goto loc_12432;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12432:                                      //loc_12432:
    memory(_ss, _bp + var_1) = 0x21;            //mov [bp+var_1], 21h
    memory(_ss, _bp + var_2) = 0x04;            //mov [bp+var_2], 4
    memory16(_ss, _bp + var_6) = _FIXME_;       //mov [bp+var_6], offset unk_2189A
    memory16(_ss, _bp + var_4) = _ds;           //mov [bp+var_4], ds
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_1495C();                                //call sub_1495C
    _sp += 0x0008;                              //add sp, 8
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_12462
        goto loc_12462;
    sub_12634();                                //call sub_12634
    goto loc_1246C;                             //jmp short loc_1246C
loc_12462:                                      //loc_12462:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_1246C
        goto loc_1246C;
    sub_126A1();                                //call sub_126A1
loc_1246C:                                      //loc_1246C:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12470()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1247C
        goto loc_1247C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1247C:                                      //loc_1247C:
    memory(_ds, 0x824C) = 0x08;                 //mov byte_285FC, 8
    _al = 0x0b;                                 //mov al, 0Bh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_1248E()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1249D
        goto loc_1249D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1249D:                                      //loc_1249D:
    memory(_ss, _bp + var_1) = 0x25;            //mov [bp+var_1], 25h
    memory(_ss, _bp + var_2) = 0x06;            //mov [bp+var_2], 6
    memory16(_ss, _bp + var_6) = _FIXME_;       //mov [bp+var_6], offset unk_21A14
    memory16(_ss, _bp + var_4) = _ds;           //mov [bp+var_4], ds
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_1495C();                                //call sub_1495C
    _sp += 0x0008;                              //add sp, 8
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_124D3
        goto loc_124D3;
    _al = 0x0c;                                 //mov al, 0Ch
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
loc_124D3:                                      //loc_124D3:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_124D7()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_124E3
        goto loc_124E3;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_124E3:                                      //loc_124E3:
    if (memory(_ds, 0x7924) != 0x00)            //jnz short loc_12500
        goto loc_12500;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _es = memory16(_ds, 0xA0DA);                //mov es, word ptr dword_2A488+2
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    if (memory(_es, _bx + 8) != 0x0b)           //jnz short loc_12505
        goto loc_12505;
loc_12500:                                      //loc_12500:
    sub_1250A();                                //call sub_1250A
    goto loc_12508;                             //jmp short loc_12508
loc_12505:                                      //loc_12505:
    sub_128E0();                                //call sub_128E0
loc_12508:                                      //loc_12508:
    _bp = _pop();                               //pop bp
}

void sub_1250A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12516
        goto loc_12516;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12516:                                      //loc_12516:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_12522
        goto loc_12522;
    sub_12634();                                //call sub_12634
    goto loc_1253D;                             //jmp short loc_1253D
loc_12522:                                      //loc_12522:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_1252E
        goto loc_1252E;
    sub_126A1();                                //call sub_126A1
    goto loc_1253D;                             //jmp short loc_1253D
loc_1252E:                                      //loc_1252E:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_1253A
        goto loc_1253A;
    sub_1253F();                                //call sub_1253F
    goto loc_1253D;                             //jmp short loc_1253D
loc_1253A:                                      //loc_1253A:
    sub_127DE();                                //call sub_127DE
loc_1253D:                                      //loc_1253D:
    _bp = _pop();                               //pop bp
}

void sub_1253F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1254B
        goto loc_1254B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1254B:                                      //loc_1254B:
    if (memory(_ds, 0x7924) != 0x0f)            //jnz short loc_12557
        goto loc_12557;
    sub_14802();                                //call sub_14802
    goto loc_1256A;                             //jmp short loc_1256A
loc_12557:                                      //loc_12557:
    if (memory(_ds, 0x7924) != 0x12)            //jnz short loc_12560
        goto loc_12560;
    goto loc_12567;                             //jmp short loc_12567
loc_12560:                                      //loc_12560:
    if (memory(_ds, 0x7924) != 0x1f)            //jnz short loc_1256A
        goto loc_1256A;
loc_12567:                                      //loc_12567:
    sub_122B0();                                //call sub_122B0
loc_1256A:                                      //loc_1256A:
    sub_165FB();                                //call sub_165FB
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12578
        goto loc_12578;
    _al = 0x14;                                 //mov al, 14h
    goto loc_1257A;                             //jmp short loc_1257A
loc_12578:                                      //loc_12578:
    _al = 0x09;                                 //mov al, 9
loc_1257A:                                      //loc_1257A:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x824C) += 1;                   //inc byte_285FC
    if (memory(_ds, 0x824C) != 0x09)            //jnz short loc_125A0
        goto loc_125A0;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xf8;                                //add al, 0F8h
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x24;                                 //mov al, 24h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x824C) = 0x00;                 //mov byte_285FC, 0
loc_125A0:                                      //loc_125A0:
    _al = 0x0d;                                 //mov al, 0Dh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_125AD()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_125BB
        goto loc_125BB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_125BB:                                      //loc_125BB:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_12627;                             //jmp short loc_12627
loc_125C7:                                      //loc_125C7:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _al += 1;                                   //inc al
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (_al != 0x30)                            //jnz short loc_125D7
        goto loc_125D7;
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
loc_125D7:                                      //loc_125D7:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) != 0x0f)               //jnz short loc_12627
        goto loc_12627;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    memory(_ds, 0x856E) = _al;                  //mov byte_2891E, al
    sub_14906();                                //call sub_14906
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0x000d;                              //add ax, 0Dh
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    _al = 0x27;                                 //mov al, 27h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12610
        goto loc_12610;
    _al = 0x03;                                 //mov al, 3
    goto loc_12612;                             //jmp short loc_12612
loc_12610:                                      //loc_12610:
    _al = 0x28;                                 //mov al, 28h
loc_12612:                                      //loc_12612:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x0f;                                 //mov al, 0Fh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    memory(_ss, _bp + var_2) = 0x01;            //mov [bp+var_2], 1
loc_12627:                                      //loc_12627:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_125C7
        goto loc_125C7;
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12634()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12642
        goto loc_12642;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12642:                                      //loc_12642:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    sub_163BE();                                //call sub_163BE
    _al = memory(_ds, 0x855E);                  //mov al, byte_2890E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1265C
        goto loc_1265C;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x12;                                 //mov al, 12h
    goto loc_12694;                             //jmp short loc_12694
loc_1265C:                                      //loc_1265C:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 16982);             //mov al, [bx+4256h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (_al == 0x01)                            //jz short loc_1267E
        goto loc_1267E;
    goto loc_12694;                             //jmp short loc_12694
loc_1267E:                                      //loc_1267E:
    _al = memory(_ds, 0x8570);                  //mov al, byte_28920
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_12692
        goto loc_12692;
    _al = 0x16;                                 //mov al, 16h
    goto loc_12694;                             //jmp short loc_12694
loc_12692:                                      //loc_12692:
    _al = 0x01;                                 //mov al, 1
loc_12694:                                      //loc_12694:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_126A1()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_126AF
        goto loc_126AF;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_126AF:                                      //loc_126AF:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    sub_163BE();                                //call sub_163BE
    if (memory(_ds, 0x855E) != 0x07)            //jnz short loc_126C7
        goto loc_126C7;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x13;                                 //mov al, 13h
    goto loc_126FF;                             //jmp short loc_126FF
loc_126C7:                                      //loc_126C7:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17014);             //mov al, [bx+4276h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (_al == 0x02)                            //jz short loc_126E7
        goto loc_126E7;
    goto loc_126FF;                             //jmp short loc_126FF
loc_126E7:                                      //loc_126E7:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_126FD
        goto loc_126FD;
    _al = 0x17;                                 //mov al, 17h
    goto loc_126FF;                             //jmp short loc_126FF
loc_126FD:                                      //loc_126FD:
    _al = 0x02;                                 //mov al, 2
loc_126FF:                                      //loc_126FF:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_1270C()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1271A
        goto loc_1271A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1271A:                                      //loc_1271A:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    _al = memory(_ds, 0x855E);                  //mov al, byte_2890E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_12731
        goto loc_12731;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x14;                                 //mov al, 14h
    goto loc_12769;                             //jmp short loc_12769
loc_12731:                                      //loc_12731:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17046);             //mov al, [bx+4296h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (_al == 0x08)                            //jz short loc_12753
        goto loc_12753;
    goto loc_12769;                             //jmp short loc_12769
loc_12753:                                      //loc_12753:
    _al = memory(_ds, 0x8570);                  //mov al, byte_28920
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_12767
        goto loc_12767;
    _al = 0x18;                                 //mov al, 18h
    goto loc_12769;                             //jmp short loc_12769
loc_12767:                                      //loc_12767:
    _al = 0x08;                                 //mov al, 8
loc_12769:                                      //loc_12769:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12776()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12784
        goto loc_12784;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12784:                                      //loc_12784:
    memory(_ds, 0x8551) = 0x00;                 //mov byte_28901, 0
    if (memory(_ds, 0x855E) != 0x07)            //jnz short loc_12799
        goto loc_12799;
    memory(_ds, 0x8551) = 0x1f;                 //mov byte_28901, 1Fh
    _al = 0x15;                                 //mov al, 15h
    goto loc_127D1;                             //jmp short loc_127D1
loc_12799:                                      //loc_12799:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ax);                                 //push ax
    sub_16BD4();                                //call sub_16BD4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17078);             //mov al, [bx+42B6h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (_al == 0x09)                            //jz short loc_127B9
        goto loc_127B9;
    goto loc_127D1;                             //jmp short loc_127D1
loc_127B9:                                      //loc_127B9:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7921) != 0x0b)            //jnz short loc_127CF
        goto loc_127CF;
    _al = 0x19;                                 //mov al, 19h
    goto loc_127D1;                             //jmp short loc_127D1
loc_127CF:                                      //loc_127CF:
    _al = 0x09;                                 //mov al, 9
loc_127D1:                                      //loc_127D1:
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_127DE()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_127EA
        goto loc_127EA;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_127EA:                                      //loc_127EA:
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x7923) = _al;                  //mov byte_27CD3, al
    memory(_ds, 0xA1A7) = _al;                  //mov byte_2A557, al
    memory(_ds, 0x79B9) = 0x0b;                 //mov byte_27D69, 0Bh
    if (memory(_ds, 0x7924) != 0x11)            //jnz short loc_12808
        goto loc_12808;
    _al = 0x2f;                                 //mov al, 2Fh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_1280B;                             //jmp short loc_1280B
loc_12808:                                      //loc_12808:
    sub_12810();                                //call sub_12810
loc_1280B:                                      //loc_1280B:
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_12810()
{
    const int var_4 = -4;                       //var_4  = byte ptr -4
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1281F
        goto loc_1281F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1281F:                                      //loc_1281F:
    if (memory(_ds, 0x8552) == 0x03)            //jz short loc_12862
        goto loc_12862;
    if (memory(_ds, 0x8552) == 0x0d)            //jz short loc_12862
        goto loc_12862;
    if (memory(_ds, 0x8552) == 0x10)            //jz short loc_12862
        goto loc_12862;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12848
        goto loc_12848;
    _al = memory(_ds, 0x7922);                  //mov al, byte_27CD2
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9886);              //mov al, [bx+269Eh]
    goto loc_12853;                             //jmp short loc_12853
loc_12848:                                      //loc_12848:
    _al = memory(_ds, 0x7922);                  //mov al, byte_27CD2
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9838);              //mov al, [bx+266Eh]
loc_12853:                                      //loc_12853:
    memory(_ss, _bp + var_4) = _al;             //mov [bp+var_4], al
    if (memory(_ss, _bp + var_4) == 0x00)       //jz short loc_12862
        goto loc_12862;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_12862:                                      //loc_12862:
    if (memory(_ds, 0x856E) >= 0x08)            //jnb short loc_12871
        goto loc_12871;
    _al = 0x06;                                 //mov al, 6
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    goto loc_128DA;                             //jmp short loc_128DA
loc_12871:                                      //loc_12871:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xf8;                                //add al, 0F8h
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    memory(_ds, 0x79B9) = _al;                  //mov byte_27D69, al
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 1898);              //mov al, [bx+76Ah]
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 1899);              //mov al, [bx+76Bh]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x792C) != 0x0a)            //jnz short loc_128CD
        goto loc_128CD;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_128C5
        goto loc_128C5;
    _al = 0x14;                                 //mov al, 14h
    goto loc_128C7;                             //jmp short loc_128C7
loc_128C5:                                      //loc_128C5:
    _al = 0x09;                                 //mov al, 9
loc_128C7:                                      //loc_128C7:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_128CD:                                      //loc_128CD:
    if (memory(_ss, _bp + var_3) == 0x00)       //jz short loc_128DC
        goto loc_128DC;
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
loc_128DA:                                      //loc_128DA:
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_128DC:                                      //loc_128DC:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_128E0()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_128EC
        goto loc_128EC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_128EC:                                      //loc_128EC:
    _al = 0x04;                                 //mov al, 4
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_128F9()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12905
        goto loc_12905;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12905:                                      //loc_12905:
    memory(_ds, 0x824C) = 0x08;                 //mov byte_285FC, 8
    if (memory(_ds, 0x79B4) != 0x00)            //jnz short loc_12918
        goto loc_12918;
    if (memory(_ds, 0x7924) != 0x00)            //jnz short loc_1292E
        goto loc_1292E;
loc_12918:                                      //loc_12918:
    memory(_ds, 0x79B4) = 0x00;                 //mov byte_27D64, 0
    if (memory(_ds, 0x856E) >= 0x28)            //jnb short loc_12929
        goto loc_12929;
    sub_128E0();                                //call sub_128E0
    goto loc_12963;                             //jmp short loc_12963
loc_12929:                                      //loc_12929:
    sub_142D9();                                //call sub_142D9
    goto loc_12963;                             //jmp short loc_12963
loc_1292E:                                      //loc_1292E:
    if (memory(_ds, 0x7924) != 0x20)            //jnz short loc_12948
        goto loc_12948;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_12940
        goto loc_12940;
    _al = 0x03;                                 //mov al, 3
    goto loc_12942;                             //jmp short loc_12942
loc_12940:                                      //loc_12940:
    _al = 0x28;                                 //mov al, 28h
loc_12942:                                      //loc_12942:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_12948:                                      //loc_12948:
    if (memory(_ds, 0x7924) != 0x16)            //jnz short loc_12954
        goto loc_12954;
    sub_14305();                                //call sub_14305
    goto loc_12963;                             //jmp short loc_12963
loc_12954:                                      //loc_12954:
    if (memory(_ds, 0x7924) != 0x03)            //jnz short loc_12960
        goto loc_12960;
    sub_1463D();                                //call sub_1463D
    goto loc_12963;                             //jmp short loc_12963
loc_12960:                                      //loc_12960:
    sub_12965();                                //call sub_12965
loc_12963:                                      //loc_12963:
    _bp = _pop();                               //pop bp
}

void sub_12965()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12971
        goto loc_12971;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12971:                                      //loc_12971:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_1297D
        goto loc_1297D;
    sub_1467D();                                //call sub_1467D
    goto loc_129A4;                             //jmp short loc_129A4
loc_1297D:                                      //loc_1297D:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_12989
        goto loc_12989;
    sub_1469C();                                //call sub_1469C
    goto loc_129A4;                             //jmp short loc_129A4
loc_12989:                                      //loc_12989:
    if (memory(_ds, 0x7924) != 0x0a)            //jnz short loc_12995
        goto loc_12995;
    sub_147CB();                                //call sub_147CB
    goto loc_129A4;                             //jmp short loc_129A4
loc_12995:                                      //loc_12995:
    if (memory(_ds, 0x7924) != 0x0f)            //jnz short loc_129A1
        goto loc_129A1;
    sub_14802();                                //call sub_14802
    goto loc_129A4;                             //jmp short loc_129A4
loc_129A1:                                      //loc_129A1:
    sub_129A6();                                //call sub_129A6
loc_129A4:                                      //loc_129A4:
    _bp = _pop();                               //pop bp
}

void sub_129A6()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_129B2
        goto loc_129B2;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_129B2:                                      //loc_129B2:
    if (memory(_ds, 0x856E) >= 0x08)            //jnb short loc_129BE
        goto loc_129BE;
    sub_1465E();                                //call sub_1465E
    goto loc_12A08;                             //jmp short loc_12A08
loc_129BE:                                      //loc_129BE:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xf8;                                //add al, 0F8h
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) == 0x0e)               //jz short loc_129D9
        goto loc_129D9;
    sub_1465E();                                //call sub_1465E
    goto loc_12A08;                             //jmp short loc_12A08
loc_129D9:                                      //loc_129D9:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_129E5
        goto loc_129E5;
    sub_1253F();                                //call sub_1253F
    goto loc_12A08;                             //jmp short loc_12A08
loc_129E5:                                      //loc_129E5:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_129F0
        goto loc_129F0;
    _al = 0x14;                                 //mov al, 14h
    goto loc_129F2;                             //jmp short loc_129F2
loc_129F0:                                      //loc_129F0:
    _al = 0x09;                                 //mov al, 9
loc_129F2:                                      //loc_129F2:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x24;                                 //mov al, 24h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x0a;                                 //mov al, 0Ah
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_12A08:                                      //loc_12A08:
    _bp = _pop();                               //pop bp
}

void sub_12A0A()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12A1A
        goto loc_12A1A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12A1A:                                      //loc_12A1A:
    _di = _di ^ _di;                            //xor di, di
    goto loc_12A6D;                             //jmp short loc_12A6D
loc_12A1E:                                      //loc_12A1E:
    _si = _si ^ _si;                            //xor si, si
    goto loc_12A62;                             //jmp short loc_12A62
loc_12A22:                                      //loc_12A22:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    sub_10B88();                                //call sub_10B88
    _sp += 0x0006;                              //add sp, 6
    _ax = _si;                                  //mov ax, si
    _dx = 0x0027;                               //mov dx, 27h
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x6BCA);                     //les bx, dword_26F7A
    _bx += _ax;                                 //add bx, ax
    _ax = _di;                                  //mov ax, di
    _sar(_ax, 1);                               //sar ax, 1
    _dx = 0x0003;                               //mov dx, 3
    _imul(_dx);                                 //imul dx
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 32);                //mov al, es:[bx+20h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_12A61
        goto loc_12A61;
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_10A90();                                //call sub_10A90
    _sp += 0x0008;                              //add sp, 8
loc_12A61:                                      //loc_12A61:
    _si += 1;                                   //inc si
loc_12A62:                                      //loc_12A62:
    if ((short)_si < (short)0x0014)             //jl short loc_12A22
        goto loc_12A22;
    _ax = _di;                                  //mov ax, di
    _ax += 1;                                   //inc ax
    _ax += 1;                                   //inc ax
    _di = _ax;                                  //mov di, ax
loc_12A6D:                                      //loc_12A6D:
    if ((short)_di < (short)0x001a)             //jl short loc_12A1E
        goto loc_12A1E;
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12A78()
{
    const int var_14 = -20;                     //var_14  = dword ptr -14h
    const int var_10 = -16;                     //var_10  = dword ptr -10h
    const int var_C = -12;                      //var_C  = dword ptr -0Ch
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0014;                              //sub sp, 14h
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12A89
        goto loc_12A89;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12A89:                                      //loc_12A89:
    memory(_ds, 0x4C40) = 0x00;                 //mov byte_24FF0, 0
    memory(_ds, 0x4C4C) = 0x00;                 //mov byte_24FFC, 0
    memory(_ds, 0x4C58) = 0x00;                 //mov byte_25008, 0
    memory(_ds, 0x4C80) = 0x00;                 //mov byte_25030, 0
    memory(_ds, 0x4C8C) = 0x00;                 //mov byte_2503C, 0
    memory(_ds, 0x4C98) = 0x00;                 //mov byte_25048, 0
    memory(_ds, 0x4CA4) = 0x00;                 //mov byte_25054, 0
    _ax = memory16(_ds, 0x4C72);                //mov ax, seg_25022
    _dx = memory16(_ds, 0x4C70);                //mov dx, word_25020
    memory16(_ss, _bp + var_10) = _dx;          //mov word ptr [bp+var_10], dx
    memory16(_ss, _bp + var_10 + 2) = _ax;      //mov word ptr [bp+var_10+2], ax
    _ax = memory16(_ds, 0x4CBE);                //mov ax, seg_2506E
    _dx = memory16(_ds, 0x4CBC);                //mov dx, word_2506C
    memory16(_ss, _bp + var_14) = _dx;          //mov word ptr [bp+var_14], dx
    memory16(_ss, _bp + var_14 + 2) = _ax;      //mov word ptr [bp+var_14+2], ax
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _al = 0x01;                                 //mov al, 1
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ds, 0x8E8B) = _al;                  //mov byte_2923B, al
    _les(_bx, _ss, _bp + var_14);               //les bx, [bp+var_14]
    _al = 0x01;                                 //mov al, 1
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ds, 0x8E8C) = _al;                  //mov byte_2923C, al
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _al = 0x01;                                 //mov al, 1
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    memory(_ds, 0x8578) = _al;                  //mov byte_28928, al
    _les(_bx, _ss, _bp + var_14);               //les bx, [bp+var_14]
    _al = 0x01;                                 //mov al, 1
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    memory(_ds, 0x8579) = _al;                  //mov byte_28929, al
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _al = memory(_es, _bx + 144);               //mov al, es:[bx+90h]
    memory(_ds, 0x856E) = _al;                  //mov byte_2891E, al
    if (memory(_ds, 0x856E) == 0x00)            //jz short loc_12B0B
        goto loc_12B0B;
    memory(_ds, 0x856E) -= 1;                   //dec byte_2891E
loc_12B0B:                                      //loc_12B0B:
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _al = memory(_es, _bx + 145);               //mov al, es:[bx+91h]
    memory(_ds, 0x8572) = _al;                  //mov byte_28922, al
    if (memory(_ds, 0x8572) == 0x00)            //jz short loc_12B22
        goto loc_12B22;
    memory(_ds, 0x8572) -= 1;                   //dec byte_28922
loc_12B22:                                      //loc_12B22:
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _al = memory(_es, _bx + 146);               //mov al, es:[bx+92h]
    memory(_ds, 0xA0CF) = _al;                  //mov byte_2A47F, al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 147);               //mov al, es:[bx+93h]
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0x8571) = _al;                  //mov byte_28921, al
    _al = memory(_es, _bx + 149);               //mov al, es:[bx+95h]
    memory(_ds, 0x7920) = _al;                  //mov byte_27CD0, al
    _al = memory(_es, _bx + 148);               //mov al, es:[bx+94h]
    memory(_ds, 0x8562) = _al;                  //mov byte_28912, al
    _al = memory(_es, _bx + 150);               //mov al, es:[bx+96h]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 9542);            //mov ax, [bx+2546h]
    memory16(_ds, 0xA0DE) = _ax;                //mov word_2A48E, ax
    sub_1483C();                                //call sub_1483C
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    goto loc_12CED;                             //jmp loc_12CED
loc_12B68:                                      //loc_12B68:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_12CE1;                             //jmp loc_12CE1
loc_12B6F:                                      //loc_12B6F:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al = _al + memory(_ss, _bp + var_1);       //add al, [bp+var_1]
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dh = 0x00;                                 //mov dh, 0
    _ax += _dx;                                 //add ax, dx
    _es = memory16(_ds, 0xA0DA);                //mov es, word ptr dword_2A488+2
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_12BEB
        goto loc_12BEB;
    _al = memory(_ds, _si + 15674);             //mov al, [si+3D3Ah]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _bx = _si;                                  //mov bx, si
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 15724);           //mov ax, [bx+3D6Ch]
    _dx = memory16(_ds, _bx + 15722);           //mov dx, [bx+3D6Ah]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _push(_es);                                 //push es
    _les(_di, _ss, _bp + var_8);                //les di, [bp+var_8]
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _es = _pop();                               //pop es
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    memory16(_es, _bx + 10) = _ax;              //mov es:[bx+0Ah], ax
    sub_1165E();                                //call sub_1165E
    sub_11A67();                                //call sub_11A67
loc_12BEB:                                      //loc_12BEB:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_12C5B
        goto loc_12C5B;
    if (memory(_ss, _bp + var_1) == 0x07)       //jz short loc_12C5B
        goto loc_12C5B;
    _al = memory(_ds, _si + 16518);             //mov al, [si+4086h]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _bx = _si;                                  //mov bx, si
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 16552);           //mov ax, [bx+40A8h]
    _dx = memory16(_ds, _bx + 16550);           //mov dx, [bx+40A6h]
    memory16(_ss, _bp + var_C) = _dx;           //mov word ptr [bp+var_C], dx
    memory16(_ss, _bp + var_C + 2) = _ax;       //mov word ptr [bp+var_C+2], ax
    _les(_bx, _ss, _bp + var_14);               //les bx, [bp+var_14]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _push(_es);                                 //push es
    _les(_di, _ss, _bp + var_C);                //les di, [bp+var_C]
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _es = _pop();                               //pop es
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _les(_bx, _ss, _bp + var_C);                //les bx, [bp+var_C]
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _les(_bx, _ss, _bp + var_14);               //les bx, [bp+var_14]
    memory16(_es, _bx + 10) = _ax;              //mov es:[bx+0Ah], ax
    sub_117C7();                                //call sub_117C7
    sub_11B2B();                                //call sub_11B2B
loc_12C5B:                                      //loc_12C5B:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 96);                //mov al, es:[bx+60h]
    _ah = 0x00;                                 //mov ah, 0
    _si = _ax;                                  //mov si, ax
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_12CDE
        goto loc_12CDE;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _dl = memory(_ss, _bp + var_2);             //mov dl, [bp+var_2]
    _dh = 0x00;                                 //mov dh, 0
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _ax += _dx;                                 //add ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 628);             //mov ax, [bx+274h]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _dl = memory(_ss, _bp + var_2);             //mov dl, [bp+var_2]
    _dh = 0x00;                                 //mov dh, 0
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _ax += _dx;                                 //add ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 630);             //mov ax, [bx+276h]
    _bx = memory16(_ds, 0x8884);                //mov bx, word ptr dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _ax = _si;                                  //mov ax, si
    _ax += 0x0179;                              //add ax, 179h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_12CDE:                                      //loc_12CDE:
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_12CE1:                                      //loc_12CE1:
    if (memory(_ss, _bp + var_1) >= 0x08)       //jnb short loc_12CEA
        goto loc_12CEA;
    goto loc_12B6F;                             //jmp loc_12B6F
loc_12CEA:                                      //loc_12CEA:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_12CED:                                      //loc_12CED:
    if (memory(_ss, _bp + var_2) >= 0x06)       //jnb short loc_12CF6
        goto loc_12CF6;
    goto loc_12B68;                             //jmp loc_12B68
loc_12CF6:                                      //loc_12CF6:
    _les(_bx, _ss, _bp + var_10);               //les bx, [bp+var_10]
    _al = 0x00;                                 //mov al, 0
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    _les(_bx, _ss, _bp + var_14);               //les bx, [bp+var_14]
    _al = 0x00;                                 //mov al, 0
    memory(_es, _bx + 6) = _al;                 //mov es:[bx+6], al
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12D14()
{
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12D24
        goto loc_12D24;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12D24:                                      //loc_12D24:
    memory(_ss, _bp + var_5) = 0x01;            //mov [bp+var_5], 1
    if (memory(_ds, 0x79B2) <= 0x01)            //jbe short loc_12D3B
        goto loc_12D3B;
    _al = memory(_ds, 0x119A);                  //mov al, byte_2154A
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_12D3B
        goto loc_12D3B;
    sub_14015();                                //call sub_14015
loc_12D3B:                                      //loc_12D3B:
    if (memory(_ds, 0x119A) != 0xff)            //jnz short loc_12D47
        goto loc_12D47;
    memory(_ds, 0x79B2) = 0x01;                 //mov byte_27D62, 1
loc_12D47:                                      //loc_12D47:
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 4298);            //mov ax, [bx+10CAh]
    _dx = memory16(_ds, _bx + 4296);            //mov dx, [bx+10C8h]
    memory16(_ds, 0x8246) = _dx;                //mov word ptr dword_285F6, dx
    memory16(_ds, 0x8248) = _ax;                //mov word ptr dword_285F6+2, ax
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 4334);            //mov ax, [bx+10EEh]
    _dx = memory16(_ds, _bx + 4332);            //mov dx, [bx+10ECh]
    memory16(_ds, 0x8554) = _dx;                //mov word ptr dword_28904, dx
    memory16(_ds, 0x8556) = _ax;                //mov word ptr dword_28904+2, ax
    memory(_ds, 0x854E) = 0x01;                 //mov byte_288FE, 1
    _ax = 0x001f;                               //mov ax, 1Fh
    memory16(_ds, 0x791E) = _ax;                //mov word_27CCE, ax
    memory16(_ds, 0x791C) = _ax;                //mov word_27CCC, ax
    if (memory(_ds, 0x79B2) == 0x02)            //jz short loc_12D97
        goto loc_12D97;
    if (memory(_ds, 0x79B2) != 0x05)            //jnz short loc_12DB6
        goto loc_12DB6;
loc_12D97:                                      //loc_12D97:
    memory16(_ds, 0x791C) = 0x006f;             //mov word_27CCC, 6Fh
    goto loc_12DB6;                             //jmp short loc_12DB6
loc_12D9F:                                      //loc_12D9F:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x00;                    //mov byte ptr es:[bx], 0
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
loc_12DB6:                                      //loc_12DB6:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) != 0xff)               //jnz short loc_12D9F
        goto loc_12D9F;
    _push(_ds);                                 //push ds
    _ax = 0x0090;                               //mov ax, 90h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x90);                       //les bx, off_20440
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _al += 0x30;                                //add al, 30h
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _les(_bx, _ds, 0x9A);                       //les bx, off_2044A
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _al += 0x30;                                //add al, 30h
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _les(_bx, _ds, 0xE0);                       //les bx, off_20490
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _al += 0x30;                                //add al, 30h
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x98));                 //push word_20448
    _push(memory16(_ds, 0x96));                 //push word_20446
    _push(memory16(_ds, 0x6FA8));               //push word_27358
    _push(memory16(_ds, 0x6FA6));               //push word_27356
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0x98));                 //push word_20448
    _push(memory16(_ds, 0x96));                 //push word_20446
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x6FA8));               //push word_27358
    _push(memory16(_ds, 0x6FA6));               //push word_27356
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xA2));                 //push word_20452
    _push(memory16(_ds, 0xA0));                 //push word_20450
    _push(memory16(_ds, 0x6BEA));               //push word_26F9A
    _push(memory16(_ds, 0x6BE8));               //push word_26F98
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0xA2));                 //push word_20452
    _push(memory16(_ds, 0xA0));                 //push word_20450
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x6BEA));               //push word_26F9A
    _push(memory16(_ds, 0x6BE8));               //push word_26F98
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0008;                               //mov ax, 8
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xE8));                 //push word_20498
    _push(memory16(_ds, 0xE6));                 //push word_20496
    _push(memory16(_ds, 0x75E0));               //push word_27990
    _push(memory16(_ds, 0x75DE));               //push word_2798E
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0xE8));                 //push word_20498
    _push(memory16(_ds, 0xE6));                 //push word_20496
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x75E0));               //push word_27990
    _push(memory16(_ds, 0x75DE));               //push word_2798E
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12EF8()
{
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12F08
        goto loc_12F08;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12F08:                                      //loc_12F08:
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    sub_12FAC();                                //call sub_12FAC
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x930));                //push word_20CE0
    _push(memory16(_ds, 0x92E));                //push word_20CDE
    _push(memory16(_ds, 0xA0C8));               //push word_2A478
    _push(memory16(_ds, 0xA0C6));               //push word_2A476
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(memory16(_ds, 0xA0C8));               //push word_2A478
    _push(memory16(_ds, 0xA0C6));               //push word_2A476
    sub_193D8();                                //call sub_193D8
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x93A));                //push word_20CEA
    _push(memory16(_ds, 0x938));                //push word_20CE8
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    sub_151D8();                                //call sub_151D8
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_12FAC()
{
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_12FBD
        goto loc_12FBD;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_12FBD:                                      //loc_12FBD:
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x944));                //push word_20CF4
    _push(memory16(_ds, 0x942));                //push word_20CF2
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_1304C
        goto loc_1304C;
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    goto loc_13046;                             //jmp short loc_13046
loc_13029:                                      //loc_13029:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1594);              //mov al, [di+63Ah]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
loc_13046:                                      //loc_13046:
    if (memory(_ss, _bp + var_5) < 0x10)        //jb short loc_13029
        goto loc_13029;
loc_1304C:                                      //loc_1304C:
    sub_13467();                                //call sub_13467
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    sub_130DD();                                //call sub_130DD
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_130DD()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_130EC
        goto loc_130EC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_130EC:                                      //loc_130EC:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x958));                //push word_20D08
    _push(memory16(_ds, 0x956));                //push word_20D06
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0005;                               //mov ax, 5
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x962));                //push word_20D12
    _push(memory16(_ds, 0x960));                //push word_20D10
    _push(memory16(_ds, 0xA0C8));               //push word_2A478
    _push(memory16(_ds, 0xA0C6));               //push word_2A476
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x689C) == 0x8000)        //jz short loc_131BD
        goto loc_131BD;
    goto loc_1319C;                             //jmp short loc_1319C
loc_13157:                                      //loc_13157:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(memory16(_ds, 0xA0C8));               //push word_2A478
    _push(memory16(_ds, 0xA0C6));               //push word_2A476
    sub_18977();                                //call sub_18977
    _sp += 0x000a;                              //add sp, 0Ah
    goto loc_1318C;                             //jmp short loc_1318C
loc_13173:                                      //loc_13173:
    _ax = memory16(_ds, 0x119C);                //mov ax, word_2154C
    _ax += 0x0007;                              //add ax, 7
    memory16(_ds, 0x119C) = _ax;                //mov word_2154C, ax
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (!(_al & 0x10))                          //jz short loc_1318C
        goto loc_1318C;
    memory(_ss, _bp + var_1) = 0x01;            //mov [bp+var_1], 1
loc_1318C:                                      //loc_1318C:
    sub_18999();                                //call sub_18999
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_1319C
        goto loc_1319C;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_13173
        goto loc_13173;
loc_1319C:                                      //loc_1319C:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_13157
        goto loc_13157;
    sub_189A8();                                //call sub_189A8
    if (memory16(_ds, 0x689C) != 0x0000)        //jnz short loc_131D9
        goto loc_131D9;
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17E18();                                //call sub_17E18
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1946E();                                //call sub_1946E
    goto loc_131D9;                             //jmp short loc_131D9
loc_131BD:                                      //loc_131BD:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    goto loc_131D0;                             //jmp short loc_131D0
loc_131C4:                                      //loc_131C4:
    sub_11DDE();                                //call sub_11DDE
    _ax = memory16(_ds, 0x119C);                //mov ax, word_2154C
    _ax += 0x0007;                              //add ax, 7
    memory16(_ds, 0x119C) = _ax;                //mov word_2154C, ax
loc_131D0:                                      //loc_131D0:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_131C4
        goto loc_131C4;
loc_131D9:                                      //loc_131D9:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_131DE()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_131EA
        goto loc_131EA;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_131EA:                                      //loc_131EA:
    memory(_ds, 0x8242) = 0x00;                 //mov byte_285F2, 0
    memory(_ds, 0x792A) = 0x00;                 //mov byte_27CDA, 0
    memory16(_ds, 0x824A) = 0x0000;             //mov word_285FA, 0
    memory(_ds, 0xA0CE) = 0x00;                 //mov byte_2A47E, 0
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x8578) = _al;                  //mov byte_28928, al
    memory(_ds, 0x8E8B) = _al;                  //mov byte_2923B, al
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x8579) = _al;                  //mov byte_28929, al
    memory(_ds, 0x8E8C) = _al;                  //mov byte_2923C, al
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    memory(_ds, 0xA1A7) = 0x00;                 //mov byte_2A557, 0
    memory(_ds, 0x79B4) = 0x00;                 //mov byte_27D64, 0
    memory(_ds, 0x7923) = 0x00;                 //mov byte_27CD3, 0
    memory(_ds, 0x824C) = 0x00;                 //mov byte_285FC, 0
    memory(_ds, 0xA1A8) = 0x00;                 //mov byte_2A558, 0
    memory(_ds, 0xA1B1) = 0x00;                 //mov byte_2A561, 0
    memory(_ds, 0x8550) = 0x00;                 //mov byte_28900, 0
    memory(_ds, 0x8563) = 0x00;                 //mov byte_28913, 0
    memory(_ds, 0xA1B0) = 0x00;                 //mov byte_2A560, 0
    memory(_ds, 0x8243) = 0x00;                 //mov byte_285F3, 0
    memory(_ds, 0x79B7) = 0x00;                 //mov byte_27D67, 0
    memory16(_ds, 0x9BA6) = _FIXME_;            //mov word ptr dword_29F56, offset unk_20C36
    memory16(_ds, 0x9BA8) = _ds;                //mov word ptr dword_29F56+2, ds
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    memory(_es, _bx) = 0xff;                    //mov byte ptr es:[bx], 0FFh
    sub_14906();                                //call sub_14906
    sub_148A9();                                //call sub_148A9
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0xfff4;                              //add ax, 0FFF4h
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    memory(_ds, 0x792C) = 0x00;                 //mov byte_27CDC, 0
    memory16(_ds, 0xA1AC) = _FIXME_;            //mov word ptr dword_2A55C, offset unk_21744
    memory16(_ds, 0xA1AE) = _ds;                //mov word ptr dword_2A55C+2, ds
    memory(_ds, 0x824D) = 0x0a;                 //mov byte_285FD, 0Ah
    _al = 0x04;                                 //mov al, 4
    memory(_ds, 0x9BAE) = _al;                  //mov byte_29F5E, al
    memory(_ds, 0x792A) = _al;                  //mov byte_27CDA, al
    memory(_ds, 0xA1A9) = 0x00;                 //mov byte_2A559, 0
    _bp = _pop();                               //pop bp
}

void sub_1328F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1329B
        goto loc_1329B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1329B:                                      //loc_1329B:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    goto loc_132A5;                             //jmp short loc_132A5
loc_132A2:                                      //loc_132A2:
    sub_11DDE();                                //call sub_11DDE
loc_132A5:                                      //loc_132A5:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_132A2
        goto loc_132A2;
    _bp = _pop();                               //pop bp
}

void sub_132B0()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_132BC
        goto loc_132BC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_132BC:                                      //loc_132BC:
    _ax = memory16(_ds, 0x7310);                //mov ax, word_276C0
    _dx = 0x00c2;                               //mov dx, 0C2h
    _imul(_dx);                                 //imul dx
    _dx = memory16(_ds, 0x6BF4);                //mov dx, word_26FA4
    _bx = memory16(_ds, 0x6BF2);                //mov bx, word_26FA2
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, 0x75D0) = _bx;                //mov word ptr dword_27980, bx
    memory16(_ds, 0x75D2) = _dx;                //mov word ptr dword_27980+2, dx
    _ax = memory16(_ds, 0x7310);                //mov ax, word_276C0
    _dx = 0x032c;                               //mov dx, 32Ch
    _imul(_dx);                                 //imul dx
    _dx = memory16(_ds, 0x6BD4);                //mov dx, word_26F84
    _bx = memory16(_ds, 0x6BD2);                //mov bx, word_26F82
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, 0x6BCA) = _bx;                //mov word ptr dword_26F7A, bx
    memory16(_ds, 0x6BCC) = _dx;                //mov word ptr dword_26F7A+2, dx
    memory16(_ds, 0xA0D8) = _FIXME_;            //mov word ptr dword_2A488, offset unk_2A494
    memory16(_ds, 0xA0DA) = _ds;                //mov word ptr dword_2A488+2, ds
    _cl = 0x00;                                 //mov cl, 0
    goto loc_13352;                             //jmp short loc_13352
loc_132FE:                                      //loc_132FE:
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _dl = _cl;                                  //mov dl, cl
    _dh = 0x00;                                 //mov dh, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _dx;                                 //add bx, dx
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    _dl = _cl;                                  //mov dl, cl
    _dh = 0x00;                                 //mov dh, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _dx;                                 //add bx, dx
    memory(_es, _bx + 48) = _al;                //mov es:[bx+30h], al
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 96);                //mov al, es:[bx+60h]
    _dl = _cl;                                  //mov dl, cl
    _dh = 0x00;                                 //mov dh, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _dx;                                 //add bx, dx
    memory(_es, _bx + 96) = _al;                //mov es:[bx+60h], al
    _cl += 1;                                   //inc cl
loc_13352:                                      //loc_13352:
    if (_cl < 0x30)                             //jb short loc_132FE
        goto loc_132FE;
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 144);               //mov al, es:[bx+90h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 144) = _al;               //mov es:[bx+90h], al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 145);               //mov al, es:[bx+91h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 145) = _al;               //mov es:[bx+91h], al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 146);               //mov al, es:[bx+92h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 146) = _al;               //mov es:[bx+92h], al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 147);               //mov al, es:[bx+93h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 147) = _al;               //mov es:[bx+93h], al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 148);               //mov al, es:[bx+94h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 148) = _al;               //mov es:[bx+94h], al
    _les(_bx, _ds, 0x75D0);                     //les bx, dword_27980
    _al = memory(_es, _bx + 149);               //mov al, es:[bx+95h]
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    memory(_es, _bx + 149) = _al;               //mov es:[bx+95h], al
    _bp = _pop();                               //pop bp
}

void sub_133C5()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_133D1
        goto loc_133D1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_133D1:                                      //loc_133D1:
    memory16(_ds, 0x8884) = _FIXME_;            //mov word ptr dword_28C34, offset unk_27CDE
    memory16(_ds, 0x8886) = _ds;                //mov word ptr dword_28C34+2, ds
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ds, 0xA0C8);                //mov ax, word_2A478
    _dx = memory16(_ds, 0xA0C6);                //mov dx, word_2A476
    memory16(_es, _bx + 6) = _dx;               //mov es:[bx+6], dx
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    memory(_es, _bx + 10) |= 0x80;              //or byte ptr es:[bx+0Ah], 80h
    memory(_es, _bx + 10) &= 0xbf;              //and byte ptr es:[bx+0Ah], 0BFh
    memory(_es, _bx + 10) &= 0xdf;              //and byte ptr es:[bx+0Ah], 0DFh
    memory(_es, _bx + 10) &= 0xef;              //and byte ptr es:[bx+0Ah], 0EFh
    memory(_es, _bx + 10) &= 0xf7;              //and byte ptr es:[bx+0Ah], 0F7h
    memory16(_ds, 0x9B9E) = _FIXME_;            //mov word ptr dword_29F4E, offset unk_27D0A
    memory16(_ds, 0x9BA0) = _ds;                //mov word ptr dword_29F4E+2, ds
    _les(_bx, _ds, 0x9B9E);                     //les bx, dword_29F4E
    memory16(_es, _bx + 6) = _dx;               //mov es:[bx+6], dx
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    memory(_es, _bx + 10) |= 0x80;              //or byte ptr es:[bx+0Ah], 80h
    memory(_es, _bx + 10) &= 0xbf;              //and byte ptr es:[bx+0Ah], 0BFh
    memory(_es, _bx + 10) &= 0xdf;              //and byte ptr es:[bx+0Ah], 0DFh
    memory(_es, _bx + 10) &= 0xef;              //and byte ptr es:[bx+0Ah], 0EFh
    memory(_es, _bx + 10) &= 0xf7;              //and byte ptr es:[bx+0Ah], 0F7h
    memory16(_ds, 0xA0D0) = _FIXME_;            //mov word ptr dword_2A480, offset unk_27D36
    memory16(_ds, 0xA0D2) = _ds;                //mov word ptr dword_2A480+2, ds
    _les(_bx, _ds, 0xA0D0);                     //les bx, dword_2A480
    memory16(_es, _bx + 6) = _dx;               //mov es:[bx+6], dx
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    memory(_es, _bx + 10) |= 0x80;              //or byte ptr es:[bx+0Ah], 80h
    memory(_es, _bx + 10) &= 0xbf;              //and byte ptr es:[bx+0Ah], 0BFh
    memory(_es, _bx + 10) &= 0xdf;              //and byte ptr es:[bx+0Ah], 0DFh
    memory(_es, _bx + 10) &= 0xef;              //and byte ptr es:[bx+0Ah], 0EFh
    memory(_es, _bx + 10) &= 0xf7;              //and byte ptr es:[bx+0Ah], 0F7h
    _bp = _pop();                               //pop bp
}

void sub_13467()
{
    const int var_68 = -104;                    //var_68  = byte ptr -68h
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0068;                              //sub sp, 68h
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13477
        goto loc_13477;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13477:                                      //loc_13477:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory(_es, _bx + 34) = 0x00;               //mov byte ptr es:[bx+22h], 0
    memory(_es, _bx + 35) = 0x00;               //mov byte ptr es:[bx+23h], 0
    memory(_es, _bx + 36) = 0x00;               //mov byte ptr es:[bx+24h], 0
    memory(_es, _bx + 37) = 0x00;               //mov byte ptr es:[bx+25h], 0
    memory16(_es, _bx + 14) = 0x0000;           //mov word ptr es:[bx+0Eh], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory(_ss, _bp + var_2) = 0x14;            //mov [bp+var_2], 14h
    memory(_ss, _bp + var_3) = 0x19;            //mov [bp+var_3], 19h
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_13566;                             //jmp loc_13566
loc_134AA:                                      //loc_134AA:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    sub_19864();                                //call sub_19864
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0018;                               //mov dx, 18h
    _dx -= _ax;                                 //sub dx, ax
    memory16(_es, _bx + 22) = _dx;              //mov es:[bx+16h], dx
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    sub_19864();                                //call sub_19864
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _al += 0xfe;                                //add al, 0FEh
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 32) = _ax;              //mov es:[bx+20h], ax
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    sub_19864();                                //call sub_19864
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0013;                               //mov dx, 13h
    _dx -= _ax;                                 //sub dx, ax
    memory16(_es, _bx + 20) = _dx;              //mov es:[bx+14h], dx
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    sub_19864();                                //call sub_19864
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _al += 0xfe;                                //add al, 0FEh
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_13566:                                      //loc_13566:
    if (memory(_ss, _bp + var_1) > 0x09)        //ja short loc_1356F
        goto loc_1356F;
    goto loc_134AA;                             //jmp loc_134AA
loc_1356F:                                      //loc_1356F:
    _si = _si ^ _si;                            //xor si, si
    goto loc_13582;                             //jmp short loc_13582
loc_13573:                                      //loc_13573:
    _bx = _si;                                  //mov bx, si
    _bx <<= 1;                                  //shl bx, 1
    _lea(_ax, _ss, _bp + var_68);               //lea ax, [bp+var_68]
    _bx += _ax;                                 //add bx, ax
    memory16(_ss, _bx) = 0x0000;                //mov word ptr ss:[bx], 0
    _si += 1;                                   //inc si
loc_13582:                                      //loc_13582:
    if (_si < 0x0032)                           //jb short loc_13573
        goto loc_13573;
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_68);               //lea ax, [bp+var_68]
    _push(_ax);                                 //push ax
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_135A5()
{
    const int var_B = -11;                      //var_B  = byte ptr -0Bh
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_6 = -6;                       //var_6  = byte ptr -6
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000c;                              //sub sp, 0Ch
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_135B6
        goto loc_135B6;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_135B6:                                      //loc_135B6:
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    memory(_ss, _bp + var_6) = 0xff;            //mov [bp+var_6], 0FFh
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_A);                //lea ax, [bp+var_A]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11b2;                               //mov ax, 11B2h
    _push(_ax);                                 //push ax
    _cx = 0x0003;                               //mov cx, 3
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0012;                               //mov ax, 12h
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x9E4));                //push word_20D94
    _push(memory16(_ds, 0x9E2));                //push word_20D92
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_1365D
        goto loc_1365D;
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_B) = 0x00;            //mov [bp+var_B], 0
    goto loc_13657;                             //jmp short loc_13657
loc_1363A:                                      //loc_1363A:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1610);              //mov al, [di+64Ah]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_B) += 1;              //inc [bp+var_B]
loc_13657:                                      //loc_13657:
    if (memory(_ss, _bp + var_B) < 0x10)        //jb short loc_1363A
        goto loc_1363A;
loc_1365D:                                      //loc_1365D:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ds, 0x6C2E);                //mov ax, word_26FDE
    _dx = memory16(_ds, 0x6C2C);                //mov dx, word_26FDC
    memory16(_es, _bx + 6) = _dx;               //mov es:[bx+6], dx
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x854F) = _al;                  //mov byte_288FF, al
    memory(_ds, 0x8244) = _al;                  //mov byte_285F4, al
    sub_13467();                                //call sub_13467
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_13809;                             //jmp loc_13809
loc_136FF:                                      //loc_136FF:
    _al = memory(_ds, 0x79B5);                  //mov al, byte_27D65
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 1888);            //mov ax, [bx+760h]
    _dx = memory16(_ds, _bx + 1886);            //mov dx, [bx+75Eh]
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0006;           //mov word ptr es:[bx+0Ah], 6
    memory16(_es, _bx + 12) = 0x0002;           //mov word ptr es:[bx+0Ch], 2
    memory16(_es, _bx + 20) = 0x000b;           //mov word ptr es:[bx+14h], 0Bh
    memory16(_es, _bx + 22) = 0x0012;           //mov word ptr es:[bx+16h], 12h
    memory16(_es, _bx + 30) = 0x0006;           //mov word ptr es:[bx+1Eh], 6
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_15181();                                //call sub_15181
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = 0x0000;            //mov word ptr es:[bx+4], 0
    memory16(_es, _bx) = 0x0030;                //mov word ptr es:[bx], 30h
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _ax += 0x0070;                              //add ax, 70h
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    sub_19864();                                //call sub_19864
    sub_11DDE();                                //call sub_11DDE
    if (!(memory(_ds, 0x8244) & 0x01))          //jz short loc_137B4
        goto loc_137B4;
    if (memory(_ss, _bp + var_5) == 0x00)       //jz short loc_137B4
        goto loc_137B4;
    memory(_ss, _bp + var_5) -= 1;              //dec [bp+var_5]
    goto loc_137F8;                             //jmp short loc_137F8
loc_137B4:                                      //loc_137B4:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_137C6
        goto loc_137C6;
    if (memory(_ss, _bp + var_5) >= 0x03)       //jnb short loc_137C6
        goto loc_137C6;
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
    goto loc_137F8;                             //jmp short loc_137F8
loc_137C6:                                      //loc_137C6:
    if (!(memory(_ds, 0x8244) & 0x10))          //jz short loc_137F8
        goto loc_137F8;
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    if (_bx > 0x0003)                           //ja short loc_137F8
        goto loc_137F8;
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //jmp cs:off_1384A[bx]
    {
      case 0: goto loc_137E0;
      case 2: goto loc_137E0;
      case 4: goto loc_137E8;
      case 6: goto loc_137E0;
      default:
        _ASSERT(0);
    }
loc_137E0:                                      //loc_137E0:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    memory(_ss, _bp + var_6) = _al;             //mov [bp+var_6], al
    goto loc_137F8;                             //jmp short loc_137F8
loc_137E8:                                      //loc_137E8:
    memory(_ds, 0x79B5) += 1;                   //inc byte_27D65
    if (memory(_ds, 0x79B5) != 0x03)            //jnz short loc_137F8
        goto loc_137F8;
    memory(_ds, 0x79B5) = 0x00;                 //mov byte_27D65, 0
loc_137F8:                                      //loc_137F8:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
loc_137FD:                                      //loc_137FD:
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_137FD
        goto loc_137FD;
loc_13809:                                      //loc_13809:
    if (memory(_ss, _bp + var_6) != 0xff)       //jnz short loc_13812
        goto loc_13812;
    goto loc_136FF;                             //jmp loc_136FF
loc_13812:                                      //loc_13812:
    _al = memory(_ds, 0x79B5);                  //mov al, byte_27D65
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ss, _bx);                     //mov al, ss:[bx]
    memory(_ds, 0x854F) = _al;                  //mov byte_288FF, al
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ds, 0xA0C8);                //mov ax, word_2A478
    _dx = memory16(_ds, 0xA0C6);                //mov dx, word_2A476
    memory16(_es, _bx + 6) = _dx;               //mov es:[bx+6], dx
    memory16(_es, _bx + 8) = _ax;               //mov es:[bx+8], ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ss, _bp + var_6);             //mov al, [bp+var_6]
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_135A5 endp_failed
    _STOP_("continues");                        //align 2
}

void sub_13852()
{
    const int var_A = -10;                      //var_A  = dword ptr -0Ah
    const int var_6 = -6;                       //var_6  = byte ptr -6
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000a;                              //sub sp, 0Ah
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13862
        goto loc_13862;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13862:                                      //loc_13862:
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    _al = memory(_ds, 0x854F);                  //mov al, byte_288FF
    memory(_ds, 0x8E8A) = _al;                  //mov byte_2923A, al
    memory(_ds, 0x854F) = 0x00;                 //mov byte_288FF, 0
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0007;                              //add ax, 7
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _bx = _ax;                                  //mov bx, ax
    _push(memory16(_ds, _bx + 2422));           //push word ptr [bx+976h]
    _push(memory16(_ds, _bx + 2420));           //push word ptr [bx+974h]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_1393C
        goto loc_1393C;
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    _al = memory(_ds, 0x79B2);                  //mov al, byte_27D62
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 1768);            //mov ax, [bx+6E8h]
    _dx = memory16(_ds, _bx + 1766);            //mov dx, [bx+6E6h]
    memory16(_ss, _bp + var_A) = _dx;           //mov word ptr [bp+var_A], dx
    memory16(_ss, _bp + var_A + 2) = _ax;       //mov word ptr [bp+var_A+2], ax
    memory(_ss, _bp + var_6) = 0x00;            //mov [bp+var_6], 0
    goto loc_13936;                             //jmp short loc_13936
loc_13917:                                      //loc_13917:
    _al = memory(_ss, _bp + var_6);             //mov al, [bp+var_6]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_A);                //les bx, [bp+var_A]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _dl = memory(_ss, _bp + var_6);             //mov dl, [bp+var_6]
    _dh = 0x00;                                 //mov dh, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _dx;                                 //add bx, dx
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_6) += 1;              //inc [bp+var_6]
loc_13936:                                      //loc_13936:
    if (memory(_ss, _bp + var_6) < 0x10)        //jb short loc_13917
        goto loc_13917;
loc_1393C:                                      //loc_1393C:
    sub_13467();                                //call sub_13467
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0008;                               //mov ax, 8
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _al = 0x07;                                 //mov al, 7
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xA0D6));               //push word_2A486
    _push(memory16(_ds, 0xA0D4));               //push word_2A484
    sub_10816();                                //call sub_10816
    _sp += 0x000a;                              //add sp, 0Ah
    sub_16130();                                //call sub_16130
    sub_13C4F();                                //call sub_13C4F
    _al = memory(_ds, 0x79B6);                  //mov al, byte_27D66
    memory(_ds, 0x854E) = _al;                  //mov byte_288FE, al
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = memory16(_ds, 0x791C);                //mov ax, word_27CCC
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    _ax = memory16(_ds, 0x791E);                //mov ax, word_27CCE
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    memory16(_ds, 0x824A) = 0x0021;             //mov word_285FA, 21h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_15181();                                //call sub_15181
    _sp += 0x0004;                              //add sp, 4
    sub_11CB2();                                //call sub_11CB2
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    sub_11473();                                //call sub_11473
    sub_1138C();                                //call sub_1138C
    sub_11BD7();                                //call sub_11BD7
    sub_1138C();                                //call sub_1138C
    sub_13A88();                                //call sub_13A88
    goto loc_13A74;                             //jmp short loc_13A74
loc_13A1C:                                      //loc_13A1C:
    sub_11DDE();                                //call sub_11DDE
    if (!(memory(_ds, 0x8244) & 0x01))          //jz short loc_13A2B
        goto loc_13A2B;
    sub_13AB2();                                //call sub_13AB2
    goto loc_13A6F;                             //jmp short loc_13A6F
loc_13A2B:                                      //loc_13A2B:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_13A37
        goto loc_13A37;
    sub_13B0F();                                //call sub_13B0F
    goto loc_13A6F;                             //jmp short loc_13A6F
loc_13A37:                                      //loc_13A37:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_13A43
        goto loc_13A43;
    sub_13B6C();                                //call sub_13B6C
    goto loc_13A6F;                             //jmp short loc_13A6F
loc_13A43:                                      //loc_13A43:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_13A4F
        goto loc_13A4F;
    sub_13BC9();                                //call sub_13BC9
    goto loc_13A6F;                             //jmp short loc_13A6F
loc_13A4F:                                      //loc_13A4F:
    if (!(memory(_ds, 0x8244) & 0x10))          //jz short loc_13A5B
        goto loc_13A5B;
    sub_13CF7();                                //call sub_13CF7
    goto loc_13A6C;                             //jmp short loc_13A6C
loc_13A5B:                                      //loc_13A5B:
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_13A6F
        goto loc_13A6F;
    _al = 0xff;                                 //mov al, 0FFh
    memory(_ds, 0x928D) = _al;                  //mov byte_2963D, al
loc_13A6C:                                      //loc_13A6C:
    memory(_ss, _bp + var_5) = _al;             //mov [bp+var_5], al
loc_13A6F:                                      //loc_13A6F:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
loc_13A74:                                      //loc_13A74:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_13A1C
        goto loc_13A1C;
    _al = memory(_ds, 0x8E8A);                  //mov al, byte_2923A
    memory(_ds, 0x854F) = _al;                  //mov byte_288FF, al
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13A88()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13A94
        goto loc_13A94;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13A94:                                      //loc_13A94:
    _al = memory(_ds, 0x854E);                  //mov al, byte_288FE
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _dx = memory16(_ds, 0x8248);                //mov dx, word ptr dword_285F6+2
    _bx = memory16(_ds, 0x8246);                //mov bx, word ptr dword_285F6
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, 0x9BAA) = _bx;                //mov word ptr dword_29F5A, bx
    memory16(_ds, 0x9BAC) = _dx;                //mov word ptr dword_29F5A+2, dx
    _bp = _pop();                               //pop bp
}

void sub_13AB2()
{
    const int var_6 = -6;                       //var_6  = dword ptr -6
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13AC1
        goto loc_13AC1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13AC1:                                      //loc_13AC1:
    _ax = memory16(_ds, 0x9BAC);                //mov ax, word ptr dword_29F5A+2
    _dx = memory16(_ds, 0x9BAA);                //mov dx, word ptr dword_29F5A
    memory16(_ss, _bp + var_6) = _dx;           //mov word ptr [bp+var_6], dx
    memory16(_ss, _bp + var_6 + 2) = _ax;       //mov word ptr [bp+var_6+2], ax
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_13B0B
        goto loc_13B0B;
    memory(_ds, 0x854E) = _al;                  //mov byte_288FE, al
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 2);                 //mov al, es:[bx+2]
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_13B05;                             //jmp short loc_13B05
loc_13AF6:                                      //loc_13AF6:
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0xfffc;                              //add ax, 0FFFCh
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    sub_13C26();                                //call sub_13C26
    memory(_ss, _bp + var_1) -= 1;              //dec [bp+var_1]
loc_13B05:                                      //loc_13B05:
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_13AF6
        goto loc_13AF6;
loc_13B0B:                                      //loc_13B0B:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13B0F()
{
    const int var_6 = -6;                       //var_6  = dword ptr -6
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13B1E
        goto loc_13B1E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13B1E:                                      //loc_13B1E:
    _ax = memory16(_ds, 0x9BAC);                //mov ax, word ptr dword_29F5A+2
    _dx = memory16(_ds, 0x9BAA);                //mov dx, word ptr dword_29F5A
    memory16(_ss, _bp + var_6) = _dx;           //mov word ptr [bp+var_6], dx
    memory16(_ss, _bp + var_6 + 2) = _ax;       //mov word ptr [bp+var_6+2], ax
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 3);                 //mov al, es:[bx+3]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_13B68
        goto loc_13B68;
    memory(_ds, 0x854E) = _al;                  //mov byte_288FE, al
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 4);                 //mov al, es:[bx+4]
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_13B62;                             //jmp short loc_13B62
loc_13B53:                                      //loc_13B53:
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    sub_13C26();                                //call sub_13C26
    memory(_ss, _bp + var_1) -= 1;              //dec [bp+var_1]
loc_13B62:                                      //loc_13B62:
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_13B53
        goto loc_13B53;
loc_13B68:                                      //loc_13B68:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13B6C()
{
    const int var_6 = -6;                       //var_6  = dword ptr -6
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13B7B
        goto loc_13B7B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13B7B:                                      //loc_13B7B:
    _ax = memory16(_ds, 0x9BAC);                //mov ax, word ptr dword_29F5A+2
    _dx = memory16(_ds, 0x9BAA);                //mov dx, word ptr dword_29F5A
    memory16(_ss, _bp + var_6) = _dx;           //mov word ptr [bp+var_6], dx
    memory16(_ss, _bp + var_6 + 2) = _ax;       //mov word ptr [bp+var_6+2], ax
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 5);                 //mov al, es:[bx+5]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_13BC5
        goto loc_13BC5;
    memory(_ds, 0x854E) = _al;                  //mov byte_288FE, al
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 6);                 //mov al, es:[bx+6]
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_13BBF;                             //jmp short loc_13BBF
loc_13BB0:                                      //loc_13BB0:
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0xfffc;                              //add ax, 0FFFCh
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    sub_13C26();                                //call sub_13C26
    memory(_ss, _bp + var_1) -= 1;              //dec [bp+var_1]
loc_13BBF:                                      //loc_13BBF:
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_13BB0
        goto loc_13BB0;
loc_13BC5:                                      //loc_13BC5:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13BC9()
{
    const int var_6 = -6;                       //var_6  = dword ptr -6
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13BD8
        goto loc_13BD8;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13BD8:                                      //loc_13BD8:
    _ax = memory16(_ds, 0x9BAC);                //mov ax, word ptr dword_29F5A+2
    _dx = memory16(_ds, 0x9BAA);                //mov dx, word ptr dword_29F5A
    memory16(_ss, _bp + var_6) = _dx;           //mov word ptr [bp+var_6], dx
    memory16(_ss, _bp + var_6 + 2) = _ax;       //mov word ptr [bp+var_6+2], ax
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 7);                 //mov al, es:[bx+7]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_13C22
        goto loc_13C22;
    memory(_ds, 0x854E) = _al;                  //mov byte_288FE, al
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ss, _bp + var_6);                //les bx, [bp+var_6]
    _al = memory(_es, _bx + 8);                 //mov al, es:[bx+8]
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_13C1C;                             //jmp short loc_13C1C
loc_13C0D:                                      //loc_13C0D:
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0x0004;                              //add ax, 4
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    sub_13C26();                                //call sub_13C26
    memory(_ss, _bp + var_1) -= 1;              //dec [bp+var_1]
loc_13C1C:                                      //loc_13C1C:
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_13C0D
        goto loc_13C0D;
loc_13C22:                                      //loc_13C22:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13C26()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13C32
        goto loc_13C32;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13C32:                                      //loc_13C32:
    sub_1138C();                                //call sub_1138C
    sub_11473();                                //call sub_11473
    sub_119E4();                                //call sub_119E4
    sub_11BD7();                                //call sub_11BD7
    sub_11CB2();                                //call sub_11CB2
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_11349();                                //call sub_11349
    _bp = _pop();                               //pop bp
}

void sub_13C4F()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13C5D
        goto loc_13C5D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13C5D:                                      //loc_13C5D:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    _al = memory(_ds, 0x854E);                  //mov al, byte_288FE
    memory(_ds, 0x79B6) = _al;                  //mov byte_27D66, al
    memory(_ds, 0x854E) = 0x01;                 //mov byte_288FE, 1
loc_13C6C:                                      //loc_13C6C:
    sub_13A88();                                //call sub_13A88
    _les(_bx, _ds, 0x9BAA);                     //les bx, dword_29F5A
    if (memory(_es, _bx) != 0xff)               //jnz short loc_13C7F
        goto loc_13C7F;
    memory(_ss, _bp + var_1) = 0x01;            //mov [bp+var_1], 1
    goto loc_13C8C;                             //jmp short loc_13C8C
loc_13C7F:                                      //loc_13C7F:
    _les(_bx, _ds, 0x9BAA);                     //les bx, dword_29F5A
    if (memory(_es, _bx) == 0x00)               //jz short loc_13C8C
        goto loc_13C8C;
    sub_13C9D();                                //call sub_13C9D
loc_13C8C:                                      //loc_13C8C:
    memory(_ds, 0x854E) += 1;                   //inc byte_288FE
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_13C6C
        goto loc_13C6C;
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13C9D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13CA9
        goto loc_13CA9;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13CA9:                                      //loc_13CA9:
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = 0x01da;            //mov word ptr es:[bx+4], 1DAh
    _al = memory(_ds, 0x854E);                  //mov al, byte_288FE
    _ah = 0x00;                                 //mov ah, 0
    _ax -= 1;                                   //dec ax
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ds, 0x8554);                     //les bx, dword_28904
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    _ax -= 1;                                   //dec ax
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _al = memory(_ds, 0x854E);                  //mov al, byte_288FE
    _ah = 0x00;                                 //mov ah, 0
    _ax -= 1;                                   //dec ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += 1;                                   //inc ax
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ds, 0x8554);                     //les bx, dword_28904
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_13CF7()
{
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = dword ptr -4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13D06
        goto loc_13D06;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13D06:                                      //loc_13D06:
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    memory(_ds, 0x792C) = 0x00;                 //mov byte_27CDC, 0
    sub_13C26();                                //call sub_13C26
    sub_13C26();                                //call sub_13C26
    sub_13A88();                                //call sub_13A88
    _ax = memory16(_ds, 0x9BAC);                //mov ax, word ptr dword_29F5A+2
    _dx = memory16(_ds, 0x9BAA);                //mov dx, word ptr dword_29F5A
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_13D34
        goto loc_13D34;
    goto loc_13DF6;                             //jmp loc_13DF6
loc_13D34:                                      //loc_13D34:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_13D3F
        goto loc_13D3F;
    _al = 0x03;                                 //mov al, 3
    goto loc_13D41;                             //jmp short loc_13D41
loc_13D3F:                                      //loc_13D3F:
    _al = 0x28;                                 //mov al, 28h
loc_13D41:                                      //loc_13D41:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x854F) = 0xaa;                 //mov byte_288FF, 0AAh
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    memory16(_ds, 0x791E) = _ax;                //mov word_27CCE, ax
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    memory16(_ds, 0x791C) = _ax;                //mov word_27CCC, ax
    memory16(_ds, 0xA1AC) = _FIXME_;            //mov word ptr dword_2A55C, offset unk_214C4
    memory16(_ds, 0xA1AE) = _ds;                //mov word ptr dword_2A55C+2, ds
    memory(_ds, 0x824D) = 0x16;                 //mov byte_285FD, 16h
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0xfff1;                              //add ax, 0FFF1h
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0x0003;                              //add ax, 3
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    memory16(_ds, 0x824A) = 0x00cb;             //mov word_285FA, 0CBh
    sub_119E4();                                //call sub_119E4
    sub_11CB2();                                //call sub_11CB2
    sub_11BD7();                                //call sub_11BD7
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0x000f;                              //add ax, 0Fh
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0xfffd;                              //add ax, 0FFFDh
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    memory16(_ds, 0x824A) = 0x0000;             //mov word_285FA, 0
    sub_1138C();                                //call sub_1138C
    sub_13DFD();                                //call sub_13DFD
    sub_11CB2();                                //call sub_11CB2
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_11349();                                //call sub_11349
    sub_119E4();                                //call sub_119E4
    sub_11BD7();                                //call sub_11BD7
    sub_11CB2();                                //call sub_11CB2
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_11349();                                //call sub_11349
loc_13DCA:                                      //loc_13DCA:
    sub_1138C();                                //call sub_1138C
    sub_113DF();                                //call sub_113DF
    sub_11473();                                //call sub_11473
    sub_119E4();                                //call sub_119E4
    sub_11BD7();                                //call sub_11BD7
    sub_11CB2();                                //call sub_11CB2
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_11349();                                //call sub_11349
    if (memory(_ds, 0x824D) != 0x00)            //jnz short loc_13DCA
        goto loc_13DCA;
    sub_13E74();                                //call sub_13E74
    memory(_ss, _bp + var_5) = 0x01;            //mov [bp+var_5], 1
loc_13DF6:                                      //loc_13DF6:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13DFD()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13E0B
        goto loc_13E0B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13E0B:                                      //loc_13E0B:
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _di = memory16(_es, _bx + 20);              //mov di, es:[bx+14h]
    _si = memory16(_es, _bx + 22);              //mov si, es:[bx+16h]
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax -= _di;                                 //sub ax, di
    _ax += 0x000e;                              //add ax, 0Eh
    _cl = 0x04;                                 //mov cl, 4
    _sar(_ax, _cl);                             //sar ax, cl
    _ax -= 1;                                   //dec ax
    memory16(_ds, 0x9D36) = _ax;                //mov word_2A0E6, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax -= _si;                                 //sub ax, si
    _ax += 0xfff6;                              //add ax, 0FFF6h
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0x9D38) = _ax;                //mov word_2A0E8, ax
    if ((short)memory16(_ds, 0x9D36) >= (short)0x0000)
        goto loc_13E47;
    memory16(_ds, 0x9D36) = 0x0000;             //mov word_2A0E6, 0
    goto loc_13E54;                             //jmp short loc_13E54
loc_13E47:                                      //loc_13E47:
    if ((short)memory16(_ds, 0x9D36) <= (short)0x0012)
        goto loc_13E54;
    memory16(_ds, 0x9D36) = 0x0012;             //mov word_2A0E6, 12h
loc_13E54:                                      //loc_13E54:
    if ((short)memory16(_ds, 0x9D38) >= (short)0x0000)
        goto loc_13E63;
    memory16(_ds, 0x9D38) = 0x0000;             //mov word_2A0E8, 0
    goto loc_13E70;                             //jmp short loc_13E70
loc_13E63:                                      //loc_13E63:
    if ((short)memory16(_ds, 0x9D38) <= (short)0x0016)
        goto loc_13E70;
    memory16(_ds, 0x9D38) = 0x0016;             //mov word_2A0E8, 16h
loc_13E70:                                      //loc_13E70:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_13E74()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13E80
        goto loc_13E80;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13E80:                                      //loc_13E80:
    _al = 0x32;                                 //mov al, 32h
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_13E8A()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13E98
        goto loc_13E98;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13E98:                                      //loc_13E98:
    _al = 0x01;                                 //mov al, 1
    _cl = _al;                                  //mov cl, al
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_13EB8;                             //jmp short loc_13EB8
loc_13EA1:                                      //loc_13EA1:
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_1) &= _al;            //and [bp+var_1], al
    _cl += 1;                                   //inc cl
loc_13EB8:                                      //loc_13EB8:
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) != 0xff)               //jnz short loc_13EA1
        goto loc_13EA1;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_13ED4()
{
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_13EE5
        goto loc_13EE5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_13EE5:                                      //loc_13EE5:
    sub_15681();                                //call sub_15681
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0011;                               //mov ax, 11h
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    // TITRE REF???? dseg:12DD
    _push(memory16(_ds, 0x9DA));                //push word_20D8A
    _push(memory16(_ds, 0x9D8));                //push word_20D88
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_13F77
        goto loc_13F77;
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    goto loc_13F71;                             //jmp short loc_13F71
loc_13F54:                                      //loc_13F54:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1838);              //mov al, [di+72Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
loc_13F71:                                      //loc_13F71:
    if (memory(_ss, _bp + var_5) < 0x10)        //jb short loc_13F54
        goto loc_13F54;
loc_13F77:                                      //loc_13F77:
    sub_13467();                                //call sub_13467
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x7928));               //push word_27CD8
    _push(memory16(_ds, 0x7926));               //push word_27CD6
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    sub_1328F();                                //call sub_1328F
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0x79B2) = _al;                  //mov byte_27D62, al
    memory(_ds, 0x928D) = _al;                  //mov byte_2963D, al
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_14015()
{
    const int var_36 = -54;                     //var_36  = byte ptr -36h
    const int var_26 = -38;                     //var_26  = byte ptr -26h
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = byte ptr -4
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0036;                              //sub sp, 36h
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14026
        goto loc_14026;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14026:                                      //loc_14026:
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_26);               //lea ax, [bp+var_26]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11b6;                               //mov ax, 11B6h
    _push(_ax);                                 //push ax
    _cx = 0x0020;                               //mov cx, 20h
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_36);               //lea ax, [bp+var_36]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x11d6;                               //mov ax, 11D6h
    _push(_ax);                                 //push ax
    _cx = 0x0010;                               //mov cx, 10h
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _push(_ds);                                 //push ds
    _ax = 0x0090;                               //mov ax, 90h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _push(memory16(_ds, 0x119C));               //push word_2154C
    sub_193A4();                                //call sub_193A4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _di = _ax;                                  //mov di, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _dx = 0x0063;                               //mov dx, 63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ds, 0x6BEA));               //push word_26F9A
    _push(memory16(_ds, 0x6BE8));               //push word_26F98
    _push(_di);                                 //push di
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_di);                                 //push di
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_140DD
        goto loc_140DD;
    _ax = memory16(_ds, 0x6BEA);                //mov ax, word_26F9A
    _dx = memory16(_ds, 0x6BE8);                //mov dx, word_26F98
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_140D7;                             //jmp short loc_140D7
loc_140B6:                                      //loc_140B6:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _push(_es);                                 //push es
    _push(_bx);                                 //push bx
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 1626);              //mov al, [bx+65Ah]
    _bx = _pop();                               //pop bx
    _es = _pop();                               //pop es
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_140D7:                                      //loc_140D7:
    if (memory(_ss, _bp + var_1) < 0x10)        //jb short loc_140B6
        goto loc_140B6;
loc_140DD:                                      //loc_140DD:
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_14103;                             //jmp short loc_14103
loc_140E3:                                      //loc_140E3:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 1854);            //mov ax, [bx+73Eh]
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dh = 0x00;                                 //mov dh, 0
    _dx <<= 1;                                  //shl dx, 1
    _les(_bx, _ds, 0x6BCA);                     //les bx, dword_26F7A
    _bx += _dx;                                 //add bx, dx
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_14103:                                      //loc_14103:
    if (memory(_ss, _bp + var_1) < 0x10)        //jb short loc_140E3
        goto loc_140E3;
    sub_1063B();                                //call sub_1063B
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    goto loc_14242;                             //jmp loc_14242
loc_14113:                                      //loc_14113:
    sub_193B1();                                //call sub_193B1
    _ax &= 0x000f;                              //and ax, 0Fh
    _si = _ax;                                  //mov si, ax
    if ((short)_ax < (short)0x0002)             //jl short loc_14113
        goto loc_14113;
    _al = memory16(_ss, _bp + _si + var_36);    //mov al, [bp+si+var_36]
    memory(_ss, _bp + var_4) = _al;             //mov [bp+var_4], al
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    memory(_ds, 0x119A) = 0x01;                 //mov byte_2154A, 1
    sub_13467();                                //call sub_13467
    _push(_ds);                                 //push ds
    _ax = 0x0578;                               //mov ax, 578h
    _push(_ax);                                 //push ax
    sub_108D1();                                //call sub_108D1
    _sp += 0x0004;                              //add sp, 4
    _bx = _si;                                  //mov bx, si
    _bx <<= 1;                                  //shl bx, 1
    _lea(_ax, _ss, _bp + var_26);               //lea ax, [bp+var_26]
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ss, _bx);                   //mov ax, ss:[bx]
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx) = 0x0090;                //mov word ptr es:[bx], 90h
    memory16(_es, _bx + 2) = 0x0064;            //mov word ptr es:[bx+2], 64h
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _ax = 0x0087;                               //mov ax, 87h
    _push(_ax);                                 //push ax
    _ax = 0x0054;                               //mov ax, 54h
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x1331;                               //mov ax, 1331h
    _push(_ax);                                 //push ax
    sub_107F0();                                //call sub_107F0
    _sp += 0x0008;                              //add sp, 8
    _ax = 0x0096;                               //mov ax, 96h
    _push(_ax);                                 //push ax
    _ax = 0x0098;                               //mov ax, 98h
    _push(_ax);                                 //push ax
    _al = 0x02;                                 //mov al, 2
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _cwd();                                     //cwd
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    sub_10816();                                //call sub_10816
    _sp += 0x000a;                              //add sp, 0Ah
    goto loc_14210;                             //jmp short loc_14210
loc_14199:                                      //loc_14199:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    sub_11DDE();                                //call sub_11DDE
    if (!(memory(_ds, 0x8244) & 0x10))          //jz short loc_141AE
        goto loc_141AE;
    memory(_ss, _bp + var_3) = 0x01;            //mov [bp+var_3], 1
    goto loc_141EF;                             //jmp short loc_141EF
loc_141AE:                                      //loc_141AE:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_141CC
        goto loc_141CC;
    if (memory(_ss, _bp + var_2) == 0x00)       //jz short loc_141CC
        goto loc_141CC;
    memory(_ss, _bp + var_2) -= 1;              //dec [bp+var_2]
    _ax = 0x0096;                               //mov ax, 96h
    _push(_ax);                                 //push ax
    _ax = 0x0098;                               //mov ax, 98h
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x134b;                               //mov ax, 134Bh
    goto loc_141E8;                             //jmp short loc_141E8
loc_141CC:                                      //loc_141CC:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_141EF
        goto loc_141EF;
    if (memory(_ss, _bp + var_2) >= 0x63)       //jnb short loc_141EF
        goto loc_141EF;
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    _ax = 0x0096;                               //mov ax, 96h
    _push(_ax);                                 //push ax
    _ax = 0x0098;                               //mov ax, 98h
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x1350;                               //mov ax, 1350h
loc_141E8:                                      //loc_141E8:
    _push(_ax);                                 //push ax
    sub_107F0();                                //call sub_107F0
    _sp += 0x0008;                              //add sp, 8
loc_141EF:                                      //loc_141EF:
    _ax = 0x0096;                               //mov ax, 96h
    _push(_ax);                                 //push ax
    _ax = 0x0098;                               //mov ax, 98h
    _push(_ax);                                 //push ax
    _al = 0x02;                                 //mov al, 2
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _cwd();                                     //cwd
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    sub_10816();                                //call sub_10816
    _sp += 0x000a;                              //add sp, 0Ah
    _al = 0x04;                                 //mov al, 4
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14210:                                      //loc_14210:
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_14199
        goto loc_14199;
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    memory(_ss, _bp + var_4) = _al;             //mov [bp+var_4], al
    goto loc_1423E;                             //jmp short loc_1423E
    _ax = 0x00a8;                               //mov ax, 0A8h
    _push(_ax);                                 //push ax
    _ax = 0x008c;                               //mov ax, 8Ch
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x1355;                               //mov ax, 1355h
    _push(_ax);                                 //push ax
    sub_107F0();                                //call sub_107F0
    _sp += 0x0008;                              //add sp, 8
    memory(_ds, 0x119A) = 0xff;                 //mov byte_2154A, 0FFh
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
    goto loc_14242;                             //jmp short loc_14242
loc_1423E:                                      //loc_1423E:
    memory(_ss, _bp + var_5) = 0xff;            //mov [bp+var_5], 0FFh
loc_14242:                                      //loc_14242:
    if (memory(_ss, _bp + var_5) >= 0x03)       //jnb short loc_1424B
        goto loc_1424B;
    goto loc_14113;                             //jmp loc_14113
loc_1424B:                                      //loc_1424B:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_14015 endp_failed
    _STOP_("continues");                        //sub_14263 proc near
}

void sub_14263()
{
    const int var_4 = -4;                       //var_4  = dword ptr -4
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14272
        goto loc_14272;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14272:                                      //loc_14272:
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _al = memory(_ds, 0x8242);                  //mov al, byte_285F2
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_142D5
        goto loc_142D5;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    memory(_ds, 0x792C) = _al;                  //mov byte_27CDC, al
    if (memory(_ds, 0x792C) == 0x05)            //jz short loc_142D5
        goto loc_142D5;
    if (memory(_ds, 0x792C) == 0x0b)            //jz short loc_142D5
        goto loc_142D5;
    if (memory(_ds, 0x792C) == 0x1c)            //jz short loc_142D5
        goto loc_142D5;
    memory(_ds, 0xA0DC) = 0x00;                 //mov byte_2A48C, 0
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 8788);            //mov ax, [bx+2254h]
    _dx = memory16(_ds, _bx + 8786);            //mov dx, [bx+2252h]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x824D) = _al;                  //mov byte_285FD, al
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ds, 0x9BAE) = _al;                  //mov byte_29F5E, al
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    memory16(_ds, 0xA1AC) = _dx;                //mov word ptr dword_2A55C, dx
    memory16(_ds, 0xA1AE) = _ax;                //mov word ptr dword_2A55C+2, ax
loc_142D5:                                      //loc_142D5:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_142D9()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_142E5
        goto loc_142E5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_142E5:                                      //loc_142E5:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_142F0
        goto loc_142F0;
    _al = 0x03;                                 //mov al, 3
    goto loc_142F2;                             //jmp short loc_142F2
loc_142F0:                                      //loc_142F0:
    _al = 0x0d;                                 //mov al, 0Dh
loc_142F2:                                      //loc_142F2:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x2d;                                 //mov al, 2Dh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_14305()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14311
        goto loc_14311;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14311:                                      //loc_14311:
    memory(_ds, 0x792C) = 0x1c;                 //mov byte_27CDC, 1Ch
    sub_14361();                                //call sub_14361
    _bp = _pop();                               //pop bp
}

void sub_1431B()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14327
        goto loc_14327;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14327:                                      //loc_14327:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_14333
        goto loc_14333;
    sub_12634();                                //call sub_12634
    goto loc_14342;                             //jmp short loc_14342
loc_14333:                                      //loc_14333:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_1433F
        goto loc_1433F;
    sub_126A1();                                //call sub_126A1
    goto loc_14342;                             //jmp short loc_14342
loc_1433F:                                      //loc_1433F:
    sub_14361();                                //call sub_14361
loc_14342:                                      //loc_14342:
    _bp = _pop();                               //pop bp
}

void sub_14344()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14350
        goto loc_14350;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14350:                                      //loc_14350:
    if (!(memory(_ds, 0x8244) & 0x10))          //jz short loc_1435C
        goto loc_1435C;
    sub_1431B();                                //call sub_1431B
    goto loc_1435F;                             //jmp short loc_1435F
loc_1435C:                                      //loc_1435C:
    sub_14398();                                //call sub_14398
loc_1435F:                                      //loc_1435F:
    _bp = _pop();                               //pop bp
}

void sub_14361()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14370
        goto loc_14370;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14370:                                      //loc_14370:
    memory(_ss, _bp + var_1) = 0x15;            //mov [bp+var_1], 15h
    memory(_ss, _bp + var_2) = 0x04;            //mov [bp+var_2], 4
    memory16(_ss, _bp + var_6) = _FIXME_;       //mov [bp+var_6], offset unk_21F20
    memory16(_ss, _bp + var_4) = _ds;           //mov [bp+var_4], ds
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_1495C();                                //call sub_1495C
    _sp += 0x0008;                              //add sp, 8
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_14398()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_143A4
        goto loc_143A4;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_143A4:                                      //loc_143A4:
    if (!(memory(_ds, 0x8244) & 0x01))          //jz short loc_143B0
        goto loc_143B0;
    sub_14454();                                //call sub_14454
    goto loc_143B3;                             //jmp short loc_143B3
loc_143B0:                                      //loc_143B0:
    sub_143B5();                                //call sub_143B5
loc_143B3:                                      //loc_143B3:
    _bp = _pop();                               //pop bp
}

void sub_143B5()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_143C1
        goto loc_143C1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_143C1:                                      //loc_143C1:
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_143CD
        goto loc_143CD;
    sub_1448A();                                //call sub_1448A
    goto loc_143D0;                             //jmp short loc_143D0
loc_143CD:                                      //loc_143CD:
    sub_143D2();                                //call sub_143D2
loc_143D0:                                      //loc_143D0:
    _bp = _pop();                               //pop bp
}

void sub_143D2()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_143DE
        goto loc_143DE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_143DE:                                      //loc_143DE:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_143EA
        goto loc_143EA;
    sub_144C0();                                //call sub_144C0
    goto loc_143ED;                             //jmp short loc_143ED
loc_143EA:                                      //loc_143EA:
    sub_143EF();                                //call sub_143EF
loc_143ED:                                      //loc_143ED:
    _bp = _pop();                               //pop bp
}

void sub_143EF()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_143FB
        goto loc_143FB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_143FB:                                      //loc_143FB:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_14407
        goto loc_14407;
    sub_14532();                                //call sub_14532
    goto loc_1440A;                             //jmp short loc_1440A
loc_14407:                                      //loc_14407:
    sub_1440C();                                //call sub_1440C
loc_1440A:                                      //loc_1440A:
    _bp = _pop();                               //pop bp
}

void sub_1440C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14418
        goto loc_14418;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14418:                                      //loc_14418:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    sub_1236F();                                //call sub_1236F
    if (memory(_ds, 0x7924) != 0x16)            //jnz short loc_1442D
        goto loc_1442D;
    sub_14305();                                //call sub_14305
    goto loc_14435;                             //jmp short loc_14435
loc_1442D:                                      //loc_1442D:
    _al = 0x2f;                                 //mov al, 2Fh
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14435:                                      //loc_14435:
    _bp = _pop();                               //pop bp
}

void sub_14437()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14443
        goto loc_14443;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14443:                                      //loc_14443:
    if (!(memory(_ds, 0x8244) & 0x10))          //jz short loc_1444F
        goto loc_1444F;
    sub_1440C();                                //call sub_1440C
    goto loc_14452;                             //jmp short loc_14452
loc_1444F:                                      //loc_1444F:
    sub_14398();                                //call sub_14398
loc_14452:                                      //loc_14452:
    _bp = _pop();                               //pop bp
}

void sub_14454()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14460
        goto loc_14460;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14460:                                      //loc_14460:
    if (memory(_ds, 0x856E) >= 0x08)            //jnb short loc_1446C
        goto loc_1446C;
    sub_143B5();                                //call sub_143B5
    goto loc_14488;                             //jmp short loc_14488
loc_1446C:                                      //loc_1446C:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xf8;                                //add al, 0F8h
    _push(_ax);                                 //push ax
    sub_145CF();                                //call sub_145CF
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_14480
        goto loc_14480;
    sub_143B5();                                //call sub_143B5
    goto loc_14488;                             //jmp short loc_14488
loc_14480:                                      //loc_14480:
    _al = 0x1d;                                 //mov al, 1Dh
    _push(_ax);                                 //push ax
    sub_145A0();                                //call sub_145A0
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14488:                                      //loc_14488:
    _bp = _pop();                               //pop bp
}

void sub_1448A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14496
        goto loc_14496;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14496:                                      //loc_14496:
    if (memory(_ds, 0x856E) < 0x28)             //jb short loc_144A2
        goto loc_144A2;
    sub_143D2();                                //call sub_143D2
    goto loc_144BE;                             //jmp short loc_144BE
loc_144A2:                                      //loc_144A2:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0x08;                                //add al, 8
    _push(_ax);                                 //push ax
    sub_145CF();                                //call sub_145CF
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_144B6
        goto loc_144B6;
    sub_143D2();                                //call sub_143D2
    goto loc_144BE;                             //jmp short loc_144BE
loc_144B6:                                      //loc_144B6:
    _al = 0x1e;                                 //mov al, 1Eh
    _push(_ax);                                 //push ax
    sub_145A0();                                //call sub_145A0
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_144BE:                                      //loc_144BE:
    _bp = _pop();                               //pop bp
}

void sub_144C0()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_144CC
        goto loc_144CC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_144CC:                                      //loc_144CC:
    _al = memory(_ds, 0x855E);                  //mov al, byte_2890E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_144DA
        goto loc_144DA;
    sub_143EF();                                //call sub_143EF
    goto loc_1450A;                             //jmp short loc_1450A
loc_144DA:                                      //loc_144DA:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    _push(_ax);                                 //push ax
    sub_145CF();                                //call sub_145CF
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_144EE
        goto loc_144EE;
    sub_1450C();                                //call sub_1450C
    goto loc_1450A;                             //jmp short loc_1450A
loc_144EE:                                      //loc_144EE:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xff;                                //add al, 0FFh
    _push(_ax);                                 //push ax
    sub_14605();                                //call sub_14605
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_14502
        goto loc_14502;
    sub_1450C();                                //call sub_1450C
    goto loc_1450A;                             //jmp short loc_1450A
loc_14502:                                      //loc_14502:
    _al = 0x1f;                                 //mov al, 1Fh
    _push(_ax);                                 //push ax
    sub_145A0();                                //call sub_145A0
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_1450A:                                      //loc_1450A:
    _bp = _pop();                               //pop bp
}

void sub_1450C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14518
        goto loc_14518;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14518:                                      //loc_14518:
    if (memory(_ds, 0x7924) == 0x16)            //jz short loc_1452D
        goto loc_1452D;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x2f;                                 //mov al, 2Fh
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_1452D:                                      //loc_1452D:
    sub_12634();                                //call sub_12634
    _bp = _pop();                               //pop bp
}

void sub_14532()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1453E
        goto loc_1453E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1453E:                                      //loc_1453E:
    if (memory(_ds, 0x855E) != 0x07)            //jnz short loc_1454A
        goto loc_1454A;
    sub_1440C();                                //call sub_1440C
    goto loc_14578;                             //jmp short loc_14578
loc_1454A:                                      //loc_1454A:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 1;                                   //inc al
    _push(_ax);                                 //push ax
    sub_145CF();                                //call sub_145CF
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_1455E
        goto loc_1455E;
    sub_1457A();                                //call sub_1457A
    goto loc_14578;                             //jmp short loc_14578
loc_1455E:                                      //loc_1455E:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _push(_ax);                                 //push ax
    sub_14605();                                //call sub_14605
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_14570
        goto loc_14570;
    sub_1457A();                                //call sub_1457A
    goto loc_14578;                             //jmp short loc_14578
loc_14570:                                      //loc_14570:
    _al = 0x20;                                 //mov al, 20h
    _push(_ax);                                 //push ax
    sub_145A0();                                //call sub_145A0
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14578:                                      //loc_14578:
    _bp = _pop();                               //pop bp
}

void sub_1457A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14586
        goto loc_14586;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14586:                                      //loc_14586:
    if (memory(_ds, 0x7924) == 0x16)            //jz short loc_1459B
        goto loc_1459B;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x2f;                                 //mov al, 2Fh
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_1459B:                                      //loc_1459B:
    sub_126A1();                                //call sub_126A1
    _bp = _pop();                               //pop bp
}

void sub_145A0()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_145AC
        goto loc_145AC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_145AC:                                      //loc_145AC:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x7924) == 0x00)            //jz short loc_145CA
        goto loc_145CA;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x30;                                 //mov al, 30h
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_145CA:                                      //loc_145CA:
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_145CF()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_145DB
        goto loc_145DB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_145DB:                                      //loc_145DB:
    _dl = 0x00;                                 //mov dl, 0
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) == 0x00)               //jz short loc_14601
        goto loc_14601;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _bx = memory16(_ds, 0xA0D8);                //mov bx, word ptr dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) == 0x19)               //jz short loc_14601
        goto loc_14601;
    _dl = 0x01;                                 //mov dl, 1
loc_14601:                                      //loc_14601:
    _al = _dl;                                  //mov al, dl
    _bp = _pop();                               //pop bp
}

void sub_14605()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14611
        goto loc_14611;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14611:                                      //loc_14611:
    _dl = 0x00;                                 //mov dl, 0
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 48) == 0x00)          //jz short loc_14639
        goto loc_14639;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _bx = memory16(_ds, 0xA0D8);                //mov bx, word ptr dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 48) == 0x13)          //jz short loc_14639
        goto loc_14639;
    _dl = 0x01;                                 //mov dl, 1
loc_14639:                                      //loc_14639:
    _al = _dl;                                  //mov al, dl
    _bp = _pop();                               //pop bp
}

void sub_1463D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14649
        goto loc_14649;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14649:                                      //loc_14649:
    memory(_ds, 0x8242) += 1;                   //inc byte_285F2
    if (memory(_ds, 0x8242) != 0x03)            //jnz short loc_1465C
        goto loc_1465C;
    memory(_ds, 0x8242) = 0x00;                 //mov byte_285F2, 0
    sub_12965();                                //call sub_12965
loc_1465C:                                      //loc_1465C:
    _bp = _pop();                               //pop bp
}

void sub_1465E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1466A
        goto loc_1466A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1466A:                                      //loc_1466A:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 14014);             //mov al, [bx+36BEh]
    _push(_ax);                                 //push ax
    sub_146BB();                                //call sub_146BB
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_1467D()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14689
        goto loc_14689;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14689:                                      //loc_14689:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 14062);             //mov al, [bx+36EEh]
    _push(_ax);                                 //push ax
    sub_146BB();                                //call sub_146BB
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_1469C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_146A8
        goto loc_146A8;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_146A8:                                      //loc_146A8:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 14110);             //mov al, [bx+371Eh]
    _push(_ax);                                 //push ax
    sub_146BB();                                //call sub_146BB
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_146BB()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_146C7
        goto loc_146C7;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_146C7:                                      //loc_146C7:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    if (_ax == 0x0008)                          //jz short loc_14706
        goto loc_14706;
    if ((short)_ax > (short)0x0008)             //jg short loc_146E1
        goto loc_146E1;
    _bx = _ax;                                  //mov bx, ax
    if (_bx > 0x0003)                           //ja short loc_1471A
        goto loc_1471A;
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //jmp cs:off_14725[bx]
    {
      case 0: goto loc_146F2;
      case 2: goto loc_146F7;
      case 4: goto loc_146FC;
      case 6: goto loc_14701;
      default:
        _ASSERT(0);
    }
loc_146E1:                                      //loc_146E1:
    if (_ax == 0x0009)                          //jz short loc_1470B
        goto loc_1470B;
    if (_ax == 0x001a)                          //jz short loc_14710
        goto loc_14710;
    if (_ax == 0x001b)                          //jz short loc_14715
        goto loc_14715;
    goto loc_1471A;                             //jmp short loc_1471A
loc_146F2:                                      //loc_146F2:
    sub_14747();                                //call sub_14747
    goto loc_14723;                             //jmp short loc_14723
loc_146F7:                                      //loc_146F7:
    sub_12634();                                //call sub_12634
    goto loc_14723;                             //jmp short loc_14723
loc_146FC:                                      //loc_146FC:
    sub_126A1();                                //call sub_126A1
    goto loc_14723;                             //jmp short loc_14723
loc_14701:                                      //loc_14701:
    sub_127DE();                                //call sub_127DE
    goto loc_14723;                             //jmp short loc_14723
loc_14706:                                      //loc_14706:
    sub_1270C();                                //call sub_1270C
    goto loc_14723;                             //jmp short loc_14723
loc_1470B:                                      //loc_1470B:
    sub_12776();                                //call sub_12776
    goto loc_14723;                             //jmp short loc_14723
loc_14710:                                      //loc_14710:
    sub_11FBE();                                //call sub_11FBE
    goto loc_14723;                             //jmp short loc_14723
loc_14715:                                      //loc_14715:
    sub_1207D();                                //call sub_1207D
    goto loc_14723;                             //jmp short loc_14723
loc_1471A:                                      //loc_1471A:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_1472D();                                //call sub_1472D
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14723:                                      //loc_14723:
    _bp = _pop();                               //pop bp
}

void sub_1472D()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14739
        goto loc_14739;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14739:                                      //loc_14739:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_14747()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14755
        goto loc_14755;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14755:                                      //loc_14755:
    if (memory(_ds, 0x856E) >= 0x08)            //jnb short loc_14762
        goto loc_14762;
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    goto loc_14783;                             //jmp short loc_14783
loc_14762:                                      //loc_14762:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _es = memory16(_ds, 0xA0DA);                //mov es, word ptr dword_2A488+2
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_es, _bx + -8);                //mov al, es:[bx-8]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 14158);             //mov al, [bx+374Eh]
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
loc_14783:                                      //loc_14783:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_147BE
        goto loc_147BE;
    if (memory(_ds, 0x79B3) <= 0xeb)            //jbe short loc_14799
        goto loc_14799;
    memory(_ss, _bp + var_2) = 0x3c;            //mov [bp+var_2], 3Ch
    goto loc_147BE;                             //jmp short loc_147BE
loc_14799:                                      //loc_14799:
    if (memory(_ds, 0x79B3) <= 0xd7)            //jbe short loc_147A6
        goto loc_147A6;
    memory(_ss, _bp + var_2) = 0x3d;            //mov [bp+var_2], 3Dh
    goto loc_147BE;                             //jmp short loc_147BE
loc_147A6:                                      //loc_147A6:
    if (memory(_ds, 0x79B3) <= 0xc3)            //jbe short loc_147B3
        goto loc_147B3;
    memory(_ss, _bp + var_2) = 0x3e;            //mov [bp+var_2], 3Eh
    goto loc_147BE;                             //jmp short loc_147BE
loc_147B3:                                      //loc_147B3:
    if (memory(_ds, 0x79B3) <= 0xaf)            //jbe short loc_147BE
        goto loc_147BE;
    memory(_ss, _bp + var_2) = 0x3f;            //mov [bp+var_2], 3Fh
loc_147BE:                                      //loc_147BE:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    sub_1472D();                                //call sub_1472D
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_147CB()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_147D7
        goto loc_147D7;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_147D7:                                      //loc_147D7:
    if (!(memory(_ds, 0x8244) & 0x04))          //jz short loc_147E3
        goto loc_147E3;
    sub_12634();                                //call sub_12634
    goto loc_14800;                             //jmp short loc_14800
loc_147E3:                                      //loc_147E3:
    if (!(memory(_ds, 0x8244) & 0x08))          //jz short loc_147EF
        goto loc_147EF;
    sub_126A1();                                //call sub_126A1
    goto loc_14800;                             //jmp short loc_14800
loc_147EF:                                      //loc_147EF:
    _al = memory(_ds, 0x792C);                  //mov al, byte_27CDC
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 14206);             //mov al, [bx+377Eh]
    _push(_ax);                                 //push ax
    sub_146BB();                                //call sub_146BB
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14800:                                      //loc_14800:
    _bp = _pop();                               //pop bp
}

void sub_14802()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1480E
        goto loc_1480E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1480E:                                      //loc_1480E:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_14819
        goto loc_14819;
    _al = 0x03;                                 //mov al, 3
    goto loc_1481B;                             //jmp short loc_1481B
loc_14819:                                      //loc_14819:
    _al = 0x28;                                 //mov al, 28h
loc_1481B:                                      //loc_1481B:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x27;                                 //mov al, 27h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x0e;                                 //mov al, 0Eh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_1238E();                                //call sub_1238E
    _bp = _pop();                               //pop bp
}

void sub_1483C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14848
        goto loc_14848;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14848:                                      //loc_14848:
    sub_12A0A();                                //call sub_12A0A
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx) = 0x0001;                //mov word ptr es:[bx], 1
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_es, _bx + 16) = _dx;              //mov es:[bx+10h], dx
    memory16(_es, _bx + 18) = _ax;              //mov es:[bx+12h], ax
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0014;           //mov word ptr es:[bx+18h], 14h
    memory16(_es, _bx + 26) = 0x0019;           //mov word ptr es:[bx+1Ah], 19h
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_148A9()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_148B5
        goto loc_148B5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_148B5:                                      //loc_148B5:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_14904
        goto loc_14904;
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ds, 0x8565) = _al;                  //mov byte_28915, al
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _dl = memory(_ds, 0x8571);                  //mov dl, byte_28921
    _dl -= _al;                                 //sub dl, al
    memory(_ds, 0x8564) = _dl;                  //mov byte_28914, dl
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 628);             //mov ax, [bx+274h]
    _ax += 0x0007;                              //add ax, 7
    memory16(_ds, 0x79BA) = _ax;                //mov word_27D6A, ax
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 630);             //mov ax, [bx+276h]
    _ax += 0x0007;                              //add ax, 7
    memory16(_ds, 0x79BC) = _ax;                //mov word_27D6C, ax
loc_14904:                                      //loc_14904:
    _bp = _pop();                               //pop bp
}

void sub_14906()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14912
        goto loc_14912;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14912:                                      //loc_14912:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory(_ds, 0x855C) = _al;                  //mov byte_2890C, al
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _al <<= 1;                                  //shl al, 1
    _dl = memory(_ds, 0x856E);                  //mov dl, byte_2891E
    _dl -= _al;                                 //sub dl, al
    memory(_ds, 0x855E) = _dl;                  //mov byte_2890E, dl
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 628);             //mov ax, [bx+274h]
    _ax += 0x0007;                              //add ax, 7
    memory16(_ds, 0x9290) = _ax;                //mov word_29640, ax
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 630);             //mov ax, [bx+276h]
    _ax += 0x000f;                              //add ax, 0Fh
    memory16(_ds, 0x9292) = _ax;                //mov word_29642, ax
    _bp = _pop();                               //pop bp
}

void sub_1495C()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = byte ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14968
        goto loc_14968;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14968:                                      //loc_14968:
    memory(_ds, 0x855D) += 1;                   //inc byte_2890D
    _al = memory(_ds, 0x855D);                  //mov al, byte_2890D
    if (_al != memory(_ss, _bp + arg_2))        //jnz short loc_14986
        goto loc_14986;
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_FIXME_);                             //push [bp+arg_4]
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_14995();                                //call sub_14995
    _sp += 0x0006;                              //add sp, 6
    goto loc_14993;                             //jmp short loc_14993
loc_14986:                                      //loc_14986:
    _al = memory(_ds, 0x855D);                  //mov al, byte_2890D
    if (_al <= memory(_ss, _bp + arg_2))        //jbe short loc_14993
        goto loc_14993;
    memory(_ds, 0x855D) = 0x00;                 //mov byte_2890D, 0
loc_14993:                                      //loc_14993:
    _bp = _pop();                               //pop bp
}

void sub_14995()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = dword ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_149A1
        goto loc_149A1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_149A1:                                      //loc_149A1:
    memory(_ds, 0x855D) = 0x00;                 //mov byte_2890D, 0
    _al = memory(_ds, 0xA0DC);                  //mov al, byte_2A48C
    _ah = 0x00;                                 //mov ah, 0
    _ax += 1;                                   //inc ax
    _dl = memory(_ss, _bp + arg_0);             //mov dl, [bp+arg_0]
    _dh = 0x00;                                 //mov dh, 0
    if ((short)_ax >= (short)_dx)               //jge short loc_149BE
        goto loc_149BE;
    memory(_ds, 0xA0DC) += 1;                   //inc byte_2A48C
    _al = memory(_ds, 0xA0DC);                  //mov al, byte_2A48C
    goto loc_149C3;                             //jmp short loc_149C3
loc_149BE:                                      //loc_149BE:
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0xA0DC) = _al;                  //mov byte_2A48C, al
loc_149C3:                                      //loc_149C3:
    _al = memory(_ds, 0xA0DC);                  //mov al, byte_2A48C
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _les(_bx, _ss, _bp + arg_2);                //les bx, [bp+arg_2]
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    memory16(_ds, 0x824A) = _ax;                //mov word_285FA, ax
    _bp = _pop();                               //pop bp
}

void sub_149D7()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_149E5
        goto loc_149E5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_149E5:                                      //loc_149E5:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx) = 0x0000;                //mov word ptr es:[bx], 0
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_29A44
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0014;           //mov word ptr es:[bx+18h], 14h
    memory16(_es, _bx + 26) = 0x0001;           //mov word ptr es:[bx+1Ah], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0001;           //mov word ptr es:[bx+20h], 1
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_193B8();                                //call sub_193B8
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0007;                               //mov ax, 7
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _al = 0x07;                                 //mov al, 7
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0xA0D6));               //push word_2A486
    _push(memory16(_ds, 0xA0D4));               //push word_2A484
    sub_10816();                                //call sub_10816
    _sp += 0x000a;                              //add sp, 0Ah
    sub_16130();                                //call sub_16130
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19814();                                //call sub_19814
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14A79:                                      //loc_14A79:
    _al = 0x19;                                 //mov al, 19h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_14A79
        goto loc_14A79;
    goto loc_14AD2;                             //jmp short loc_14AD2
loc_14A87:                                      //loc_14A87:
    _al = 0x1d;                                 //mov al, 1Dh
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_14AD2
        goto loc_14AD2;
    _al = 0x21;                                 //mov al, 21h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_14AD2
        goto loc_14AD2;
    memory(_ss, _bp + var_1) = 0x01;            //mov [bp+var_1], 1
    goto loc_14ABC;                             //jmp short loc_14ABC
loc_14AA5:                                      //loc_14AA5:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x01;                    //mov byte ptr es:[bx], 1
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_14ABC:                                      //loc_14ABC:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _dx = 0x0009;                               //mov dx, 9
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0x8246);                     //les bx, dword_285F6
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) != 0xff)               //jnz short loc_14AA5
        goto loc_14AA5;
loc_14AD2:                                      //loc_14AD2:
    _al = 0x19;                                 //mov al, 19h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _cbw();                                     //cbw
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14AEC
        goto loc_14AEC;
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _cbw();                                     //cbw
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_14A87
        goto loc_14A87;
loc_14AEC:                                      //loc_14AEC:
    _al = 0x19;                                 //mov al, 19h
    _push(_ax);                                 //push ax
    sub_17AB4();                                //call sub_17AB4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_14AEC
        goto loc_14AEC;
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_14AEC
        goto loc_14AEC;
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_29A44
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0001;           //mov word ptr es:[bx+0Ch], 1
    memory16(_es, _bx + 14) = 0x0000;           //mov word ptr es:[bx+0Eh], 0
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_14B4E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14B5C
        goto loc_14B5C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14B5C:                                      //loc_14B5C:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_14BC2
        goto loc_14BC2;
    _les(_bx, _ds, 0x9B9E);                     //les bx, dword_29F4E
    _di = memory16(_es, _bx + 20);              //mov di, es:[bx+14h]
    _si = memory16(_es, _bx + 22);              //mov si, es:[bx+16h]
    _ax = memory16(_ds, 0x79BA);                //mov ax, word_27D6A
    _ax -= _di;                                 //sub ax, di
    _cl = 0x04;                                 //mov cl, 4
    _sar(_ax, _cl);                             //sar ax, cl
    _ax -= 1;                                   //dec ax
    memory16(_ds, 0xA0CA) = _ax;                //mov word_2A47A, ax
    _ax = memory16(_ds, 0x79BC);                //mov ax, word_27D6C
    _ax -= _si;                                 //sub ax, si
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0xA0CC) = _ax;                //mov word_2A47C, ax
    if ((short)memory16(_ds, 0xA0CA) >= (short)0x0000)
        goto loc_14B99;
    memory16(_ds, 0xA0CA) = 0x0000;             //mov word_2A47A, 0
    goto loc_14BA6;                             //jmp short loc_14BA6
loc_14B99:                                      //loc_14B99:
    if ((short)memory16(_ds, 0xA0CA) <= (short)0x0012)
        goto loc_14BA6;
    memory16(_ds, 0xA0CA) = 0x0012;             //mov word_2A47A, 12h
loc_14BA6:                                      //loc_14BA6:
    if ((short)memory16(_ds, 0xA0CC) >= (short)0x0000)
        goto loc_14BB5;
    memory16(_ds, 0xA0CC) = 0x0000;             //mov word_2A47C, 0
    goto loc_14BC2;                             //jmp short loc_14BC2
loc_14BB5:                                      //loc_14BB5:
    if ((short)memory16(_ds, 0xA0CC) <= (short)0x0016)
        goto loc_14BC2;
    memory16(_ds, 0xA0CC) = 0x0016;             //mov word_2A47C, 16h
loc_14BC2:                                      //loc_14BC2:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_14BC6()
{
    const int var_4 = -4;                       //var_4  = dword ptr -4
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14BD5
        goto loc_14BD5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14BD5:                                      //loc_14BD5:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    memory(_ds, 0x8562) = _al;                  //mov byte_28912, al
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 9506);            //mov ax, [bx+2522h]
    _dx = memory16(_ds, _bx + 9504);            //mov dx, [bx+2520h]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0xA1B0) = _al;                  //mov byte_2A560, al
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    memory(_ds, 0x9D2F) = _al;                  //mov byte_2A0DF, al
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    memory16(_ds, 0xA0BA) = _dx;                //mov word ptr dword_2A46A, dx
    memory16(_ds, 0xA0BC) = _ax;                //mov word ptr dword_2A46A+2, ax
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_14C14()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14C20
        goto loc_14C20;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14C20:                                      //loc_14C20:
    _al = memory(_ds, 0x8243);                  //mov al, byte_285F3
    _al = _al ^ 0x01;                           //xor al, 1
    memory(_ds, 0x8243) = _al;                  //mov byte_285F3, al
    if (memory(_ds, 0x8243) == 0x00)            //jz short loc_14C97
        goto loc_14C97;
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_14C97
        goto loc_14C97;
    _les(_bx, _ds, 0xA0BA);                     //les bx, dword_2A46A
    _ax = memory16(_es, _bx);                   //mov ax, es:[bx]
    memory16(_ds, 0x8560) = _ax;                //mov word_28910, ax
    if (memory(_ds, 0x9D2F) == 0x00)            //jz short loc_14C5B
        goto loc_14C5B;
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    _ax = -_ax;                                 //neg ax
    _dx = memory16(_ds, 0x79BA);                //mov dx, word_27D6A
    _dx += _ax;                                 //add dx, ax
    memory16(_ds, 0x79BA) = _dx;                //mov word_27D6A, dx
    _ax = _dx;                                  //mov ax, dx
    goto loc_14C6A;                             //jmp short loc_14C6A
loc_14C5B:                                      //loc_14C5B:
    _les(_bx, _ds, 0xA0BA);                     //les bx, dword_2A46A
    _ax = memory16(_es, _bx + 2);               //mov ax, es:[bx+2]
    memory16(_ds, 0x79BA) += _ax;               //add word_27D6A, ax
    _ax = memory16(_ds, 0x79BA);                //mov ax, word_27D6A
loc_14C6A:                                      //loc_14C6A:
    _les(_bx, _ds, 0xA0BA);                     //les bx, dword_2A46A
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    memory16(_ds, 0x79BC) += _ax;               //add word_27D6C, ax
    memory16(_ds, 0xA0BA) += 0x0006;            //add word ptr dword_2A46A, 6
    _al = memory(_ds, 0xA1B0);                  //mov al, byte_2A560
    _al += 0xff;                                //add al, 0FFh
    memory(_ds, 0xA1B0) = _al;                  //mov byte_2A560, al
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14C90
        goto loc_14C90;
    _al = 0x00;                                 //mov al, 0
    memory(_ds, 0x8563) = _al;                  //mov byte_28913, al
    goto loc_14C97;                             //jmp short loc_14C97
loc_14C90:                                      //loc_14C90:
    memory(_ds, 0x8563) += 1;                   //inc byte_28913
    _al = memory(_ds, 0x8563);                  //mov al, byte_28913
loc_14C97:                                      //loc_14C97:
    _bp = _pop();                               //pop bp
}

void sub_14C99()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14CA5
        goto loc_14CA5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14CA5:                                      //loc_14CA5:
    if (memory(_ds, 0x8243) != 0x00)            //jnz short loc_14CAF
        goto loc_14CAF;
    goto loc_14DBD;                             //jmp loc_14DBD
loc_14CAF:                                      //loc_14CAF:
    if (memory(_ds, 0x8571) != 0xff)            //jnz short loc_14CB9
        goto loc_14CB9;
    goto loc_14DBD;                             //jmp loc_14DBD
loc_14CB9:                                      //loc_14CB9:
    if (memory(_ds, 0xA1B0) == 0x00)            //jz short loc_14CC6
        goto loc_14CC6;
    sub_15003();                                //call sub_15003
    goto loc_14DBD;                             //jmp loc_14DBD
loc_14CC6:                                      //loc_14CC6:
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0xA1B2) = _al;                  //mov byte_2A562, al
    memory(_ds, 0xA0E2) = _al;                  //mov byte_2A492, al
    memory(_ds, 0xA0E1) = _al;                  //mov byte_2A491, al
    memory(_ds, 0xA0E0) = _al;                  //mov byte_2A490, al
    if (memory(_ds, 0x8571) < 0x08)             //jb short loc_14CF9
        goto loc_14CF9;
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _es = memory16(_ds, 0xA0DA);                //mov es, word ptr dword_2A488+2
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_es, _bx + -8);                //mov al, es:[bx-8]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14CF9
        goto loc_14CF9;
    memory(_ds, 0xA0E0) = 0x00;                 //mov byte_2A490, 0
loc_14CF9:                                      //loc_14CF9:
    if (memory(_ds, 0x8571) >= 0x28)            //jnb short loc_14D19
        goto loc_14D19;
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14D19
        goto loc_14D19;
    memory(_ds, 0xA0E1) = 0x00;                 //mov byte_2A491, 0
loc_14D19:                                      //loc_14D19:
    if (memory(_ds, 0x8564) == 0x00)            //jz short loc_14D51
        goto loc_14D51;
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 47);                //mov al, es:[bx+2Fh]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14D51
        goto loc_14D51;
    memory(_ds, 0xA0E2) = 0x00;                 //mov byte_2A492, 0
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    if (memory(_es, _bx + -1) != 0x0b)          //jnz short loc_14D51
        goto loc_14D51;
    memory(_ds, 0xA0E2) = 0x01;                 //mov byte_2A492, 1
loc_14D51:                                      //loc_14D51:
    if (memory(_ds, 0x8564) == 0x07)            //jz short loc_14D89
        goto loc_14D89;
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14D89
        goto loc_14D89;
    memory(_ds, 0xA1B2) = 0x00;                 //mov byte_2A562, 0
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _ah = 0x00;                                 //mov ah, 0
    _ax = _ax + memory16(_ds, 0xA0D8);          //add ax, word ptr dword_2A488
    _bx = _ax;                                  //mov bx, ax
    if (memory(_es, _bx + 1) != 0x0b)           //jnz short loc_14D89
        goto loc_14D89;
    memory(_ds, 0xA1B2) = 0x01;                 //mov byte_2A562, 1
loc_14D89:                                      //loc_14D89:
    _al = memory(_ds, 0xA0E0);                  //mov al, byte_2A490
    _ah = 0x00;                                 //mov ah, 0
    _dl = memory(_ds, 0xA0E1);                  //mov dl, byte_2A491
    _dh = 0x00;                                 //mov dh, 0
    _ax += _dx;                                 //add ax, dx
    _dl = memory(_ds, 0xA0E2);                  //mov dl, byte_2A492
    _dh = 0x00;                                 //mov dh, 0
    _ax += _dx;                                 //add ax, dx
    _dl = memory(_ds, 0xA1B2);                  //mov dl, byte_2A562
    _dh = 0x00;                                 //mov dh, 0
    _ax += _dx;                                 //add ax, dx
    if (_ax != 0x0004)                          //jnz short loc_14DB0
        goto loc_14DB0;
    sub_14FD3();                                //call sub_14FD3
    goto loc_14DBD;                             //jmp short loc_14DBD
loc_14DB0:                                      //loc_14DB0:
    _al = memory(_ds, 0x8562);                  //mov al, byte_28912
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    switch (_bx)                                //call off_20C20[bx]
    {
      case 0: sub_17111(); break;
      case 2: sub_14DBF(); break;
      case 4: sub_14E44(); break;
      case 6: sub_14EC9(); break;
      case 8: sub_14F4E(); break;
      case 10: sub_14DBF(); break;
      case 12: sub_14DBF(); break;
      case 14: sub_14DBF(); break;
      case 16: sub_14DBF(); break;
      case 18: sub_14DBF(); break;
      case 20: sub_17111(); break;
      default:
        _ASSERT(0);
    }
loc_14DBD:                                      //loc_14DBD:
    _bp = _pop();                               //pop bp
}

void sub_14DBF()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14DCB
        goto loc_14DCB;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14DCB:                                      //loc_14DCB:
    _al = memory(_ds, 0xA0E0);                  //mov al, byte_2A490
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14DD9
        goto loc_14DD9;
    sub_14DFA();                                //call sub_14DFA
    goto loc_14DF8;                             //jmp short loc_14DF8
loc_14DD9:                                      //loc_14DD9:
    _al = memory(_ds, 0xA1B2);                  //mov al, byte_2A562
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14DE7
        goto loc_14DE7;
    sub_14F89();                                //call sub_14F89
    goto loc_14DF8;                             //jmp short loc_14DF8
loc_14DE7:                                      //loc_14DE7:
    _al = memory(_ds, 0xA0E2);                  //mov al, byte_2A492
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14DF5
        goto loc_14DF5;
    sub_14F04();                                //call sub_14F04
    goto loc_14DF8;                             //jmp short loc_14DF8
loc_14DF5:                                      //loc_14DF5:
    sub_14E7F();                                //call sub_14E7F
loc_14DF8:                                      //loc_14DF8:
    _bp = _pop();                               //pop bp
}

void sub_14DFA()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14E06
        goto loc_14E06;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14E06:                                      //loc_14E06:
    _al = memory(_ds, 0x79B3);                  //mov al, byte_27D63
    if (_al < memory(_ds, 0x7920))              //jb short loc_14E13
        goto loc_14E13;
    _al = 0x01;                                 //mov al, 1
    goto loc_14E3C;                             //jmp short loc_14E3C
loc_14E13:                                      //loc_14E13:
    if (!(memory(_ds, 0x79B3) & 0x01))          //jz short loc_14E2F
        goto loc_14E2F;
    if (memory(_ds, 0xA0E2) == 0x00)            //jz short loc_14E25
        goto loc_14E25;
    _al = 0x01;                                 //mov al, 1
    goto loc_14E3C;                             //jmp short loc_14E3C
loc_14E25:                                      //loc_14E25:
    _al = 0x03;                                 //mov al, 3
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_14E42;                             //jmp short loc_14E42
loc_14E2F:                                      //loc_14E2F:
    if (memory(_ds, 0xA1B2) == 0x00)            //jz short loc_14E3A
        goto loc_14E3A;
    _al = 0x01;                                 //mov al, 1
    goto loc_14E3C;                             //jmp short loc_14E3C
loc_14E3A:                                      //loc_14E3A:
    _al = 0x04;                                 //mov al, 4
loc_14E3C:                                      //loc_14E3C:
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14E42:                                      //loc_14E42:
    _bp = _pop();                               //pop bp
}

void sub_14E44()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14E50
        goto loc_14E50;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14E50:                                      //loc_14E50:
    _al = memory(_ds, 0xA0E1);                  //mov al, byte_2A491
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14E5E
        goto loc_14E5E;
    sub_14E7F();                                //call sub_14E7F
    goto loc_14E7D;                             //jmp short loc_14E7D
loc_14E5E:                                      //loc_14E5E:
    _al = memory(_ds, 0xA0E2);                  //mov al, byte_2A492
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14E6C
        goto loc_14E6C;
    sub_14F04();                                //call sub_14F04
    goto loc_14E7D;                             //jmp short loc_14E7D
loc_14E6C:                                      //loc_14E6C:
    _al = memory(_ds, 0xA1B2);                  //mov al, byte_2A562
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14E7A
        goto loc_14E7A;
    sub_14F89();                                //call sub_14F89
    goto loc_14E7D;                             //jmp short loc_14E7D
loc_14E7A:                                      //loc_14E7A:
    sub_14DFA();                                //call sub_14DFA
loc_14E7D:                                      //loc_14E7D:
    _bp = _pop();                               //pop bp
}

void sub_14E7F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14E8B
        goto loc_14E8B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14E8B:                                      //loc_14E8B:
    _al = memory(_ds, 0x79B3);                  //mov al, byte_27D63
    if (_al < memory(_ds, 0x7920))              //jb short loc_14E98
        goto loc_14E98;
    _al = 0x02;                                 //mov al, 2
    goto loc_14EC1;                             //jmp short loc_14EC1
loc_14E98:                                      //loc_14E98:
    if (!(memory(_ds, 0x79B3) & 0x01))          //jz short loc_14EB4
        goto loc_14EB4;
    if (memory(_ds, 0xA0E2) == 0x00)            //jz short loc_14EAA
        goto loc_14EAA;
    _al = 0x02;                                 //mov al, 2
    goto loc_14EC1;                             //jmp short loc_14EC1
loc_14EAA:                                      //loc_14EAA:
    _al = 0x03;                                 //mov al, 3
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_14EC7;                             //jmp short loc_14EC7
loc_14EB4:                                      //loc_14EB4:
    if (memory(_ds, 0xA1B2) == 0x00)            //jz short loc_14EBF
        goto loc_14EBF;
    _al = 0x02;                                 //mov al, 2
    goto loc_14EC1;                             //jmp short loc_14EC1
loc_14EBF:                                      //loc_14EBF:
    _al = 0x04;                                 //mov al, 4
loc_14EC1:                                      //loc_14EC1:
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14EC7:                                      //loc_14EC7:
    _bp = _pop();                               //pop bp
}

void sub_14EC9()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14ED5
        goto loc_14ED5;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14ED5:                                      //loc_14ED5:
    _al = memory(_ds, 0xA0E2);                  //mov al, byte_2A492
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14EE3
        goto loc_14EE3;
    sub_14F04();                                //call sub_14F04
    goto loc_14F02;                             //jmp short loc_14F02
loc_14EE3:                                      //loc_14EE3:
    _al = memory(_ds, 0xA0E0);                  //mov al, byte_2A490
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14EF1
        goto loc_14EF1;
    sub_14DFA();                                //call sub_14DFA
    goto loc_14F02;                             //jmp short loc_14F02
loc_14EF1:                                      //loc_14EF1:
    _al = memory(_ds, 0xA0E1);                  //mov al, byte_2A491
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14EFF
        goto loc_14EFF;
    sub_14E7F();                                //call sub_14E7F
    goto loc_14F02;                             //jmp short loc_14F02
loc_14EFF:                                      //loc_14EFF:
    sub_14F89();                                //call sub_14F89
loc_14F02:                                      //loc_14F02:
    _bp = _pop();                               //pop bp
}

void sub_14F04()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14F10
        goto loc_14F10;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14F10:                                      //loc_14F10:
    _al = memory(_ds, 0x79B3);                  //mov al, byte_27D63
    if (_al < memory(_ds, 0x7920))              //jb short loc_14F1D
        goto loc_14F1D;
    _al = 0x03;                                 //mov al, 3
    goto loc_14F46;                             //jmp short loc_14F46
loc_14F1D:                                      //loc_14F1D:
    if (!(memory(_ds, 0x79B3) & 0x01))          //jz short loc_14F39
        goto loc_14F39;
    if (memory(_ds, 0xA0E0) == 0x00)            //jz short loc_14F2F
        goto loc_14F2F;
    _al = 0x03;                                 //mov al, 3
    goto loc_14F46;                             //jmp short loc_14F46
loc_14F2F:                                      //loc_14F2F:
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_14F4C;                             //jmp short loc_14F4C
loc_14F39:                                      //loc_14F39:
    if (memory(_ds, 0xA0E1) == 0x00)            //jz short loc_14F44
        goto loc_14F44;
    _al = 0x03;                                 //mov al, 3
    goto loc_14F46;                             //jmp short loc_14F46
loc_14F44:                                      //loc_14F44:
    _al = 0x02;                                 //mov al, 2
loc_14F46:                                      //loc_14F46:
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14F4C:                                      //loc_14F4C:
    _bp = _pop();                               //pop bp
}

void sub_14F4E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14F5A
        goto loc_14F5A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14F5A:                                      //loc_14F5A:
    _al = memory(_ds, 0xA1B2);                  //mov al, byte_2A562
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14F68
        goto loc_14F68;
    sub_14F89();                                //call sub_14F89
    goto loc_14F87;                             //jmp short loc_14F87
loc_14F68:                                      //loc_14F68:
    _al = memory(_ds, 0xA0E1);                  //mov al, byte_2A491
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14F76
        goto loc_14F76;
    sub_14E7F();                                //call sub_14E7F
    goto loc_14F87;                             //jmp short loc_14F87
loc_14F76:                                      //loc_14F76:
    _al = memory(_ds, 0xA0E0);                  //mov al, byte_2A490
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_14F84
        goto loc_14F84;
    sub_14DFA();                                //call sub_14DFA
    goto loc_14F87;                             //jmp short loc_14F87
loc_14F84:                                      //loc_14F84:
    sub_14F04();                                //call sub_14F04
loc_14F87:                                      //loc_14F87:
    _bp = _pop();                               //pop bp
}

void sub_14F89()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14F95
        goto loc_14F95;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14F95:                                      //loc_14F95:
    _al = memory(_ds, 0x79B3);                  //mov al, byte_27D63
    if (_al < memory(_ds, 0x7920))              //jb short loc_14FA2
        goto loc_14FA2;
    _al = 0x04;                                 //mov al, 4
    goto loc_14FCB;                             //jmp short loc_14FCB
loc_14FA2:                                      //loc_14FA2:
    if (!(memory(_ds, 0x79B3) & 0x01))          //jz short loc_14FBE
        goto loc_14FBE;
    if (memory(_ds, 0xA0E0) == 0x00)            //jz short loc_14FB4
        goto loc_14FB4;
    _al = 0x04;                                 //mov al, 4
    goto loc_14FCB;                             //jmp short loc_14FCB
loc_14FB4:                                      //loc_14FB4:
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_14FD1;                             //jmp short loc_14FD1
loc_14FBE:                                      //loc_14FBE:
    if (memory(_ds, 0xA0E1) == 0x00)            //jz short loc_14FC9
        goto loc_14FC9;
    _al = 0x04;                                 //mov al, 4
    goto loc_14FCB;                             //jmp short loc_14FCB
loc_14FC9:                                      //loc_14FC9:
    _al = 0x02;                                 //mov al, 2
loc_14FCB:                                      //loc_14FCB:
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_14FD1:                                      //loc_14FD1:
    _bp = _pop();                               //pop bp
}

void sub_14FD3()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_14FE1
        goto loc_14FE1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_14FE1:                                      //loc_14FE1:
    _al = memory(_ds, 0x79B3);                  //mov al, byte_27D63
    _al &= 0x03;                                //and al, 3
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    sub_193B1();                                //call sub_193B1
    memory(_ds, 0x79B3) = _al;                  //mov byte_27D63, al
    _al &= 0x01;                                //and al, 1
    _al = _al + memory(_ss, _bp + var_2);       //add al, [bp+var_2]
    _al += 0x05;                                //add al, 5
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _push(_ax);                                 //push ax
    sub_14BC6();                                //call sub_14BC6
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_15003()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1500F
        goto loc_1500F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1500F:                                      //loc_1500F:
    if (memory(_ds, 0x8563) != 0x05)            //jnz short loc_15023
        goto loc_15023;
    _al = memory(_ds, 0x8562);                  //mov al, byte_28912
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    switch (_bx)                                //call off_20C0C[bx]
    {
      case 0: sub_17111(); break;
      case 2: sub_15025(); break;
      case 4: sub_1503F(); break;
      case 6: sub_15059(); break;
      case 8: sub_1506F(); break;
      case 10: sub_17111(); break;
      case 12: sub_17111(); break;
      case 14: sub_17111(); break;
      case 16: sub_17111(); break;
      case 18: sub_17111(); break;
      case 20: sub_17111(); break;
      case 22: sub_14DBF(); break;
      case 24: sub_14E44(); break;
      case 26: sub_14EC9(); break;
      case 28: sub_14F4E(); break;
      case 30: sub_14DBF(); break;
      case 32: sub_14DBF(); break;
      case 34: sub_14DBF(); break;
      case 36: sub_14DBF(); break;
      case 38: sub_14DBF(); break;
      case 40: sub_17111(); break;
      default:
        _ASSERT(0);
    }
loc_15023:                                      //loc_15023:
    _bp = _pop();                               //pop bp
}

void sub_15025()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15031
        goto loc_15031;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15031:                                      //loc_15031:
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _al += 0xf8;                                //add al, 0F8h
    memory(_ds, 0x8571) = _al;                  //mov byte_28921, al
    memory(_ds, 0x8565) -= 1;                   //dec byte_28915
    _bp = _pop();                               //pop bp
}

void sub_1503F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1504B
        goto loc_1504B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1504B:                                      //loc_1504B:
    _al = memory(_ds, 0x8571);                  //mov al, byte_28921
    _al += 0x08;                                //add al, 8
    memory(_ds, 0x8571) = _al;                  //mov byte_28921, al
    memory(_ds, 0x8565) += 1;                   //inc byte_28915
    _bp = _pop();                               //pop bp
}

void sub_15059()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15065
        goto loc_15065;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15065:                                      //loc_15065:
    memory(_ds, 0x8571) -= 1;                   //dec byte_28921
    memory(_ds, 0x8564) -= 1;                   //dec byte_28914
    _bp = _pop();                               //pop bp
}

void sub_1506F()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1507B
        goto loc_1507B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1507B:                                      //loc_1507B:
    memory(_ds, 0x8571) += 1;                   //inc byte_28921
    memory(_ds, 0x8564) += 1;                   //inc byte_28914
    _bp = _pop();                               //pop bp
}

void sub_15085()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15091
        goto loc_15091;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15091:                                      //loc_15091:
    _al = memory(_ds, 0xA0CE);                  //mov al, byte_2A47E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_150BE
        goto loc_150BE;
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0xfffb;                              //add ax, 0FFFBh
    memory16(_ds, 0x84C) = _ax;                 //mov word_20BFC, ax
    _ax = memory16(_ds, 0x9290);                //mov ax, word_29640
    _ax += 0x0006;                              //add ax, 6
    memory16(_ds, 0x84E) = _ax;                 //mov word_20BFE, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0xfffb;                              //add ax, 0FFFBh
    memory16(_ds, 0x850) = _ax;                 //mov word_20C00, ax
    _ax = memory16(_ds, 0x9292);                //mov ax, word_29642
    _ax += 0x0005;                              //add ax, 5
    memory16(_ds, 0x852) = _ax;                 //mov word_20C02, ax
loc_150BE:                                      //loc_150BE:
    _bp = _pop();                               //pop bp
}

void sub_150C0()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_150CC
        goto loc_150CC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_150CC:                                      //loc_150CC:
    _al = memory(_ds, 0xA0CE);                  //mov al, byte_2A47E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_150F9
        goto loc_150F9;
    _ax = memory16(_ds, 0x79BA);                //mov ax, word_27D6A
    _ax += 0xfffb;                              //add ax, 0FFFBh
    memory16(_ds, 0x854) = _ax;                 //mov word_20C04, ax
    _ax = memory16(_ds, 0x79BA);                //mov ax, word_27D6A
    _ax += 0x0006;                              //add ax, 6
    memory16(_ds, 0x856) = _ax;                 //mov word_20C06, ax
    _ax = memory16(_ds, 0x79BC);                //mov ax, word_27D6C
    _ax += 0xfffb;                              //add ax, 0FFFBh
    memory16(_ds, 0x858) = _ax;                 //mov word_20C08, ax
    _ax = memory16(_ds, 0x79BC);                //mov ax, word_27D6C
    _ax += 0x0005;                              //add ax, 5
    memory16(_ds, 0x85A) = _ax;                 //mov word_20C0A, ax
loc_150F9:                                      //loc_150F9:
    _bp = _pop();                               //pop bp
}

void sub_150FB()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15107
        goto loc_15107;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15107:                                      //loc_15107:
    if (memory(_ds, 0x8571) == 0xff)            //jz short loc_1517F
        goto loc_1517F;
    _al = memory(_ds, 0xA0CE);                  //mov al, byte_2A47E
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1517F
        goto loc_1517F;
    _al = memory(_ds, 0x856D);                  //mov al, byte_2891D
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1517F
        goto loc_1517F;
    if (memory(_ds, 0x792C) == 0x30)            //jz short loc_1517F
        goto loc_1517F;
    _ax = memory16(_ds, 0x854);                 //mov ax, word_20C04
    if ((short)_ax <= (short)memory16(_ds, 0x84E))//jle short loc_15137
        goto loc_15137;
    memory(_ds, 0xA1AA) = 0x00;                 //mov byte_2A55A, 0
    goto loc_1517F;                             //jmp short loc_1517F
loc_15137:                                      //loc_15137:
    _ax = memory16(_ds, 0x84C);                 //mov ax, word_20BFC
    if ((short)_ax <= (short)memory16(_ds, 0x856))//jle short loc_15147
        goto loc_15147;
    memory(_ds, 0xA1AA) = 0x00;                 //mov byte_2A55A, 0
    goto loc_1517F;                             //jmp short loc_1517F
loc_15147:                                      //loc_15147:
    _ax = memory16(_ds, 0x858);                 //mov ax, word_20C08
    if ((short)_ax <= (short)memory16(_ds, 0x852))//jle short loc_15157
        goto loc_15157;
    memory(_ds, 0xA1AA) = 0x00;                 //mov byte_2A55A, 0
    goto loc_1517F;                             //jmp short loc_1517F
loc_15157:                                      //loc_15157:
    _ax = memory16(_ds, 0x850);                 //mov ax, word_20C00
    if ((short)_ax <= (short)memory16(_ds, 0x85A))//jle short loc_15167
        goto loc_15167;
    memory(_ds, 0xA1AA) = 0x00;                 //mov byte_2A55A, 0
    goto loc_1517F;                             //jmp short loc_1517F
loc_15167:                                      //loc_15167:
    memory(_ds, 0xA1AA) = 0x01;                 //mov byte_2A55A, 1
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_15177
        goto loc_15177;
    _al = 0x03;                                 //mov al, 3
    goto loc_15179;                             //jmp short loc_15179
loc_15177:                                      //loc_15177:
    _al = 0x0d;                                 //mov al, 0Dh
loc_15179:                                      //loc_15179:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_1517F:                                      //loc_1517F:
    _bp = _pop();                               //pop bp
}

void sub_15181()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1518D
        goto loc_1518D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1518D:                                      //loc_1518D:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    memory16(_es, _bx + 14) = _ax;              //mov es:[bx+0Eh], ax
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_193C8();                                //call sub_193C8
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_151D8()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_151E4
        goto loc_151E4;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_151E4:                                      //loc_151E4:
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_2A0EA
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0002;           //mov word ptr es:[bx+1Ah], 2
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0003;           //mov word ptr es:[bx+1Eh], 3
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 6) = 0x0004;            //mov word ptr es:[bx+6], 4
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_29F5F
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0008;            //mov word ptr es:[bx+8], 8
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_2A26A
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 24) = 0x0001;           //mov word ptr es:[bx+18h], 1
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0004;           //mov word ptr es:[bx+20h], 4
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 8) = 0x0003;            //mov word ptr es:[bx+8], 3
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_2A36A
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x000d;            //mov word ptr es:[bx+8], 0Dh
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28F38
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 24) = 0x0006;           //mov word ptr es:[bx+18h], 6
    memory16(_es, _bx + 26) = 0x0002;           //mov word ptr es:[bx+1Ah], 2
    memory16(_es, _bx + 30) = 0x0006;           //mov word ptr es:[bx+1Eh], 6
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 8) = 0x0011;            //mov word ptr es:[bx+8], 11h
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_285FE
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 8) = 0x0015;            //mov word ptr es:[bx+8], 15h
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28932
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180AC();                                //call sub_180AC
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_1535E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1536A
        goto loc_1536A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1536A:                                      //loc_1536A:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory(_es, _bx + 34) = 0x00;               //mov byte ptr es:[bx+22h], 0
    memory(_es, _bx + 35) = 0x00;               //mov byte ptr es:[bx+23h], 0
    memory(_es, _bx + 36) = 0x00;               //mov byte ptr es:[bx+24h], 0
    memory(_es, _bx + 37) = 0x00;               //mov byte ptr es:[bx+25h], 0
    _les(_bx, _ds, 0x8B8);                      //les bx, dword ptr word_20C68
    memory16(_es, _bx) = 0x0001;                //mov word ptr es:[bx], 1
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_2923D
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0004;           //mov word ptr es:[bx+18h], 4
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    _les(_bx, _ds, 0x8EC);                      //les bx, dword ptr word_20C9C
    memory16(_es, _bx) = 0x0001;                //mov word ptr es:[bx], 1
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_29644
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0004;           //mov word ptr es:[bx+18h], 4
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    _les(_bx, _ds, 0x8BC);                      //les bx, dword ptr word_20C6C
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0001;           //mov word ptr es:[bx+0Ah], 1
    memory16(_es, _bx + 12) = 0x0004;           //mov word ptr es:[bx+0Ch], 4
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0004;           //mov word ptr es:[bx+20h], 4
    _les(_bx, _ds, 0x8C0);                      //les bx, dword ptr word_20C70
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0003;           //mov word ptr es:[bx+0Ah], 3
    memory16(_es, _bx + 12) = 0x0002;           //mov word ptr es:[bx+0Ch], 2
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0002;           //mov word ptr es:[bx+1Eh], 2
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _les(_bx, _ds, 0x8C4);                      //les bx, dword ptr word_20C74
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_2923D
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0004;           //mov word ptr es:[bx+0Ah], 4
    memory16(_es, _bx + 12) = 0x0004;           //mov word ptr es:[bx+0Ch], 4
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    _les(_bx, _ds, 0x8E8);                      //les bx, dword ptr word_20C98
    memory16(_es, _bx + 2) = _FIXME_;           //mov word ptr es:[bx+2], offset unk_29644
    memory16(_es, _bx + 4) = _ds;               //mov word ptr es:[bx+4], ds
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0004;           //mov word ptr es:[bx+0Ah], 4
    memory16(_es, _bx + 12) = 0x0004;           //mov word ptr es:[bx+0Ch], 4
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    _les(_bx, _ds, 0x8C8);                      //les bx, dword ptr word_20C78
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28C38
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0004;           //mov word ptr es:[bx+20h], 4
    _les(_bx, _ds, 0x8CC);                      //les bx, dword ptr word_20C7C
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 12) = 0x0004;           //mov word ptr es:[bx+0Ch], 4
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28C38
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0004;           //mov word ptr es:[bx+20h], 4
    _les(_bx, _ds, 0x8D0);                      //les bx, dword ptr word_20C80
    memory16(_es, _bx) = 0x0001;                //mov word ptr es:[bx], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0001;           //mov word ptr es:[bx+18h], 1
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0004;           //mov word ptr es:[bx+20h], 4
    _les(_bx, _ds, 0x8D4);                      //les bx, dword ptr word_20C84
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 30) = 0x0002;           //mov word ptr es:[bx+1Eh], 2
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _les(_bx, _ds, 0x8D8);                      //les bx, off_20C88
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28C38
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0003;           //mov word ptr es:[bx+1Eh], 3
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _les(_bx, _ds, 0x8DC);                      //les bx, off_20C8C
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0003;           //mov word ptr es:[bx+0Ah], 3
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 16) = _FIXME_;          //mov word ptr es:[bx+10h], offset unk_28C38
    memory16(_es, _bx + 18) = _ds;              //mov word ptr es:[bx+12h], ds
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0004;           //mov word ptr es:[bx+1Ah], 4
    memory16(_es, _bx + 30) = 0x0003;           //mov word ptr es:[bx+1Eh], 3
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _les(_bx, _ds, 0x8E0);                      //les bx, dword ptr word_20C90
    memory16(_es, _bx) = 0x0001;                //mov word ptr es:[bx], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 24) = 0x0003;           //mov word ptr es:[bx+18h], 3
    memory16(_es, _bx + 26) = 0x0002;           //mov word ptr es:[bx+1Ah], 2
    memory16(_es, _bx + 30) = 0x0003;           //mov word ptr es:[bx+1Eh], 3
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _les(_bx, _ds, 0x8E4);                      //les bx, dword ptr word_20C94
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _bp = _pop();                               //pop bp
}

void sub_15681()
{
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15692
        goto loc_15692;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15692:                                      //loc_15692:
    _push(_ds);                                 //push ds
    _ax = 0x0928;                               //mov ax, 928h
    _push(_ax);                                 //push ax
    sub_17307();                                //call sub_17307
    _sp += 0x0004;                              //add sp, 4
    _ax = memory16(_ds, 0x7928);                //mov ax, word_27CD8
    _dx = memory16(_ds, 0x7926);                //mov dx, word_27CD6
    memory16(_ds, 0x857E) = _dx;                //mov word_2892E, dx
    memory16(_ds, 0x8580) = _ax;                //mov word_28930, ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    sub_1736F();                                //call sub_1736F
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x94E));                //push word_20CFE
    _push(memory16(_ds, 0x94C));                //push word_20CFC
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    _push(_si);                                 //push si
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _push(_si);                                 //push si
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x7d63;                               //mov dx, 7D63h
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(memory16(_ss, _bp + var_2));          //push [bp+var_2]
    _push(memory16(_ss, _bp + var_4));          //push [bp+var_4]
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    sub_17B5A();                                //call sub_17B5A
    _sp += 0x000c;                              //add sp, 0Ch
    if (memory16(_ds, 0x541D) != 0x0001)        //jnz short loc_1573A
        goto loc_1573A;
    _ax = memory16(_ds, 0x8580);                //mov ax, word_28930
    _dx = memory16(_ds, 0x857E);                //mov dx, word_2892E
    memory16(_ds, 0x9B96) = _dx;                //mov word ptr dword_29F46, dx
    memory16(_ds, 0x9B98) = _ax;                //mov word ptr dword_29F46+2, ax
    memory(_ss, _bp + var_5) = 0x00;            //mov [bp+var_5], 0
    goto loc_15734;                             //jmp short loc_15734
loc_15717:                                      //loc_15717:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9B96);                     //les bx, dword_29F46
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _di = _ax;                                  //mov di, ax
    _al = memory(_ds, _di + 1822);              //mov al, [di+71Eh]
    memory(_es, _bx + 35) = _al;                //mov es:[bx+23h], al
    memory(_ss, _bp + var_5) += 1;              //inc [bp+var_5]
loc_15734:                                      //loc_15734:
    if (memory(_ss, _bp + var_5) < 0x10)        //jb short loc_15717
        goto loc_15717;
loc_1573A:                                      //loc_1573A:
    sub_13467();                                //call sub_13467
    _ax = memory16(_ds, 0x8580);                //mov ax, word_28930
    _dx = memory16(_ds, 0x857E);                //mov dx, word_2892E
    _dx += 0x0063;                              //add dx, 63h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory16(_es, _bx + 6) = 0x0000;            //mov word ptr es:[bx+6], 0
    memory16(_es, _bx + 8) = 0x0000;            //mov word ptr es:[bx+8], 0
    memory16(_es, _bx + 10) = 0x0014;           //mov word ptr es:[bx+0Ah], 14h
    memory16(_es, _bx + 12) = 0x0019;           //mov word ptr es:[bx+0Ch], 19h
    memory16(_es, _bx + 14) = 0x0001;           //mov word ptr es:[bx+0Eh], 1
    memory16(_es, _bx + 20) = 0x0000;           //mov word ptr es:[bx+14h], 0
    memory16(_es, _bx + 22) = 0x0000;           //mov word ptr es:[bx+16h], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0014;           //mov word ptr es:[bx+1Eh], 14h
    memory16(_es, _bx + 32) = 0x0019;           //mov word ptr es:[bx+20h], 19h
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_180BC();                                //call sub_180BC
    _sp += 0x0004;                              //add sp, 4
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(memory16(_ds, 0x8580));               //push word_28930
    _push(memory16(_ds, 0x857E));               //push word_2892E
    sub_17B93();                                //call sub_17B93
    _sp += 0x0006;                              //add sp, 6
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_17BCA();                                //call sub_17BCA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_17BDD();                                //call sub_17BDD
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    sub_19864();                                //call sub_19864
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 14) = 0x0000;           //mov word ptr es:[bx+0Eh], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    sub_157E1();                                //call sub_157E1
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_157E1()
{
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_9 = -9;                       //var_9  = byte ptr -9
    const int var_8 = -8;                       //var_8  = byte ptr -8
    const int var_7 = -7;                       //var_7  = byte ptr -7
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000a;                              //sub sp, 0Ah
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_157F0
        goto loc_157F0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_157F0:                                      //loc_157F0:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ss, _bp + var_9) = 0x00;            //mov [bp+var_9], 0
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    goto loc_159A9;                             //jmp loc_159A9
loc_15803:                                      //loc_15803:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x08f0;                              //add ax, 8F0h
    memory16(_ds, 0x8574) = _ax;                //mov word ptr dword_28924, ax
    memory16(_ds, 0x8576) = _ds;                //mov word ptr dword_28924+2, ds
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _ax = memory16(_es, _bx + 6);               //mov ax, es:[bx+6]
    _dx = memory16(_es, _bx + 4);               //mov dx, es:[bx+4]
    if (_ax <= memory16(_ds, 0xA0D6))           //jbe short loc_1582D
        goto loc_1582D;
    goto loc_15901;                             //jmp loc_15901
loc_1582D:                                      //loc_1582D:
    if (_ax < memory16(_ds, 0xA0D6))            //jb short loc_15838
        goto loc_15838;
    if (_dx < memory16(_ds, 0xA0D4))            //jb short loc_15838
        goto loc_15838;
    goto loc_15901;                             //jmp loc_15901
loc_15838:                                      //loc_15838:
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_15844
        goto loc_15844;
    goto loc_15901;                             //jmp loc_15901
loc_15844:                                      //loc_15844:
    memory(_ss, _bp + var_9) = 0x01;            //mov [bp+var_9], 1
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    _ax = memory16(_ds, 0x922);                 //mov ax, seg_20CD2
    _dx = memory16(_ds, 0x920);                 //mov dx, word_20CD0
    memory16(_ss, _bp + var_6) = _dx;           //mov [bp+var_6], dx
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory(_ss, _bp + var_A) = 0x06;            //mov [bp+var_A], 6
    goto loc_158B4;                             //jmp short loc_158B4
loc_15861:                                      //loc_15861:
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 2282);            //mov ax, [bx+8EAh]
    _dx = memory16(_ds, _bx + 2280);            //mov dx, [bx+8E8h]
    _bl = memory(_ss, _bp + var_A);             //mov bl, [bp+var_A]
    _bh = 0x00;                                 //mov bh, 0
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    memory16(_ds, _bx + 2288) = _dx;            //mov [bx+8F0h], dx
    memory16(_ds, _bx + 2290) = _ax;            //mov [bx+8F2h], ax
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 2286);            //mov ax, [bx+8EEh]
    _dx = memory16(_ds, _bx + 2284);            //mov dx, [bx+8ECh]
    _bl = memory(_ss, _bp + var_A);             //mov bl, [bp+var_A]
    _bh = 0x00;                                 //mov bh, 0
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    memory16(_ds, _bx + 2292) = _dx;            //mov [bx+8F4h], dx
    memory16(_ds, _bx + 2294) = _ax;            //mov [bx+8F6h], ax
    memory(_ss, _bp + var_A) -= 1;              //dec [bp+var_A]
loc_158B4:                                      //loc_158B4:
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    if (_al > memory(_ss, _bp + var_1))         //ja short loc_15861
        goto loc_15861;
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _ax = memory16(_ss, _bp + var_4);           //mov ax, [bp+var_4]
    _dx = memory16(_ss, _bp + var_6);           //mov dx, [bp+var_6]
    memory16(_es, _bx) = _dx;                   //mov es:[bx], dx
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_A) = 0x00;            //mov [bp+var_A], 0
    goto loc_158E8;                             //jmp short loc_158E8
loc_158D3:                                      //loc_158D3:
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_A);             //mov al, [bp+var_A]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x41;                    //mov byte ptr es:[bx], 41h
    memory(_ss, _bp + var_A) += 1;              //inc [bp+var_A]
loc_158E8:                                      //loc_158E8:
    if (memory(_ss, _bp + var_A) < 0x08)        //jb short loc_158D3
        goto loc_158D3;
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _ax = memory16(_ds, 0xA0D6);                //mov ax, word_2A486
    _dx = memory16(_ds, 0xA0D4);                //mov dx, word_2A484
    memory16(_es, _bx + 4) = _dx;               //mov es:[bx+4], dx
    memory16(_es, _bx + 6) = _ax;               //mov es:[bx+6], ax
loc_15901:                                      //loc_15901:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _ax += 0x0041;                              //add ax, 41h
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_7) = 0x00;            //mov [bp+var_7], 0
    goto loc_1597A;                             //jmp short loc_1597A
loc_1591B:                                      //loc_1591B:
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_7);             //mov al, [bp+var_7]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + var_8) = _al;             //mov [bp+var_8], al
    if (_al != 0x2e)                            //jnz short loc_1594A
        goto loc_1594A;
    if (memory(_ss, _bp + var_9) == 0x00)       //jz short loc_15945
        goto loc_15945;
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    if (_al != memory(_ss, _bp + var_1))        //jnz short loc_15945
        goto loc_15945;
    _al = 0x5b;                                 //mov al, 5Bh
    goto loc_15947;                             //jmp short loc_15947
loc_15945:                                      //loc_15945:
    _al = 0x20;                                 //mov al, 20h
loc_15947:                                      //loc_15947:
    memory(_ss, _bp + var_8) = _al;             //mov [bp+var_8], al
loc_1594A:                                      //loc_1594A:
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _al = memory(_ss, _bp + var_8);             //mov al, [bp+var_8]
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x0175;                              //add ax, 175h
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_7);             //mov al, [bp+var_7]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    if (memory(_ss, _bp + var_8) == 0x20)       //jz short loc_15977
        goto loc_15977;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_15977:                                      //loc_15977:
    memory(_ss, _bp + var_7) += 1;              //inc [bp+var_7]
loc_1597A:                                      //loc_1597A:
    if (memory(_ss, _bp + var_7) < 0x08)        //jb short loc_1591B
        goto loc_1591B;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _ax += 0x0041;                              //add ax, 41h
    _push(_ax);                                 //push ax
    _ax = 0x00b0;                               //mov ax, 0B0h
    _push(_ax);                                 //push ax
    _al = 0x07;                                 //mov al, 7
    _push(_ax);                                 //push ax
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _push(memory16(_es, _bx + 6));              //push word ptr es:[bx+6]
    _push(memory16(_es, _bx + 4));              //push word ptr es:[bx+4]
    sub_1603D();                                //call sub_1603D
    _sp += 0x000a;                              //add sp, 0Ah
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
loc_159A9:                                      //loc_159A9:
    if (memory(_ss, _bp + var_1) >= 0x07)       //jnb short loc_159B2
        goto loc_159B2;
    goto loc_15803;                             //jmp loc_15803
loc_159B2:                                      //loc_159B2:
    if (memory(_ss, _bp + var_9) == 0x00)       //jz short loc_159C3
        goto loc_159C3;
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    sub_159D3();                                //call sub_159D3
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    goto loc_159C6;                             //jmp short loc_159C6
loc_159C3:                                      //loc_159C3:
    sub_1328F();                                //call sub_1328F
loc_159C6:                                      //loc_159C6:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    sub_19410();                                //call sub_19410
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_159D3()
{
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0006;                              //sub sp, 6
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_159E2
        goto loc_159E2;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_159E2:                                      //loc_159E2:
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x08f0;                              //add ax, 8F0h
    memory16(_ds, 0x8574) = _ax;                //mov word ptr dword_28924, ax
    memory16(_ds, 0x8576) = _ds;                //mov word ptr dword_28924+2, ds
    memory16(_ss, _bp + var_6) = 0x01b6;        //mov [bp+var_6], 1B6h
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x41;                    //mov byte ptr es:[bx], 41h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x0008;                              //add ax, 8
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _al += 0x41;                                //add al, 41h
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15C60;                             //jmp loc_15C60
loc_15A4A:                                      //loc_15A4A:
    if (!(memory(_ss, _bp + var_1) & 0x01))     //jz short loc_15AB4
        goto loc_15AB4;
    if ((short)memory16(_ss, _bp + var_6) <= (short)0x01ac)
        goto loc_15AB4;
    memory16(_ss, _bp + var_6) -= 1;            //dec [bp+var_6]
    if (memory16(_ss, _bp + var_6) != 0x01d0)   //jnz short loc_15A66
        goto loc_15A66;
    memory16(_ss, _bp + var_6) = 0x01a3;        //mov [bp+var_6], 1A3h
loc_15A66:                                      //loc_15A66:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_6);             //mov al, byte ptr [bp+var_6]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    if (memory16(_ss, _bp + var_6) != 0x002e)   //jnz short loc_15A8E
        goto loc_15A8E;
    memory16(_ss, _bp + var_6) = 0x005b;        //mov [bp+var_6], 5Bh
loc_15A8E:                                      //loc_15A8E:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _al += 0x41;                                //add al, 41h
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15C60;                             //jmp loc_15C60
loc_15AB4:                                      //loc_15AB4:
    if (!(memory(_ss, _bp + var_1) & 0x02))     //jz short loc_15B1E
        goto loc_15B1E;
    if ((short)memory16(_ss, _bp + var_6) >= (short)0x01d0)
        goto loc_15B1E;
    memory16(_ss, _bp + var_6) += 1;            //inc [bp+var_6]
    if (memory16(_ss, _bp + var_6) != 0x01d0)   //jnz short loc_15AD0
        goto loc_15AD0;
    memory16(_ss, _bp + var_6) = 0x01a3;        //mov [bp+var_6], 1A3h
loc_15AD0:                                      //loc_15AD0:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_6);             //mov al, byte ptr [bp+var_6]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    if (memory16(_ss, _bp + var_6) != 0x002e)   //jnz short loc_15AF8
        goto loc_15AF8;
    memory16(_ss, _bp + var_6) = 0x005b;        //mov [bp+var_6], 5Bh
loc_15AF8:                                      //loc_15AF8:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _al += 0x41;                                //add al, 41h
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15C60;                             //jmp loc_15C60
loc_15B1E:                                      //loc_15B1E:
    if (memory(_ss, _bp + var_1) & 0x04)        //jnz short loc_15B27
        goto loc_15B27;
    goto loc_15BAB;                             //jmp loc_15BAB
loc_15B27:                                      //loc_15B27:
    if (memory(_ss, _bp + var_2) == 0x00)       //jz short loc_15BAB
        goto loc_15BAB;
    if (memory16(_ss, _bp + var_6) != 0x01d0)   //jnz short loc_15B39
        goto loc_15B39;
    memory16(_ss, _bp + var_6) = 0x01a3;        //mov [bp+var_6], 1A3h
loc_15B39:                                      //loc_15B39:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_6);             //mov al, byte ptr [bp+var_6]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ss, _bp + var_2) -= 1;              //dec [bp+var_2]
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    if (memory16(_ss, _bp + var_6) != 0x002e)   //jnz short loc_15B7A
        goto loc_15B7A;
    memory16(_ss, _bp + var_6) = 0x005b;        //mov [bp+var_6], 5Bh
loc_15B7A:                                      //loc_15B7A:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _al += 0x41;                                //add al, 41h
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15C60;                             //jmp loc_15C60
loc_15BAB:                                      //loc_15BAB:
    if (memory(_ss, _bp + var_1) & 0x08)        //jnz short loc_15BB4
        goto loc_15BB4;
    goto loc_15C37;                             //jmp loc_15C37
loc_15BB4:                                      //loc_15BB4:
    if (memory(_ss, _bp + var_2) >= 0x07)       //jnb short loc_15C37
        goto loc_15C37;
    if (memory16(_ss, _bp + var_6) != 0x01d0)   //jnz short loc_15BC6
        goto loc_15BC6;
    memory16(_ss, _bp + var_6) = 0x01a3;        //mov [bp+var_6], 1A3h
loc_15BC6:                                      //loc_15BC6:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_6);             //mov al, byte ptr [bp+var_6]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
    _les(_bx, _ds, 0x8574);                     //les bx, dword_28924
    _les(_bx, _es, _bx);                        //les bx, es:[bx]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    if (memory16(_ss, _bp + var_6) != 0x002e)   //jnz short loc_15C07
        goto loc_15C07;
    memory16(_ss, _bp + var_6) = 0x005b;        //mov [bp+var_6], 5Bh
loc_15C07:                                      //loc_15C07:
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_6) = _ax;           //mov [bp+var_6], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_6));          //push [bp+var_6]
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _al += 0x41;                                //add al, 41h
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15C60;                             //jmp short loc_15C60
loc_15C37:                                      //loc_15C37:
    memory(_ss, _bp + var_3) += 1;              //inc [bp+var_3]
    if (!(memory(_ss, _bp + var_3) & 0x08))     //jz short loc_15C4D
        goto loc_15C4D;
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    goto loc_15C55;                             //jmp short loc_15C55
loc_15C4D:                                      //loc_15C4D:
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
loc_15C55:                                      //loc_15C55:
    _sp += 0x0004;                              //add sp, 4
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_15C60:                                      //loc_15C60:
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _ah = 0x00;                                 //mov ah, 0
    _ax &= 0x0010;                              //and ax, 10h
    if (_ax == 0x0010)                          //jz short loc_15C78
        goto loc_15C78;
    goto loc_15A4A;                             //jmp loc_15A4A
loc_15C78:                                      //loc_15C78:
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_15C87()
{
    const int var_14 = -20;                     //var_14  = word ptr -14h
    const int var_12 = -18;                     //var_12  = dword ptr -12h
    const int var_E = -14;                      //var_E  = dword ptr -0Eh
    const int var_A = -10;                      //var_A  = word ptr -0Ah
    const int var_8 = -8;                       //var_8  = word ptr -8
    const int var_6 = -6;                       //var_6  = byte ptr -6
    const int var_5 = -5;                       //var_5  = byte ptr -5
    const int var_4 = -4;                       //var_4  = byte ptr -4
    const int var_3 = -3;                       //var_3  = byte ptr -3
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = byte ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0014;                              //sub sp, 14h
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15C96
        goto loc_15C96;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15C96:                                      //loc_15C96:
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + var_A);                //lea ax, [bp+var_A]
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x256a;                               //mov ax, 256Ah
    _push(_ax);                                 //push ax
    _cx = 0x0004;                               //mov cx, 4
    _STOP_("call near ptr N_SCOPY@");           //call near ptr N_SCOPY@
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    memory16(_es, _bx + 14) = 0x0000;           //mov word ptr es:[bx+0Eh], 0
    memory16(_es, _bx + 28) = 0x0000;           //mov word ptr es:[bx+1Ch], 0
    memory16(_es, _bx + 30) = 0x0001;           //mov word ptr es:[bx+1Eh], 1
    memory16(_es, _bx + 32) = 0x0002;           //mov word ptr es:[bx+20h], 2
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_6) = _al;             //mov [bp+var_6], al
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    _ax = memory16(_ss, _bp + var_8);           //mov ax, [bp+var_8]
    _dx = memory16(_ss, _bp + var_A);           //mov dx, [bp+var_A]
    memory16(_ss, _bp + var_E) = _dx;           //mov word ptr [bp+var_E], dx
    memory16(_ss, _bp + var_E + 2) = _ax;       //mov word ptr [bp+var_E+2], ax
    memory(_ss, _bp + var_2) = 0x00;            //mov [bp+var_2], 0
    goto loc_15CED;                             //jmp short loc_15CED
loc_15CDC:                                      //loc_15CDC:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x41;                    //mov byte ptr es:[bx], 41h
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_15CED:                                      //loc_15CED:
    if (memory(_ss, _bp + var_2) < 0x06)        //jb short loc_15CDC
        goto loc_15CDC;
    memory16(_ss, _bp + var_14) = 0x01b6;       //mov [bp+var_14], 1B6h
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x41;                    //mov byte ptr es:[bx], 41h
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_14));         //push [bp+var_14]
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15F2F;                             //jmp loc_15F2F
loc_15D39:                                      //loc_15D39:
    if (!(memory(_ss, _bp + var_1) & 0x01))     //jz short loc_15D9D
        goto loc_15D9D;
    if ((short)memory16(_ss, _bp + var_14) <= (short)0x01ac)
        goto loc_15D9D;
    memory16(_ss, _bp + var_14) -= 1;           //dec [bp+var_14]
    if (memory16(_ss, _bp + var_14) != 0x01d0)  //jnz short loc_15D55
        goto loc_15D55;
    memory16(_ss, _bp + var_14) = 0x01a3;       //mov [bp+var_14], 1A3h
loc_15D55:                                      //loc_15D55:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_14);            //mov al, byte ptr [bp+var_14]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    if (memory16(_ss, _bp + var_14) != 0x002e)  //jnz short loc_15D79
        goto loc_15D79;
    memory16(_ss, _bp + var_14) = 0x005b;       //mov [bp+var_14], 5Bh
loc_15D79:                                      //loc_15D79:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_14));         //push [bp+var_14]
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15F2F;                             //jmp loc_15F2F
loc_15D9D:                                      //loc_15D9D:
    if (!(memory(_ss, _bp + var_1) & 0x02))     //jz short loc_15E01
        goto loc_15E01;
    if ((short)memory16(_ss, _bp + var_14) >= (short)0x01d0)
        goto loc_15E01;
    memory16(_ss, _bp + var_14) += 1;           //inc [bp+var_14]
    if (memory16(_ss, _bp + var_14) != 0x01d0)  //jnz short loc_15DB9
        goto loc_15DB9;
    memory16(_ss, _bp + var_14) = 0x01a3;       //mov [bp+var_14], 1A3h
loc_15DB9:                                      //loc_15DB9:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_14);            //mov al, byte ptr [bp+var_14]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    if (memory16(_ss, _bp + var_14) != 0x002e)  //jnz short loc_15DDD
        goto loc_15DDD;
    memory16(_ss, _bp + var_14) = 0x005b;       //mov [bp+var_14], 5Bh
loc_15DDD:                                      //loc_15DDD:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_14));         //push [bp+var_14]
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15F2F;                             //jmp loc_15F2F
loc_15E01:                                      //loc_15E01:
    if (!(memory(_ss, _bp + var_1) & 0x04))     //jz short loc_15E84
        goto loc_15E84;
    if (memory(_ss, _bp + var_3) == 0x00)       //jz short loc_15E84
        goto loc_15E84;
    if (memory16(_ss, _bp + var_14) != 0x01d0)  //jnz short loc_15E19
        goto loc_15E19;
    memory16(_ss, _bp + var_14) = 0x01a3;       //mov [bp+var_14], 1A3h
loc_15E19:                                      //loc_15E19:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_14);            //mov al, byte ptr [bp+var_14]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ss, _bp + var_3) -= 1;              //dec [bp+var_3]
    _FIXME_ -= 1;                               //dec [bp+arg_2]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _bx = memory16(_ss, _bp + var_E);           //mov bx, word ptr [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    if (memory16(_ss, _bp + var_14) != 0x002e)  //jnz short loc_15E55
        goto loc_15E55;
    memory16(_ss, _bp + var_14) = 0x005b;       //mov [bp+var_14], 5Bh
loc_15E55:                                      //loc_15E55:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_14));         //push [bp+var_14]
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15F2F;                             //jmp loc_15F2F
loc_15E84:                                      //loc_15E84:
    if (!(memory(_ss, _bp + var_1) & 0x08))     //jz short loc_15F06
        goto loc_15F06;
    if (memory(_ss, _bp + var_3) >= 0x05)       //jnb short loc_15F06
        goto loc_15F06;
    if (memory16(_ss, _bp + var_14) != 0x01d0)  //jnz short loc_15E9C
        goto loc_15E9C;
    memory16(_ss, _bp + var_14) = 0x01a3;       //mov [bp+var_14], 1A3h
loc_15E9C:                                      //loc_15E9C:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0xfe8b;                              //add ax, 0FE8Bh
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_ss, _bp + var_14);            //mov al, byte ptr [bp+var_14]
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ss, _bp + var_3) += 1;              //inc [bp+var_3]
    _FIXME_ += 1;                               //inc [bp+arg_2]
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _bx = memory16(_ss, _bp + var_E);           //mov bx, word ptr [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    if (memory16(_ss, _bp + var_14) != 0x002e)  //jnz short loc_15ED8
        goto loc_15ED8;
    memory16(_ss, _bp + var_14) = 0x005b;       //mov [bp+var_14], 5Bh
loc_15ED8:                                      //loc_15ED8:
    _ax = memory16(_ss, _bp + var_14);          //mov ax, [bp+var_14]
    _ax += 0x0175;                              //add ax, 175h
    memory16(_ss, _bp + var_14) = _ax;          //mov [bp+var_14], ax
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    _push(memory16(_ss, _bp + var_14));         //push [bp+var_14]
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _cl = 0x04;                                 //mov cl, 4
    _al <<= _cl;                                //shl al, cl
    _push(_ax);                                 //push ax
    sub_15FDB();                                //call sub_15FDB
    _sp += 0x0008;                              //add sp, 8
    goto loc_15F2F;                             //jmp short loc_15F2F
loc_15F06:                                      //loc_15F06:
    memory(_ss, _bp + var_6) += 1;              //inc [bp+var_6]
    if (!(memory(_ss, _bp + var_6) & 0x08))     //jz short loc_15F1C
        goto loc_15F1C;
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    goto loc_15F24;                             //jmp short loc_15F24
loc_15F1C:                                      //loc_15F1C:
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
loc_15F24:                                      //loc_15F24:
    _sp += 0x0004;                              //add sp, 4
    _al = 0x01;                                 //mov al, 1
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_15F2F:                                      //loc_15F2F:
    _al = 0x00;                                 //mov al, 0
    _push(_ax);                                 //push ax
    sub_175A2();                                //call sub_175A2
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _ah = 0x00;                                 //mov ah, 0
    _ax &= 0x0010;                              //and ax, 10h
    if (_ax == 0x0010)                          //jz short loc_15F47
        goto loc_15F47;
    goto loc_15D39;                             //jmp loc_15D39
loc_15F47:                                      //loc_15F47:
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_4) = _al;             //mov [bp+var_4], al
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    goto loc_15FC5;                             //jmp short loc_15FC5
loc_15F5C:                                      //loc_15F5C:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 4958);            //mov ax, [bx+135Eh]
    _dx = memory16(_ds, _bx + 4956);            //mov dx, [bx+135Ch]
    memory16(_ss, _bp + var_12) = _dx;          //mov word ptr [bp+var_12], dx
    memory16(_ss, _bp + var_12 + 2) = _ax;      //mov word ptr [bp+var_12+2], ax
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_5) = _al;             //mov [bp+var_5], al
    memory(_ss, _bp + var_3) = _al;             //mov [bp+var_3], al
    goto loc_15FA2;                             //jmp short loc_15FA2
loc_15F7F:                                      //loc_15F7F:
    _al = memory(_ss, _bp + var_3);             //mov al, [bp+var_3]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + var_E);                //les bx, [bp+var_E]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _dl = memory(_ss, _bp + var_3);             //mov dl, [bp+var_3]
    _dh = 0x00;                                 //mov dh, 0
    _les(_bx, _ss, _bp + var_12);               //les bx, [bp+var_12]
    _bx += _dx;                                 //add bx, dx
    if (_al == memory(_es, _bx))                //jz short loc_15F9F
        goto loc_15F9F;
    memory(_ss, _bp + var_5) = 0x01;            //mov [bp+var_5], 1
loc_15F9F:                                      //loc_15F9F:
    memory(_ss, _bp + var_3) += 1;              //inc [bp+var_3]
loc_15FA2:                                      //loc_15FA2:
    if (memory(_ss, _bp + var_3) >= 0x06)       //jnb short loc_15FB1
        goto loc_15FB1;
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_15F7F
        goto loc_15F7F;
loc_15FB1:                                      //loc_15FB1:
    _al = memory(_ss, _bp + var_5);             //mov al, [bp+var_5]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_15FC2
        goto loc_15FC2;
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _al += 0x02;                                //add al, 2
    memory(_ss, _bp + var_4) = _al;             //mov [bp+var_4], al
loc_15FC2:                                      //loc_15FC2:
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_15FC5:                                      //loc_15FC5:
    if (memory(_ss, _bp + var_2) >= 0x08)       //jnb short loc_15FD4
        goto loc_15FD4;
    _al = memory(_ss, _bp + var_4);             //mov al, [bp+var_4]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_15F5C
        goto loc_15F5C;
loc_15FD4:                                      //loc_15FD4:
    _al = memory(_ss, _bp + var_4);             //mov al, [bp+var_4]
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_15C87 endp_failed
    _STOP_("continues");                        //sub_15FDB proc near
}

void sub_15FDB()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = byte ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = byte ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_15FE7
        goto loc_15FE7;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_15FE7:                                      //loc_15FE7:
    _les(_bx, _ds, 0x574);                      //les bx, dword ptr word_20924
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _push(memory16(_ds, 0x576));                //push seg_20926
    _push(memory16(_ds, 0x574));                //push word_20924
    sub_17B4A();                                //call sub_17B4A
    _sp += 0x0004;                              //add sp, 4
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + arg_2);             //mov al, [bp+arg_2]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    if (_FIXME_ == 0x00)                        //jz short loc_16033
        goto loc_16033;
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
loc_16033:                                      //loc_16033:
    _al = 0x08;                                 //mov al, 8
    _push(_ax);                                 //push ax
    sub_105E7();                                //call sub_105E7
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void sub_1603D()
{
    const int var_C = -12;                      //var_C  = byte ptr -0Ch
    const int var_B = -11;                      //var_B  = byte ptr -0Bh
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = byte ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000c;                              //sub sp, 0Ch
    _push(_si);                                 //push si
    _si = memory16(_ss, _bp + arg_6);           //mov si, [bp+arg_6]
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16050
        goto loc_16050;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16050:                                      //loc_16050:
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    memory(_ss, _bp + var_C) = _al;             //mov [bp+var_C], al
    memory(_ss, _bp + var_B) = 0x00;            //mov [bp+var_B], 0
    goto loc_1606F;                             //jmp short loc_1606F
loc_1605C:                                      //loc_1605C:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    memory(_ss, _bp + var_B) += 1;              //inc [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = 0x20;                    //mov byte ptr ss:[bx], 20h
loc_1606F:                                      //loc_1606F:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    if (_al < memory(_ss, _bp + arg_4))         //jb short loc_1605C
        goto loc_1605C;
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = 0x00;                    //mov byte ptr ss:[bx], 0
    goto loc_160CE;                             //jmp short loc_160CE
loc_16089:                                      //loc_16089:
    _al = memory(_ss, _bp + arg_0);             //mov al, byte ptr [bp+arg_0]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = 0x000a;                               //mov dx, 0Ah
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_FIXME_);                             //push [bp+arg_2]
    _push(_FIXME_);                             //push [bp+arg_0]
    _STOP_("call near ptr N_LUDIV@");           //call near ptr N_LUDIV@
    memory16(_ss, _bp + arg_0) = _ax;           //mov [bp+arg_0], ax
    _bx = _ax;                                  //mov bx, ax
    memory16(_ss, _bp + arg_2) = _dx;           //mov [bp+arg_2], dx
    _cx = _dx;                                  //mov cx, dx
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = 0x000a;                               //mov ax, 0Ah
    _STOP_("call N_LXMUL@");                    //call N_LXMUL@
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dl -= _al;                                 //sub dl, al
    memory(_ss, _bp + var_1) = _dl;             //mov [bp+var_1], dl
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _dl = memory(_ss, _bp + var_1);             //mov dl, [bp+var_1]
    _dl += 0x30;                                //add dl, 30h
    _bx = _ax;                                  //mov bx, ax
    memory(_ss, _bx) = _dl;                     //mov ss:[bx], dl
loc_160CE:                                      //loc_160CE:
    _al = memory(_ss, _bp + arg_4);             //mov al, [bp+arg_4]
    _FIXME_ -= 1;                               //dec [bp+arg_4]
    _FIXME_;                                    //or al, al
    _al |= _al;
    if (!_flags.carry && (_al != 0))            //ja short loc_16089
        goto loc_16089;
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    _ax = memory16(_ss, _bp + arg_8);           //mov ax, [bp+arg_8]
    memory16(_es, _bx + 2) = _ax;               //mov es:[bx+2], ax
    memory(_ss, _bp + var_B) = 0x00;            //mov [bp+var_B], 0
    goto loc_16123;                             //jmp short loc_16123
loc_160E9:                                      //loc_160E9:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + var_A);                //lea dx, [bp+var_A]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ss, _bx);                     //mov al, ss:[bx]
    _ah = 0x00;                                 //mov ah, 0
    _ax += 0x017c;                              //add ax, 17Ch
    _les(_bx, _ds, 0x8884);                     //les bx, dword_28C34
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    _ah = 0x00;                                 //mov ah, 0
    _cl = 0x04;                                 //mov cl, 4
    _ax <<= _cl;                                //shl ax, cl
    _dx = _si;                                  //mov dx, si
    _dx += _ax;                                 //add dx, ax
    memory16(_es, _bx) = _dx;                   //mov es:[bx], dx
    _push(_ds);                                 //push ds
    _ax = 0x792e;                               //mov ax, 792Eh
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_B) += 1;              //inc [bp+var_B]
loc_16123:                                      //loc_16123:
    _al = memory(_ss, _bp + var_B);             //mov al, [bp+var_B]
    if (_al < memory(_ss, _bp + var_C))         //jb short loc_160E9
        goto loc_160E9;
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_1603D endp_failed
    _STOP_("continues");                        //sub_16130 proc near
}

void sub_16130()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1613E
        goto loc_1613E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1613E:                                      //loc_1613E:
    _les(_bx, _ds, 0xA0D0);                     //les bx, dword_2A480
    memory16(_es, _bx + 4) = 0x01aa;            //mov word ptr es:[bx+4], 1AAh
    memory16(_es, _bx + 2) = 0x0000;            //mov word ptr es:[bx+2], 0
    _al = memory(_ds, 0x791A);                  //mov al, byte_27CCA
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    goto loc_16179;                             //jmp short loc_16179
loc_16156:                                      //loc_16156:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x0050;                              //add ax, 50h
    _les(_bx, _ds, 0xA0D0);                     //les bx, dword_2A480
    memory16(_es, _bx) = _ax;                   //mov es:[bx], ax
    _push(_ds);                                 //push ds
    _ax = 0x7986;                               //mov ax, 7986h
    _push(_ax);                                 //push ax
    sub_1942A();                                //call sub_1942A
    _sp += 0x0004;                              //add sp, 4
    memory(_ss, _bp + var_1) -= 1;              //dec [bp+var_1]
loc_16179:                                      //loc_16179:
    if (memory(_ss, _bp + var_1) != 0x00)       //jnz short loc_16156
        goto loc_16156;
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_16183()
{
    const int var_2 = -2;                       //var_2  = byte ptr -2
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16191
        goto loc_16191;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16191:                                      //loc_16191:
    memory16(_ds, 0x9BA6) = _FIXME_;            //mov word ptr dword_29F56, offset unk_20C36
    memory16(_ds, 0x9BA8) = _ds;                //mov word ptr dword_29F56+2, ds
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    memory(_es, _bx) = 0xff;                    //mov byte ptr es:[bx], 0FFh
    memory(_ds, 0xA1A6) = 0x00;                 //mov byte_2A556, 0
    _dl = 0x00;                                 //mov dl, 0
    goto loc_161CB;                             //jmp short loc_161CB
loc_161AC:                                      //loc_161AC:
    _al = _dl;                                  //mov al, dl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    _cl = _al;                                  //mov cl, al
    if (_cl < 0x0e)                             //jb short loc_161C9
        goto loc_161C9;
    if (_cl >= 0x12)                            //jnb short loc_161C9
        goto loc_161C9;
    memory(_ds, 0xA1A6) = _al;                  //mov byte_2A556, al
loc_161C9:                                      //loc_161C9:
    _dl += 1;                                   //inc dl
loc_161CB:                                      //loc_161CB:
    if (_dl >= 0x30)                            //jnb short loc_161D9
        goto loc_161D9;
    _al = memory(_ds, 0xA1A6);                  //mov al, byte_2A556
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_161AC
        goto loc_161AC;
loc_161D9:                                      //loc_161D9:
    if (memory(_ds, 0xA1A6) != 0x00)            //jnz short loc_161E3
        goto loc_161E3;
    _STOP_("goto loc_16298");                   //jmp loc_16298
loc_161E3:                                      //loc_161E3:
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _dl = _al;                                  //mov dl, al
    goto loc_16212;                             //jmp short loc_16212
loc_161EC:                                      //loc_161EC:
    _al = _dl;                                  //mov al, dl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    _cl = _al;                                  //mov cl, al
    if (_cl < 0x0e)                             //jb short loc_16210
        goto loc_16210;
    if (_cl >= 0x12)                            //jnb short loc_16210
        goto loc_16210;
    if (_al == memory(_ds, 0xA1A6))             //jz short loc_16210
        goto loc_16210;
    memory(_ss, _bp + var_1) = 0x01;            //mov [bp+var_1], 1
loc_16210:                                      //loc_16210:
    _dl += 1;                                   //inc dl
loc_16212:                                      //loc_16212:
    if (_dl >= 0x30)                            //jnb short loc_16220
        goto loc_16220;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_161EC
        goto loc_161EC;
loc_16220:                                      //loc_16220:
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_16298
        _STOP_("goto loc_16298");
    _al = 0x00;                                 //mov al, 0
    memory(_ss, _bp + var_2) = _al;             //mov [bp+var_2], al
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _dl = 0x00;                                 //mov dl, 0
    goto loc_1625B;                             //jmp short loc_1625B
loc_16235:                                      //loc_16235:
    _al = _dl;                                  //mov al, dl
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 48) != 0x05)          //jnz short loc_16259
        goto loc_16259;
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    _bx += _ax;                                 //add bx, ax
    _al = _dl;                                  //mov al, dl
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    memory(_ss, _bp + var_2) += 1;              //inc [bp+var_2]
loc_16259:                                      //loc_16259:
    _dl += 1;                                   //inc dl
loc_1625B:                                      //loc_1625B:
    if (_dl >= 0x30)                            //jnb short loc_16269
        goto loc_16269;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_16235
        goto loc_16235;
loc_16269:                                      //loc_16269:
    _al = memory(_ss, _bp + var_2);             //mov al, [bp+var_2]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    _STOP_("sp-trace-fail");                    //sub_16183 endp_failed
    _STOP_("continues");                        //sub_16272 proc near
}

void sub_16272()
{
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx) == 0xff)               //jz short loc_16298
        goto loc_16298;
    _al = memory16(_ss, _bp + -2);              //mov al, [bp-2]
    _ah = 0x00;                                 //mov ah, 0
    _bx = memory16(_ds, 0x9BA6);                //mov bx, word ptr dword_29F56
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0xff;                    //mov byte ptr es:[bx], 0FFh
    memory16(_ds, 0x9BA6) = _FIXME_;            //mov word ptr dword_29F56, offset unk_20C36
    memory16(_ds, 0x9BA8) = _ds;                //mov word ptr dword_29F56+2, ds
    memory(_ds, 0x79B7) = 0x00;                 //mov byte_27D67, 0
loc_16298:                                      //loc_16298:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_16272 endp_failed
    _STOP_("continues");                        //sub_1629C proc near
}

void sub_1629C()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_162A8
        goto loc_162A8;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_162A8:                                      //loc_162A8:
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    if (memory(_es, _bx) != 0xff)               //jnz short loc_162C6
        goto loc_162C6;
    memory16(_ds, 0x9BA6) = _FIXME_;            //mov word ptr dword_29F56, offset unk_20C36
    memory16(_ds, 0x9BA8) = _ds;                //mov word ptr dword_29F56+2, ds
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    memory(_es, _bx) = 0xff;                    //mov byte ptr es:[bx], 0FFh
    goto loc_16303;                             //jmp short loc_16303
loc_162C6:                                      //loc_162C6:
    _al = memory(_ds, 0x79B7);                  //mov al, byte_27D67
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_162FF
        goto loc_162FF;
    memory(_ds, 0x79B7) = 0x0a;                 //mov byte_27D67, 0Ah
    _les(_bx, _ds, 0x9BA6);                     //les bx, dword_29F56
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _al = 0x18;                                 //mov al, 18h
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_162F1
        goto loc_162F1;
    _al = 0x11;                                 //mov al, 11h
    goto loc_162F3;                             //jmp short loc_162F3
loc_162F1:                                      //loc_162F1:
    _al = 0x0e;                                 //mov al, 0Eh
loc_162F3:                                      //loc_162F3:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory16(_ds, 0x9BA6) += 1;                 //inc word ptr dword_29F56
    goto loc_16303;                             //jmp short loc_16303
loc_162FF:                                      //loc_162FF:
    memory(_ds, 0x79B7) -= 1;                   //dec byte_27D67
loc_16303:                                      //loc_16303:
    _bp = _pop();                               //pop bp
}

void loc_16311()
{
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_1631C
        goto loc_1631C;
    _al = 0x03;                                 //mov al, 3
    goto loc_1631E;                             //jmp short loc_1631E
loc_1631C:                                      //loc_1631C:
    _al = 0x0d;                                 //mov al, 0Dh
loc_1631E:                                      //loc_1631E:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16332
        goto loc_16332;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16332:                                      //loc_16332:
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_16370
        goto loc_16370;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 47) != 0x0c)          //jnz short loc_16370
        goto loc_16370;
    memory(_ds, 0x792A) = 0x00;                 //mov byte_27CDA, 0
    memory(_ds, 0xA0CE) = 0x01;                 //mov byte_2A47E, 1
    _al = 0x2e;                                 //mov al, 2Eh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_16368
        goto loc_16368;
    _al = 0x03;                                 //mov al, 3
    goto loc_1636A;                             //jmp short loc_1636A
loc_16368:                                      //loc_16368:
    _al = 0x0d;                                 //mov al, 0Dh
loc_1636A:                                      //loc_1636A:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16370:                                      //loc_16370:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1637E
        goto loc_1637E;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1637E:                                      //loc_1637E:
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_163BC
        goto loc_163BC;
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 48) != 0x0c)          //jnz short loc_163BC
        goto loc_163BC;
    memory(_ds, 0x792A) = 0x00;                 //mov byte_27CDA, 0
    memory(_ds, 0xA0CE) = 0x01;                 //mov byte_2A47E, 1
    _al = 0x2e;                                 //mov al, 2Eh
    _push(_ax);                                 //push ax
    sub_14263();                                //call sub_14263
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_163B4
        goto loc_163B4;
    _al = 0x03;                                 //mov al, 3
    goto loc_163B6;                             //jmp short loc_163B6
loc_163B4:                                      //loc_163B4:
    _al = 0x0d;                                 //mov al, 0Dh
loc_163B6:                                      //loc_163B6:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_163BC:                                      //loc_163BC:
    _bp = _pop();                               //pop bp
}

void sub_163BE()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_163CC
        goto loc_163CC;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_163CC:                                      //loc_163CC:
    if (memory(_ds, 0x8552) == 0x03)            //jz short loc_16408
        goto loc_16408;
    if (memory(_ds, 0x8552) == 0x0f)            //jz short loc_16408
        goto loc_16408;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_163EE
        goto loc_163EE;
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9790);              //mov al, [bx+263Eh]
    goto loc_163F9;                             //jmp short loc_163F9
loc_163EE:                                      //loc_163EE:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9742);              //mov al, [bx+260Eh]
loc_163F9:                                      //loc_163F9:
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_16408
        goto loc_16408;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16408:                                      //loc_16408:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void loc_1641A()
{
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_1642E
        goto loc_1642E;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10126);             //mov al, [bx+278Eh]
    goto loc_16439;                             //jmp short loc_16439
loc_1642E:                                      //loc_1642E:
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10094);             //mov al, [bx+276Eh]
loc_16439:                                      //loc_16439:
    memory16(_ss, _bp + -1) = _al;              //mov [bp-1], al
    if (memory(_ss, _bp + -1) == 0x00)          //jz short loc_16448
        goto loc_16448;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16448:                                      //loc_16448:
    if (memory(_ds, 0x8551) < 0x0e)             //jb short loc_16459
        goto loc_16459;
    if (memory(_ds, 0x8551) >= 0x12)            //jnb short loc_16459
        goto loc_16459;
    sub_16183();                                //call sub_16183
loc_16459:                                      //loc_16459:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16469
        goto loc_16469;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16469:                                      //loc_16469:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_16474
        goto loc_16474;
    _al = 0x0b;                                 //mov al, 0Bh
    goto loc_16476;                             //jmp short loc_16476
loc_16474:                                      //loc_16474:
    _al = 0x2c;                                 //mov al, 2Ch
loc_16476:                                      //loc_16476:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1648C
        goto loc_1648C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1648C:                                      //loc_1648C:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_164A0
        goto loc_164A0;
    _al = memory(_ds, 0x79B9);                  //mov al, byte_27D69
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9982);              //mov al, [bx+26FEh]
    goto loc_164AB;                             //jmp short loc_164AB
loc_164A0:                                      //loc_164A0:
    _al = memory(_ds, 0x79B9);                  //mov al, byte_27D69
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9934);              //mov al, [bx+26CEh]
loc_164AB:                                      //loc_164AB:
    memory16(_ss, _bp + -1) = _al;              //mov [bp-1], al
    if (memory(_ss, _bp + -1) == 0x00)          //jz short loc_164BA
        goto loc_164BA;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_164BA:                                      //loc_164BA:
    sub_1654E();                                //call sub_1654E
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_164CD
        goto loc_164CD;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_164CD:                                      //loc_164CD:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_164D8
        goto loc_164D8;
    _al = 0x0e;                                 //mov al, 0Eh
    goto loc_164DA;                             //jmp short loc_164DA
loc_164D8:                                      //loc_164D8:
    _al = 0x21;                                 //mov al, 21h
loc_164DA:                                      //loc_164DA:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_164EE
        goto loc_164EE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_164EE:                                      //loc_164EE:
    sub_16611();                                //call sub_16611
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0xf8;                                //add al, 0F8h
    memory(_ds, 0x856E) = _al;                  //mov byte_2891E, al
    memory(_ds, 0x855C) -= 1;                   //dec byte_2890C
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1650B
        goto loc_1650B;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1650B:                                      //loc_1650B:
    sub_16611();                                //call sub_16611
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _al += 0x08;                                //add al, 8
    memory(_ds, 0x856E) = _al;                  //mov byte_2891E, al
    memory(_ds, 0x855C) += 1;                   //inc byte_2890C
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16528
        goto loc_16528;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16528:                                      //loc_16528:
    sub_16611();                                //call sub_16611
    memory(_ds, 0x856E) -= 1;                   //dec byte_2891E
    memory(_ds, 0x855E) -= 1;                   //dec byte_2890E
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16541
        goto loc_16541;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16541:                                      //loc_16541:
    sub_16611();                                //call sub_16611
    memory(_ds, 0x856E) += 1;                   //inc byte_2891E
    memory(_ds, 0x855E) += 1;                   //inc byte_2890E
    _bp = _pop();                               //pop bp
}

void sub_1654E()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1655A
        goto loc_1655A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1655A:                                      //loc_1655A:
    _al = memory(_ds, 0x7923);                  //mov al, byte_27CD3
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_16585
        goto loc_16585;
    if (memory(_ds, 0x8244) & 0x10)             //jnz short loc_16571
        goto loc_16571;
    if (!(memory(_ds, 0x8244) & 0x01))          //jz short loc_16585
        goto loc_16585;
loc_16571:                                      //loc_16571:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    memory(_ds, 0x7922) = _al;                  //mov byte_27CD2, al
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 15578);             //mov al, [bx+3CDAh]
    _push(_ax);                                 //push ax
    sub_1695E();                                //call sub_1695E
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16585:                                      //loc_16585:
    _bp = _pop();                               //pop bp
}

void sub_16587()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16593
        goto loc_16593;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16593:                                      //loc_16593:
    _al = memory(_ds, 0xA1A7);                  //mov al, byte_2A557
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_165D0
        goto loc_165D0;
    if (memory(_ds, 0x7924) != 0x02)            //jnz short loc_165D0
        goto loc_165D0;
    if (!(memory(_ds, 0x8244) & 0x02))          //jz short loc_165D0
        goto loc_165D0;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_165B5
        goto loc_165B5;
    _al = 0x04;                                 //mov al, 4
    goto loc_165B7;                             //jmp short loc_165B7
loc_165B5:                                      //loc_165B5:
    _al = 0x09;                                 //mov al, 9
loc_165B7:                                      //loc_165B7:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    memory(_ds, 0x79B4) = 0x34;                 //mov byte_27D64, 34h
    _al = 0x34;                                 //mov al, 34h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_165D0:                                      //loc_165D0:
    _bp = _pop();                               //pop bp
}

void loc_165DE()
{
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_165F1
        goto loc_165F1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_165F1:                                      //loc_165F1:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _al &= 0x10;                                //and al, 10h
    memory(_ds, 0x8244) = _al;                  //mov byte_285F4, al
    _bp = _pop();                               //pop bp
}

void sub_165FB()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16607
        goto loc_16607;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16607:                                      //loc_16607:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _al &= 0x1d;                                //and al, 1Dh
    memory(_ds, 0x8244) = _al;                  //mov byte_285F4, al
    _bp = _pop();                               //pop bp
}

void sub_16611()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1661D
        goto loc_1661D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1661D:                                      //loc_1661D:
    _al = memory(_ds, 0x8244);                  //mov al, byte_285F4
    _al &= 0x0f;                                //and al, 0Fh
    memory(_ds, 0x8244) = _al;                  //mov byte_285F4, al
    _bp = _pop();                               //pop bp
}

void loc_16633()
{
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _push(_ax);                                 //push ax
    sub_16BF4();                                //call sub_16BF4
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x79B8) == 0x00)            //jz short loc_16646
        goto loc_16646;
    sub_16C14();                                //call sub_16C14
loc_16646:                                      //loc_16646:
    _bp = _pop();                               //pop bp
}

void sub_16648()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16656
        goto loc_16656;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16656:                                      //loc_16656:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_1666A
        goto loc_1666A;
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9694);              //mov al, [bx+25DEh]
    goto loc_16675;                             //jmp short loc_16675
loc_1666A:                                      //loc_1666A:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 9646);              //mov al, [bx+25AEh]
loc_16675:                                      //loc_16675:
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_16684
        goto loc_16684;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16684:                                      //loc_16684:
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 15626);             //mov al, [bx+3D0Ah]
    _push(_ax);                                 //push ax
    sub_16987();                                //call sub_16987
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void loc_166A5()
{
    if (memory(_ds, 0x8552) == 0x03)            //jz short loc_166BE
        goto loc_166BE;
    if (memory(_ds, 0x8552) == 0x0f)            //jz short loc_166BE
        goto loc_166BE;
    _push(_ds);                                 //push ds
    _ax = 0x3c7a;                               //mov ax, 3C7Ah
    _push(_ax);                                 //push ax
    sub_16D6A();                                //call sub_16D6A
    _sp += 0x0004;                              //add sp, 4
loc_166BE:                                      //loc_166BE:
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_166D6
        goto loc_166D6;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13758);             //mov al, [bx+35BEh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_166D6:                                      //loc_166D6:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_166E4
        goto loc_166E4;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_166E4:                                      //loc_166E4:
    if (memory(_ds, 0x8552) == 0x03)            //jz short loc_166FD
        goto loc_166FD;
    if (memory(_ds, 0x8552) == 0x0f)            //jz short loc_166FD
        goto loc_166FD;
    _push(_ds);                                 //push ds
    _ax = 0x3caa;                               //mov ax, 3CAAh
    _push(_ax);                                 //push ax
    sub_16D6A();                                //call sub_16D6A
    _sp += 0x0004;                              //add sp, 4
loc_166FD:                                      //loc_166FD:
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_16715
        goto loc_16715;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13790);             //mov al, [bx+35DEh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16715:                                      //loc_16715:
    _bp = _pop();                               //pop bp
}

void sub_16717()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16723
        goto loc_16723;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16723:                                      //loc_16723:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    sub_16D26();                                //call sub_16D26
    if (memory(_ds, 0x856C) != 0x5b)            //jnz short loc_16738
        goto loc_16738;
    memory(_ds, 0xA1B1) = 0x00;                 //mov byte_2A561, 0
loc_16738:                                      //loc_16738:
    _bp = _pop();                               //pop bp
}

void loc_16746()
{
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16754
        goto loc_16754;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16754:                                      //loc_16754:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_1675F
        goto loc_1675F;
    _al = 0x08;                                 //mov al, 8
    goto loc_16761;                             //jmp short loc_16761
loc_1675F:                                      //loc_1675F:
    _al = 0x2f;                                 //mov al, 2Fh
loc_16761:                                      //loc_16761:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x18;                                 //mov al, 18h
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_16787
        goto loc_16787;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13822);             //mov al, [bx+35FEh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16787:                                      //loc_16787:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16795
        goto loc_16795;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16795:                                      //loc_16795:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_167A0
        goto loc_167A0;
    _al = 0x08;                                 //mov al, 8
    goto loc_167A2;                             //jmp short loc_167A2
loc_167A0:                                      //loc_167A0:
    _al = 0x2f;                                 //mov al, 2Fh
loc_167A2:                                      //loc_167A2:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = 0x19;                                 //mov al, 19h
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_167C8
        goto loc_167C8;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13854);             //mov al, [bx+361Eh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_167C8:                                      //loc_167C8:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_167D6
        goto loc_167D6;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_167D6:                                      //loc_167D6:
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_167E0
        goto loc_167E0;
    sub_167E2();                                //call sub_167E2
loc_167E0:                                      //loc_167E0:
    _bp = _pop();                               //pop bp
}

void sub_167E2()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_167EE
        goto loc_167EE;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_167EE:                                      //loc_167EE:
    _push(_ds);                                 //push ds
    _ax = 0x363e;                               //mov ax, 363Eh
    _push(_ax);                                 //push ax
    sub_1686A();                                //call sub_1686A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void loc_16807()
{
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_16811
        goto loc_16811;
    sub_16813();                                //call sub_16813
loc_16811:                                      //loc_16811:
    _bp = _pop();                               //pop bp
}

void sub_16813()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1681F
        goto loc_1681F;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1681F:                                      //loc_1681F:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ds);                                 //push ds
    _ax = 0x365e;                               //mov ax, 365Eh
    _push(_ax);                                 //push ax
    sub_1686A();                                //call sub_1686A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void loc_1683E()
{
    _push(_ds);                                 //push ds
    _ax = 0x363e;                               //mov ax, 363Eh
    _push(_ax);                                 //push ax
    sub_1686A();                                //call sub_1686A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16857
        goto loc_16857;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16857:                                      //loc_16857:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x8570) = _al;                  //mov byte_28920, al
    _push(_ds);                                 //push ds
    _ax = 0x365e;                               //mov ax, 365Eh
    _push(_ax);                                 //push ax
    sub_1686A();                                //call sub_1686A
    _sp += 0x0004;                              //add sp, 4
    _bp = _pop();                               //pop bp
}

void sub_1686A()
{
    const int arg_0 = 4;                        //arg_0  = dword ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16876
        goto loc_16876;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16876:                                      //loc_16876:
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + arg_0);                //les bx, [bp+arg_0]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _bp = _pop();                               //pop bp
}

void loc_1689C()
{
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_168B9
        goto loc_168B9;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13822);             //mov al, [bx+35FEh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
loc_168B9:                                      //loc_168B9:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_168C7
        goto loc_168C7;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_168C7:                                      //loc_168C7:
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_168E4
        goto loc_168E4;
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13854);             //mov al, [bx+361Eh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
loc_168E4:                                      //loc_168E4:
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_168F2
        goto loc_168F2;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_168F2:                                      //loc_168F2:
    if (memory(_ds, 0x855E) == 0x00)            //jz short loc_168FC
        goto loc_168FC;
    sub_168FE();                                //call sub_168FE
loc_168FC:                                      //loc_168FC:
    _bp = _pop();                               //pop bp
}

void sub_168FE()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1690A
        goto loc_1690A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1690A:                                      //loc_1690A:
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13950);             //mov al, [bx+367Eh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _bp = _pop();                               //pop bp
}

void loc_1692E()
{
    if (memory(_ds, 0x855E) == 0x07)            //jz short loc_16938
        goto loc_16938;
    sub_1693A();                                //call sub_1693A
loc_16938:                                      //loc_16938:
    _bp = _pop();                               //pop bp
}

void sub_1693A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16946
        goto loc_16946;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16946:                                      //loc_16946:
    _al = memory(_ds, 0x8551);                  //mov al, byte_28901
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 13982);             //mov al, [bx+369Eh]
    _push(_ax);                                 //push ax
    sub_16A89();                                //call sub_16A89
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x8244) = 0x00;                 //mov byte_285F4, 0
    _bp = _pop();                               //pop bp
}

void sub_1695E()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1696A
        goto loc_1696A;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1696A:                                      //loc_1696A:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    if (_FIXME_ == 0x00)                        //jz short loc_16985
        goto loc_16985;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    memory(_ds, 0xA1A7) = _al;                  //mov byte_2A557, al
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16985:                                      //loc_16985:
    _bp = _pop();                               //pop bp
}

void sub_16987()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16993
        goto loc_16993;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16993:                                      //loc_16993:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    if (_FIXME_ == 0x00)                        //jz short loc_169A8
        goto loc_169A8;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_169A8:                                      //loc_169A8:
    _bp = _pop();                               //pop bp
}

void sub_169AA()
{
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = dword ptr -4
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0008;                              //sub sp, 8
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_169BA
        goto loc_169BA;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_169BA:                                      //loc_169BA:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 12000);           //mov ax, [bx+2EE0h]
    _dx = memory16(_ds, _bx + 11998);           //mov dx, [bx+2EDEh]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    _cl = 0x00;                                 //mov cl, 0
loc_169D5:                                      //loc_169D5:
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19570);           //mov ax, [bx+4C72h]
    _dx = memory16(_ds, _bx + 19568);           //mov dx, [bx+4C70h]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + arg_0) = _al;             //mov [bp+arg_0], al
    _cl += 1;                                   //inc cl
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_169D5
        goto loc_169D5;
    if (_FIXME_ != 0xff)                        //jnz short loc_16A40
        goto loc_16A40;
    _cl = 0x00;                                 //mov cl, 0
loc_16A06:                                      //loc_16A06:
    _al = _cl;                                  //mov al, cl
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19570);           //mov ax, [bx+4C72h]
    _dx = memory16(_ds, _bx + 19568);           //mov dx, [bx+4C70h]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + arg_0) = _al;             //mov [bp+arg_0], al
    _cl += 1;                                   //inc cl
    if (_FIXME_ == 0x00)                        //jz short loc_16A35
        goto loc_16A35;
    if (_FIXME_ != 0xff)                        //jnz short loc_16A06
        goto loc_16A06;
loc_16A35:                                      //loc_16A35:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_16A84
        goto loc_16A84;
    goto loc_16A4D;                             //jmp short loc_16A4D
loc_16A40:                                      //loc_16A40:
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    if (_al != memory(_ds, 0x856F))             //jnz short loc_169D5
        goto loc_169D5;
loc_16A4D:                                      //loc_16A4D:
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_ds, 0x856F);                  //mov al, byte_2891F
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _push(_es);                                 //push es
    _les(_si, _ss, _bp + var_4);                //les si, [bp+var_4]
    _al = memory(_es, _si);                     //mov al, es:[si]
    _es = _pop();                               //pop es
    memory(_es, _bx) = _al;                     //mov es:[bx], al
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory(_es, _bx) = 0x01;                    //mov byte ptr es:[bx], 1
loc_16A84:                                      //loc_16A84:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_16A89()
{
    const int var_A = -10;                      //var_A  = byte ptr -0Ah
    const int var_9 = -9;                       //var_9  = byte ptr -9
    const int var_8 = -8;                       //var_8  = dword ptr -8
    const int var_4 = -4;                       //var_4  = dword ptr -4
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000a;                              //sub sp, 0Ah
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16A99
        goto loc_16A99;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16A99:                                      //loc_16A99:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    memory(_ds, 0x8566) = _al;                  //mov byte_28916, al
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_16AA6
        goto loc_16AA6;
    goto loc_16BB0;                             //jmp loc_16BB0
loc_16AA6:                                      //loc_16AA6:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_16ABA
        goto loc_16ABA;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10062);             //mov al, [bx+274Eh]
    goto loc_16AC5;                             //jmp short loc_16AC5
loc_16ABA:                                      //loc_16ABA:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10030);             //mov al, [bx+272Eh]
loc_16AC5:                                      //loc_16AC5:
    memory(_ss, _bp + var_A) = _al;             //mov [bp+var_A], al
    if (memory(_ss, _bp + var_A) == 0x00)       //jz short loc_16AD4
        goto loc_16AD4;
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16AD4:                                      //loc_16AD4:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 12888);           //mov ax, [bx+3258h]
    _dx = memory16(_ds, _bx + 12886);           //mov dx, [bx+3256h]
    memory16(_ss, _bp + var_4) = _dx;           //mov word ptr [bp+var_4], dx
    memory16(_ss, _bp + var_4 + 2) = _ax;       //mov word ptr [bp+var_4+2], ax
    memory(_ss, _bp + var_9) = 0x00;            //mov [bp+var_9], 0
loc_16AF1:                                      //loc_16AF1:
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19646);           //mov ax, [bx+4CBEh]
    _dx = memory16(_ds, _bx + 19644);           //mov dx, [bx+4CBCh]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + arg_0) = _al;             //mov [bp+arg_0], al
    memory(_ss, _bp + var_9) += 1;              //inc [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_16AF1
        goto loc_16AF1;
    if (_FIXME_ != 0xff)                        //jnz short loc_16B68
        goto loc_16B68;
    memory(_ss, _bp + var_9) = 0x00;            //mov [bp+var_9], 0
loc_16B26:                                      //loc_16B26:
    _al = memory(_ss, _bp + var_9);             //mov al, [bp+var_9]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 19646);           //mov ax, [bx+4CBEh]
    _dx = memory16(_ds, _bx + 19644);           //mov dx, [bx+4CBCh]
    memory16(_ss, _bp + var_8) = _dx;           //mov word ptr [bp+var_8], dx
    memory16(_ss, _bp + var_8 + 2) = _ax;       //mov word ptr [bp+var_8+2], ax
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ss, _bp + arg_0) = _al;             //mov [bp+arg_0], al
    memory(_ss, _bp + var_9) += 1;              //inc [bp+var_9]
    if (_FIXME_ == 0x00)                        //jz short loc_16B57
        goto loc_16B57;
    if (_FIXME_ != 0xff)                        //jnz short loc_16B26
        goto loc_16B26;
loc_16B57:                                      //loc_16B57:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_16B78
        goto loc_16B78;
    if (_FIXME_ != 0xff)                        //jnz short loc_16BB0
        goto loc_16BB0;
    goto loc_16BB0;                             //jmp short loc_16BB0
loc_16B68:                                      //loc_16B68:
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_es, _bx + 1);                 //mov al, es:[bx+1]
    if (_al == memory(_ds, 0x8570))             //jz short loc_16B78
        goto loc_16B78;
    goto loc_16AF1;                             //jmp loc_16AF1
loc_16B78:                                      //loc_16B78:
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    _al = memory(_ds, 0x8570);                  //mov al, byte_28920
    memory(_es, _bx + 1) = _al;                 //mov es:[bx+1], al
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _push(_es);                                 //push es
    _les(_si, _ss, _bp + var_4);                //les si, [bp+var_4]
    _al = memory(_es, _si);                     //mov al, es:[si]
    _es = _pop();                               //pop es
    memory(_es, _bx + 48) = _al;                //mov es:[bx+30h], al
    _les(_bx, _ss, _bp + var_4);                //les bx, [bp+var_4]
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _dx = memory16(_es, _bx + 2);               //mov dx, es:[bx+2]
    _les(_bx, _ss, _bp + var_8);                //les bx, [bp+var_8]
    memory16(_es, _bx + 2) = _dx;               //mov es:[bx+2], dx
    memory16(_es, _bx + 4) = _ax;               //mov es:[bx+4], ax
    memory(_es, _bx) = 0x01;                    //mov byte ptr es:[bx], 1
loc_16BB0:                                      //loc_16BB0:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_16BB5()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16BC1
        goto loc_16BC1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16BC1:                                      //loc_16BC1:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    memory(_ds, 0x7921) = _al;                  //mov byte_27CD1, al
    _bp = _pop();                               //pop bp
}

void sub_16BD4()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16BE0
        goto loc_16BE0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16BE0:                                      //loc_16BE0:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 48);                //mov al, es:[bx+30h]
    memory(_ds, 0x8551) = _al;                  //mov byte_28901, al
    _bp = _pop();                               //pop bp
}

void sub_16BF4()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16C00
        goto loc_16C00;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16C00:                                      //loc_16C00:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 96);                //mov al, es:[bx+60h]
    memory(_ds, 0x79B8) = _al;                  //mov byte_27D68, al
    _bp = _pop();                               //pop bp
}

void sub_16C14()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16C20
        goto loc_16C20;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16C20:                                      //loc_16C20:
    memory(_ds, 0x2810) = 0x0f;                 //mov byte_22BC0, 0Fh
    sub_16C95();                                //call sub_16C95
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ds, 0xA0D8);                     //les bx, dword_2A488
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx + 96) = 0x00;               //mov byte ptr es:[bx+60h], 0
    if (memory(_ds, 0x79B8) == 0x01)            //jz short loc_16C93
        goto loc_16C93;
    if (memory(_ds, 0x79B8) == 0x23)            //jz short loc_16C93
        goto loc_16C93;
    memory(_ds, 0xA0CF) -= 1;                   //dec byte_2A47F
    _al = memory(_ds, 0xA0CF);                  //mov al, byte_2A47F
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_16C80
        goto loc_16C80;
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_16C5E
        goto loc_16C5E;
    _al = 0x0b;                                 //mov al, 0Bh
    goto loc_16C60;                             //jmp short loc_16C60
loc_16C5E:                                      //loc_16C5E:
    _al = 0x2c;                                 //mov al, 2Ch
loc_16C60:                                      //loc_16C60:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x8572);                  //mov al, byte_28922
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = 0x59;                                 //mov al, 59h
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0xA1B1) = 0x01;                 //mov byte_2A561, 1
    memory(_ds, 0x8550) = 0xf2;                 //mov byte_28900, 0F2h
    goto loc_16C93;                             //jmp short loc_16C93
loc_16C80:                                      //loc_16C80:
    if (memory16(_ds, 0x689C) == 0x0004)        //jz short loc_16C8B
        goto loc_16C8B;
    _al = 0x0e;                                 //mov al, 0Eh
    goto loc_16C8D;                             //jmp short loc_16C8D
loc_16C8B:                                      //loc_16C8B:
    _al = 0x21;                                 //mov al, 21h
loc_16C8D:                                      //loc_16C8D:
    _push(_ax);                                 //push ax
    sub_16E11();                                //call sub_16E11
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16C93:                                      //loc_16C93:
    _bp = _pop();                               //pop bp
}

void sub_16C95()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16CA1
        goto loc_16CA1;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16CA1:                                      //loc_16CA1:
    memory(_ds, 0xA1A8) = 0x02;                 //mov byte_2A558, 2
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 628);             //mov ax, [bx+274h]
    _cl = 0x04;                                 //mov cl, 4
    _sar(_ax, _cl);                             //sar ax, cl
    memory16(_ds, 0x9B9A) = _ax;                //mov word_29F4A, ax
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, _bx + 630);             //mov ax, [bx+276h]
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0x9BA2) = _ax;                //mov word_29F52, ax
    if (!(memory(_ds, 0x856E) & 0x01))          //jz short loc_16CE0
        goto loc_16CE0;
    _ax = 0x0001;                               //mov ax, 1
    goto loc_16CE3;                             //jmp short loc_16CE3
loc_16CE0:                                      //loc_16CE0:
    _ax = 0x0002;                               //mov ax, 2
loc_16CE3:                                      //loc_16CE3:
    _les(_bx, _ds, 0x8E4);                      //les bx, dword ptr word_20C94
    memory16(_es, _bx + 30) = _ax;              //mov es:[bx+1Eh], ax
    _flags.carry = (memory16(_ds, 0xA0D4) + 0x00fa) >= 0x10000;
    memory16(_ds, 0xA0D4) += 0x00fa;
    memory16(_ds, 0xA0D6) = memory16(_ds, 0xA0D6) + 0x0000 + _flags.carry;
    if (memory(_ds, 0x79B8) != 0x23)            //jnz short loc_16D03
        goto loc_16D03;
    memory(_ds, 0x791A) += 1;                   //inc byte_27CCA
    goto loc_16D24;                             //jmp short loc_16D24
loc_16D03:                                      //loc_16D03:
    if (memory(_ds, 0x79B8) != 0x2f)            //jnz short loc_16D12
        goto loc_16D12;
    memory16(_ds, 0xA0D4) += 0x2616;            //add word_2A484, 2616h
    goto loc_16D1F;                             //jmp short loc_16D1F
loc_16D12:                                      //loc_16D12:
    if (memory(_ds, 0x79B8) != 0x30)            //jnz short loc_16D24
        goto loc_16D24;
    memory16(_ds, 0xA0D4) += 0xc256;            //add word_2A484, 0C256h
loc_16D1F:                                      //loc_16D1F:
    memory16(_ds, 0xA0D6) = memory16(_ds, 0xA0D6) + 0x0000 + _flags.carry; _ASSERT(0);
loc_16D24:                                      //loc_16D24:
    _bp = _pop();                               //pop bp
}

void sub_16D26()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16D34
        goto loc_16D34;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16D34:                                      //loc_16D34:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    _push(_ax);                                 //push ax
    sub_16BB5();                                //call sub_16BB5
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0x7921);                  //mov al, byte_27CD1
    _ah = 0x00;                                 //mov ah, 0
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 17302);             //mov al, [bx+4396h]
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    if (memory(_ss, _bp + var_1) == 0x00)       //jz short loc_16D66
        goto loc_16D66;
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    memory(_ds, 0x7922) = _al;                  //mov byte_27CD2, al
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    memory(_ds, 0x7923) = _al;                  //mov byte_27CD3, al
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _push(_ax);                                 //push ax
    sub_16D94();                                //call sub_16D94
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16D66:                                      //loc_16D66:
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_16D6A()
{
    const int arg_0 = 4;                        //arg_0  = dword ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16D76
        goto loc_16D76;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16D76:                                      //loc_16D76:
    _al = memory(_ds, 0x8242);                  //mov al, byte_285F2
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_16D92
        goto loc_16D92;
    _al = memory(_ds, 0x7924);                  //mov al, byte_27CD4
    _ah = 0x00;                                 //mov ah, 0
    _les(_bx, _ss, _bp + arg_0);                //les bx, [bp+arg_0]
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _push(_ax);                                 //push ax
    sub_16987();                                //call sub_16987
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16D92:                                      //loc_16D92:
    _bp = _pop();                               //pop bp
}

void sub_16D94()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16DA0
        goto loc_16DA0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16DA0:                                      //loc_16DA0:
    _al = memory(_ds, 0x856E);                  //mov al, byte_2891E
    memory(_ds, 0x856F) = _al;                  //mov byte_2891F, al
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_169AA();                                //call sub_169AA
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _bp = _pop();                               //pop bp
}

void loc_16DBD()
{
    memory(_ds, 0x856E) -= 1;                   //dec byte_2891E
    memory(_ds, 0x855E) -= 1;                   //dec byte_2890E
    sub_16D26();                                //call sub_16D26
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16DD6
        goto loc_16DD6;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16DD6:                                      //loc_16DD6:
    memory(_ds, 0x856E) += 1;                   //inc byte_2891E
    memory(_ds, 0x855E) += 1;                   //inc byte_2890E
    sub_16D26();                                //call sub_16D26
    _bp = _pop();                               //pop bp
}

void sub_16DE3()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16DF0
        goto loc_16DF0;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16DF0:                                      //loc_16DF0:
    if (memory16(_ds, 0x689C) == 0x8000)        //jz short loc_16E0E
        goto loc_16E0E;
    sub_188E5();                                //call sub_188E5
    _si = _ax;                                  //mov si, ax
    _ax = memory16(_ds, 0x689C);                //mov ax, word_26C4C
    _ax &= _si;                                 //and ax, si
    memory16(_ds, 0x689C) = _ax;                //mov word_26C4C, ax
    _push(memory16(_ds, 0x689C));               //push word_26C4C
    sub_1891E();                                //call sub_1891E
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16E0E:                                      //loc_16E0E:
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_16E11()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16E1D
        goto loc_16E1D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16E1D:                                      //loc_16E1D:
    if (memory16(_ds, 0x689C) == 0x8000)        //jz short loc_16E2E
        goto loc_16E2E;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _push(_ax);                                 //push ax
    sub_16E30();                                //call sub_16E30
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_16E2E:                                      //loc_16E2E:
    _bp = _pop();                               //pop bp
}

void sub_16E30()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_16E3C
        goto loc_16E3C;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_16E3C:                                      //loc_16E3C:
    if (memory16(_ds, 0x689C) != 0x0004)        //jnz short loc_16E6C
        goto loc_16E6C;
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10159);             //mov al, [bx+27AFh]
    _ah = 0x00;                                 //mov ah, 0
    _push(_ax);                                 //push ax
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax <<= 1;                                  //shl ax, 1
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ds, _bx + 10158);             //mov al, [bx+27AEh]
    _ah = 0x00;                                 //mov ah, 0
    _push(_ax);                                 //push ax
    sub_18A07();                                //call sub_18A07
    _sp += 0x0004;                              //add sp, 4
    goto loc_170E5;                             //jmp loc_170E5
loc_16E6C:                                      //loc_16E6C:
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _ax -= 1;                                   //dec ax
    _bx = _ax;                                  //mov bx, ax
    if (_bx <= 0x0014)                          //jbe short loc_16E7C
        goto loc_16E7C;
    goto loc_170E5;                             //jmp loc_170E5
loc_16E7C:                                      //loc_16E7C:
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //jmp cs:off_170E7[bx]
    {
      case 0: goto loc_16E83;
      case 2: goto loc_16E9A;
      case 4: goto loc_16EB5;
      case 6: goto loc_16ED3;
      case 8: goto loc_16EF1;
      case 10: goto loc_16F0F;
      case 12: goto loc_16F2D;
      case 14: goto loc_16F4B;
      case 16: goto loc_16F69;
      case 18: goto loc_16F80;
      case 20: goto loc_16F9E;
      case 22: goto loc_16FBF;
      case 24: goto loc_16FD9;
      case 26: goto loc_16FF7;
      case 28: goto loc_17014;
      case 30: goto loc_17032;
      case 32: goto loc_1704C;
      case 34: goto loc_1706C;
      case 36: goto loc_1708C;
      case 38: goto loc_170A6;
      case 40: goto loc_170C2;
      default:
        _ASSERT(0);
    }
loc_16E83:                                      //loc_16E83:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ax = 0x01c2;                               //mov ax, 1C2h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x03e8;                               //mov ax, 3E8h
    goto loc_170D6;                             //jmp loc_170D6
loc_16E9A:                                      //loc_16E9A:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ax = 0x01c2;                               //mov ax, 1C2h
    _push(_ax);                                 //push ax
    _ax = 0xfff6;                               //mov ax, 0FFF6h
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0320;                               //mov ax, 320h
    _push(_ax);                                 //push ax
    _ax = 0x0028;                               //mov ax, 28h
    goto loc_170DA;                             //jmp loc_170DA
loc_16EB5:                                      //loc_16EB5:
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _push(_ax);                                 //push ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x01f3;                               //mov ax, 1F3h
    _push(_ax);                                 //push ax
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01b8;                               //mov ax, 1B8h
    _push(_ax);                                 //push ax
    _ax = 0x0190;                               //mov ax, 190h
    goto loc_170DA;                             //jmp loc_170DA
loc_16ED3:                                      //loc_16ED3:
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0064;                               //mov ax, 64h
    _push(_ax);                                 //push ax
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x00dc;                               //mov ax, 0DCh
    _push(_ax);                                 //push ax
    _ax = 0x005a;                               //mov ax, 5Ah
    goto loc_170DA;                             //jmp loc_170DA
loc_16EF1:                                      //loc_16EF1:
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01b8;                               //mov ax, 1B8h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x03e8;                               //mov ax, 3E8h
    _push(_ax);                                 //push ax
    _ax = 0x0019;                               //mov ax, 19h
    goto loc_170DA;                             //jmp loc_170DA
loc_16F0F:                                      //loc_16F0F:
    _ax = 0x0005;                               //mov ax, 5
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x01b8;                               //mov ax, 1B8h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x044c;                               //mov ax, 44Ch
    _push(_ax);                                 //push ax
    _ax = 0x0014;                               //mov ax, 14h
    goto loc_170DA;                             //jmp loc_170DA
loc_16F2D:                                      //loc_16F2D:
    _ax = 0x0003;                               //mov ax, 3
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01b8;                               //mov ax, 1B8h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x04b0;                               //mov ax, 4B0h
    _push(_ax);                                 //push ax
    _ax = 0x000f;                               //mov ax, 0Fh
    goto loc_170DA;                             //jmp loc_170DA
loc_16F4B:                                      //loc_16F4B:
    _ax = 0x0005;                               //mov ax, 5
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0064;                               //mov ax, 64h
    _push(_ax);                                 //push ax
    _ax = 0xfffb;                               //mov ax, 0FFFBh
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x00dc;                               //mov ax, 0DCh
    _push(_ax);                                 //push ax
    _ax = 0x0028;                               //mov ax, 28h
    goto loc_170DA;                             //jmp loc_170DA
loc_16F69:                                      //loc_16F69:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ax = 0x01c2;                               //mov ax, 1C2h
    _push(_ax);                                 //push ax
    _ax = 0x0014;                               //mov ax, 14h
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0032;                               //mov ax, 32h
    goto loc_170D6;                             //jmp loc_170D6
loc_16F80:                                      //loc_16F80:
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x015d;                               //mov ax, 15Dh
    _push(_ax);                                 //push ax
    _ax = 0x0032;                               //mov ax, 32h
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x00c8;                               //mov ax, 0C8h
    _push(_ax);                                 //push ax
    _ax = 0x000f;                               //mov ax, 0Fh
    goto loc_170DA;                             //jmp loc_170DA
loc_16F9E:                                      //loc_16F9E:
    _ax = 0xfffc;                               //mov ax, 0FFFCh
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01f3;                               //mov ax, 1F3h
    _push(_ax);                                 //push ax
    _ax = 0x0014;                               //mov ax, 14h
    _push(_ax);                                 //push ax
    _ax = 0x0028;                               //mov ax, 28h
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    sub_19502();                                //call sub_19502
    _sp += 0x000c;                              //add sp, 0Ch
    goto loc_170E5;                             //jmp loc_170E5
loc_16FBF:                                      //loc_16FBF:
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01a4;                               //mov ax, 1A4h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x04b0;                               //mov ax, 4B0h
    goto loc_170D6;                             //jmp loc_170D6
loc_16FD9:                                      //loc_16FD9:
    _ax = 0x000f;                               //mov ax, 0Fh
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x015d;                               //mov ax, 15Dh
    _push(_ax);                                 //push ax
    _ax = 0x0032;                               //mov ax, 32h
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x00c8;                               //mov ax, 0C8h
    _push(_ax);                                 //push ax
    _ax = 0x0014;                               //mov ax, 14h
    goto loc_170DA;                             //jmp loc_170DA
loc_16FF7:                                      //loc_16FF7:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x00c8;                               //mov ax, 0C8h
    _push(_ax);                                 //push ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0032;                               //mov ax, 32h
    goto loc_170DA;                             //jmp loc_170DA
loc_17014:                                      //loc_17014:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0064;                               //mov ax, 64h
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x012c;                               //mov ax, 12Ch
    _push(_ax);                                 //push ax
    _ax = 0x0190;                               //mov ax, 190h
    goto loc_170DA;                             //jmp loc_170DA
loc_17032:                                      //loc_17032:
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01a4;                               //mov ax, 1A4h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x04b0;                               //mov ax, 4B0h
    goto loc_170D6;                             //jmp loc_170D6
loc_1704C:                                      //loc_1704C:
    _ax = 0xfffc;                               //mov ax, 0FFFCh
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x01f3;                               //mov ax, 1F3h
    _push(_ax);                                 //push ax
    _ax = 0x0014;                               //mov ax, 14h
    _push(_ax);                                 //push ax
    _ax = 0x0028;                               //mov ax, 28h
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    sub_19502();                                //call sub_19502
    _sp += 0x000c;                              //add sp, 0Ch
    goto loc_170E5;                             //jmp short loc_170E5
loc_1706C:                                      //loc_1706C:
    _ax = 0xfffc;                               //mov ax, 0FFFCh
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x01f3;                               //mov ax, 1F3h
    _push(_ax);                                 //push ax
    _ax = 0x001e;                               //mov ax, 1Eh
    _push(_ax);                                 //push ax
    _ax = 0x0050;                               //mov ax, 50h
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    sub_19502();                                //call sub_19502
    _sp += 0x000c;                              //add sp, 0Ch
    goto loc_170E5;                             //jmp short loc_170E5
loc_1708C:                                      //loc_1708C:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    _ax = 0x0064;                               //mov ax, 64h
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ax = 0x012c;                               //mov ax, 12Ch
    _push(_ax);                                 //push ax
    _ax = 0x0320;                               //mov ax, 320h
    goto loc_170DA;                             //jmp short loc_170DA
loc_170A6:                                      //loc_170A6:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x00c8;                               //mov ax, 0C8h
    _push(_ax);                                 //push ax
    _ax = 0x0004;                               //mov ax, 4
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0032;                               //mov ax, 32h
    goto loc_170DA;                             //jmp short loc_170DA
loc_170C2:                                      //loc_170C2:
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ax = 0x01c2;                               //mov ax, 1C2h
    _push(_ax);                                 //push ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _push(_ax);                                 //push ax
    _ax = 0x0001;                               //mov ax, 1
    _push(_ax);                                 //push ax
    _ax = 0x0258;                               //mov ax, 258h
loc_170D6:                                      //loc_170D6:
    _push(_ax);                                 //push ax
    _ax = 0x001e;                               //mov ax, 1Eh
loc_170DA:                                      //loc_170DA:
    _push(_ax);                                 //push ax
    _ax = 0x0002;                               //mov ax, 2
    _push(_ax);                                 //push ax
    sub_19488();                                //call sub_19488
    _sp += 0x0010;                              //add sp, 10h
loc_170E5:                                      //loc_170E5:
    _bp = _pop();                               //pop bp
}

void sub_17111()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    if (memory16(_ds, 0x6B4C) > _sp)            //ja short loc_1711D
        goto loc_1711D;
    _STOP_("call F_OVERFLOW@");                 //call F_OVERFLOW@
loc_1711D:                                      //loc_1711D:
    _bp = _pop();                               //pop bp
}

void sub_17120()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _al = memory(_ss, _bp + arg_0);             //mov al, [bp+arg_0]
    _ah = 0x00;                                 //mov ah, 0
    _interrupt(16);                             //int 10h
    _bp = _pop();                               //pop bp
}

void loc_17155()
{
loc_17155:
    if (memory(_ss, _bp + -16) == 0x2e)         //jz short loc_171C2
        goto loc_171C2;
    if (memory(_ss, _bp + -25) != 0x10)         //jnz short loc_17169
        goto loc_17169;
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    memory(_es, _bx + _si) = 0x2a;              //mov byte ptr es:[bx+si], 2Ah
    _si += 1;                                   //inc si
loc_17169:                                      //loc_17169:
    memory(_ss, _bp + -1) = 0x00;               //mov byte ptr [bp-1], 0
    goto loc_17188;                             //jmp short loc_17188
loc_1716F:                                      //loc_1716F:
    _al = memory16(_ss, _bp + -1);              //mov al, [bp-1]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + -16);                  //lea dx, [bp-10h]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    _al = memory(_ss, _bx);                     //mov al, ss:[bx]
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    memory(_es, _bx + _si) = _al;               //mov es:[bx+si], al
    _si += 1;                                   //inc si
    memory(_ss, _bp + -1) += 1;                 //inc byte ptr [bp-1]
loc_17188:                                      //loc_17188:
    _al = memory16(_ss, _bp + -1);              //mov al, [bp-1]
    _ah = 0x00;                                 //mov ah, 0
    _lea(_dx, _ss, _bp + -16);                  //lea dx, [bp-10h]
    _ax += _dx;                                 //add ax, dx
    _bx = _ax;                                  //mov bx, ax
    if (memory(_ss, _bx) != 0x00)               //jnz short loc_1716F
        goto loc_1716F;
    if (memory(_ss, _bp + -25) != 0x10)         //jnz short loc_171A5
        goto loc_171A5;
    _ax = 0x0001;                               //mov ax, 1
    goto loc_171A7;                             //jmp short loc_171A7
loc_171A5:                                      //loc_171A5:
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_171A7:                                      //loc_171A7:
    _dl = memory16(_ss, _bp + -1);              //mov dl, [bp-1]
    _dl += _al;                                 //add dl, al
    memory16(_ss, _bp + -1) = _dl;              //mov [bp-1], dl
    goto loc_171BC;                             //jmp short loc_171BC
loc_171B1:                                      //loc_171B1:
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    memory(_es, _bx + _si) = 0x20;              //mov byte ptr es:[bx+si], 20h
    _si += 1;                                   //inc si
    memory(_ss, _bp + -1) += 1;                 //inc byte ptr [bp-1]
loc_171BC:                                      //loc_171BC:
    if (memory(_ss, _bp + -1) < 0x0e)           //jb short loc_171B1
        goto loc_171B1;
loc_171C2:                                      //loc_171C2:
    _push(_ss);                                 //push ss
    _lea(_ax, _ss, _bp + -46);                  //lea ax, [bp-2Eh]
    _push(_ax);                                 //push ax
    _findnext();                                //call _findnext
    _sp += 0x0004;                              //add sp, 4
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_171DA
        goto loc_171DA;
    if ((short)_si >= (short)0x056a)            //jge short loc_171DA
        goto loc_171DA;
    goto loc_17155;                             //jmp loc_17155
loc_171DA:                                      //loc_171DA:
    _si = _si ^ _si;                            //xor si, si
    goto loc_1720D;                             //jmp short loc_1720D
loc_171DE:                                      //loc_171DE:
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    if (memory(_es, _bx + _si) != 0x20)         //jnz short loc_1720C
        goto loc_1720C;
    goto loc_171EA;                             //jmp short loc_171EA
loc_171E9:                                      //loc_171E9:
    _si += 1;                                   //inc si
loc_171EA:                                      //loc_171EA:
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    if (memory(_es, _bx + _si) == 0x20)         //jz short loc_171E9
        goto loc_171E9;
    _ax = _si;                                  //mov ax, si
    _ax += 0xfffe;                              //add ax, 0FFFEh
    _si = _ax;                                  //mov si, ax
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x1b;                    //mov byte ptr es:[bx], 1Bh
    _ax += 1;                                   //inc ax
    _si = _ax;                                  //mov si, ax
    _bx = memory16(_ss, _bp + 8);               //mov bx, [bp+8]
    _bx += _ax;                                 //add bx, ax
    memory(_es, _bx) = 0x4c;                    //mov byte ptr es:[bx], 4Ch
loc_1720C:                                      //loc_1720C:
    _si += 1;                                   //inc si
loc_1720D:                                      //loc_1720D:
    _les(_bx, _ss, _bp + 8);                    //les bx, [bp+8]
    if (memory(_es, _bx + _si) != 0x00)         //jnz short loc_171DE
        goto loc_171DE;
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_17218:                                      //loc_17218:
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _getdisk();                                 //call _getdisk
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(memory16(_ss, _bp + 8));              //push word ptr [bp+8]
    _push(memory16(_ss, _bp + 6));              //push word ptr [bp+6]
    _push(memory16(_ss, _bp + 4));              //push word ptr [bp+4]
    _getcurdir();                               //call _getcurdir
    _sp += 0x0006;                              //add sp, 6
    _bp = _pop();                               //pop bp
}

void sub_17235()
{
    const int var_A = -10;                      //var_A  = word ptr -0Ah
    const int var_8 = -8;                       //var_8  = word ptr -8
    const int var_6 = -6;                       //var_6  = word ptr -6
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    const int arg_A = 14;                       //arg_A  = word ptr  0Eh
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x000a;                              //sub sp, 0Ah
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    _si = _si ^ _si;                            //xor si, si
    memory16(_ss, _bp + var_6) = 0x0000;        //mov [bp+var_6], 0
    memory16(_ss, _bp + var_4) = 0x0000;        //mov [bp+var_4], 0
    goto loc_172CF;                             //jmp loc_172CF
loc_17250:                                      //loc_17250:
    if ((short)_FIXME_ < (short)0x0000)         //jl short loc_1726D
        goto loc_1726D;
    if ((short)_FIXME_ > (short)0x0000)         //jg short loc_1725F
        goto loc_1725F;
    if (_FIXME_ <= 0xfa00)                      //jbe short loc_1726D
        goto loc_1726D;
loc_1725F:                                      //loc_1725F:
    _di = 0xfa00;                               //mov di, 0FA00h
    _flags.carry = _FIXME_ < 0xfa00;            //sub [bp+arg_8], 0FA00h
    _FIXME_ -= 0xfa00;
    _FIXME_ -= 0x0000 + _flags.carry;           //sbb [bp+arg_A], 0
    goto loc_1727A;                             //jmp short loc_1727A
loc_1726D:                                      //loc_1726D:
    _di = memory16(_ss, _bp + arg_8);           //mov di, [bp+arg_8]
    _FIXME_ = 0x0000;                           //mov [bp+arg_8], 0
    _FIXME_ = 0x0000;                           //mov [bp+arg_A], 0
loc_1727A:                                      //loc_1727A:
    _push(_di);                                 //push di
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_FIXME_);                             //push [bp+arg_4]
    _push(_FIXME_);                             //push [bp+arg_2]
    _STOP_("");                                 //call ss:off_203B4[bp]
    _sp += 0x0008;                              //add sp, 8
    _si = _ax;                                  //mov si, ax
    if (_si == _di)                             //jz short loc_17295
        goto loc_17295;
    _ax = 0x0001;                               //mov ax, 1
    goto loc_17297;                             //jmp short loc_17297
loc_17295:                                      //loc_17295:
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_17297:                                      //loc_17297:
    memory(_ss, _bp + var_1) = _al;             //mov [bp+var_1], al
    _flags.carry = (memory16(_ss, _bp + var_6) + _si) >= 0x10000;
    memory16(_ss, _bp + var_6) += _si;
    memory16(_ss, _bp + var_4) = memory16(_ss, _bp + var_4) + 0x0000 + _flags.carry;
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_ss, _bp + var_A) = _ax;           //mov [bp+var_A], ax
    memory16(_ss, _bp + var_8) = 0x0000;        //mov [bp+var_8], 0
    _flags.carry = (memory16(_ss, _bp + var_A) + _si) >= 0x10000;
    memory16(_ss, _bp + var_A) += _si;
    memory16(_ss, _bp + var_8) = memory16(_ss, _bp + var_8) + 0x0000 + _flags.carry;
    _ax = memory16(_ss, _bp + var_A);           //mov ax, [bp+var_A]
    memory16(_ss, _bp + arg_4) = _ax;           //mov [bp+arg_4], ax
    memory16(_ss, _bp + var_A) = 0x0000;        //mov [bp+var_A], 0
    _ax = memory16(_ss, _bp + var_A);           //mov ax, [bp+var_A]
    _ax = _ax | memory16(_ss, _bp + var_8);     //or ax, [bp+var_8]
    if (_ax == 0)                               //jz short loc_172CF
        goto loc_172CF;
    _flags.carry = (_FIXME_ + 0x0000) >= 0x10000;//add [bp+arg_4], 0
    _FIXME_ += 0x0000;
    _FIXME_ = _FIXME_ + 0x1000 + _flags.carry;  //adc [bp+arg_6], 1000h
loc_172CF:                                      //loc_172CF:
    _ax = memory16(_ss, _bp + arg_8);           //mov ax, [bp+arg_8]
    _ax = _ax | memory16(_ss, _bp + arg_A);     //or ax, [bp+arg_A]
    if (_ax == 0)                               //jz short loc_172E3
        goto loc_172E3;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_172E3
        goto loc_172E3;
    goto loc_17250;                             //jmp loc_17250
loc_172E3:                                      //loc_172E3:
    _dx = memory16(_ss, _bp + var_4);           //mov dx, [bp+var_4]
    _ax = memory16(_ss, _bp + var_6);           //mov ax, [bp+var_6]
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_172EF()
{
    const int handler = 4;                      //handler  = dword ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + handler + 2);               //mov ax, word ptr [bp+handler+2]
    memory16(_ds, 0xA1B8) = _ax;                //mov word_2A568, ax
    _push(memory16(_ss, _bp + handler));              //push word ptr [bp+handler]
//    _harderr();                                 //call _harderr
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    memory(_ds, 0x4CE6) = 0x01;                 //mov byte_25096, 1
    _bp = _pop();                               //pop bp
}

void sub_17307()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    _dx = memory16(_ss, _bp + arg_0);           //mov dx, [bp+arg_0]
    memory16(_ds, 0xA1B4) = _dx;                //mov word ptr dword_2A564, dx
    memory16(_ds, 0xA1B6) = _ax;                //mov word ptr dword_2A564+2, ax
    _bp = _pop();                               //pop bp
}

void sub_17319()
{
    const int handle = 4;                       //handle  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _push(_FIXME_);                             //push [bp+handle]
    _close();                                   //call _close
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _si = _ax;                                  //mov si, ax
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_1736F()
{
    const int var_1 = -1;                       //var_1  = byte ptr -1
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 1;                                   //dec sp
    _sp -= 1;                                   //dec sp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _di = memory16(_ss, _bp + arg_0);           //mov di, [bp+arg_0]
    memory(_ss, _bp + var_1) = 0x00;            //mov [bp+var_1], 0
    _al = memory(_ds, 0x4CE6);                  //mov al, byte_25096
    _ah = 0x00;                                 //mov ah, 0
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_1738C
        goto loc_1738C;
    memory16(_ds, 0xA1B8) = 0x74d4;             //mov word_2A568, 74D4h
loc_1738C:                                      //loc_1738C:
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    if (memory(_es, _bx + 4) == 0x7a)           //jz short loc_173E9
        goto loc_173E9;
loc_173A0:                                      //loc_173A0:
    _push(memory16(_ss, _bp + arg_2));                             //push [bp+arg_2]
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 4);                 //mov al, es:[bx+4]
    _push(_ax);                                 //push ax
    sub_174D5();                                //call sub_174D5
    _sp += 0x0004;                              //add sp, 4
    _si = _ax;                                  //mov si, ax
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_173DB
        goto loc_173DB;
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 4);                 //mov al, es:[bx+4]
    _ah = 0x00;                                 //mov ah, 0
    _push(_ax);                                 //push ax
    word_2A568();                               //call word_2A568
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_173DB:                                      //loc_173DB:
    _si |= _si;                                 //or si, si
    if (_si == 0)                               //jz short loc_173E9
        goto loc_173E9;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
    if (_al < 0x0a)                             //jb short loc_173A0
        goto loc_173A0;
loc_173E9:                                      //loc_173E9:
    if (memory(_ss, _bp + var_1) > 0x0a)        //ja short loc_17456
        goto loc_17456;
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 4);                 //mov al, es:[bx+4]
    memory(_ds, 0x4CE7) = _al;                  //mov byte_25097, al
loc_17403:                                      //loc_17403:
    _ax = 0x0180;                               //mov ax, 180h
    _push(_ax);                                 //push ax
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    _ax |= 0x8004;                              //or ax, 8004h
    _push(_ax);                                 //push ax
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    _push(memory16(_es, _bx + 2));              //push word ptr es:[bx+2]
    _push(memory16(_es, _bx));                  //push word ptr es:[bx]
    _open();                                    //call _open
    _sp += 0x0008;                              //add sp, 8
    _si = _ax;                                  //mov si, ax
    _ax |= _ax;                                 //or ax, ax
    if ((short)_ax >= 0)                        //jge short loc_17448
        goto loc_17448;
    _ax = _di;                                  //mov ax, di
    _dx = 0x000a;                               //mov dx, 0Ah
    _imul(_dx);                                 //imul dx
    _les(_bx, _ds, 0xA1B4);                     //les bx, dword_2A564
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx + 4);                 //mov al, es:[bx+4]
    _ah = 0x00;                                 //mov ah, 0
    _push(_ax);                                 //push ax
    word_2A568();                               //call word_2A568
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
loc_17448:                                      //loc_17448:
    _si |= _si;                                 //or si, si
    if ((short)_si >= 0)                        //jge short loc_17456
        goto loc_17456;
    _al = memory(_ss, _bp + var_1);             //mov al, [bp+var_1]
    memory(_ss, _bp + var_1) += 1;              //inc [bp+var_1]
    if (_al < 0x0a)                             //jb short loc_17403
        goto loc_17403;
loc_17456:                                      //loc_17456:
    _ax = _si;                                  //mov ax, si
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_1745E()
{
    const int var_4 = -4;                       //var_4  = word ptr -4
    const int var_2 = -2;                       //var_2  = word ptr -2
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _sp -= 0x0004;                              //sub sp, 4
    _push(_FIXME_);                             //push [bp+arg_8]
    _push(_FIXME_);                             //push [bp+arg_6]
    _push(_FIXME_);                             //push [bp+arg_4]
    _push(_FIXME_);                             //push [bp+arg_2]
    _push(_FIXME_);                             //push [bp+arg_0]
    _ax = 0xa3ae;                               //mov ax, 0A3AEh
    _push(_ax);                                 //push ax
    sub_17235();                                //call sub_17235
    _sp += 0x000c;                              //add sp, 0Ch
    memory16(_ss, _bp + var_4) = _ax;           //mov [bp+var_4], ax
    memory16(_ss, _bp + var_2) = _dx;           //mov [bp+var_2], dx
    _ax = memory16(_ss, _bp + var_4);           //mov ax, [bp+var_4]
    _sp = _bp;                                  //mov sp, bp
    _bp = _pop();                               //pop bp
}

void sub_174D5()
{//1168D
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_si);                                 //push si
    _ax = 0x0180;                               //mov ax, 180h
    _push(_ax);                                 //push ax
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    _ax |= 0x8004;                              //or ax, 8004h
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ax = 0x4ce8;                               //mov ax, 4CE8h
    _push(_ax);                                 //push ax
    _open();                                    //call _open
    _sp += 0x0008;                              //add sp, 8
    _si = _ax;                                  //mov si, ax
    _si |= _si;                                 //or si, si
    if ((short)_si <= (short)_FIXME_)           //jle short loc_1752C
        goto loc_1752C;
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _dx = 0x0004;                               //mov dx, 4
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _ax = 0xa1ba;                               //mov ax, 0A1BAh
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    // readfile!?
    sub_1745E();                                //call sub_1745E
    _sp += 0x000c;                              //add sp, 0Ch
    _push(_si);                                 //push si
    // close
    sub_17319();                                //call sub_17319
    _sp += 1;                                   //inc sp
    _sp += 1;                                   //inc sp
    _al = memory(_ds, 0xA1BA);                  //mov al, byte_2A56A
    _ah = 0x00;                                 //mov ah, 0
    _dl = memory(_ss, _bp + arg_0);             //mov dl, [bp+arg_0]
    _dh = 0x00;                                 //mov dh, 0
    _ax -= _dx;                                 //sub ax, dx
    _si = _ax;                                  //mov si, ax
    // QUELDISK: 7a 1a
    if (memory(_ds, 0xA1BA) == 0x7a)            //jz short loc_1752A
        goto loc_1752A;
    if (_FIXME_ != 0x7a)                        //jnz short loc_1752C
        goto loc_1752C;
loc_1752A:                                      //loc_1752A:
    _si = _si ^ _si;                            //xor si, si
loc_1752C:                                      //loc_1752C:
    _ax = _si;                                  //mov ax, si
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
}

void sub_17532()
{
    _pushf();                                   //pushf
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _flags.direction = false;                   //cld
    _di = 0x4cf2;                               //mov di, 4CF2h
    _cx = 0x0020;                               //mov cx, 20h
    _ax = _ax ^ _ax;                            //xor ax, ax
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _ax = 0x0000;                               //mov ax, 0
    sub_177D9();                                //call sub_177D9
loc_17553:                                      //loc_17553:
    _ax = 0x0001;                               //mov ax, 1
//    _STOP_("sp-trace-fail");                    //sub_17532 endp_failed
//    _STOP_("continues");                        //call sub_177D9
    sub_177D9();
    _es = _pop();
    _ds = _pop();
    _di = _pop();
    _si = _pop();
    _dx = _pop();
    _cx = _pop();
    _bx = _pop();
    _ax = _pop();
    _popf();
}
    
void sub_17563()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = dword ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _ah = _ah ^ _ah;                            //xor ah, ah
    _les(_si, _ss, _bp + arg_2);                //les si, [bp+arg_2]
    sub_1757B();                                //call sub_1757B
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
}

void sub_1757B()
{
    _push(_ds);                                 //push ds
    _dx = _dseg;                                //mov dx, seg dseg
    _ds = _dx;                                  //mov ds, dx
    if (_al < 0x10)                             //jb short loc_1758B
        goto loc_1758B;
    _dx = 0x7676;                               //mov dx, 7676h
    _STOP_("goto loc_1762A");                   //jmp loc_1762A
loc_1758B:                                      //loc_1758B:
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = 0x4cf2;                               //mov bx, 4CF2h
    _bx += _ax;                                 //add bx, ax
    memory16(_ds, _bx) = _si;                   //mov [bx], si
    _ax = _es;                                  //mov ax, es
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    _ds = _pop();                               //pop ds
}

void sub_175A2()
{
    WORD _cs = _seg000;

    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _dx = _dseg;                                //mov dx, seg dseg
    _ds = _dx;                                  //mov ds, dx
    _ah = _ah ^ _ah;                            //xor ah, ah
    if (_ax < 0x0010)                           //jb short loc_175BF
        goto loc_175BF;
    _dx = 0x76c8;                               //mov dx, 76C8h
    goto loc_1762A;                             //jmp short loc_1762A
    _STOP_("db 90h");                           //db 90h
loc_175BF:                                      //loc_175BF:
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _bx = 0x4cf2;                               //mov bx, 4CF2h
    _bx += _ax;                                 //add bx, ax
    _les(_si, _ds, _bx);                        //les si, [bx]
    _ax = _es;                                  //mov ax, es
    _ax |= _si;                                 //or ax, si
    if (_ax != 0)                               //jnz short loc_175D5
        goto loc_175D5;
    _dx = 0x7634;                               //mov dx, 7634h
    goto loc_1762A;                             //jmp short loc_1762A
loc_175D5:                                      //loc_175D5:
    _dx = 0x0000;                               //mov dx, 0
loc_175D8:                                      //loc_175D8:
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    if (_al >= 0xfd)                            //jnb short loc_175EB
        goto loc_175EB;
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    sub_1773C();                                //call sub_1773C
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _dl |= _ch;                                 //or dl, ch
    goto loc_175D8;                             //jmp short loc_175D8
loc_175EB:                                      //loc_175EB:
    if (_al == 0xff)                            //jz short loc_17621
        goto loc_17621;
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x4D42);                //mov bx, word_250F2
loc_175F9:                                      //loc_175F9:
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    if (_al >= 0xfd)                            //jnb short loc_17616
        goto loc_17616;
    _dh = _al;                                  //mov dh, al
loc_17603:                                      //loc_17603:
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    if (_al >= 0xfd)                            //jnb short loc_17616
        goto loc_17616;
    _al &= 0x7f;                                //and al, 7Fh
    _xlat();                                    //xlat
    _al &= _al;                                 //and al, al
    if (_al == 0)                               //jz short loc_17603
        goto loc_17603;
    _dl |= _dh;                                 //or dl, dh
    goto loc_17603;                             //jmp short loc_17603
loc_17616:                                      //loc_17616:
    if (_al == 0xfe)                            //jz short loc_17620
        goto loc_17620;
    if (_al != 0xff)                            //jnz short loc_175F9
        goto loc_175F9;
    goto loc_17621;                             //jmp short loc_17621
loc_17620:                                      //loc_17620:
    _ds = _pop();                               //pop ds
loc_17621:                                      //loc_17621:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _al = _dl;                                  //mov al, dl
    _ah = _ah ^ _ah;                            //xor ah, ah
    return;                                     //retn
loc_1762A:                                      //loc_1762A:
    _ax = _cs;                                  //mov ax, cs
    _ds = _ax;                                  //mov ds, ax
    _ah = 0x09;                                 //mov ah, 9
    _interrupt(33);                             //int 21h
loc_17632:                                      //loc_17632:
    goto loc_17632;                             //jmp short loc_17632
    _STOP_("sp-trace-fail");                    //sub_175A2 endp_failed
    _STOP_("continues");                        //db 45h, 2 dup(72h), 65h, 75h, 72h, 20h, 64...
}

void sub_1773C()
{
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _push(_ax);                                 //push ax
    sub_17861();                                //call sub_17861
    _bx = _pop();                               //pop bx
    _ch = _ch ^ _ch;                            //xor ch, ch
    if (_ax == 0xffff)                          //jz short loc_17795
        goto loc_17795;
    _bx &= 0x0001;                              //and bx, 1
    if (_bx == 0)                               //jz short loc_17797
        goto loc_17797;
    if (_ah >= memory(_ds, 0x4D3B))             //jnb short loc_1775E
        goto loc_1775E;
    _ch |= 0x04;                                //or ch, 4
    goto loc_17767;                             //jmp short loc_17767
loc_1775E:                                      //loc_1775E:
    if (_ah < memory(_ds, 0x4D3D))              //jb short loc_17767
        goto loc_17767;
    _ch |= 0x08;                                //or ch, 8
loc_17767:                                      //loc_17767:
    if (_al >= memory(_ds, 0x4D3A))             //jnb short loc_17772
        goto loc_17772;
    _ch |= 0x01;                                //or ch, 1
    goto loc_1777B;                             //jmp short loc_1777B
loc_17772:                                      //loc_17772:
    if (_al < memory(_ds, 0x4D3C))              //jb short loc_1777B
        goto loc_1777B;
    _ch |= 0x02;                                //or ch, 2
loc_1777B:                                      //loc_1777B:
    _dx = 0x0201;                               //mov dx, 201h
    _in(_al, _dx);                              //in al, dx
    _al = (~_al);                               //not al
    if (!(_al & 0x40))                          //jz short loc_17788
        goto loc_17788;
    _ch |= 0x10;                                //or ch, 10h
loc_17788:                                      //loc_17788:
    if (!(_al & 0x80))                          //jz short loc_1778F
        goto loc_1778F;
    _ch |= 0x20;                                //or ch, 20h
loc_1778F:                                      //loc_1778F:
    memory(_ds, 0x4D35) = _ch;                  //mov byte_250E5, ch
    _STOP_("goto $+2");                         //jmp short $+2
loc_17795:                                      //loc_17795:
    _ds = _pop();                               //pop ds
    return;                                     //retn
loc_17797:                                      //loc_17797:
    if (_ah >= memory(_ds, 0x4D37))             //jnb short loc_177A2
        goto loc_177A2;
    _ch |= 0x04;                                //or ch, 4
    goto loc_177AB;                             //jmp short loc_177AB
loc_177A2:                                      //loc_177A2:
    if (_ah < memory(_ds, 0x4D39))              //jb short loc_177AB
        goto loc_177AB;
    _ch |= 0x08;                                //or ch, 8
loc_177AB:                                      //loc_177AB:
    if (_al >= memory(_ds, 0x4D36))             //jnb short loc_177B6
        goto loc_177B6;
    _ch |= 0x01;                                //or ch, 1
    goto loc_177BF;                             //jmp short loc_177BF
loc_177B6:                                      //loc_177B6:
    if (_al < memory(_ds, 0x4D38))              //jb short loc_177BF
        goto loc_177BF;
    _ch |= 0x02;                                //or ch, 2
loc_177BF:                                      //loc_177BF:
    _dx = 0x0201;                               //mov dx, 201h
    _in(_al, _dx);                              //in al, dx
    _al = (~_al);                               //not al
    if (!(_al & 0x10))                          //jz short loc_177CC
        goto loc_177CC;
    _ch |= 0x10;                                //or ch, 10h
loc_177CC:                                      //loc_177CC:
    if (!(_al & 0x20))                          //jz short loc_177D3
        goto loc_177D3;
    _ch |= 0x20;                                //or ch, 20h
loc_177D3:                                      //loc_177D3:
    memory(_ds, 0x4D34) = _ch;                  //mov byte_250E4, ch
    goto loc_17795;                             //jmp short loc_17795
}

void sub_177D9()
{
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = 0x4dca;                               //mov bx, 4DCAh
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_177E9
        goto loc_177E9;
    _bx = 0x4dcb;                               //mov bx, 4DCBh
loc_177E9:                                      //loc_177E9:
    _cl = 0x01;                                 //mov cl, 1
    memory(_ds, _bx) = _cl;                     //mov [bx], cl
    _bx = _ax;                                  //mov bx, ax
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    sub_17861();                                //call sub_17861
    _bx = _pop();                               //pop bx
    _cx = _pop();                               //pop cx
    if (_ax == 0xffff)                          //jz short loc_1784A
        goto loc_1784A;
    if (_ah < 0x02)                             //jb short loc_1783E
        goto loc_1783E;
    if (_al < 0x02)                             //jb short loc_1783E
        goto loc_1783E;
    _cx = _ax;                                  //mov cx, ax
    _al >>= 1;                                  //shr al, 1
    _ah >>= 1;                                  //shr ah, 1
    _dx = _ax;                                  //mov dx, ax
    _cx += _cx;                                 //add cx, cx
    _cx -= _dx;                                 //sub cx, dx
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx &= 0x0001;                              //and bx, 1
    if (_bx == 0)                               //jz short loc_1782C
        goto loc_1782C;
    memory(_ds, 0x4D3A) = _dl;                  //mov byte_250EA, dl
    memory(_ds, 0x4D3B) = _dh;                  //mov byte_250EB, dh
    memory(_ds, 0x4D3C) = _cl;                  //mov byte_250EC, cl
    memory(_ds, 0x4D3D) = _ch;                  //mov byte_250ED, ch
    goto loc_1783C;                             //jmp short loc_1783C
loc_1782C:                                      //loc_1782C:
    memory(_ds, 0x4D36) = _dl;                  //mov byte_250E6, dl
    memory(_ds, 0x4D37) = _dh;                  //mov byte_250E7, dh
    memory(_ds, 0x4D38) = _cl;                  //mov byte_250E8, cl
    memory(_ds, 0x4D39) = _ch;                  //mov byte_250E9, ch
loc_1783C:                                      //loc_1783C:
    _ds = _pop();                               //pop ds
    return;                                     //retn
loc_1783E:                                      //loc_1783E:
    _push(_cx);                                 //push cx
    _cx = 0x0000;                               //mov cx, 0
loc_17842:                                      //loc_17842:
    if (--_cx)                                  //loop loc_17842
        goto loc_17842;
    _cx = _pop();                               //pop cx
    _ax = 0xffff;                               //mov ax, 0FFFFh
    goto loc_1784C;                             //jmp short loc_1784C
loc_1784A:                                      //loc_1784A:
    _al = _al ^ _al;                            //xor al, al
loc_1784C:                                      //loc_1784C:
    _bx = 0x4dca;                               //mov bx, 4DCAh
    _cx &= _cx;                                 //and cx, cx
    if (_cx == 0)                               //jz short loc_17856
        goto loc_17856;
    _bx = 0x4dcb;                               //mov bx, 4DCBh
loc_17856:                                      //loc_17856:
    memory(_ds, _bx) = _al;                     //mov [bx], al
    goto loc_1783C;                             //jmp short loc_1783C
}

void sub_17861()
{
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _al &= 0x01;                                //and al, 1
    if (_al == 0)                               //jz short loc_17881
        goto loc_17881;
    _bx = 0x0408;                               //mov bx, 408h
    _al = memory(_ds, 0x4DCB);                  //mov al, byte_2517B
    _al -= 1;                                   //dec al
    if (_al == 0)                               //jz short loc_17895
        goto loc_17895;
    _al += 1;                                   //inc al
    if (_al == 0)                               //jz short loc_1787E
        goto loc_1787E;
    goto loc_1792E;                             //jmp loc_1792E
loc_1787E:                                      //loc_1787E:
    goto loc_17967;                             //jmp loc_17967
loc_17881:                                      //loc_17881:
    _bx = 0x0102;                               //mov bx, 102h
    _al = memory(_ds, 0x4DCA);                  //mov al, byte_2517A
    _al -= 1;                                   //dec al
    if (_al == 0)                               //jz short loc_17895
        goto loc_17895;
    _al += 1;                                   //inc al
    if (_al == 0)                               //jz short loc_17892
        goto loc_17892;
    goto loc_1792E;                             //jmp loc_1792E
loc_17892:                                      //loc_17892:
    goto loc_17953;                             //jmp loc_17953
loc_17895:                                      //loc_17895:
    _dx = 0x0201;                               //mov dx, 201h
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_1789A:                                      //loc_1789A:
    _in(_al, _dx);                              //in al, dx
    if (--_cx && _al & _bl)                     //loopne loc_1789A
        goto loc_1789A;
    if (_cx == 0)                               //jcxz short loc_178A5
        goto loc_178A5;
    if (--_cx && _al & _bh)                     //loopne loc_1789A
        goto loc_1789A;
loc_178A5:                                      //loc_178A5:
    if (_cx == 0)                               //jcxz short loc_178A9
        goto loc_178A9;
    goto loc_178AC;                             //jmp short loc_178AC
loc_178A9:                                      //loc_178A9:
    goto loc_1792E;                             //jmp loc_1792E
loc_178AC:                                      //loc_178AC:
    _dx = 0x0201;                               //mov dx, 201h
    _out(_dx, _al);                             //out dx, al
    _in(_al, _dx);                              //in al, dx
    if (_al & _bh)                              //jnz short loc_178DA
        goto loc_178DA;
    if (_al & _bl)                              //jnz short loc_178DA
        goto loc_178DA;
    _al = 0x06;                                 //mov al, 6
    _out(67, _al);                              //out 43h, al
    _push(_cx);                                 //push cx
    _cx = 0x0064;                               //mov cx, 64h
loc_178C1:                                      //loc_178C1:
    if (--_cx)                                  //loop loc_178C1
        goto loc_178C1;
    _cx = _pop();                               //pop cx
loc_178C4:                                      //loc_178C4:
    _in(_al, 64);                               //in al, 40h
    _ah = _al;                                  //mov ah, al
    _in(_al, 64);                               //in al, 40h
    _ah &= 0x10;                                //and ah, 10h
    if (_ah == 0)                               //jz short loc_178C4
        goto loc_178C4;
loc_178CF:                                      //loc_178CF:
    _in(_al, 64);                               //in al, 40h
    _ah = _al;                                  //mov ah, al
    _in(_al, 64);                               //in al, 40h
    _ah &= 0x10;                                //and ah, 10h
    if (_ah != 0)                               //jnz short loc_178CF
        goto loc_178CF;
loc_178DA:                                      //loc_178DA:
    _cx = _cx ^ _cx;                            //xor cx, cx
    memory16(_ds, 0x4D32) = _cx;                //mov word_250E2, cx
    _cx = 0x03e8;                               //mov cx, 3E8h
loc_178E3:                                      //loc_178E3:
    _in(_al, 64);                               //in al, 40h
    _ah = _al;                                  //mov ah, al
    _in(_al, 64);                               //in al, 40h
    _ah &= 0x10;                                //and ah, 10h
    if (_ah == 0)                               //jz short loc_178E3
        goto loc_178E3;
    memory16(_ds, 0x4D32) += 1;                 //inc word_250E2
    _in(_al, _dx);                              //in al, dx
    _bl &= _bl;                                 //and bl, bl
    if (_bl == 0)                               //jz short loc_178FF
        goto loc_178FF;
    if (!(_al & _bl))                           //jz short loc_17920
        goto loc_17920;
    _bh &= _bh;                                 //and bh, bh
    if (_bh == 0)                               //jz short loc_17903
        goto loc_17903;
loc_178FF:                                      //loc_178FF:
    if (!(_al & _bh))                           //jz short loc_17912
        goto loc_17912;
loc_17903:                                      //loc_17903:
    _in(_al, 64);                               //in al, 40h
    _ah = _al;                                  //mov ah, al
    _in(_al, 64);                               //in al, 40h
    if (_ah & 0x10)                             //jnz short loc_17903
        goto loc_17903;
    if (--_cx)                                  //loop loc_178E3
        goto loc_178E3;
    goto loc_1792E;                             //jmp short loc_1792E
loc_17912:                                      //loc_17912:
    _ax = memory16(_ds, 0x4D32);                //mov ax, word_250E2
    memory16(_ds, 0x4DC6) = _ax;                //mov word_25176, ax
    _bh = _bh ^ _bh;                            //xor bh, bh
    _bl &= _bl;                                 //and bl, bl
    if (_bl == 0)                               //jz short loc_17933
        goto loc_17933;
    goto loc_17903;                             //jmp short loc_17903
loc_17920:                                      //loc_17920:
    _ax = memory16(_ds, 0x4D32);                //mov ax, word_250E2
    memory16(_ds, 0x4DC8) = _ax;                //mov word_25178, ax
    _bl = _bl ^ _bl;                            //xor bl, bl
    _bh &= _bh;                                 //and bh, bh
    if (_bh == 0)                               //jz short loc_17933
        goto loc_17933;
    goto loc_17903;                             //jmp short loc_17903
loc_1792E:                                      //loc_1792E:
    _ax = 0xffff;                               //mov ax, 0FFFFh
    goto loc_17950;                             //jmp short loc_17950
loc_17933:                                      //loc_17933:
    _dx = memory16(_ds, 0x4DC6);                //mov dx, word_25176
    _FIXME_;                                    //and dx, dx
    _dx &= _dx;
    if (!_flags.sign)                           //jns short loc_1793D
        goto loc_1793D;
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_1793D:                                      //loc_1793D:
    _cl = 0x01;                                 //mov cl, 1
    _dx >>= _cl;                                //shr dx, cl
    _ax = memory16(_ds, 0x4DC8);                //mov ax, word_25178
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (!_flags.sign)                           //jns short loc_1794A
        goto loc_1794A;
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1794A:                                      //loc_1794A:
    _cl = 0x01;                                 //mov cl, 1
    _ax >>= _cl;                                //shr ax, cl
    _ah = _dl;                                  //mov ah, dl
loc_17950:                                      //loc_17950:
    _ds = _pop();                               //pop ds
    _popf();                                    //popf
    return;                                     //retn
loc_17953:                                      //loc_17953:
    _dx = 0x0201;                               //mov dx, 201h
    _in(_al, _dx);                              //in al, dx
    _al &= 0x03;                                //and al, 3
    if (_al != 0)                               //jnz short loc_1792E
        goto loc_1792E;
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0x4DCA) = _al;                  //mov byte_2517A, al
    _ax = 0x0000;                               //mov ax, 0
    goto loc_17977;                             //jmp short loc_17977
loc_17965:                                      //loc_17965:
    goto loc_1792E;                             //jmp short loc_1792E
loc_17967:                                      //loc_17967:
    _dx = 0x0201;                               //mov dx, 201h
    _in(_al, _dx);                              //in al, dx
    _al &= 0x0c;                                //and al, 0Ch
    if (_al != 0)                               //jnz short loc_17965
        goto loc_17965;
    _al = 0x01;                                 //mov al, 1
    memory(_ds, 0x4DCB) = _al;                  //mov byte_2517B, al
    _ax = 0x0001;                               //mov ax, 1
loc_17977:                                      //loc_17977:
    _push(_bx);                                 //push bx
    _push(_ax);                                 //push ax
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _ax = _pop();                               //pop ax
    _bx = _pop();                               //pop bx
    if (_ax == 0xffff)                          //jz short loc_17965
        goto loc_17965;
    _push(_bx);                                 //push bx
    sub_17861();                                //call sub_17861
    _bx = _pop();                               //pop bx
    goto loc_17950;                             //jmp short loc_17950
}

void sub_1798A()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _flags.direction = false;                   //cld
    _di = memory16(_ds, 0x4D42);                //mov di, word_250F2
    _cx = 0x0040;                               //mov cx, 40h
    _ax = 0x0000;                               //mov ax, 0
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _es = _pop();                               //pop es
    sub_17B01();                                //call sub_17B01
    _ax = memory16(_ds, 0x4DC4);                //mov ax, word_25174
    _ax &= _ax;                                 //and ax, ax
    if (_ax != 0)                               //jnz short loc_179E2
        goto loc_179E2;
    _ax += 1;                                   //inc ax
    memory16(_ds, 0x4DC4) = _ax;                //mov word_25174, ax
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _al = 0x09;                                 //mov al, 9
    _ah = 0x35;                                 //mov ah, 35h
    _interrupt(33);                             //int 21h
    _dx = _es;                                  //mov dx, es
    _ax = _seg000;                              //mov ax, seg seg000
    _es = _ax;                                  //mov es, ax
    memory16(_ds, 0x4D3E) = _bx;                //mov word_250EE, bx
    memory16(_es, 0x7A6D) = _bx;                //mov word ptr es:dword_17A6D, bx
    memory16(_ds, 0x4D40) = _dx;                //mov word_250F0, dx
    memory16(_es, 0x7A6F) = _dx;                //mov word ptr es:dword_17A6D+2, dx
    _dx = 0x79e6;                               //mov dx, 79E6h
    _bx = _seg000;                              //mov bx, seg seg000
    _ds = _bx;                                  //mov ds, bx
    _al = 0x09;                                 //mov al, 9
    _ah = 0x25;                                 //mov ah, 25h
    _interrupt(33);                             //int 21h
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
loc_179E2:                                      //loc_179E2:
    _ds = _pop();                               //pop ds
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void loc_17A0E()
{
    WORD _cs = _seg000;

    if (_dx < 0x0010)                           //jb short loc_17A1A
        goto loc_17A1A;
    _ax = memory16(_cs, 0x7A71);                //mov ax, cs:word_17A71
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
loc_17A1A:                                      //loc_17A1A:
    _ax = memory16(_ds, _bx + 2);               //mov ax, [bx+2]
    memory16(_cs, 0x7A71) = _ax;                //mov cs:word_17A71, ax
    _in(_al, 96);                               //in al, 60h
    if (_al == 0xff)                            //jz short loc_17A53
        goto loc_17A53;
    _cl = _al;                                  //mov cl, al
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x4D42);                //mov bx, word_250F2
    _ah = 0x00;                                 //mov ah, 0
    _al &= 0x7f;                                //and al, 7Fh
    _di = _ax;                                  //mov di, ax
    if (!(_cl & 0x80))                          //jz short loc_17A3F
        goto loc_17A3F;
    _al = _al ^ _al;                            //xor al, al
loc_17A3F:                                      //loc_17A3F:
    memory(_ds, _bx + _di) = _al;               //mov [bx+di], al
    _STOP_("call dword ptr cs:word_17A73");     //call dword ptr cs:word_17A73
    _dx = _pop();                               //pop dx
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _popf();                                    //popf
    _STOP_("goto cs:dword_17A6D");              //jmp cs:dword_17A6D
loc_17A53:                                      //loc_17A53:
    _in(_al, 97);                               //in al, 61h
    _ah = _al;                                  //mov ah, al
    _al |= 0x80;                                //or al, 80h
    _out(97, _al);                              //out 61h, al
    _al = _ah;                                  //mov al, ah
    _out(97, _al);                              //out 61h, al
    _dx = _pop();                               //pop dx
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _al = 0x20;                                 //mov al, 20h
    _out(32, _al);                              //out 20h, al
    _ax = _pop();                               //pop ax
    _popf();                                    //popf
    return;                                     //iret
    return;                                     //retf
    _STOP_("dword_17A6D dd 0");                 //dword_17A6D dd 0
    _STOP_("word_17A71 dw 0");                  //word_17A71 dw 0
    _STOP_("word_17A73 dw 7A6Ch");              //word_17A73 dw 7A6Ch
    _STOP_("seg_17A75 dw seg seg000");          //seg_17A75 dw seg seg000
}

void sub_17A77()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4DC4);                //mov ax, word_25174
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_17AB0
        goto loc_17AB0;
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x4DC4) = _ax;                //mov word_25174, ax
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _dx = memory16(_ds, 0x4D3E);                //mov dx, word_250EE
    _bx = memory16(_ds, 0x4D40);                //mov bx, word_250F0
    _ds = _bx;                                  //mov ds, bx
    _al = 0x09;                                 //mov al, 9
    _ah = 0x25;                                 //mov ah, 25h
    _interrupt(33);                             //int 21h
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    sub_17B01();                                //call sub_17B01
loc_17AA2:                                      //loc_17AA2:
    _ah = 0x0b;                                 //mov ah, 0Bh
    _interrupt(33);                             //int 21h
    _al &= _al;                                 //and al, al
    if (_al == 0)                               //jz short loc_17AB0
        goto loc_17AB0;
    _ah = 0x07;                                 //mov ah, 7
    _interrupt(33);                             //int 21h
    goto loc_17AA2;                             //jmp short loc_17AA2
loc_17AB0:                                      //loc_17AB0:
    _ds = _pop();                               //pop ds
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void sub_17AB4()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    _STOP_("sp-trace-fail");                    //sub_17AB4 endp_failed
    _STOP_("continues");                        //sub_17ABB proc near
}

void sub_17ABB()
{
    _push(_ds);                                 //push ds
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _di = memory16(_ds, 0x4D42);                //mov di, word_250F2
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al &= 0x7f;                                //and al, 7Fh
    _di += _ax;                                 //add di, ax
    _al = memory(_ds, _di);                     //mov al, [di]
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
    _ds = _pop();                               //pop ds
    _ax &= _ax;                                 //and ax, ax
    _flags.zero = _ax == 0;
}

void loc_17ADC()
{
loc_17ADC:
    _push(_ax);                                 //push ax
    sub_17ABB();                                //call sub_17ABB
    _ax = _pop();                               //pop ax
    if (_FIXME_)                                //jz short loc_17ADC
        goto loc_17ADC;
    return;                                     //retn
    _STOP_("db 56h, 57h, 0B4h, 0Bh, 0CDh, 21h, 22h, 0C...");
    _STOP_("db 7, 0, 32h, 0E4h, 23h, 0C0h, 5Fh, 5Eh, 0...");
    _STOP_("db 0B4h, 8, 0CDh, 21h, 5Fh, 5Eh, 0C3h");//db 0B4h, 8, 0CDh, 21h, 5Fh, 5Eh, 0C3h
}

void sub_17B01()
{
    _push(_ds);                                 //push ds
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = 0x0040;                               //mov ax, 40h
    _ds = _ax;                                  //mov ds, ax
    _bx = 0x0080;                               //mov bx, 80h
    _ax = memoryBiosGet16(_ds, _bx);                   //mov ax, [bx]
    _bx = 0x001a;                               //mov bx, 1Ah
    memoryBiosSet16(_ds, _bx, _ax);                   //mov [bx], ax
    memoryBiosSet16(_ds, _bx + 2, _ax);               //mov [bx+2], ax
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _ds = _pop();                               //pop ds
}

void sub_17B4A()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1AD09();                                //call sub_1AD09
}

void sub_17B5A()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    const int arg_A = 14;                       //arg_A  = word ptr  0Eh
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _di = memory16(_ss, _bp + arg_2);           //mov di, [bp+arg_2]
    _si = memory16(_ss, _bp + arg_0);           //mov si, [bp+arg_0]
    _bx = memory16(_ss, _bp + arg_6);           //mov bx, [bp+arg_6]
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    _dx = memory16(_ss, _bp + arg_A);           //mov dx, [bp+arg_A]
    _cx = memory16(_ss, _bp + arg_8);           //mov cx, [bp+arg_8]
    _bp = _pop();                               //pop bp
    sub_1C280();                                //call sub_1C280
}

void sub_17B93()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bx = memory16(_ss, _bp + arg_4);           //mov bx, [bp+arg_4]
    _bp = _pop();                               //pop bp
    sub_1AD71();                                //call sub_1AD71
}

void sub_17BA7()
{
    sub_1AD8F();                                //call sub_1AD8F
}

void sub_17BAD()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1ADAB();                                //call sub_1ADAB
}

void sub_17BBD()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _cl = memory(_ss, _bp + arg_0);             //mov cl, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1ADC2();                                //call sub_1ADC2
}

void sub_17BCA()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bx = memory16(_ss, _bp + arg_0);           //mov bx, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1AE41();                                //call sub_1AE41
}

void sub_17BD7()  // ask video mode
{
    sub_1AE5E();                                //call sub_1AE5E
}

void sub_17BDD()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bx = memory16(_ss, _bp + arg_0);           //mov bx, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1AEE1();                                //call sub_1AEE1
}

void sub_17BFA()
{
    sub_17ABB();                                //call sub_17ABB
}

void sub_17BFE()
{
    sub_17B01();                                //call sub_17B01
}

void loc_17C40()
{
loc_17C40:
    WORD _cs = _seg000;

    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    _ax = _ax + memory16(_ds, _bx + 2);         //add ax, [bx+2]
    if ((short)_ax < (short)0x01f4)             //jl short loc_17C5B
        goto loc_17C5B;
    _ax -= 0x01f4;                              //sub ax, 1F4h
    _push(memory16(_ds, _bx + 4));              //push word ptr [bx+4]
    _push(memory16(_ds, _bx + 6));              //push word ptr [bx+6]
    _dx = _seg000;                              //mov dx, seg seg000
    _push(_dx);                                 //push dx
    _dx = 0x7c87;                               //mov dx, 7C87h
    _push(_dx);                                 //push dx
loc_17C5B:                                      //loc_17C5B:
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    _bx += 0x0008;                              //add bx, 8
    if (--_cx)                                  //loop loc_17C40
        goto loc_17C40;
    _ax = memory16(_cs, 0x7CD6);                //mov ax, cs:word_17CD6
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_cs, 0x7CD0);                //mov bx, cs:word_17CD0
    _cx = memory16(_cs, 0x7CD2);                //mov cx, cs:word_17CD2
    _dx = memory16(_cs, 0x7CD4);                //mov dx, cs:word_17CD4
    _al = 0x20;                                 //mov al, 20h
    _out(32, _al);                              //out 20h, al
    _ax = memory16(_cs, 0x7CD8);                //mov ax, cs:word_17CD8
    _push(_ax);                                 //push ax
    _popf();                                    //popf
    _ax = memory16(_cs, 0x7CCE);                //mov ax, cs:word_17CCE
    return;                                     //retf
    _flags.interrupt = false;                   //cli
    memory16(_cs, 0x7CDA) = _pop();             //pop cs:word_17CDA
    memory16(_cs, 0x7CDC) = _pop();             //pop cs:word_17CDC
    _pushf();                                   //pushf
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _dx = _seg000;                              //mov dx, seg seg000
    _push(_dx);                                 //push dx
    _dx = 0x7cb9;                               //mov dx, 7CB9h
    _push(_dx);                                 //push dx
    _push(memory16(_cs, 0x7CDC));               //push cs:word_17CDC
    _push(memory16(_cs, 0x7CDA));               //push cs:word_17CDA
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _flags.interrupt = true;                    //sti
    memory(_ds, 0x54D5) += 1;                   //inc byte_25885
    return;                                     //retf
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory(_ds, 0x54D5) -= 1;                   //dec byte_25885
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _popf();                                    //popf
    _flags.interrupt = true;                    //sti
    return;                                     //retf
    _STOP_("word_17CCE dw 0");                  //word_17CCE dw 0
    _STOP_("word_17CD0 dw 0");                  //word_17CD0 dw 0
    _STOP_("word_17CD2 dw 0");                  //word_17CD2 dw 0
    _STOP_("word_17CD4 dw 0");                  //word_17CD4 dw 0
    _STOP_("word_17CD6 dw 0");                  //word_17CD6 dw 0
    _STOP_("word_17CD8 dw 0");                  //word_17CD8 dw 0
    _STOP_("word_17CDA dw 0");                  //word_17CDA dw 0
    _STOP_("word_17CDC dw 0");                  //word_17CDC dw 0
}

void sub_17CDE()
{
    _al = memory(_ds, 0x54D4);                  //mov al, byte_25884
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al &= _al;                                 //and al, al
    if (_al == 0)                               //jz short loc_17CEA
        goto loc_17CEA;
    goto locret_17DB1;                          //jmp locret_17DB1
loc_17CEA:                                      //loc_17CEA:
    sub_17FB0();                                //call sub_17FB0
    memory16(_ds, 0x54D6) = _ax;                //mov word_25886, ax
    _cx = 0x0006;                               //mov cx, 6
loc_17CF3:                                      //loc_17CF3:
    _push(_cx);                                 //push cx
    _ax = 0x0000;                               //mov ax, 0
    _bx = _cx;                                  //mov bx, cx
    _bx -= 1;                                   //dec bx
    sub_17E62();                                //call sub_17E62
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_17CF3
        goto loc_17CF3;
    _bx = 0x54f6;                               //mov bx, 54F6h
    _cx = 0x0010;                               //mov cx, 10h
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_17D08:                                      //loc_17D08:
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _bx += 0x0002;                              //add bx, 2
    if (--_cx)                                  //loop loc_17D08
        goto loc_17D08;
    _bx = 0x5516;                               //mov bx, 5516h
    _cx = 0x0010;                               //mov cx, 10h
    _ax = 0xffff;                               //mov ax, 0FFFFh
loc_17D18:                                      //loc_17D18:
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _bx += 0x0002;                              //add bx, 2
    if (--_cx)                                  //loop loc_17D18
        goto loc_17D18;
    _cx = 0x0012;                               //mov cx, 12h
    _ax = memory16(_ds, 0x54D6);                //mov ax, word_25886
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_17D52
        goto loc_17D52;
    if (_ax >= 0xf800)                          //jnb short loc_17D52
        goto loc_17D52;
    if (_ax < 0x0951)                           //jb short loc_17D52
        goto loc_17D52;
    _cx = _ax;                                  //mov cx, ax
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _dx = _dx ^ _dx;                            //xor dx, dx
    _div(_cx);                                  //div cx
    _ax += _ax;                                 //add ax, ax
    _cx = _ax;                                  //mov cx, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _cx;                                 //add ax, cx
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _cx = _ax;                                  //mov cx, ax
loc_17D52:                                      //loc_17D52:
    _ax = _cx;                                  //mov ax, cx
    _bx = 0x0000;                               //mov bx, 0
    _dx = _seg000;                              //mov dx, seg seg000
    _cx = 0x7e7a;                               //mov cx, 7E7Ah
    sub_17E62();                                //call sub_17E62
    _ax = 0x0032;                               //mov ax, 32h
    _bx = 0x0001;                               //mov bx, 1
    _dx = _seg000;                              //mov dx, seg seg000
    _cx = 0x7e80;                               //mov cx, 7E80h
    sub_17E62();                                //call sub_17E62
    _push(_es);                                 //push es
    _ah = 0x35;                                 //mov ah, 35h
    _al = 0x08;                                 //mov al, 8
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x54D0) = _bx;                //mov word ptr dword_25880, bx
    _bx = _es;                                  //mov bx, es
    memory16(_ds, 0x54D2) = _bx;                //mov word ptr dword_25880+2, bx
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
    memory(_ds, 0x54D4) = _al;                  //mov byte_25884, al
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _push(_ds);                                 //push ds
    _ax = _seg000;                              //mov ax, seg seg000
    _ds = _ax;                                  //mov ds, ax
    _dx = 0x7c02;                               //mov dx, 7C02h
    _ah = 0x25;                                 //mov ah, 25h
    _al = 0x08;                                 //mov al, 8
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
    _popf();                                    //popf
    sub_17DB2();                                //call sub_17DB2
    _push(_es);                                 //push es
    _ax = 0x350f;                               //mov ax, 350Fh
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x54D8) = _bx;                //mov word ptr dword_25888, bx
    _bx = _es;                                  //mov bx, es
    memory16(_ds, 0x54DA) = _bx;                //mov word ptr dword_25888+2, bx
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
locret_17DB1:                                   //locret_17DB1:
    return;
}

void sub_17DB2()
{
    _ax = 0x0951;                               //mov ax, 951h
    sub_17F9A();                                //call sub_17F9A
}

void sub_17DB9()
{
    _al = memory(_ds, 0x54D4);                  //mov al, byte_25884
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al &= _al;                                 //and al, al
    if (_al == 0)                               //jz short locret_17DE7
        goto locret_17DE7;
    _push(_ds);                                 //push ds
    _lds(_dx, _ds, 0x54D8);                     //lds dx, dword_25888
    _ah = 0x25;                                 //mov ah, 25h
    _al = 0x0f;                                 //mov al, 0Fh
    _ds = _pop();                               //pop ds
    _ax = memory16(_ds, 0x54D6);                //mov ax, word_25886
    sub_17F9A();                                //call sub_17F9A
    _push(_ds);                                 //push ds
    _lds(_dx, _ds, 0x54D0);                     //lds dx, dword_25880
    _ah = 0x25;                                 //mov ah, 25h
    _al = 0x08;                                 //mov al, 8
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
    _ax = 0x0000;                               //mov ax, 0
    memory(_ds, 0x54D4) = _al;                  //mov byte_25884, al
    _ax = 0x0001;                               //mov ax, 1
locret_17DE7:                                   //locret_17DE7:
    return;
}

void sub_17DF9()
{
    _FIXME_;                                    //and bx, bx
    _bx &= _bx;
    if (_flags.sign)                            //js short loc_17E15
        goto loc_17E15;
    if ((short)_bx >= (short)0x0004)            //jge short loc_17E15
        goto loc_17E15;
    _bx += 0x0002;                              //add bx, 2
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_flags.sign)                            //js short loc_17E15
        goto loc_17E15;
    if ((short)_ax >= (short)0x01f4)            //jge short loc_17E15
        goto loc_17E15;
    sub_17E62();                                //call sub_17E62
    _ax = 0x0001;                               //mov ax, 1
    return;                                     //retn
loc_17E15:                                      //loc_17E15:
    _ax = _ax ^ _ax;                            //xor ax, ax
}

void sub_17E18()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    _STOP_("sp-trace-fail");                    //sub_17E18 endp_failed
    _STOP_("continues");                        //sub_17E1F proc near
}

void sub_17E1F()
{
    _bx = _ax;                                  //mov bx, ax
    _FIXME_;                                    //and bx, bx
    _bx &= _bx;
    if (_flags.sign)                            //js short loc_17E3A
        goto loc_17E3A;
    if ((short)_bx >= (short)0x0004)            //jge short loc_17E3A
        goto loc_17E3A;
    _bx += 0x0002;                              //add bx, 2
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = _ax;                                  //mov cx, ax
    _dx = _ax;                                  //mov dx, ax
    sub_17E62();                                //call sub_17E62
    _ax = 0x0001;                               //mov ax, 1
    return;                                     //retn
loc_17E3A:                                      //loc_17E3A:
    _ax = _ax ^ _ax;                            //xor ax, ax
}

void loc_17E5F()
{
    _ax = _ax ^ _ax;                            //xor ax, ax
}

void sub_17E62()
{
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _bx += 0x549c;                              //add bx, 549Ch
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    memory16(_ds, _bx + 6) = _cx;               //mov [bx+6], cx
    memory16(_ds, _bx + 4) = _dx;               //mov [bx+4], dx
}

void loc_17E86()
{
loc_17E86:
    memory16(_ds, _bx) += 1;                    //inc word ptr [bx]
    _bx += 0x0002;                              //add bx, 2
    if (--_cx)                                  //loop loc_17E86
        goto loc_17E86;
    _cx = 0x0004;                               //mov cx, 4
    _bx = 0x5516;                               //mov bx, 5516h
loc_17E93:                                      //loc_17E93:
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    if (_ax == 0xffff)                          //jz short loc_17EA1
        goto loc_17EA1;
    memory16(_ds, _bx) += 1;                    //inc word ptr [bx]
    if ((short)_ax >= (short)memory16(_ds, _bx + 2))//jge short loc_17EA7
        goto loc_17EA7;
loc_17EA1:                                      //loc_17EA1:
    _bx += 0x0008;                              //add bx, 8
    if (--_cx)                                  //loop loc_17E93
        goto loc_17E93;
    return;                                     //retf
loc_17EA7:                                      //loc_17EA7:
    _ax = 0xffff;                               //mov ax, 0FFFFh
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _push(_cx);                                 //push cx
    _push(_bx);                                 //push bx
    _STOP_("call dword ptr [bx+4]");            //call dword ptr [bx+4]
    _bx = _pop();                               //pop bx
    _cx = _pop();                               //pop cx
    goto loc_17EA1;                             //jmp short loc_17EA1
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _cx = memory16(_ss, _bp + 6);               //mov cx, [bp+6]
    _bp = _pop();                               //pop bp
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_flags.sign)                            //js short loc_17EDB
        goto loc_17EDB;
    if ((short)_ax >= (short)0x000e)            //jge short loc_17EDB
        goto loc_17EDB;
    _ax += 0x0002;                              //add ax, 2
    _ax += _ax;                                 //add ax, ax
    _bx = 0x54f6;                               //mov bx, 54F6h
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    memory16(_ds, _bx) = _cx;                   //mov [bx], cx
    _ax = 0x0001;                               //mov ax, 1
    return;                                     //retn
loc_17EDB:                                      //loc_17EDB:
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _bp = _pop();                               //pop bp
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_flags.sign)                            //js short loc_17EFB
        goto loc_17EFB;
    if ((short)_ax >= (short)0x000e)            //jge short loc_17EFB
        goto loc_17EFB;
    _ax += 0x0002;                              //add ax, 2
    _ax += _ax;                                 //add ax, ax
    _bx = 0x54f6;                               //mov bx, 54F6h
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    return;                                     //retn
loc_17EFB:                                      //loc_17EFB:
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _bp = _pop();                               //pop bp
loc_17F05:                                      //loc_17F05:
    _bx = memory16(_ds, 0x54F6);                //mov bx, word_258A6
    if (_ax >= _bx)                             //jnb short loc_17F05
        goto loc_17F05;
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, 0x54F6) = _ax;                //mov word_258A6, ax
    return;                                     //retn
    _ax = memory16(_ds, 0x54F6);                //mov ax, word_258A6
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _bp = _pop();                               //pop bp
    _bx = _bx ^ _bx;                            //xor bx, bx
    memory16(_ds, 0x54F8) = _bx;                //mov word_258A8, bx
loc_17F24:                                      //loc_17F24:
    if ((short)_ax > (short)memory16(_ds, 0x54F8))//jg short loc_17F24
        goto loc_17F24;
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bx = 0x5516;                               //mov bx, 5516h
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_flags.sign)                            //js short loc_17F61
        goto loc_17F61;
    if ((short)_ax >= (short)0x0004)            //jge short loc_17F61
        goto loc_17F61;
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _push(_es);                                 //push es
    _les(_ax, _ss, _bp + 8);                    //les ax, [bp+8]
    memory16(_ds, _bx + 4) = _ax;               //mov [bx+4], ax
    _ax = _es;                                  //mov ax, es
    memory16(_ds, _bx + 6) = _ax;               //mov [bx+6], ax
    _es = _pop();                               //pop es
    _ax = 0x0001;                               //mov ax, 1
    _bp = _pop();                               //pop bp
    return;                                     //retn
loc_17F61:                                      //loc_17F61:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bx = 0x5516;                               //mov bx, 5516h
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_flags.sign)                            //js short loc_17F8C
        goto loc_17F8C;
    if ((short)_ax >= (short)0x0004)            //jge short loc_17F8C
        goto loc_17F8C;
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _ax;                                 //add ax, ax
    _bx += _ax;                                 //add bx, ax
    _ax = 0xffff;                               //mov ax, 0FFFFh
    memory16(_ds, _bx + 2) = _ax;               //mov [bx+2], ax
    memory16(_ds, _bx) = _ax;                   //mov [bx], ax
    _ax = 0x0001;                               //mov ax, 1
    _bp = _pop();                               //pop bp
    return;                                     //retn
loc_17F8C:                                      //loc_17F8C:
    _ax = _ax ^ _ax;                            //xor ax, ax
    _bp = _pop();                               //pop bp
}

void sub_17F90()
{
    std::cout << "Strange calls\n";
//    _STOP_("call $+3");                         //call $+3
//    _STOP_("call $+3");                         //call $+3
//    _STOP_("call $+3");                         //call $+3
    return;                                     //retn
    _STOP_("sp-trace-fail");                    //sub_17F90 endp_failed
    _STOP_("continues");                        //sub_17F9A proc near
}

void sub_17F9A()
{
    _push(_ax);                                 //push ax
    _al = 0x36;                                 //mov al, 36h
    _out(67, _al);                              //out 43h, al
    sub_17F90();                                //call sub_17F90
    _ax = _pop();                               //pop ax
    _out(64, _al);                              //out 40h, al
    sub_17F90();                                //call sub_17F90
    _al = _ah;                                  //mov al, ah
    _out(64, _al);                              //out 40h, al
    sub_17F90();                                //call sub_17F90
}

void sub_17FB0()
{
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _cx = 0x0019;                               //mov cx, 19h
    _bx = _bx ^ _bx;                            //xor bx, bx
    _al = 0x06;                                 //mov al, 6
    _out(67, _al);                              //out 43h, al
    sub_17F90();                                //call sub_17F90
loc_17FBE:                                      //loc_17FBE:
    _flags.interrupt = false;                   //cli
    _in(_al, 64);                               //in al, 40h
    _ah = _al;                                  //mov ah, al
    sub_17F90();                                //call sub_17F90
    _in(_al, 64);                               //in al, 40h
    _flags.interrupt = true;                    //sti
    if (_al < _bh)                              //jb short loc_17FBE
        goto loc_17FBE;
    if (_al != _bh)                             //jnz short loc_17FD3
        goto loc_17FD3;
    if (_bl >= _ah)                             //jnb short loc_17FD5
        goto loc_17FD5;
loc_17FD3:                                      //loc_17FD3:
    _bl = _ah;                                  //mov bl, ah
loc_17FD5:                                      //loc_17FD5:
    _bh = _al;                                  //mov bh, al
    if (--_cx)                                  //loop loc_17FBE
        goto loc_17FBE;
    _ax = _bx;                                  //mov ax, bx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
}

void sub_17FEF()
{
    _push(_es);                                 //push es
    _push(_ds);                                 //push ds
    _push(_ax);                                 //push ax
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _al = memory(_ds, 0x54D4);                  //mov al, byte_25884
    _al &= _al;                                 //and al, al
    _ax = _pop();                               //pop ax
    if (_al == 0)                               //jz short loc_18045
        goto loc_18045;
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _push(_ax);                                 //push ax
    _push(_ds);                                 //push ds
    _ds = _dx;                                  //mov ds, dx
    _dx = _cx;                                  //mov dx, cx
    _ah = 0x25;                                 //mov ah, 25h
    _al = 0x08;                                 //mov al, 8
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
    _ax = 0x350f;                               //mov ax, 350Fh
    _interrupt(33);                             //int 21h
    memory16(_ds, 0x54D8) = _bx;                //mov word ptr dword_25888, bx
    _bx = _es;                                  //mov bx, es
    memory16(_ds, 0x54DA) = _bx;                //mov word ptr dword_25888+2, bx
    _push(_ds);                                 //push ds
    _ax = _seg000;                              //mov ax, seg seg000
    _ds = _ax;                                  //mov ds, ax
    _dx = 0x8086;                               //mov dx, 8086h
    _ah = 0x25;                                 //mov ah, 25h
    _al = 0x0f;                                 //mov al, 0Fh
    _interrupt(33);                             //int 21h
    _ds = _pop();                               //pop ds
    _ax = _pop();                               //pop ax
    _bx = 0x54de;                               //mov bx, 54DEh
    _ax += _ax;                                 //add ax, ax
    _bx += _ax;                                 //add bx, ax
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, _bx);                   //mov ax, [bx]
    _ds = _pop();                               //pop ds
    memory16(_ds, 0x54DC) = _ax;                //mov word_2588C, ax
    sub_17F9A();                                //call sub_17F9A
    _popf();                                    //popf
loc_18045:                                      //loc_18045:
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
}

void sub_1808E()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1CD50();                                //call sub_1CD50
}

void sub_1809E()
{
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    _bp = _pop();                               //pop bp
    sub_1CD82();                                //call sub_1CD82
}

void sub_180AC()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1B603();                                //call sub_1B603
}

void sub_180BC()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1B907();                                //call sub_1B907
}

void sub_185B5()
{
    WORD _cs = _seg000;

    _push(_bx);                                 //push bx
    _bx = memory16(_cs, 0x85B3);                //mov bx, cs:word_185B3
    if (_bx != 0x0000)                          //jnz short loc_185C5
        goto loc_185C5;
    sub_19115();                                //call sub_19115
    goto loc_185D9;                             //jmp short loc_185D9
loc_185C5:                                      //loc_185C5:
    if (_bx != 0x0004)                          //jnz short loc_185CF
        goto loc_185CF;
    sub_18AD0();                                //call sub_18AD0
    goto loc_185D9;                             //jmp short loc_185D9
loc_185CF:                                      //loc_185CF:
    if (_bx != 0x0001)                          //jnz short loc_185D9
        goto loc_185D9;
    sub_18E2F();                                //call sub_18E2F
    _STOP_("goto $+2");                         //jmp short $+2
loc_185D9:                                      //loc_185D9:
    _bx = _pop();                               //pop bx
}

void sub_185DB()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _ax = memory16(_cs, 0x85B3);                //mov ax, cs:word_185B3
    if (_ax != 0x0000)                          //jnz short loc_185EA
        goto loc_185EA;
    sub_191CF();                                //call sub_191CF
    goto loc_185FE;                             //jmp short loc_185FE
loc_185EA:                                      //loc_185EA:
    if (_ax != 0x0004)                          //jnz short loc_185F4
        goto loc_185F4;
    sub_18AF6();                                //call sub_18AF6
    goto loc_185FE;                             //jmp short loc_185FE
loc_185F4:                                      //loc_185F4:
    if (_ax != 0x0001)                          //jnz short loc_185FE
        goto loc_185FE;
    sub_18E48();                                //call sub_18E48
    _STOP_("goto $+2");                         //jmp short $+2
loc_185FE:                                      //loc_185FE:
    _ax = _pop();                               //pop ax
}

void sub_18600()
{
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
    _cx = memory16(_cs, 0x85B3);                //mov cx, cs:word_185B3
    if (_cx != 0x0000)                          //jnz short loc_18610
        goto loc_18610;
    sub_191D7();                                //call sub_191D7
    goto loc_18624;                             //jmp short loc_18624
loc_18610:                                      //loc_18610:
    if (_cx != 0x0004)                          //jnz short loc_1861A
        goto loc_1861A;
    sub_18B04();                                //call sub_18B04
    goto loc_18624;                             //jmp short loc_18624
loc_1861A:                                      //loc_1861A:
    if (_cx != 0x0001)                          //jnz short loc_18624
        goto loc_18624;
    sub_18E50();                                //call sub_18E50
    _STOP_("goto $+2");                         //jmp short $+2
loc_18624:                                      //loc_18624:
    _cx = _pop();                               //pop cx
}

void sub_18626()
{
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
    _cx = memory16(_cs, 0x85B3);                //mov cx, cs:word_185B3
    if (_cx != 0x0000)                          //jnz short loc_18636
        goto loc_18636;
    sub_191DF();                                //call sub_191DF
    goto loc_1864A;                             //jmp short loc_1864A
loc_18636:                                      //loc_18636:
    if (_cx != 0x0004)                          //jnz short loc_18640
        goto loc_18640;
    sub_18B0D();                                //call sub_18B0D
    goto loc_1864A;                             //jmp short loc_1864A
loc_18640:                                      //loc_18640:
    if (_cx != 0x0001)                          //jnz short loc_1864A
        goto loc_1864A;
    sub_18E58();                                //call sub_18E58
    _STOP_("goto $+2");                         //jmp short $+2
loc_1864A:                                      //loc_1864A:
    _cx = _pop();                               //pop cx
}

void loc_18660()
{
    WORD _cs = _seg000;

    memory16(_cs, 0x8483) -= 1;                 //dec cs:word_18483
    if (memory16(_cs, 0x8483) == 0)             //jz short loc_1868C
        goto loc_1868C;
    _lds(_si, _cs, 0x8485);                     //lds si, cs:dword_18485
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _push(_bp);                                 //push bp
    sub_18809();                                //call sub_18809
    sub_185B5();                                //call sub_185B5
    _bp = _pop();                               //pop bp
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _popf();                                    //popf
    _cx = memory16(_cs, 0x85A1);                //mov cx, cs:word_185A1
    goto loc_1869C;                             //jmp short loc_1869C
loc_1868C:                                      //loc_1868C:
    _flags.interrupt = false;                   //cli
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x0000;                               //mov ax, 0
    sub_17E1F();                                //call sub_17E1F
    _ds = _pop();                               //pop ds
    goto loc_186E2;                             //jmp short loc_186E2
loc_1869C:                                      //loc_1869C:
    _bx = 0x81cc;                               //mov bx, 81CCh
loc_1869F:                                      //loc_1869F:
    _ax = memory16(_cs, _bx + 64);              //mov ax, cs:[bx+40h]
    _dx = memory16(_cs, _bx + 66);              //mov dx, cs:[bx+42h]
    if (_dx != 0xffff)                          //jnz short loc_186B2
        goto loc_186B2;
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    goto loc_1869F;                             //jmp short loc_1869F
loc_186B2:                                      //loc_186B2:
    _ax -= 1;                                   //dec ax
    if (_ax == 0x0000)                          //jz short loc_186C0
        goto loc_186C0;
    if (_ax != 0xffff)                          //jnz short loc_186D4
        goto loc_186D4;
    _dx -= 1;                                   //dec dx
    goto loc_186D4;                             //jmp short loc_186D4
loc_186C0:                                      //loc_186C0:
    if (_dx != 0x0000)                          //jnz short loc_186D4
        goto loc_186D4;
    _lds(_si, _cs, _bx);                        //lds si, cs:[bx]
    sub_1873C();                                //call sub_1873C
    memory16(_cs, _bx) = _si;                   //mov cs:[bx], si
    _si = _ds;                                  //mov si, ds
    memory16(_cs, _bx + 2) = _si;               //mov cs:[bx+2], si
loc_186D4:                                      //loc_186D4:
    memory16(_cs, _bx + 64) = _ax;              //mov cs:[bx+40h], ax
    memory16(_cs, _bx + 66) = _dx;              //mov cs:[bx+42h], dx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    if (--_cx)                                  //loop loc_1869F
        goto loc_1869F;
loc_186E2:                                      //loc_186E2:
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_186E9()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _ax = memory16(_cs, 0x85A3);                //mov ax, cs:word_185A3
    _cx = 0x0f42;                               //mov cx, 0F42h
    _mul(_cx);                                  //mul cx
    _cx = memory16(_cs, 0x85A5);                //mov cx, cs:word_185A5
    _bx = memory16(_cs, 0x85A7);                //mov bx, cs:word_185A7
    _cl = _ch;                                  //mov cl, ch
    _ch = _bl;                                  //mov ch, bl
    _div(_cx);                                  //div cx
    _cx = _ax;                                  //mov cx, ax
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = _cx;                                  //mov ax, cx
    _dx = _seg000;                              //mov dx, seg seg000
    _cx = 0x864c;                               //mov cx, 864Ch
    _bx = 0x0000;                               //mov bx, 0
    sub_17DF9();                                //call sub_17DF9
    _ds = _pop();                               //pop ds
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_18722()
{
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    sub_186E9();                                //call sub_186E9
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
}

void sub_1872E()
{
    _ah = _al;                                  //mov ah, al
    sub_189E2();                                //call sub_189E2
loc_18733:                                      //loc_18733:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    sub_189E2();                                //call sub_189E2
    if (--_cx)                                  //loop loc_18733
        goto loc_18733;
}

void sub_1873C()
{
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
loc_1873D:                                      //loc_1873D:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_al & 0x80)                             //jnz short loc_18745
        goto loc_18745;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    goto loc_18796;                             //jmp short loc_18796
loc_18745:                                      //loc_18745:
    _ch = _ch ^ _ch;                            //xor ch, ch
    if ((char)_al < (char)0xf0)                 //jl short loc_1875B
        goto loc_1875B;
    if (_al == 0xf0)                            //jz short loc_18756
        goto loc_18756;
    if (_al != 0xf7)                            //jnz short loc_18760
        goto loc_18760;
    sub_185DB();                                //call sub_185DB
    goto loc_18796;                             //jmp short loc_18796
loc_18756:                                      //loc_18756:
    sub_18600();                                //call sub_18600
    goto loc_18796;                             //jmp short loc_18796
loc_1875B:                                      //loc_1875B:
    sub_18626();                                //call sub_18626
    goto loc_18796;                             //jmp short loc_18796
loc_18760:                                      //loc_18760:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_al != 0x51)                            //jnz short loc_18773
        goto loc_18773;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_cs, 0x85A7) = _al;                  //mov byte ptr cs:word_185A7, al
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_cs, 0x85A5) = _ax;                //mov cs:word_185A5, ax
    goto loc_18796;                             //jmp short loc_18796
loc_18773:                                      //loc_18773:
    if (_al != 0x2f)                            //jnz short loc_18784
        goto loc_18784;
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ax = 0xffff;                               //mov ax, 0FFFFh
    _dx = _ax;                                  //mov dx, ax
    memory16(_cs, 0x85A1) -= 1;                 //dec cs:word_185A1
    goto loc_187A0;                             //jmp short loc_187A0
loc_18784:                                      //loc_18784:
    if (_al != 0x20)                            //jnz short loc_18790
        goto loc_18790;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    memory(_cs, _bx + 128) = _al;               //mov cs:[bx+80h], al
    goto loc_18796;                             //jmp short loc_18796
loc_18790:                                      //loc_18790:
    _cl = _ah;                                  //mov cl, ah
    _si += _cx;                                 //add si, cx
    _STOP_("goto $+2");                         //jmp short $+2
loc_18796:                                      //loc_18796:
    sub_18891();                                //call sub_18891
    if (_FIXME_)                                //jnz short loc_1879D
        goto loc_1879D;
    goto loc_1873D;                             //jmp short loc_1873D
loc_1879D:                                      //loc_1879D:
    sub_18A23();                                //call sub_18A23
loc_187A0:                                      //loc_187A0:
    _cx = _pop();                               //pop cx
}

void sub_187A2()
{
    WORD _cs = _seg000;

    _cx = memory16(_cs, 0x85A1);                //mov cx, cs:word_185A1
    _bx = 0x81cc;                               //mov bx, 81CCh
loc_187AA:                                      //loc_187AA:
    _lds(_si, _cs, _bx);                        //lds si, cs:[bx]
    sub_18891();                                //call sub_18891
    if (_FIXME_)                                //jnz short loc_187B5
        goto loc_187B5;
    sub_1873C();                                //call sub_1873C
loc_187B5:                                      //loc_187B5:
    memory16(_cs, _bx + 64) = _ax;              //mov cs:[bx+40h], ax
    memory16(_cs, _bx + 66) = _dx;              //mov cs:[bx+42h], dx
    memory16(_cs, _bx) = _si;                   //mov cs:[bx], si
    _ax = _ds;                                  //mov ax, ds
    memory16(_cs, _bx + 2) = _ax;               //mov cs:[bx+2], ax
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    if (--_cx)                                  //loop loc_187AA
        goto loc_187AA;
}

void sub_187CD()
{
    WORD _cs = _seg000;

    const int arg_0 = 4;                        //arg_0  = dword ptr  4
    const int arg_4 = 8;                        //arg_4  = dword ptr  8
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_es);                                 //push es
    _push(_ds);                                 //push ds
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _ax = memory16(_ss, _bp + arg_8);           //mov ax, [bp+arg_8]
    memory16(_cs, 0x8483) = _ax;                //mov cs:word_18483, ax
    _les(_si, _ss, _bp + arg_4);                //les si, [bp+arg_4]
    memory16(_ds, 0x5580) = _si;                //mov word ptr dword_25930, si
    _si = _es;                                  //mov si, es
    memory16(_ds, 0x5582) = _si;                //mov word ptr dword_25930+2, si
    _lds(_si, _ss, _bp + arg_0);                //lds si, [bp+arg_0]
    memory16(_cs, 0x8485) = _si;                //mov word ptr cs:dword_18485, si
    _ax = _ds;                                  //mov ax, ds
    memory16(_cs, 0x8487) = _ax;                //mov word ptr cs:dword_18485+2, ax
    sub_18809();                                //call sub_18809
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_18803
        goto loc_18803;
    sub_18722();                                //call sub_18722
    _ax = 0x0001;                               //mov ax, 1
loc_18803:                                      //loc_18803:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
}

void sub_18809()
{
    WORD _cs = _seg000;

    if (memory16(_ds, _si) != 0x544d)           //jnz short loc_1888E
        goto loc_1888E;
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (memory16(_ds, _si) != 0x6468)           //jnz short loc_1888E
        goto loc_1888E;
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (memory16(_ds, _si) != 0x0000)           //jnz short loc_1888E
        goto loc_1888E;
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (memory16(_ds, _si) != 0x0600)           //jnz short loc_1888E
        goto loc_1888E;
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    if (memory16(_ds, _si) == 0x0200)           //jz short loc_1888E
        goto loc_1888E;
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _xchg(_ah, _al);                            //xchg ah, al
    if (_ax == 0x0000)                          //jz short loc_1888E
        goto loc_1888E;
    if ((short)_ax > (short)0x0010)             //jg short loc_1888E
        goto loc_1888E;
    memory16(_cs, 0x85A1) = _ax;                //mov cs:word_185A1, ax
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _xchg(_ah, _al);                            //xchg ah, al
    if (_ah & 0x80)                             //jnz short loc_1888E
        goto loc_1888E;
    memory16(_cs, 0x85A3) = _ax;                //mov cs:word_185A3, ax
    _cx = memory16(_cs, 0x85A1);                //mov cx, cs:word_185A1
    _bx = 0x81cc;                               //mov bx, 81CCh
loc_1885E:                                      //loc_1885E:
    sub_18A23();                                //call sub_18A23
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_ax != 0x544d)                          //jnz short loc_1888E
        goto loc_1888E;
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_ax != 0x6b72)                          //jnz short loc_1888E
        goto loc_1888E;
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    if (_ax != 0x0000)                          //jnz short loc_1888E
        goto loc_1888E;
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    memory16(_cs, _bx) = _si;                   //mov cs:[bx], si
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    assert(0);////_fixme_ = _ds;                              //mov word ptr cs:[bx], ds
    _bx += 1;                                   //inc bx
    _bx += 1;                                   //inc bx
    _xchg(_ah, _al);                            //xchg ah, al
    _flags.carry = (_si + _ax) >= 0x10000;      //add si, ax
    _si += _ax;
    if (_flags.carry)                           //jb short loc_1888E
        goto loc_1888E;
    if (--_cx)                                  //loop loc_1885E
        goto loc_1885E;
    sub_187A2();                                //call sub_187A2
    _ax = 0xffff;                               //mov ax, 0FFFFh
    goto locret_18890;                          //jmp short locret_18890
loc_1888E:                                      //loc_1888E:
    _ax = _ax ^ _ax;                            //xor ax, ax
locret_18890:                                   //locret_18890:
    return;
}

void sub_18891()
{
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = _ax;                                  //mov dx, ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (!(_al & 0x80))                          //jz short loc_188DE
        goto loc_188DE;
    _ah = _al;                                  //mov ah, al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_al & 0x80)                             //jnz short loc_188AA
        goto loc_188AA;
    _ax &= 0x7f7f;                              //and ax, 7F7Fh
    _al <<= 1;                                  //shl al, 1
    _ax >>= 1;                                  //shr ax, 1
    goto loc_188DE;                             //jmp short loc_188DE
loc_188AA:                                      //loc_188AA:
    _xchg(_ax, _dx);                            //xchg ax, dx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_al & 0x80)                             //jnz short loc_188C6
        goto loc_188C6;
    _xchg(_dl, _ah);                            //xchg dl, ah
    _xchg(_dh, _dl);                            //xchg dh, dl
    _dx &= 0x7f7f;                              //and dx, 7F7Fh
    _ax <<= 1;                                  //shl ax, 1
    _al <<= 1;                                  //shl al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    goto loc_188DE;                             //jmp short loc_188DE
loc_188C6:                                      //loc_188C6:
    _ah = _al;                                  //mov ah, al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _xchg(_ax, _dx);                            //xchg ax, dx
    _dx &= 0x7f7f;                              //and dx, 7F7Fh
    _dl <<= 1;                                  //shl dl, 1
    _dx >>= 1;                                  //shr dx, 1
    _ax <<= 1;                                  //shl ax, 1
    _al <<= 1;                                  //shl al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
loc_188DE:                                      //loc_188DE:
    _push(_bx);                                 //push bx
    _bx = _ax;                                  //mov bx, ax
    _bx |= _dx;                                 //or bx, dx
    _bx = _pop();                               //pop bx
}

void sub_188E5()
{
    WORD _cs = _seg000;

    _cx = 0xffff;                               //mov cx, 0FFFFh
    _ax = memory16(_ds, 0x557A);                //mov ax, word_2592A
    _ax &= _ax;                                 //and ax, ax
    if (_ax != 0)                               //jnz short loc_18919
        goto loc_18919;
    _ax = 0x0001;                               //mov ax, 1
    memory16(_ds, 0x557A) = _ax;                //mov word_2592A, ax
    _cx = _cx ^ _cx;                            //xor cx, cx
    memory16(_ds, 0x5584) = _ax;                //mov word_25934, ax
    _push(_cx);                                 //push cx
    sub_18A75();                                //call sub_18A75
    _cx = _pop();                               //pop cx
    _ax = 0x0004;                               //mov ax, 4
    if (_FIXME_)                                //jz short loc_18906
        goto loc_18906;
    _cx |= _ax;                                 //or cx, ax
loc_18906:                                      //loc_18906:
    _push(_cx);                                 //push cx
    sub_18B2A();                                //call sub_18B2A
    _cx = _pop();                               //pop cx
    _ax = 0x0001;                               //mov ax, 1
    if (_FIXME_)                                //jz short loc_18912
        goto loc_18912;
    _cx |= _ax;                                 //or cx, ax
loc_18912:                                      //loc_18912:
    memory16(_cs, 0x85B3) = _ax;                //mov cs:word_185B3, ax
    memory16(_ds, 0x5586) = _ax;                //mov word_25936, ax
loc_18919:                                      //loc_18919:
    _ax = _cx;                                  //mov ax, cx
    _ax &= _ax;                                 //and ax, ax
}

void sub_1891E()
{
    WORD _cs = _seg000;

    _cx = 0xffff;                               //mov cx, 0FFFFh
    _ax = memory16(_ds, 0x557A);                //mov ax, word_2592A
    if (_ax != 0x0001)                          //jnz short loc_18957
        goto loc_18957;
    _ax = 0x0002;                               //mov ax, 2
    memory16(_ds, 0x557A) = _ax;                //mov word_2592A, ax
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _bp = _pop();                               //pop bp
    _cx = 0x0000;                               //mov cx, 0
loc_18939:                                      //loc_18939:
    _flags.carry = _ax & 1;                     //shr ax, 1
    _ax >>= 1;
    if (_flags.carry)                           //jb short loc_18947
        goto loc_18947;
    _cx += 1;                                   //inc cx
    if (_cx != 0x0010)                          //jnz short loc_18939
        goto loc_18939;
    _ax = _ax ^ _ax;                            //xor ax, ax
    goto loc_1895C;                             //jmp short loc_1895C
loc_18947:                                      //loc_18947:
    _ax = 0x0000;                               //mov ax, 0
    _ASSERT(0); /* unk previous */ _rcl(_ax, 1);//rcl ax, 1
    _ax <<= _cl;                                //shl ax, cl
loc_1894E:                                      //loc_1894E:
    memory16(_cs, 0x85B3) = _ax;                //mov cs:word_185B3, ax
    memory16(_ds, 0x5586) = _ax;                //mov word_25936, ax
    _cx = _ax;                                  //mov cx, ax
loc_18957:                                      //loc_18957:
    _ax = _cx;                                  //mov ax, cx
    _ax &= _ax;                                 //and ax, ax
    return;                                     //retn
loc_1895C:                                      //loc_1895C:
    _bx = 0x0001;                               //mov bx, 1
    _ax = 0x0064;                               //mov ax, 64h
    _dx = _seg000;                              //mov dx, seg seg000
    _cx = 0x9136;                               //mov cx, 9136h
    sub_17DF9();                                //call sub_17DF9
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory(_cs, 0x83EE) = _al;                  //mov cs:byte_183EE, al
    memory16(_cs, 0x83EF) = _ax;                //mov cs:word_183EF, ax
    goto loc_1894E;                             //jmp short loc_1894E
}

void sub_18977()
{
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x5586);                //mov ax, word_25936
    _ax = 0x0000;                               //mov ax, 0
    if (_ax == 0x8000)                          //jz short loc_18995
        goto loc_18995;
    _ax = 0x0000;                               //mov ax, 0
    sub_17E1F();                                //call sub_17E1F
    _ds = _pop();                               //pop ds
    sub_185B5();                                //call sub_185B5
    {sub_187CD(); return; };                    //
loc_18995:                                      //loc_18995:
    _ds = _pop();                               //pop ds
    _ax &= _ax;                                 //and ax, ax
}

void sub_18999()
{
    WORD _cs = _seg000;

    _ax = memory16(_cs, 0x85A1);                //mov ax, cs:word_185A1
    _ax &= _ax;                                 //and ax, ax
    if (_ax != 0)                               //jnz short locret_189A7
        goto locret_189A7;
    _ax = memory16(_cs, 0x8483);                //mov ax, cs:word_18483
    _ax &= _ax;                                 //and ax, ax
locret_189A7:                                   //locret_189A7:
    return;
}

void sub_189A8()
{
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x0000;                               //mov ax, 0
    sub_17E1F();                                //call sub_17E1F
    _ds = _pop();                               //pop ds
    sub_185B5();                                //call sub_185B5
}

void loc_189E0()
{
    _ds = _pop();                               //pop ds
}

void sub_189E2()
{
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
    _cx = _cx ^ _cx;                            //xor cx, cx
    _dx = 0x0331;                               //mov dx, 331h
loc_189E8:                                      //loc_189E8:
    _in(_al, _dx);                              //in al, dx
    if (--_cx && _al & 0x40)                    //loopne loc_189E8
        goto loc_189E8;
    if (_al & 0x40)                             //jnz short loc_189F5
        goto loc_189F5;
    _dx -= 1;                                   //dec dx
    _al = _ah;                                  //mov al, ah
    _out(_dx, _al);                             //out dx, al
loc_189F3:                                      //loc_189F3:
    _cx = _pop();                               //pop cx
    return;                                     //retn
loc_189F5:                                      //loc_189F5:
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x557C) = _cx;                //mov word_2592C, cx
    _ds = _pop();                               //pop ds
    memory16(_cs, 0x85A1) = _cx;                //mov cs:word_185A1, cx
    goto loc_189F3;                             //jmp short loc_189F3
}

void sub_18A07()
{
    _ah = 0x99;                                 //mov ah, 99h
    goto loc_18A0D;                             //jmp short loc_18A0D
    _ah = 0x89;                                 //mov ah, 89h
loc_18A0D:                                      //loc_18A0D:
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_dx);                                 //push dx
    sub_189E2();                                //call sub_189E2
    _ah = memory16(_ss, _bp + 4);               //mov ah, [bp+4]
    sub_189E2();                                //call sub_189E2
    _ah = memory16(_ss, _bp + 6);               //mov ah, [bp+6]
    sub_189E2();                                //call sub_189E2
    _dx = _pop();                               //pop dx
    _bp = _pop();                               //pop bp
}

void sub_18A23()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ax = _si;                                  //mov ax, si
    _si &= 0x000f;                              //and si, 0Fh
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _bx = _ds;                                  //mov bx, ds
    _ax += _bx;                                 //add ax, bx
    _ds = _ax;                                  //mov ds, ax
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_18A3B()
{
    _push(_cx);                                 //push cx
    _cx = 0x0004;                               //mov cx, 4
loc_18A3F:                                      //loc_18A3F:
    if (--_cx)                                  //loop loc_18A3F
        goto loc_18A3F;
    _cx = _pop();                               //pop cx
}

void loc_18A50()
{
loc_18A50:
    _bl = 0x7b;                                 //mov bl, 7Bh
    sub_18A65();                                //call sub_18A65
    _bl = 0x79;                                 //mov bl, 79h
    sub_18A65();                                //call sub_18A65
    _bl = 0x07;                                 //mov bl, 7
    sub_18A65();                                //call sub_18A65
    _bh += 1;                                   //inc bh
    if (--_cx)                                  //loop loc_18A50
        goto loc_18A50;
    _cx = _pop();                               //pop cx
}

void sub_18A65()
{
    _ah = _bh;                                  //mov ah, bh
    sub_189E2();                                //call sub_189E2
    _ah = _bl;                                  //mov ah, bl
    sub_189E2();                                //call sub_189E2
    _ah = 0x7f;                                 //mov ah, 7Fh
    sub_189E2();                                //call sub_189E2
}

void sub_18A75()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    if (memory16(_ds, 0x557C) == 0x0000)        //jz short loc_18AC6
        goto loc_18AC6;
    _cx = 0x1388;                               //mov cx, 1388h
    _dx = 0x0331;                               //mov dx, 331h
loc_18A86:                                      //loc_18A86:
    _in(_al, _dx);                              //in al, dx
    if (--_cx && _al & 0x40)                    //loopne loc_18A86
        goto loc_18A86;
    if (_al & 0x40)                             //jnz short loc_18AC0
        goto loc_18AC0;
    _al = 0xff;                                 //mov al, 0FFh
    _out(_dx, _al);                             //out dx, al
    _bx = 0x0003;                               //mov bx, 3
loc_18A93:                                      //loc_18A93:
    _cx = 0x1388;                               //mov cx, 1388h
    _dx = 0x0331;                               //mov dx, 331h
loc_18A99:                                      //loc_18A99:
    _in(_al, _dx);                              //in al, dx
    if (--_cx && _al & 0x80)                    //loopne loc_18A99
        goto loc_18A99;
    if (_al & 0x80)                             //jnz short loc_18ABD
        goto loc_18ABD;
    _dx = 0x0330;                               //mov dx, 330h
    _in(_al, _dx);                              //in al, dx
    if (_al != 0xfe)                            //jnz short loc_18ABD
        goto loc_18ABD;
    _cx = 0x1388;                               //mov cx, 1388h
    _dx = 0x0331;                               //mov dx, 331h
loc_18AAE:                                      //loc_18AAE:
    _in(_al, _dx);                              //in al, dx
    if (--_cx && _al & 0x40)                    //loopne loc_18AAE
        goto loc_18AAE;
    if (_al & 0x40)                             //jnz short loc_18AC0
        goto loc_18AC0;
    _dx = 0x0331;                               //mov dx, 331h
    _al = 0x3f;                                 //mov al, 3Fh
    _out(_dx, _al);                             //out dx, al
    goto loc_18AC6;                             //jmp short loc_18AC6
loc_18ABD:                                      //loc_18ABD:
    _bx -= 1;                                   //dec bx
    if (_bx != 0)                               //jnz short loc_18A93
        goto loc_18A93;
loc_18AC0:                                      //loc_18AC0:
    memory16(_ds, 0x557C) = 0x0000;             //mov word_2592C, 0
loc_18AC6:                                      //loc_18AC6:
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _cx = _pop();                               //pop cx
    _ax = memory16(_ds, 0x557C);                //mov ax, word_2592C
    _ax &= _ax;                                 //and ax, ax
}

void sub_18AD0()
{
    _push(_dx);                                 //push dx
    _push(_cx);                                 //push cx
    _push(_bx);                                 //push bx
    _push(_ax);                                 //push ax
    _bx = 0x9009;                               //mov bx, 9009h
loc_18AD7:                                      //loc_18AD7:
    _cx = 0x007f;                               //mov cx, 7Fh
loc_18ADA:                                      //loc_18ADA:
    _ah = _bh;                                  //mov ah, bh
    _ah += _bl;                                 //add ah, bl
    sub_189E2();                                //call sub_189E2
    _ah = _cl;                                  //mov ah, cl
    sub_189E2();                                //call sub_189E2
    _ah = _ah ^ _ah;                            //xor ah, ah
    sub_189E2();                                //call sub_189E2
    if (--_cx)                                  //loop loc_18ADA
        goto loc_18ADA;
    _bl -= 1;                                   //dec bl
    if (_bl != 0)                               //jnz short loc_18AD7
        goto loc_18AD7;
    _ax = _pop();                               //pop ax
    _bx = _pop();                               //pop bx
    _cx = _pop();                               //pop cx
    _dx = _pop();                               //pop dx
}

void sub_18AF6()
{
    _push(_ax);                                 //push ax
    _push(_cx);                                 //push cx
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cl = _al;                                  //mov cl, al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cl -= 1;                                   //dec cl
    sub_1872E();                                //call sub_1872E
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
}

void sub_18B04()
{
    _push(_cx);                                 //push cx
    _cl = memory(_ds, _si);                     //mov cl, [si]
    _si += 1;                                   //inc si
    sub_1872E();                                //call sub_1872E
    _cx = _pop();                               //pop cx
}

void sub_18B0D()
{
    WORD _cs = _seg000;

    _push(_cx);                                 //push cx
    if (_al & 0x0f)                             //jnz short loc_18B17
        goto loc_18B17;
    _al = _al | memory(_cs, _bx + 128);         //or al, cs:[bx+80h]
loc_18B17:                                      //loc_18B17:
    _cx = 0x0002;                               //mov cx, 2
    _ah = _al;                                  //mov ah, al
    _ah &= 0xf0;                                //and ah, 0F0h
    if (_ah != 0xc0)                            //jnz short loc_18B25
        goto loc_18B25;
    _cx -= 1;                                   //dec cx
loc_18B25:                                      //loc_18B25:
    sub_1872E();                                //call sub_1872E
    _cx = _pop();                               //pop cx
}

void sub_18B2A()
{
    _ax = 0x0001;                               //mov ax, 1
    memory16(_ds, 0x557E) = _ax;                //mov word_2592E, ax
    sub_18FB6();                                //call sub_18FB6
    if (_FIXME_)                                //jz short loc_18B3A
        goto loc_18B3A;
    sub_18EEB();                                //call sub_18EEB
    goto loc_18B40;                             //jmp short loc_18B40
loc_18B3A:                                      //loc_18B3A:
    memory16(_ds, 0x557E) = 0x0000;             //mov word_2592E, 0
loc_18B40:                                      //loc_18B40:
    _ax = memory16(_ds, 0x557E);                //mov ax, word_2592E
    _ax &= _ax;                                 //and ax, ax
}

void sub_18B6B()
{
    _push(_ax);                                 //push ax
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _push(_ds);                                 //push ds
    _push(_bx);                                 //push bx
    _push(_es);                                 //push es
    _bl = _al;                                  //mov bl, al
    _bh = _bh ^ _bh;                            //xor bh, bh
    sub_18B81();                                //call sub_18B81
    _es = _pop();                               //pop es
    _bx = _pop();                               //pop bx
    _ds = _pop();                               //pop ds
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _ax = _pop();                               //pop ax
}

void sub_18B81()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _si = _dseg;                                //mov si, seg dseg
    _ds = _si;                                  //mov ds, si
    _lds(_si, _ds, 0x5580);                     //lds si, dword_25930
    _di = memory16(_ds, _si + 12);              //mov di, [si+0Ch]
    _di += _si;                                 //add di, si
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _cx = _bx;                                  //mov cx, bx
    _bx += _bx;                                 //add bx, bx
    _bx += _cx;                                 //add bx, cx
    _di += _bx;                                 //add di, bx
    _bx = memory16(_ds, _di);                   //mov bx, [di]
    _bx += _bx;                                 //add bx, bx
    _di = _bx;                                  //mov di, bx
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _bx -= _di;                                 //sub bx, di
    _di = memory16(_ds, _si + 16);              //mov di, [si+10h]
    _di += _si;                                 //add di, si
    _di += _bx;                                 //add di, bx
    _bx = _bx ^ _bx;                            //xor bx, bx
    _push(_ds);                                 //push ds
    _push(_di);                                 //push di
    _al = _ah;                                  //mov al, ah
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
    _ah = _ah ^ _ah;                            //xor ah, ah
    sub_18BC8();                                //call sub_18BC8
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void sub_18BC8()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    _ah = 0x08;                                 //mov ah, 8
    _al = 0x00;                                 //mov al, 0
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dh = memory(_ds, _bx + _di);               //mov dh, [bx+di]
    _dh &= _dh;                                 //and dh, dh
    if (_dh == 0)                               //jz short loc_18BDE
        goto loc_18BDE;
    goto loc_18D86;                             //jmp loc_18D86
loc_18BDE:                                      //loc_18BDE:
    _dl = _al;                                  //mov dl, al
    _dl += 0xc0;                                //add dl, 0C0h
    _dh = memory(_ds, _bx + _di + 4);           //mov dh, [bx+di+4]
    _dh &= 0x07;                                //and dh, 7
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 14);          //mov ah, [bx+di+0Eh]
    _ah &= 0x01;                                //and ah, 1
    _ah = _ah ^ 0x01;                           //xor ah, 1
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _ah = _ah ^ _ah;                            //xor ah, ah
    _push(_ds);                                 //push ds
    _push(_di);                                 //push di
    _cx = _dseg;                                //mov cx, seg dseg
    _ds = _cx;                                  //mov ds, cx
    _di = 0x5593;                               //mov di, 5593h
    _di += _ax;                                 //add di, ax
    _al = memory(_ds, _di);                     //mov al, [di]
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
    _dl = _al;                                  //mov dl, al
    _dl += 0x40;                                //add dl, 40h
    _dh = memory(_ds, _bx + _di + 10);          //mov dh, [bx+di+0Ah]
    _dh &= 0x3f;                                //and dh, 3Fh
    _ah = memory(_ds, _bx + _di + 2);           //mov ah, [bx+di+2]
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah &= 0xc0;                                //and ah, 0C0h
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x60;                                //add dl, 60h
    _dh = memory(_ds, _bx + _di + 5);           //mov dh, [bx+di+5]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 8);           //mov ah, [bx+di+8]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x80;                                //add dl, 80h
    _dh = memory(_ds, _bx + _di + 6);           //mov dh, [bx+di+6]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 9);           //mov ah, [bx+di+9]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x20;                                //add dl, 20h
    _dh = memory(_ds, _bx + _di + 3);           //mov dh, [bx+di+3]
    _dh &= 0x0f;                                //and dh, 0Fh
    _ah = memory(_ds, _bx + _di + 11);          //mov ah, [bx+di+0Bh]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18C8E
        goto loc_18C8E;
    _dh |= 0x80;                                //or dh, 80h
loc_18C8E:                                      //loc_18C8E:
    _ah = memory(_ds, _bx + _di + 12);          //mov ah, [bx+di+0Ch]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18C98
        goto loc_18C98;
    _dh |= 0x40;                                //or dh, 40h
loc_18C98:                                      //loc_18C98:
    _ah = memory(_ds, _bx + _di + 7);           //mov ah, [bx+di+7]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18CA2
        goto loc_18CA2;
    _dh |= 0x20;                                //or dh, 20h
loc_18CA2:                                      //loc_18CA2:
    _ah = memory(_ds, _bx + _di + 13);          //mov ah, [bx+di+0Dh]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18CAC
        goto loc_18CAC;
    _dh |= 0x10;                                //or dh, 10h
loc_18CAC:                                      //loc_18CAC:
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x43;                                //add dl, 43h
    _dh = memory(_ds, _bx + _di + 23);          //mov dh, [bx+di+17h]
    _dh &= 0x3f;                                //and dh, 3Fh
    _ah = memory(_ds, _bx + _di + 15);          //mov ah, [bx+di+0Fh]
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah &= 0xc0;                                //and ah, 0C0h
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x63;                                //add dl, 63h
    _dh = memory(_ds, _bx + _di + 18);          //mov dh, [bx+di+12h]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 21);          //mov ah, [bx+di+15h]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x83;                                //add dl, 83h
    _dh = memory(_ds, _bx + _di + 19);          //mov dh, [bx+di+13h]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 22);          //mov ah, [bx+di+16h]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x23;                                //add dl, 23h
    _dh = memory(_ds, _bx + _di + 16);          //mov dh, [bx+di+10h]
    _dh &= 0x0f;                                //and dh, 0Fh
    _ah = memory(_ds, _bx + _di + 24);          //mov ah, [bx+di+18h]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18D32
        goto loc_18D32;
    _dh |= 0x80;                                //or dh, 80h
loc_18D32:                                      //loc_18D32:
    _ah = memory(_ds, _bx + _di + 25);          //mov ah, [bx+di+19h]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18D3C
        goto loc_18D3C;
    _dh |= 0x40;                                //or dh, 40h
loc_18D3C:                                      //loc_18D3C:
    _ah = memory(_ds, _bx + _di + 20);          //mov ah, [bx+di+14h]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18D46
        goto loc_18D46;
    _dh |= 0x20;                                //or dh, 20h
loc_18D46:                                      //loc_18D46:
    _ah = memory(_ds, _bx + _di + 26);          //mov ah, [bx+di+1Ah]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18D50
        goto loc_18D50;
    _dh |= 0x10;                                //or dh, 10h
loc_18D50:                                      //loc_18D50:
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0xe0;                                //add dl, 0E0h
    _dh = memory(_ds, _bx + _di + 28);          //mov dh, [bx+di+1Ch]
    _dh &= 0x03;                                //and dh, 3
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0xe3;                                //add dl, 0E3h
    _dh = memory(_ds, _bx + _di + 29);          //mov dh, [bx+di+1Dh]
    _dh &= 0x03;                                //and dh, 3
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
loc_18D81:                                      //loc_18D81:
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retn
loc_18D86:                                      //loc_18D86:
    _al = 0x01;                                 //mov al, 1
    _dl = _al;                                  //mov dl, al
    _dl += 0x40;                                //add dl, 40h
    _dh = memory(_ds, _bx + _di + 10);          //mov dh, [bx+di+0Ah]
    _dh &= 0x3f;                                //and dh, 3Fh
    _ah = memory(_ds, _bx + _di + 2);           //mov ah, [bx+di+2]
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah &= 0xc0;                                //and ah, 0C0h
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x60;                                //add dl, 60h
    _dh = memory(_ds, _bx + _di + 5);           //mov dh, [bx+di+5]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 8);           //mov ah, [bx+di+8]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x80;                                //add dl, 80h
    _dh = memory(_ds, _bx + _di + 6);           //mov dh, [bx+di+6]
    _dh &= 0x0f;                                //and dh, 0Fh
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _dh <<= 1;                                  //shl dh, 1
    _ah = memory(_ds, _bx + _di + 9);           //mov ah, [bx+di+9]
    _ah &= 0x0f;                                //and ah, 0Fh
    _dh |= _ah;                                 //or dh, ah
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _dl += 0x20;                                //add dl, 20h
    _dh = memory(_ds, _bx + _di + 3);           //mov dh, [bx+di+3]
    _dh &= 0x0f;                                //and dh, 0Fh
    _ah = memory(_ds, _bx + _di + 11);          //mov ah, [bx+di+0Bh]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18E05
        goto loc_18E05;
    _dh |= 0x80;                                //or dh, 80h
loc_18E05:                                      //loc_18E05:
    _ah = memory(_ds, _bx + _di + 12);          //mov ah, [bx+di+0Ch]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18E0F
        goto loc_18E0F;
    _dh |= 0x40;                                //or dh, 40h
loc_18E0F:                                      //loc_18E0F:
    _ah = memory(_ds, _bx + _di + 7);           //mov ah, [bx+di+7]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18E19
        goto loc_18E19;
    _dh |= 0x20;                                //or dh, 20h
loc_18E19:                                      //loc_18E19:
    _ah = memory(_ds, _bx + _di + 13);          //mov ah, [bx+di+0Dh]
    _ah &= _ah;                                 //and ah, ah
    if (_ah == 0)                               //jz short loc_18E23
        goto loc_18E23;
    _dh |= 0x10;                                //or dh, 10h
loc_18E23:                                      //loc_18E23:
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    goto loc_18D81;                             //jmp loc_18D81
}

void sub_18E2F()
{
    _push(_ax);                                 //push ax
    _bx = 0x0001;                               //mov bx, 1
loc_18E33:                                      //loc_18E33:
    _push(_bx);                                 //push bx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    sub_1905D();                                //call sub_1905D
    _ax = _pop();                               //pop ax
    _ax = _pop();                               //pop ax
    _ax = _pop();                               //pop ax
    _bx = _pop();                               //pop bx
    _bx += 1;                                   //inc bx
    if ((short)_bx <= (short)0x0009)            //jle short loc_18E33
        goto loc_18E33;
    _ax = _pop();                               //pop ax
}

void sub_18E48()
{
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = 0x00;                                 //mov ah, 0
    _si += _ax;                                 //add si, ax
    _ax = _pop();                               //pop ax
}

void sub_18E50()
{
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = 0x00;                                 //mov ah, 0
    _si += _ax;                                 //add si, ax
    _ax = _pop();                               //pop ax
}

void sub_18E58()
{
    WORD _cs = _seg000;

    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    if (_al & 0x0f)                             //jnz short loc_18E63
        goto loc_18E63;
    _al = _al | memory(_cs, _bx + 128);         //or al, cs:[bx+80h]
loc_18E63:                                      //loc_18E63:
    _ah = _al;                                  //mov ah, al
    _ah &= 0x0f;                                //and ah, 0Fh
    if ((char)_ah <= (char)0x08)                //jle short loc_18E6F
        goto loc_18E6F;
    goto loc_18E83;                             //jmp short loc_18E83
loc_18E6F:                                      //loc_18E6F:
    _ah = _al;                                  //mov ah, al
    _ah &= 0xf0;                                //and ah, 0F0h
    if (_ah == 0xc0)                            //jz short loc_18E8E
        goto loc_18E8E;
    if (_ah == 0x90)                            //jz short loc_18E9E
        { loc_18E9E(); return; }
    if (_ah == 0x80)                            //jz short loc_18EC7
        { loc_18EC7(); return; }
loc_18E83:                                      //loc_18E83:
    _si += 1;                                   //inc si
    _al &= 0xf0;                                //and al, 0F0h
    if (_al == 0xc0)                            //jz short loc_18E8B
        goto loc_18E8B;
    _si += 1;                                   //inc si
loc_18E8B:                                      //loc_18E8B:
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    return;                                     //retn
loc_18E8E:                                      //loc_18E8E:
    sub_18E93();                                //call sub_18E93
    goto loc_18E8B;                             //jmp short loc_18E8B
}

void sub_18E93()
{
    _al &= 0x0f;                                //and al, 0Fh
    _ah = _al;                                  //mov ah, al
    _al = memory(_ds, _si);                     //mov al, [si]
    sub_18B6B();                                //call sub_18B6B
    _si += 1;                                   //inc si
}

void loc_18E9E()
{
    sub_18EA3();                                //call sub_18EA3
    _STOP_("goto loc_18E8B");                   //jmp short loc_18E8B
}

void sub_18EA3()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _al &= 0x0f;                                //and al, 0Fh
    _ah = _ah ^ _ah;                            //xor ah, ah
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _push(_ax);                                 //push ax
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_18EB9
        goto loc_18EB9;
    _ax = 0x0020;                               //mov ax, 20h
loc_18EB9:                                      //loc_18EB9:
    _push(_ax);                                 //push ax
    sub_1905D();                                //call sub_1905D
    _sp += 0x0008;                              //add sp, 8
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void loc_18EC7()
{
    _push(_ax);                                 //push ax
    _al &= 0x0f;                                //and al, 0Fh
    _al += 0xb0;                                //add al, 0B0h
    _ah = _al;                                  //mov ah, al
    _push(_ds);                                 //push ds
    _push(_bx);                                 //push bx
    _bx = _seg000;                              //mov bx, seg seg000
    _ds = _bx;                                  //mov ds, bx
    _bx = 0x80cc;                               //mov bx, 80CCh
    _flags.carry = (_bl + _ah) >= 0x100;        //add bl, ah
    _bl += _ah;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    _al = memory(_ds, _bx);                     //mov al, [bx]
    _bx = _pop();                               //pop bx
    _ds = _pop();                               //pop ds
    _al &= 0xdf;                                //and al, 0DFh
    sub_19007();                                //call sub_19007
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ax = _pop();                               //pop ax
    _STOP_("goto loc_18E8B");                   //jmp short loc_18E8B
}

void sub_18EEB()
{
    _push(_ax);                                 //push ax
    _push(_ax);                                 //push ax
    _ah = 0x40;                                 //mov ah, 40h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x41;                                 //mov ah, 41h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x42;                                 //mov ah, 42h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x48;                                 //mov ah, 48h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x49;                                 //mov ah, 49h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x4a;                                 //mov ah, 4Ah
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x50;                                 //mov ah, 50h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x51;                                 //mov ah, 51h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x52;                                 //mov ah, 52h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x43;                                 //mov ah, 43h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x44;                                 //mov ah, 44h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x45;                                 //mov ah, 45h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x4b;                                 //mov ah, 4Bh
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x4c;                                 //mov ah, 4Ch
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x4d;                                 //mov ah, 4Dh
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x53;                                 //mov ah, 53h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x54;                                 //mov ah, 54h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_ax);                                 //push ax
    _ah = 0x55;                                 //mov ah, 55h
    _al = 0xff;                                 //mov al, 0FFh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _ax = 0x0100;                               //mov ax, 100h
loc_18F91:                                      //loc_18F91:
    sub_19007();                                //call sub_19007
    _ah += 1;                                   //inc ah
    if (_ah != 0x40)                            //jnz short loc_18F91
        goto loc_18F91;
    _ax = 0x6000;                               //mov ax, 6000h
loc_18F9E:                                      //loc_18F9E:
    sub_19007();                                //call sub_19007
    _ah += 1;                                   //inc ah
    if (_ah != 0xf6)                            //jnz short loc_18F9E
        goto loc_18F9E;
    _ax = 0x0406;                               //mov ax, 406h
    sub_19007();                                //call sub_19007
    _ax = 0xbd00;                               //mov ax, 0BD00h
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
}

void sub_18FB6()
{
    _push(_ax);                                 //push ax
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _ax = 0x0460;                               //mov ax, 460h
    sub_19007();                                //call sub_19007
    _ax = 0x0480;                               //mov ax, 480h
    sub_19007();                                //call sub_19007
    sub_19056();                                //call sub_19056
    _push(_ax);                                 //push ax
    _ax = 0x02ff;                               //mov ax, 2FFh
    sub_19007();                                //call sub_19007
    _ax = 0x0421;                               //mov ax, 421h
    sub_19007();                                //call sub_19007
    _cx = 0x00c7;                               //mov cx, 0C7h
loc_18FD8:                                      //loc_18FD8:
    sub_19056();                                //call sub_19056
    if (--_cx)                                  //loop loc_18FD8
        goto loc_18FD8;
    sub_19056();                                //call sub_19056
    _push(_ax);                                 //push ax
    _ax = 0x0460;                               //mov ax, 460h
    sub_19007();                                //call sub_19007
    _ax = 0x0480;                               //mov ax, 480h
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _ah = 0x00;                                 //mov ah, 0
    _al &= 0xe0;                                //and al, 0E0h
    _dl &= 0xe0;                                //and dl, 0E0h
    if (_al != 0xc0)                            //jnz short loc_19001
        goto loc_19001;
    if (_dl != 0x00)                            //jnz short loc_19001
        goto loc_19001;
    _ah = 0x01;                                 //mov ah, 1
loc_19001:                                      //loc_19001:
    _ah &= _ah;                                 //and ah, ah
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
}

void sub_19007()
{
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _push(_bx);                                 //push bx
    _bx = _seg000;                              //mov bx, seg seg000
    _ds = _bx;                                  //mov ds, bx
    _bx = 0x80cc;                               //mov bx, 80CCh
    _flags.carry = (_bl + _ah) >= 0x100;        //add bl, ah
    _bl += _ah;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    memory(_ds, _bx) = _al;                     //mov [bx], al
    _bx = _pop();                               //pop bx
    _ds = _pop();                               //pop ds
    _dx = 0x0388;                               //mov dx, 388h
    _xchg(_al, _ah);                            //xchg al, ah
    _out(_dx, _al);                             //out dx, al
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _dx += 1;                                   //inc dx
    _xchg(_al, _ah);                            //xchg al, ah
    _out(_dx, _al);                             //out dx, al
    _dx -= 1;                                   //dec dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _in(_al, _dx);                              //in al, dx
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
    _popf();                                    //popf
}

void sub_19056()
{
    _push(_dx);                                 //push dx
    _dx = 0x0388;                               //mov dx, 388h
    _in(_al, _dx);                              //in al, dx
    _dx = _pop();                               //pop dx
}

void sub_1905D()
{
    const int arg_0 = 4;                        //arg_0  = byte ptr  4
    const int arg_2 = 6;                        //arg_2  = byte ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _push(_ax);                                 //push ax
    _ah = 0x08;                                 //mov ah, 8
    _al = 0x00;                                 //mov al, 0
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _push(_bx);                                 //push bx
    _push(_ds);                                 //push ds
    _push(_ax);                                 //push ax
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ss, _bp + arg_6);           //mov bx, [bp+arg_6]
    _bh = _bh ^ _bh;                            //xor bh, bh
    _dl = memory(_ds, _bx + 21907);             //mov dl, [bx+5593h]
    _dl += 0x43;                                //add dl, 43h
    _ah = _dl;                                  //mov ah, dl
    _push(_ds);                                 //push ds
    _push(_bx);                                 //push bx
    _bx = _seg000;                              //mov bx, seg seg000
    _ds = _bx;                                  //mov ds, bx
    _bx = 0x80cc;                               //mov bx, 80CCh
    _flags.carry = (_bl + _ah) >= 0x100;        //add bl, ah
    _bl += _ah;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    _al = memory(_ds, _bx);                     //mov al, [bx]
    _bx = _pop();                               //pop bx
    _ds = _pop();                               //pop ds
    _ah = 0x20;                                 //mov ah, 20h
    _dh = _dh - memory(_ss, _bp + arg_2);       //sub dh, [bp+arg_2]
    _dh >>= 1;                                  //shr dh, 1
    _dh >>= 1;                                  //shr dh, 1
    _dh >>= 1;                                  //shr dh, 1
    _dh >>= 1;                                  //shr dh, 1
    _dh &= 0x3f;                                //and dh, 3Fh
    _ah -= _dh;                                 //sub ah, dh
    _dh = _ah;                                  //mov dh, ah
    _dh &= 0x3f;                                //and dh, 3Fh
    _al &= 0xc0;                                //and al, 0C0h
    _dh |= _al;                                 //or dh, al
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    _ah = _dl;                                  //mov ah, dl
    _al = _dh;                                  //mov al, dh
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
    _ds = _pop();                               //pop ds
    _bx = _pop();                               //pop bx
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ss, _bp + arg_4);           //mov bx, [bp+arg_4]
    _di = 0x55b4;                               //mov di, 55B4h
    _cl = memory(_ds, _bx + _di);               //mov cl, [bx+di]
    _cl -= 1;                                   //dec cl
    _di = 0x5614;                               //mov di, 5614h
    _al = memory(_ds, _bx + _di);               //mov al, [bx+di]
    _ah = _ah ^ _ah;                            //xor ah, ah
    _bx = _ax;                                  //mov bx, ax
    _bx += _bx;                                 //add bx, bx
    _di = 0x559c;                               //mov di, 559Ch
    _ax = memory16(_ds, _bx + _di);             //mov ax, [bx+di]
    _ax &= 0x03ff;                              //and ax, 3FFh
    _push(_ax);                                 //push ax
    _ah = _al;                                  //mov ah, al
    _al = 0xa0;                                 //mov al, 0A0h
    _al = _al + memory(_ss, _bp + arg_6);       //add al, byte ptr [bp+arg_6]
    _xchg(_ah, _al);                            //xchg ah, al
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _ds = _pop();                               //pop ds
    _al = _ah;                                  //mov al, ah
    _al &= 0x03;                                //and al, 3
    _cl &= 0x07;                                //and cl, 7
    _cl <<= 1;                                  //shl cl, 1
    _cl <<= 1;                                  //shl cl, 1
    _al += _cl;                                 //add al, cl
    _al = _al + memory(_ss, _bp + arg_0);       //add al, [bp+arg_0]
    _ah = _ah ^ _ah;                            //xor ah, ah
    _push(_ax);                                 //push ax
    _ah = _al;                                  //mov ah, al
    _al = 0xb0;                                 //mov al, 0B0h
    _al = _al + memory(_ss, _bp + arg_6);       //add al, byte ptr [bp+arg_6]
    _xchg(_al, _ah);                            //xchg al, ah
    sub_19007();                                //call sub_19007
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _bp = _pop();                               //pop bp
}

void sub_19115()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _bx = 0x83cc;                               //mov bx, 83CCh
    _cx = 0x000f;                               //mov cx, 0Fh
    _al = _al ^ _al;                            //xor al, al
loc_19120:                                      //loc_19120:
    memory(_cs, _bx) = _al;                     //mov cs:[bx], al
    _bx += 1;                                   //inc bx
    if (--_cx)                                  //loop loc_19120
        goto loc_19120;
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _al = _al ^ _al;                            //xor al, al
    memory(_cs, 0x83EE) = _al;                  //mov cs:byte_183EE, al
    _in(_al, 97);                               //in al, 61h
    _al &= 0xfc;                                //and al, 0FCh
    _out(97, _al);                              //out 61h, al
}

void loc_19147()
{
    WORD _cs = _seg000;

    memory(_cs, 0x83EC) = _ax;                  //mov word ptr cs:byte_180CC+320h, ax
    _ax += 1;                                   //inc ax
    _bx = 0x8473;                               //mov bx, 8473h
    _bx += _ax;                                 //add bx, ax
    _cl = memory(_cs, _bx);                     //mov cl, cs:[bx]
    _bx = 0x83f1;                               //mov bx, 83F1h
    _flags.carry = (_bl + _cl) >= 0x100;        //add bl, cl
    _bl += _cl;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    _cl = memory(_cs, _bx);                     //mov cl, cs:[bx]
    _ch = _ch ^ _ch;                            //xor ch, ch
    _bx = 0x83cc;                               //mov bx, 83CCh
    _bx += _ax;                                 //add bx, ax
    _al = memory(_cs, _bx);                     //mov al, cs:[bx]
    if (_al >= 0x0a)                            //jnb short loc_1916F
        goto loc_1916F;
    _al = _al ^ _al;                            //xor al, al
loc_1916F:                                      //loc_1916F:
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax += _ax;                                 //add ax, ax
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_191A9
        goto loc_191A9;
    _ax += 0x0030;                              //add ax, 30h
    _ax += _cx;                                 //add ax, cx
    _bx = 0x8489;                               //mov bx, 8489h
    _bx += _ax;                                 //add bx, ax
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    if (_ax == memory16(_cs, 0x83EF))           //jz short loc_19190
        goto loc_19190;
    _push(_ax);                                 //push ax
    sub_191B9();                                //call sub_191B9
    _ax = _pop();                               //pop ax
loc_19190:                                      //loc_19190:
    memory16(_cs, 0x83EF) = _ax;                //mov cs:word_183EF, ax
    _al = memory(_cs, 0x83EE);                  //mov al, cs:byte_183EE
    _al &= _al;                                 //and al, al
    if (_al != 0)                               //jnz short locret_191A8
        goto locret_191A8;
    _al += 1;                                   //inc al
    memory(_cs, 0x83EE) = _al;                  //mov cs:byte_183EE, al
    _in(_al, 97);                               //in al, 61h
    _al |= 0x03;                                //or al, 3
loc_191A6:                                      //loc_191A6:
    _out(97, _al);                              //out 61h, al
locret_191A8:                                   //locret_191A8:
    return;                                     //retf
loc_191A9:                                      //loc_191A9:
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory(_cs, 0x83EE) = _al;                  //mov cs:byte_183EE, al
    memory16(_cs, 0x83EF) = _ax;                //mov cs:word_183EF, ax
    _in(_al, 97);                               //in al, 61h
    _al &= 0xfc;                                //and al, 0FCh
    goto loc_191A6;                             //jmp short loc_191A6
}

void sub_191B9()
{
    _push(_ax);                                 //push ax
    _al = 0xb6;                                 //mov al, 0B6h
    _out(67, _al);                              //out 43h, al
    sub_18A3B();                                //call sub_18A3B
    _ax = _pop();                               //pop ax
    _out(66, _al);                              //out 42h, al
    sub_18A3B();                                //call sub_18A3B
    _al = _ah;                                  //mov al, ah
    _out(66, _al);                              //out 42h, al
    sub_18A3B();                                //call sub_18A3B
}

void sub_191CF()
{
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = 0x00;                                 //mov ah, 0
    _si += _ax;                                 //add si, ax
    _ax = _pop();                               //pop ax
}

void sub_191D7()
{
    _push(_ax);                                 //push ax
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = 0x00;                                 //mov ah, 0
    _si += _ax;                                 //add si, ax
    _ax = _pop();                               //pop ax
}

void sub_191DF()
{
    WORD _cs = _seg000;

    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _ah = _al;                                  //mov ah, al
    _ah &= 0xf0;                                //and ah, 0F0h
    if (_ah == 0xc0)                            //jz short loc_19227
        goto loc_19227;
    if (_al & 0x0f)                             //jnz short loc_191F4
        goto loc_191F4;
    _al = _al | memory(_cs, _bx + 128);         //or al, cs:[bx+80h]
loc_191F4:                                      //loc_191F4:
    _bx = 0x83cc;                               //mov bx, 83CCh
    _ah = _al;                                  //mov ah, al
    _ah &= 0x0f;                                //and ah, 0Fh
    _flags.carry = (_bl + _ah) >= 0x100;        //add bl, ah
    _bl += _ah;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    _al &= 0xf0;                                //and al, 0F0h
    if (_al == 0x90)                            //jz short loc_19219
        goto loc_19219;
    if (_al == 0x80)                            //jz short loc_19210
        goto loc_19210;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _lodsb<MemAuto, DirAuto>();                 //lodsb
loc_1920D:                                      //loc_1920D:
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retn
loc_19210:                                      //loc_19210:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al = _al ^ _al;                            //xor al, al
loc_19214:                                      //loc_19214:
    memory(_cs, _bx) = _al;                     //mov cs:[bx], al
    goto loc_1920D;                             //jmp short loc_1920D
loc_19219:                                      //loc_19219:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_al == 0x00)                            //jz short loc_19225
        goto loc_19225;
    _al = _ah;                                  //mov al, ah
    goto loc_19214;                             //jmp short loc_19214
loc_19225:                                      //loc_19225:
    goto loc_19214;                             //jmp short loc_19214
loc_19227:                                      //loc_19227:
    sub_1922C();                                //call sub_1922C
    goto loc_1920D;                             //jmp short loc_1920D
}

void sub_1922C()
{
    WORD _cs = _seg000;

    _al &= 0x0f;                                //and al, 0Fh
    _ah = _al;                                  //mov ah, al
    _al = memory(_ds, _si);                     //mov al, [si]
    _push(_bx);                                 //push bx
    _bx = 0x8473;                               //mov bx, 8473h
    _flags.carry = (_bl + _ah) >= 0x100;        //add bl, ah
    _bl += _ah;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    memory(_cs, _bx) = _al;                     //mov cs:[bx], al
    _bx = _pop();                               //pop bx
    _si += 1;                                   //inc si
}

void sub_1927C()  // mouse
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = 0x0000;                               //mov ax, 0
    _interrupt(51);                             //int 33h
    memory(_ds, 0x5674) = _al;                  //mov byte_25A24, al
    _ax = _ax ^ 0xffff;                         //xor ax, 0FFFFh
    _push(_ax);                                 //push ax
    _ax = 0x0004;                               //mov ax, 4
    _cx = 0x0000;                               //mov cx, 0
    _dx = _cx;                                  //mov dx, cx
    _interrupt(51);                             //int 33h
    _ax = 0x0007;                               //mov ax, 7
    _cx = 0x0000;                               //mov cx, 0
    _dx = 0x0280;                               //mov dx, 280h
    _interrupt(51);                             //int 33h
    _ax = 0x0008;                               //mov ax, 8
    _cx = 0x0000;                               //mov cx, 0
    _dx = 0x00c8;                               //mov dx, 0C8h
    _interrupt(51);                             //int 33h
    _ax = _pop();                               //pop ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void loc_192D6()
{
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _al = memory(_ds, 0x5674);                  //mov al, byte_25A24
    if (!(_al & 0xff))                          //jz short loc_19301
        goto loc_19301;
    _ax = 0x0003;                               //mov ax, 3
    _interrupt(51);                             //int 33h
    _dx = memory16(_ss, _bp + 4);               //mov dx, [bp+4]
    _ax = 0x0004;                               //mov ax, 4
    _interrupt(51);                             //int 33h
loc_19301:                                      //loc_19301:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("db 57h, 56h, 55h, 1Eh, 6, 0A0h, 74h, 56h, ...");
    _STOP_("db 9, 0B8h, 3, 0, 0CDh, 33h, 0D1h, 0F9h, 8...");
    _STOP_("db 1Fh, 5Dh, 5Eh, 5Fh, 0C3h, 57h, 56h, 55h...");
    _STOP_("db 74h, 56h, 0A8h, 0FFh, 74h, 7, 0B8h, 3, ...");
    _STOP_("db 8Bh, 0C2h, 7, 1Fh, 5Dh, 5Eh, 5Fh, 0C3h,...");
    _STOP_("db 1Eh, 6, 0A0h, 74h, 56h, 0A8h, 0FFh, 74h...");
    _STOP_("db 3, 0, 0CDh, 33h, 8Bh, 0C3h, 25h, 3, 0, ...");
    _STOP_("db 5Eh, 5Fh, 0C3h");                //db 5Eh, 5Fh, 0C3h
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ss, _bp + 4);               //mov di, [bp+4]
    _bx = memory16(_ss, _bp + 10);              //mov bx, [bp+0Ah]
    _ax = memory16(_ss, _bp + 8);               //mov ax, [bp+8]
    sub_1CDA0();                                //call sub_1CDA0
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ss, _bp + 4);               //mov di, [bp+4]
    _bx = memory16(_ss, _bp + 10);              //mov bx, [bp+0Ah]
    _ax = memory16(_ss, _bp + 8);               //mov ax, [bp+8]
    sub_1CDE5();                                //call sub_1CDE5
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ss, _bp + 4);               //mov di, [bp+4]
    sub_1CE29();                                //call sub_1CE29
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
}

void sub_193A4()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1CE50();                                //call sub_1CE50
}

void sub_193B1()
{
    sub_1CE6F();                                //call sub_1CE6F
}

void sub_193B8()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1BBB8();                                //call sub_1BBB8
}

void sub_193C8()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1BDFE();                                //call sub_1BDFE
}

void sub_193D8()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    sub_1FBAD();                                //call sub_1FBAD
    _bp = _pop();                               //pop bp
}

void sub_19406()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    sub_1FC68();                                //call sub_1FC68
    _bp = _pop();                               //pop bp
}

void sub_19410()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    sub_1FC92();                                //call sub_1FC92
    _bp = _pop();                               //pop bp
}

void sub_19424()
{
    sub_1FFF7();                                //call sub_1FFF7
}

void sub_1942A()
{
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    sub_20077();                                //call sub_20077
    _bp = _pop();                               //pop bp
}

void sub_19434()
{
    _STOP_("goto $+2");                         //jmp short $+2
loc_19436:                                      //loc_19436:
    _STOP_("goto $+2");                         //jmp short $+2
locret_19438:                                   //locret_19438:
    return;
}

void sub_19439()
{
    _ax = memory16(_ds, 0x683E);                //mov ax, word_26BEE
}

void sub_19440()
{
    if (memory16(_ds, 0x683E) != 0x0000)        //jnz short sub_19451
        { sub_19451(); return; }
    _in(_al, 97);                               //in al, 61h
    _al |= 0x03;                                //or al, 3
    sub_19434();                                //call sub_19434
    _out(97, _al);                              //out 61h, al
}

void sub_19451()
{
    _in(_al, 97);                               //in al, 61h
    _al &= 0xfc;                                //and al, 0FCh
    sub_19434();                                //call sub_19434
    _out(97, _al);                              //out 61h, al
}

void sub_1945B()
{
    WORD _cs = _seg000;

    if (_ax == 0x00ff)                          //jz short loc_19467
        goto loc_19467;
    if (memory16(_cs, 0x946C) < _ax)            //jb short locret_1946B
        goto locret_1946B;
loc_19467:                                      //loc_19467:
    memory16(_cs, 0x946C) = _ax;                //mov cs:word_1946C, ax
locret_1946B:                                   //locret_1946B:
    return;
}

void sub_1946E()
{
    _ax = memory16(_ds, 0x683E);                //mov ax, word_26BEE
    _ax = 0x00ff;                               //mov ax, 0FFh
    if (_ax == 0x0000)                          //jz short loc_19481
        goto loc_19481;
    _ax = 0x0000;                               //mov ax, 0
    sub_1945B();                                //call sub_1945B
    goto locret_19487;                          //jmp short locret_19487
loc_19481:                                      //loc_19481:
    sub_1945B();                                //call sub_1945B
    sub_19451();                                //call sub_19451
locret_19487:                                   //locret_19487:
    return;
}

void sub_19488()
{
    WORD _cs = _seg000;

    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    const int arg_A = 14;                       //arg_A  = word ptr  0Eh
    const int arg_C = 16;                       //arg_C  = word ptr  10h
    const int arg_E = 18;                       //arg_E  = word ptr  12h
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    sub_1945B();                                //call sub_1945B
    _ax = 0xffff;                               //mov ax, 0FFFFh
    if (_FIXME_)                                //jb short loc_194FA
        goto loc_194FA;
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    memory16(_cs, 0x9788) = _ax;                //mov cs:word_19788, ax
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_cs, 0x978A) = _ax;                //mov cs:word_1978A, ax
    _ax = memory16(_ss, _bp + arg_6);           //mov ax, [bp+arg_6]
    memory16(_cs, 0x9796) = _ax;                //mov cs:word_19796, ax
    memory16(_cs, 0x978C) = _ax;                //mov cs:word_1978C, ax
    _ax = memory16(_ss, _bp + arg_8);           //mov ax, [bp+arg_8]
    memory16(_cs, 0x978E) = _ax;                //mov cs:word_1978E, ax
    _ax = memory16(_ss, _bp + arg_A);           //mov ax, [bp+arg_A]
    memory16(_cs, 0x9790) = _ax;                //mov cs:word_19790, ax
    _ax = memory16(_ss, _bp + arg_C);           //mov ax, [bp+arg_C]
    memory16(_cs, 0x9792) = _ax;                //mov cs:word_19792, ax
    memory16(_cs, 0x9798) = _ax;                //mov cs:word_19798, ax
    _ax = memory16(_ss, _bp + arg_E);           //mov ax, [bp+arg_E]
    memory16(_cs, 0x9794) = _ax;                //mov cs:word_19794, ax
    memory(_cs, 0x979A) = 0x0f;                 //mov cs:byte_1979A, 0Fh
    _cx = 0x9631;                               //mov cx, 9631h
    memory16(_cs, 0x97A1) = _cx;                //mov cs:word_197A1, cx
    _dx = _seg000;                              //mov dx, seg seg000
    memory16(_cs, 0x979F) = _dx;                //mov cs:word_1979F, dx
    _ax = memory16(_ss, _bp + arg_A);           //mov ax, [bp+arg_A]
    _bx = 0x0002;                               //mov bx, 2
    sub_17DF9();                                //call sub_17DF9
    sub_19440();                                //call sub_19440
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_194FA:                                      //loc_194FA:
    _popf();                                    //popf
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
}

void sub_19502()
{
    WORD _cs = _seg000;

    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    const int arg_8 = 12;                       //arg_8  = word ptr  0Ch
    const int arg_A = 14;                       //arg_A  = word ptr  0Eh
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _pushf();                                   //pushf
    _flags.interrupt = false;                   //cli
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    sub_1945B();                                //call sub_1945B
    _ax = 0xffff;                               //mov ax, 0FFFFh
    if (_FIXME_)                                //jb short loc_19565
        goto loc_19565;
    _ax = memory16(_ss, _bp + arg_2);           //mov ax, [bp+arg_2]
    memory16(_cs, 0x9788) = _ax;                //mov cs:word_19788, ax
    _ax = memory16(_ss, _bp + arg_4);           //mov ax, [bp+arg_4]
    memory16(_cs, 0x978A) = _ax;                //mov cs:word_1978A, ax
    _ax = memory16(_ss, _bp + arg_6);           //mov ax, [bp+arg_6]
    _ax = memory16(_ss, _bp + arg_6);           //mov ax, [bp+arg_6]
    memory16(_cs, 0x9790) = _ax;                //mov cs:word_19790, ax
    _ax = memory16(_ss, _bp + arg_8);           //mov ax, [bp+arg_8]
    memory16(_cs, 0x9792) = _ax;                //mov cs:word_19792, ax
    memory16(_cs, 0x9798) = _ax;                //mov cs:word_19798, ax
    _ax = memory16(_ss, _bp + arg_A);           //mov ax, [bp+arg_A]
    memory16(_cs, 0x9794) = _ax;                //mov cs:word_19794, ax
    memory(_cs, 0x979A) = 0x0f;                 //mov cs:byte_1979A, 0Fh
    _cx = 0x96c4;                               //mov cx, 96C4h
    memory16(_cs, 0x97A1) = _cx;                //mov cs:word_197A1, cx
    _dx = _seg000;                              //mov dx, seg seg000
    memory16(_cs, 0x979F) = _dx;                //mov cs:word_1979F, dx
    _ax = memory16(_ss, _bp + arg_6);           //mov ax, [bp+arg_6]
    _bx = 0x0002;                               //mov bx, 2
    sub_17DF9();                                //call sub_17DF9
    sub_19440();                                //call sub_19440
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_19565:                                      //loc_19565:
    _popf();                                    //popf
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
}

void loc_195AD()
{
    WORD _cs = _seg000;

    _popf();                                    //popf
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    sub_19439();                                //call sub_19439
    if (_FIXME_)                                //jnz short loc_19627
        goto loc_19627;
    memory(_cs, 0x979A) += 1;                   //inc cs:byte_1979A
    if (!(memory(_cs, 0x979A) & 0x10))          //jz short loc_1960F
        goto loc_1960F;
    _ax = _ax ^ memory16(_cs, 0x979B);          //xor ax, cs:word_1979B
    _ax += 0x2345;                              //add ax, 2345h
    _ax = _ax ^ memory16(_cs, 0x979C);          //xor ax, cs:word_1979B+1
    _ax = _ax ^ memory16(_cs, 0x979D);          //xor ax, cs:word_1979D
    _ax &= 0xdb6d;                              //and ax, 0DB6Dh
    memory16(_cs, 0x979B) = _ax;                //mov cs:word_1979B, ax
    _ax += 0x4567;                              //add ax, 4567h
    _ax = _ax ^ memory16(_cs, 0x979C);          //xor ax, cs:word_1979B+1
    memory16(_cs, 0x979D) = _ax;                //mov cs:word_1979D, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory(_cs, 0x979A) = _al;                  //mov cs:byte_1979A, al
    _al = 0xb4;                                 //mov al, 0B4h
    _out(67, _al);                              //out 43h, al
    sub_19434();                                //call sub_19434
    _ax = memory16(_cs, 0x978A);                //mov ax, cs:word_1978A
    _out(66, _al);                              //out 42h, al
    sub_19434();                                //call sub_19434
    _xchg(_al, _ah);                            //xchg al, ah
    _out(66, _al);                              //out 42h, al
loc_1960F:                                      //loc_1960F:
    _ax = memory16(_cs, 0x979B);                //mov ax, cs:word_1979B
    _rol(_ax, 1);                               //rol ax, 1
    memory16(_cs, 0x979B) = _ax;                //mov cs:word_1979B, ax
    _in(_al, 97);                               //in al, 61h
    _ah &= 0x02;                                //and ah, 2
    _ah |= 0x01;                                //or ah, 1
    _al &= 0xfd;                                //and al, 0FDh
    _al |= _ah;                                 //or al, ah
    _out(97, _al);                              //out 61h, al
loc_19627:                                      //loc_19627:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retf
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    sub_19439();                                //call sub_19439
    if (_FIXME_)                                //jnz short loc_196BA
        goto loc_196BA;
    memory16(_cs, 0x9798) -= 1;                 //dec cs:word_19798
    if (memory16(_cs, 0x9798) != 0)             //jnz short loc_19672
        goto loc_19672;
    _ax = memory16(_cs, 0x9792);                //mov ax, cs:word_19792
    memory16(_cs, 0x9798) = _ax;                //mov cs:word_19798, ax
    _ax = memory16(_cs, 0x9790);                //mov ax, cs:word_19790
    _ax = _ax + memory16(_cs, 0x9794);          //add ax, cs:word_19794
    memory16(_cs, 0x9790) = _ax;                //mov cs:word_19790, ax
    _cx = memory16(_cs, 0x97A1);                //mov cx, cs:word_197A1
    _dx = memory16(_cs, 0x979F);                //mov dx, cs:word_1979F
    _ax = memory16(_cs, 0x9790);                //mov ax, cs:word_19790
    _bx = 0x0002;                               //mov bx, 2
    sub_17DF9();                                //call sub_17DF9
loc_19672:                                      //loc_19672:
    memory16(_cs, 0x9796) -= 1;                 //dec cs:word_19796
    if (memory16(_cs, 0x9796) != 0)             //jnz short loc_196BA
        goto loc_196BA;
    memory16(_cs, 0x9788) -= 1;                 //dec cs:word_19788
    if (memory16(_cs, 0x9788) != 0)             //jnz short loc_19691
        goto loc_19691;
    _ax = 0x00ff;                               //mov ax, 0FFh
    sub_1945B();                                //call sub_1945B
    _ax = 0x0002;                               //mov ax, 2
    sub_17E1F();                                //call sub_17E1F
    sub_19451();                                //call sub_19451
    goto loc_196BA;                             //jmp short loc_196BA
loc_19691:                                      //loc_19691:
    _ax = memory16(_cs, 0x978C);                //mov ax, cs:word_1978C
    memory16(_cs, 0x9796) = _ax;                //mov cs:word_19796, ax
    _ax = memory16(_cs, 0x978A);                //mov ax, cs:word_1978A
    _ax = _ax + memory16(_cs, 0x978E);          //add ax, cs:word_1978E
    memory16(_cs, 0x978A) = _ax;                //mov cs:word_1978A, ax
    _al = 0xb6;                                 //mov al, 0B6h
    _out(67, _al);                              //out 43h, al
    sub_19434();                                //call sub_19434
    _ax = memory16(_cs, 0x978A);                //mov ax, cs:word_1978A
    _out(66, _al);                              //out 42h, al
    sub_19434();                                //call sub_19434
    _xchg(_al, _ah);                            //xchg al, ah
    _out(66, _al);                              //out 42h, al
loc_196BA:                                      //loc_196BA:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retf
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    sub_19439();                                //call sub_19439
    if (_FIXME_)                                //jz short loc_196D5
        goto loc_196D5;
    goto loc_1977E;                             //jmp loc_1977E
loc_196D5:                                      //loc_196D5:
    memory(_cs, 0x979A) += 1;                   //inc cs:byte_1979A
    if (!(memory(_cs, 0x979A) & 0x10))          //jz short loc_1971E
        goto loc_1971E;
    _ax = _ax ^ memory16(_cs, 0x979B);          //xor ax, cs:word_1979B
    _ax += 0x2345;                              //add ax, 2345h
    _ax = _ax ^ memory16(_cs, 0x979C);          //xor ax, cs:word_1979B+1
    _ax = _ax ^ memory16(_cs, 0x979D);          //xor ax, cs:word_1979D
    memory16(_cs, 0x979B) = _ax;                //mov cs:word_1979B, ax
    _ax += 0x4567;                              //add ax, 4567h
    _ax = _ax ^ memory16(_cs, 0x979C);          //xor ax, cs:word_1979B+1
    memory16(_cs, 0x979D) = _ax;                //mov cs:word_1979D, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory(_cs, 0x979A) = _al;                  //mov cs:byte_1979A, al
    _al = 0xb4;                                 //mov al, 0B4h
    _out(67, _al);                              //out 43h, al
    sub_19434();                                //call sub_19434
    _ax = memory16(_cs, 0x978A);                //mov ax, cs:word_1978A
    _out(66, _al);                              //out 42h, al
    sub_19434();                                //call sub_19434
    _xchg(_al, _ah);                            //xchg al, ah
    _out(66, _al);                              //out 42h, al
loc_1971E:                                      //loc_1971E:
    memory16(_cs, 0x9798) -= 1;                 //dec cs:word_19798
    if (memory16(_cs, 0x9798) != 0)             //jnz short loc_19766
        goto loc_19766;
    memory16(_cs, 0x9788) -= 1;                 //dec cs:word_19788
    if (memory16(_cs, 0x9788) != 0)             //jnz short loc_1973D
        goto loc_1973D;
    _ax = 0x00ff;                               //mov ax, 0FFh
    sub_1945B();                                //call sub_1945B
    _ax = 0x0002;                               //mov ax, 2
    sub_17E1F();                                //call sub_17E1F
    sub_19451();                                //call sub_19451
    goto loc_1977E;                             //jmp short loc_1977E
loc_1973D:                                      //loc_1973D:
    _ax = memory16(_cs, 0x9792);                //mov ax, cs:word_19792
    memory16(_cs, 0x9798) = _ax;                //mov cs:word_19798, ax
    _ax = memory16(_cs, 0x9790);                //mov ax, cs:word_19790
    _ax = _ax + memory16(_cs, 0x9794);          //add ax, cs:word_19794
    memory16(_cs, 0x9790) = _ax;                //mov cs:word_19790, ax
    _cx = memory16(_cs, 0x97A1);                //mov cx, cs:word_197A1
    _dx = memory16(_cs, 0x979F);                //mov dx, cs:word_1979F
    _ax = memory16(_cs, 0x9790);                //mov ax, cs:word_19790
    _bx = 0x0002;                               //mov bx, 2
    sub_17DF9();                                //call sub_17DF9
loc_19766:                                      //loc_19766:
    _ax = memory16(_cs, 0x979B);                //mov ax, cs:word_1979B
    _rol(_ax, 1);                               //rol ax, 1
    memory16(_cs, 0x979B) = _ax;                //mov cs:word_1979B, ax
    _in(_al, 97);                               //in al, 61h
    _ah &= 0x02;                                //and ah, 2
    _ah |= 0x01;                                //or ah, 1
    _al &= 0xfd;                                //and al, 0FDh
    _al |= _ah;                                 //or al, ah
    _out(97, _al);                              //out 61h, al
loc_1977E:                                      //loc_1977E:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retf
    _STOP_("word_19788 dw 0");                  //word_19788 dw 0
    _STOP_("word_1978A dw 0");                  //word_1978A dw 0
    _STOP_("word_1978C dw 0");                  //word_1978C dw 0
    _STOP_("word_1978E dw 0");                  //word_1978E dw 0
    _STOP_("word_19790 dw 0");                  //word_19790 dw 0
    _STOP_("word_19792 dw 0");                  //word_19792 dw 0
    _STOP_("word_19794 dw 0");                  //word_19794 dw 0
    _STOP_("word_19796 dw 0");                  //word_19796 dw 0
    _STOP_("word_19798 dw 0");                  //word_19798 dw 0
    _STOP_("byte_1979A db 0");                  //byte_1979A db 0
    _STOP_("word_1979B dw 0");                  //word_1979B dw 0
    _STOP_("word_1979D dw 0");                  //word_1979D dw 0
    _STOP_("word_1979F dw 0");                  //word_1979F dw 0
    _STOP_("word_197A1 dw 0");                  //word_197A1 dw 0
}

void sub_197A4()  // ask audio mode
{
    sub_202C0();                                //call sub_202C0
}

void sub_197AA()
{
    sub_17ABB();                                //call sub_17ABB
}

void sub_197AE()
{
    sub_17B01();                                //call sub_17B01
}

void sub_197C5()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _bp = _pop();                               //pop bp
    sub_1BEA1();                                //call sub_1BEA1
}

void sub_197D5()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1BEBB();                                //call sub_1BEBB
}

void sub_197F1()
{
    sub_1BF0B();                                //call sub_1BF0B
}

void sub_19804()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1BF7C();                                //call sub_1BF7C
}

void sub_19814()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bx = memory16(_ss, _bp + arg_0);           //mov bx, [bp+arg_0]
    _bp = _pop();                               //pop bp
    sub_1BF99();                                //call sub_1BF99
}

void sub_19821()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    const int arg_4 = 8;                        //arg_4  = word ptr  8
    const int arg_6 = 10;                       //arg_6  = word ptr  0Ah
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _bx = memory16(_ss, _bp + arg_2);           //mov bx, [bp+arg_2]
    _cx = memory16(_ss, _bp + arg_4);           //mov cx, [bp+arg_4]
    _dx = memory16(_ss, _bp + arg_6);           //mov dx, [bp+arg_6]
    _bp = _pop();                               //pop bp
    sub_1BFB2();                                //call sub_1BFB2
}

void sub_19837()
{
    const int arg_0 = 4;                        //arg_0  = word ptr  4
    const int arg_2 = 6;                        //arg_2  = word ptr  6
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _ax = memory16(_ss, _bp + arg_0);           //mov ax, [bp+arg_0]
    _dx = memory16(_ss, _bp + arg_2);           //mov dx, [bp+arg_2]
    _bp = _pop();                               //pop bp
    sub_1BFD1();                                //call sub_1BFD1
}

void sub_19864()
{
    sub_20360();                                //call sub_20360
}

void __setupio()
{
    WORD _cs = _seg000;

    _al = memory(_ds, 0x6990);                  //mov al, byte_26D40
    _cbw();                                     //cbw
    _push(_ax);                                 //push ax
    _isatty();                                  //call _isatty
    _cx = _pop();                               //pop cx
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_19C75
        goto loc_19C75;
    memory16(_ds, 0x698E) &= 0xfdff;            //and word_26D3E, 0FDFFh
loc_19C75:                                      //loc_19C75:
    _ax = 0x0200;                               //mov ax, 200h
    _push(_ax);                                 //push ax
    if (!(memory16(_ds, 0x698E) & 0x0200))      //jz short loc_19C86
        goto loc_19C86;
    _ax = 0x0001;                               //mov ax, 1
    goto loc_19C88;                             //jmp short loc_19C88
loc_19C86:                                      //loc_19C86:
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_19C88:                                      //loc_19C88:
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _ax = 0x698c;                               //mov ax, 698Ch
    _push(_ax);                                 //push ax
    _setvbuf();                                 //call _setvbuf
    _sp += 0x000c;                              //add sp, 0Ch
    _al = memory(_ds, 0x69A4);                  //mov al, byte_26D54
    _cbw();                                     //cbw
    _push(_ax);                                 //push ax
    _isatty();                                  //call _isatty
    _cx = _pop();                               //pop cx
    _ax |= _ax;                                 //or ax, ax
    if (_ax != 0)                               //jnz short loc_19CAD
        goto loc_19CAD;
    memory16(_ds, 0x69A2) &= 0xfdff;            //and word_26D52, 0FDFFh
loc_19CAD:                                      //loc_19CAD:
    _ax = 0x0200;                               //mov ax, 200h
    _push(_ax);                                 //push ax
    if (!(memory16(_ds, 0x69A2) & 0x0200))      //jz short loc_19CBE
        goto loc_19CBE;
    _ax = 0x0002;                               //mov ax, 2
    goto loc_19CC0;                             //jmp short loc_19CC0
loc_19CBE:                                      //loc_19CBE:
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_19CC0:                                      //loc_19CC0:
    _push(_ax);                                 //push ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dx = _dx ^ _dx;                            //xor dx, dx
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _push(_ds);                                 //push ds
    _ax = 0x69a0;                               //mov ax, 69A0h
    _push(_ax);                                 //push ax
    _setvbuf();                                 //call _setvbuf
    _sp += 0x000c;                              //add sp, 0Ch
    return;                                     //retn
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_es);                                 //push es
    _push(_ds);                                 //push ds
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _bp = _sp;                                  //mov bp, sp
    memory16(_ds, 0xA200) = _sp;                //mov word_2A5B0, sp
    _push(memory16(_ss, _bp + 4));              //push word ptr [bp+4]
    _push(memory16(_ss, _bp + 0));              //push word ptr [bp+0]
    _push(memory16(_ss, _bp + 16));             //push word ptr [bp+10h]
    _ax = memory16(_ss, _bp + 2);               //mov ax, [bp+2]
    _ax &= 0x00ff;                              //and ax, 0FFh
    _push(_ax);                                 //push ax
    word_2A5AE();                               //call word_2A5AE
    _sp += 0x0008;                              //add sp, 8
    memory16(_ss, _bp + 16) = _ax;              //mov [bp+10h], ax
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ds = _pop();                               //pop ds
    _es = _pop();                               //pop es
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //iret
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _STOP_("___first db    0");                 //___first db    0
    _STOP_("___last  db    0");                 //___last  db    0
    _STOP_("___rover db    0");                 //___rover db    0
    _STOP_("word_1A4F6 dw 0");                  //word_1A4F6 dw 0
    _STOP_("word_1A4F8 dw 0");                  //word_1A4F8 dw 0
    _STOP_("unk_1A4FA db    0");                //unk_1A4FA db    0
N_LDIV:                                         //N_LDIV@:
    _cx = _pop();                               //pop cx
    _push(_cs);                                 //push cs
    _push(_cx);                                 //push cx
LDIV:                                           //LDIV@:
    _cx = _cx ^ _cx;                            //xor cx, cx
    _STOP_("goto loc_1A904");                   //jmp short loc_1A904
    _STOP_("byte_1AA4C db 2 dup(0)");           //byte_1AA4C db 2 dup(0)
unknown_libname_1:                              //unknown_libname_1:
    memory16(_ds, 0x6BB0) = _pop();             //pop word_26F60
    memory16(_ds, 0x6BB2) = _pop();             //pop word_26F62
    memory16(_ds, 0x6BB4) = _pop();             //pop word_26F64
    memory(_cs, 0xAA4C) = _ds;                  //mov word ptr cs:byte_1AA4C, ds
    memory16(_ds, 0x6BB6) = _si;                //mov word_26F66, si
    memory16(_ds, 0x6BB8) = _di;                //mov word_26F68, di
    _flags.direction = false;                   //cld
    _es = memory16(_ds, 0x79);                  //mov es, word ptr unk_20429
    _si = 0x0080;                               //mov si, 80h
    _ah = _ah ^ _ah;                            //xor ah, ah
    assert(0);//_lods(memory(_es, _si));                    //lods byte ptr es:[si]
    _ax += 1;                                   //inc ax
    _bp = _es;                                  //mov bp, es
    _xchg(_dx, _si);                            //xchg dx, si
    _xchg(_ax, _bx);                            //xchg ax, bx
    _si = memory16(_ds, 0x73);                  //mov si, word ptr dword_20423
    _si += 1;                                   //inc si
    _si += 1;                                   //inc si
    _cx = 0x0001;                               //mov cx, 1
    if (memory(_ds, 0x7B) < 0x03)               //jb short loc_1AA9A
        goto loc_1AA9A;
    _es = memory16(_ds, 0x75);                  //mov es, word ptr dword_20423+2
    _di = _si;                                  //mov di, si
    _cl = 0x7f;                                 //mov cl, 7Fh
    _al = _al ^ _al;                            //xor al, al
    _repne_scasb();                             //repne scasb
    if (_cx == 0)                               //jcxz short loc_1AB05
        { loc_1AB05(); return; }
    _cl = _cl ^ 0x7f;                           //xor cl, 7Fh
loc_1AA9A:                                      //loc_1AA9A:
    _push(_ax);                                 //push ax
    _ax = _cx;                                  //mov ax, cx
    _ax += _bx;                                 //add ax, bx
    _ax += 1;                                   //inc ax
    _ax &= 0xfffe;                              //and ax, 0FFFEh
    _di = _sp;                                  //mov di, sp
    _flags.carry = _di < _ax;                   //sub di, ax
    _di -= _ax;
    if (_flags.carry)                           //jb short loc_1AB05
        { loc_1AB05(); return; }
    _sp = _di;                                  //mov sp, di
    _push(_es);                                 //push es
    _ds = _pop();                               //pop ds
    _push(_ss);                                 //push ss
    _es = _pop();                               //pop es
    _push(_cx);                                 //push cx
    _cx -= 1;                                   //dec cx
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _al = _al ^ _al;                            //xor al, al
    _stosb<MemAuto, DirAuto>();                 //stosb
    _ds = _bp;                                  //mov ds, bp
    _xchg(_si, _dx);                            //xchg si, dx
    _xchg(_bx, _cx);                            //xchg bx, cx
    _ax = _bx;                                  //mov ax, bx
    _dx = _ax;                                  //mov dx, ax
    _bx += 1;                                   //inc bx
loc_1AAC1:                                      //loc_1AAC1:
    sub_1AADD();                                //call sub_1AADD
    if (_FIXME_)                                //ja short loc_1AACD
        goto loc_1AACD;
loc_1AAC6:                                      //loc_1AAC6:
    if (_FIXME_)                                //jb short loc_1AB08
        _STOP_("goto loc_1AB08");
    sub_1AADD();                                //call sub_1AADD
    if (_FIXME_)                                //ja short loc_1AAC6
        goto loc_1AAC6;
loc_1AACD:                                      //loc_1AACD:
    if (_al == 0x20)                            //jz short loc_1AAD9
        goto loc_1AAD9;
    if (_al == 0x0d)                            //jz short loc_1AAD9
        goto loc_1AAD9;
    if (_al != 0x09)                            //jnz short loc_1AAC1
        goto loc_1AAC1;
loc_1AAD9:                                      //loc_1AAD9:
    _al = _al ^ _al;                            //xor al, al
    goto loc_1AAC1;                             //jmp short loc_1AAC1
}

void sub_1AADD()
{
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_1AAE8
        goto loc_1AAE8;
    _dx += 1;                                   //inc dx
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al |= _al;                                 //or al, al
    if (_al != 0)                               //jnz short loc_1AAE8
        goto loc_1AAE8;
    _bx += 1;                                   //inc bx
loc_1AAE8:                                      //loc_1AAE8:
    _xchg(_ah, _al);                            //xchg ah, al
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = true;                        //stc
    if (_cx == 0)                               //jcxz short locret_1AB04
        goto locret_1AB04;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cx -= 1;                                   //dec cx
    _al -= 0x22;                                //sub al, 22h
    if (_al == 0)                               //jz short locret_1AB04
        goto locret_1AB04;
    _al += 0x22;                                //add al, 22h
    if (_al != 0x5c)                            //jnz short loc_1AB02
        goto loc_1AB02;
    if (memory(_ds, _si) != 0x22)               //jnz short loc_1AB02
        goto loc_1AB02;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _cx -= 1;                                   //dec cx
loc_1AB02:                                      //loc_1AB02:
    _si |= _si;                                 //or si, si
locret_1AB04:                                   //locret_1AB04:
    return;
}

void loc_1AB05()
{
loc_1AB05:
    WORD _cs = _seg000;

    _STOP_("goto _abort");                      //jmp _abort
loc_1AB08:                                      //loc_1AB08:
    _cx = _pop();                               //pop cx
    _cx += _dx;                                 //add cx, dx
    _ds = memory(_cs, 0xAA4C);                  //mov ds, word ptr cs:byte_1AA4C
    memory16(_ds, 0x6BAA) = _bx;                //mov word_26F5A, bx
    _bx += 1;                                   //inc bx
    _bx += _bx;                                 //add bx, bx
    _bx += _bx;                                 //add bx, bx
    _si = _sp;                                  //mov si, sp
    _bp = _sp;                                  //mov bp, sp
    _flags.carry = _bp < _bx;                   //sub bp, bx
    _bp -= _bx;
    if (_flags.carry)                           //jb short loc_1AB05
        goto loc_1AB05;
    _sp = _bp;                                  //mov sp, bp
    memory16(_ds, 0x6BAC) = _bp;                //mov word_26F5C, bp
    memory16(_ds, 0x6BAE) = _ss;                //mov word_26F5E, ss
loc_1AB2B:                                      //loc_1AB2B:
    if (_cx == 0)                               //jcxz short loc_1AB3E
        goto loc_1AB3E;
    memory16(_ss, _bp + 0) = _si;               //mov [bp+0], si
    memory16(_ss, _bp + 2) = _ss;               //mov word ptr [bp+2], ss
    _bp += 0x0004;                              //add bp, 4
loc_1AB36:                                      //loc_1AB36:
    assert(0);//_lods(memory(_ss, _si));                    //lods byte ptr ss:[si]
    _al |= _al;                                 //or al, al
    if (--_cx && _al != 0)                      //loopne loc_1AB36
        goto loc_1AB36;
    if (_al == 0)                               //jz short loc_1AB2B
        goto loc_1AB2B;
loc_1AB3E:                                      //loc_1AB3E:
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ss, _bp + 0) = _ax;               //mov [bp+0], ax
    memory16(_ss, _bp + 2) = _ax;               //mov [bp+2], ax
    _ds = memory(_cs, 0xAA4C);                  //mov ds, word ptr cs:byte_1AA4C
    _si = memory16(_ds, 0x6BB6);                //mov si, word_26F66
    _di = memory16(_ds, 0x6BB8);                //mov di, word_26F68
    _push(memory16(_ds, 0x6BB4));               //push word_26F64
    _push(memory16(_ds, 0x6BB2));               //push word_26F62
    _ax = memory16(_ds, 0x6BAA);                //mov ax, word_26F5A
    memory16(_ds, 0x69) = _ax;                  //mov word ptr unk_20419, ax
    _ax = memory16(_ds, 0x6BAE);                //mov ax, word_26F5E
    memory16(_ds, 0x6D) = _ax;                  //mov word_2041D, ax
    _ax = memory16(_ds, 0x6BAC);                //mov ax, word_26F5C
    memory16(_ds, 0x6B) = _ax;                  //mov word ptr unk_2041B, ax
    _STOP_("goto word_26F60");                  //jmp word_26F60
    _STOP_("db 53h, 74h, 61h, 63h, 6Bh, 20h, 6Fh, 76h,...");
    _STOP_("db 6Ch, 6Fh, 77h, 21h, 0Dh, 0Ah, 24h");//db 6Ch, 6Fh, 77h, 21h, 0Dh, 0Ah, 24h
    _STOP_("db 0BEh");                          //db 0BEh
loc_1AB91:                                      //loc_1AB91:
    _out(77, _al);                              //out 4Dh, al
    sub_1B1DD();                                //call sub_1B1DD
    _cx = 0x0002;                               //mov cx, 2
    sub_1AFB7();                                //call sub_1AFB7
    _bx = memory16(_es, _di + 28);              //mov bx, es:[di+1Ch]
    _push(_bx);                                 //push bx
    _bx = _di;                                  //mov bx, di
    _push(_es);                                 //push es
    sub_1B0BD();                                //call sub_1B0BD
    _ds = _pop();                               //pop ds
    _si = _bx;                                  //mov si, bx
    _bx = _pop();                               //pop bx
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 19916);           //mov ax, [bx+4DCCh]
    _ds = _pop();                               //pop ds
    ax();                                       //call ax
    return;                                     //retn
    _bx = 0x0101;                               //mov bx, 101h
loc_1ABBE:                                      //loc_1ABBE:
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ah = _bh;                                  //mov ah, bh
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    sub_1B15F();                                //call sub_1B15F
    sub_1ABD7();                                //call sub_1ABD7
    _bl += 1;                                   //inc bl
    _bh <<= 1;                                  //shl bh, 1
    if ((char)_bh > (char)0x08)                 //jg short locret_1AC01
        { locret_1AC01(); return; }
    goto loc_1ABBE;                             //jmp short loc_1ABBE
}

void sub_1ABD7()
{
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1ABED:                                      //loc_1ABED:
    if (_dl == _ch)                             //jz short loc_1ABFF
        goto loc_1ABFF;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _rep_stosw<MemAuto, DirAuto>();             //rep stosw
    _cl = _dh;                                  //mov cl, dh
    _di -= _cx;                                 //sub di, cx
    _di += _bp;                                 //add di, bp
    goto loc_1ABED;                             //jmp short loc_1ABED
loc_1ABFF:                                      //loc_1ABFF:
    _di = _pop();                               //pop di
}

void locret_1AC01()
{
    return;                                     //retn
    _bx = 0x0101;                               //mov bx, 101h
loc_1AC05:                                      //loc_1AC05:
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ah = _bh;                                  //mov ah, bh
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    sub_1B15F();                                //call sub_1B15F
    goto loc_1AC1D;                             //jmp short loc_1AC1D
loc_1AC12:                                      //loc_1AC12:
    _bl += 1;                                   //inc bl
    _bh <<= 1;                                  //shl bh, 1
    if ((char)_bh > (char)0x08)                 //jg short locret_1AC55
        goto locret_1AC55;
    goto loc_1AC05;                             //jmp short loc_1AC05
loc_1AC1D:                                      //loc_1AC1D:
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    _si = _ax;                                  //mov si, ax
    _si = (~_si);                               //not si
loc_1AC37:                                      //loc_1AC37:
    if (_dl == _ch)                             //jz short loc_1AC52
        goto loc_1AC52;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
loc_1AC3F:                                      //loc_1AC3F:
    memory16(_es, _di) &= _si;                  //and es:[di], si
    memory16(_es, _di) |= _ax;                  //or es:[di], ax
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_1AC3F
        goto loc_1AC3F;
    _cl = _dh;                                  //mov cl, dh
    _di -= _cx;                                 //sub di, cx
    _di += _bp;                                 //add di, bp
    goto loc_1AC37;                             //jmp short loc_1AC37
loc_1AC52:                                      //loc_1AC52:
    _di = _pop();                               //pop di
    goto loc_1AC12;                             //jmp short loc_1AC12
locret_1AC55:                                   //locret_1AC55:
    return;                                     //retn
    _bx = 0x0101;                               //mov bx, 101h
loc_1AC59:                                      //loc_1AC59:
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ah = _bh;                                  //mov ah, bh
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _ax);                             //out dx, ax
    sub_1B15F();                                //call sub_1B15F
    _ax = (~_ax);                               //not ax
    sub_1AC74();                                //call sub_1AC74
    _bl += 1;                                   //inc bl
    _bh <<= 1;                                  //shl bh, 1
    if ((char)_bh > (char)0x08)                 //jg short locret_1ACA4
        _STOP_("goto locret_1ACA4");
    goto loc_1AC59;                             //jmp short loc_1AC59
}

void sub_1AC74()
{
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    _STOP_("sp-trace-fail");                    //sub_1AC74 endp_failed
    _STOP_("continues");                        //loc_1AC8A:
}

void sub_1AD09()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    memory16(_es, _di + 0x18) = 0x0014;         //mov word ptr es:[di+18h], 14h
    memory16(_es, _di + 0x1A) = 0x0019;         //mov word ptr es:[di+1Ah], 19h
    memory(_ds, 0x541F) = 0x02;                 //mov byte_257CF, 2
    memory(_ds, 0x5420) = 0x01;                 //mov byte_257D0, 1
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_2518A[bx]
    {
      case 0: break;
      default:
        _ASSERT(0);
    }
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AD51()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    if (_bx == 0x0000)                          //jz short loc_1AD6B
        goto loc_1AD6B;
    if ((short)_bx > (short)0x0001)             //jg short loc_1AD6B
        goto loc_1AD6B;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx -= 1;                                   //dec bx
    memory(_ds, _bx + 21264) = 0x00;            //mov byte ptr [bx+5310h], 0
loc_1AD6B:                                      //loc_1AD6B:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AD71()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _es = _bp;                                  //mov es, bp
    _bp = memory16(_ds, 0x541D);                //mov bp, word_257CD
    _bp <<= 1;                                  //shl bp, 1
    _STOP_("");                                 //call ds:off_257E5[bp]
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AD8F()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
 //   std::cout << "Reading ds from seg001 instead of dseg!?\n";
    _bx <<= 1;                                  //shl bx, 1
//    _STOP_("goto off_2580D[bx]");               //jmp off_2580D[bx]
//loc_1AD9E:                                      //loc_1AD9E:
    _ax = 0x000d;                               //mov ax, 0Dh
    _interrupt(16);                             //int 10h
    //_STOP_("goto $+2");                         //jmp short $+2
loc_1ADA5:                                      //loc_1ADA5:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    return;                                     //retf
    _STOP_("sp-trace-fail");                    //sub_1AD8F endp_failed
    _STOP_("continues");                        //sub_1ADAB proc far
}

void sub_1ADAB()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory16(_ds, 0x5313) = _dx;                //mov word_256C3, dx
    memory16(_ds, 0x5311) = _ax;                //mov word_256C1, ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1ADC2()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    if (_cl != 0x00)                            //jnz short loc_1ADCE
        goto loc_1ADCE;
    goto loc_1AE3B;                             //jmp short loc_1AE3B
loc_1ADCE:                                      //loc_1ADCE:
    if ((char)_cl > (char)0x02)                 //jg short loc_1AE3B
        goto loc_1AE3B;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _push(_cx);                                 //push cx
    _di = 0x5310;                               //mov di, 5310h
    _cx = 0x0001;                               //mov cx, 1
    _flags.direction = false;                   //cld
    _al = _al ^ _al;                            //xor al, al
    _rep_stosb<MemAuto, DirAuto>();             //rep stosb
    _cx = _pop();                               //pop cx
    _si = 0x5415;                               //mov si, 5415h
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cl -= 1;                                   //dec cl
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    _ASSERT(_bx == 4);
    goto loc_1ADF8;
    //_STOP_("goto off_25819[bx]");               //jmp off_25819[bx]
loc_1ADF8:                                      //loc_1ADF8:
    memory16(_ds, _si + 2) = 0xa000;            //mov word ptr [si+2], 0A000h
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    if (memory16(_ds, 0x541D) != 0x0005)        //jnz short loc_1AE17
        goto loc_1AE17;
    memory16(_ds, _si + 6) = 0xa400;            //mov word ptr [si+6], 0A400h
    memory16(_ds, _si + 4) = 0x0000;            //mov word ptr [si+4], 0
    nullsub_4();                                //call nullsub_4
    goto loc_1AE3B;                             //jmp short loc_1AE3B
loc_1AE17:                                      //loc_1AE17:
    memory16(_ds, _si + 6) = 0xa200;            //mov word ptr [si+6], 0A200h
    memory16(_ds, _si + 4) = 0x0000;            //mov word ptr [si+4], 0
    goto loc_1AE3B;                             //jmp short loc_1AE3B
loc_1AE23:                                      //loc_1AE23:
    if ((char)_cl < (char)0x01)                 //jl short loc_1AE3B
        goto loc_1AE3B;
loc_1AE28:                                      //loc_1AE28:
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    sub_1CD50();                                //call sub_1CD50
    memory16(_ds, _si + 2) = _dx;               //mov [si+2], dx
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _si += 0x0004;                              //add si, 4
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
    if (--_cx)                                  //loop loc_1AE28
        goto loc_1AE28;
loc_1AE3B:                                      //loc_1AE3B:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AE41()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _es = _ax;                                  //mov es, ax
    _bp = memory16(_ds, 0x541D);                //mov bp, word_257CD
    _bp <<= 1;                                  //shl bp, 1
    _STOP_("");                                 //call ds:off_257F1[bp]
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AE5E()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x0002;                               //mov ax, 2
    _interrupt(16);                             //int 10h
    _si = 0x529c;                               //mov si, 529Ch
    _bh = _bh ^ _bh;                            //xor bh, bh
    _dx = 0x0101;                               //mov dx, 101h
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(16);                             //int 10h
    _ah = 0x09;                                 //mov ah, 9
    _dx = _si;                                  //mov dx, si
    _interrupt(33);                             //int 21h
    _si = 0x52b4;                               //mov si, 52B4h
    _di = 0x548b;                               //mov di, 548Bh
    _bh = 0x00;                                 //mov bh, 0
    _cx = 0x0006;                               //mov cx, 6
    _dx = 0x0a21;                               //mov dx, 0A21h
loc_1AE8D:                                      //loc_1AE8D:
    if (memory(_ds, _di) != 0x01)               //jnz short loc_1AEA0
        goto loc_1AEA0;
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(16);                             //int 10h
    _push(_dx);                                 //push dx
    _ah = 0x09;                                 //mov ah, 9
    _dx = _si;                                  //mov dx, si
    _interrupt(33);                             //int 21h
    _dx = _pop();                               //pop dx
    _dh += 1;                                   //inc dh
loc_1AEA0:                                      //loc_1AEA0:
    _si += 0x000f;                              //add si, 0Fh
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_1AE8D
        goto loc_1AE8D;
loc_1AEA6:                                      //loc_1AEA6:
    _al = 0x3c;                                 //mov al, 3Ch
    sub_17BFA();                                //call sub_17BFA
    if (!_flags.zero)                                //jnz short loc_1AEBA
        goto loc_1AEBA;
    _al = 0x3d;                                 //mov al, 3Dh
    sub_17BFA();                                //call sub_17BFA
    std::cout << "Override vga\n"; _flags.zero = 0;
    if (!_flags.zero)                                //jnz short loc_1AEC8
        goto loc_1AEC8;
    goto loc_1AEA6;                             //jmp short loc_1AEA6
loc_1AEBA:                                      //loc_1AEBA:
    memory16(_ds, 0x541D) = 0x0001;             //mov word_257CD, 1
    memory16(_ds, 0x530E) = 0x0040;             //mov word_256BE, 40h
    goto loc_1AEDB;                             //jmp short loc_1AEDB
loc_1AEC8:                                      //loc_1AEC8:
    memory16(_ds, 0x541D) = 0x0002;             //mov word_257CD, 2
    memory16(_ds, 0x530E) = 0x0040;             //mov word_256BE, 40h
    goto loc_1AEDB;                             //jmp short loc_1AEDB
    sub_17BFE();                                //call sub_17BFE
loc_1AEDB:                                      //loc_1AEDB:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AEE1()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    if (_bx == 0x0000)                          //jz short loc_1AF0E
        goto loc_1AF0E;
    if ((short)_bx > (short)0x0001)             //jg short loc_1AF0E
        goto loc_1AF0E;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _cx = _cx ^ _cx;                            //xor cx, cx
    _xchg(_cl, memory(_ds, _bx + 21263));       //xchg cl, [bx+530Fh]
    _si = 0x5415;                               //mov si, 5415h
    _bp = memory16(_ds, 0x541D);                //mov bp, word_257CD
    _bp <<= 1;                                  //shl bp, 1
    _STOP_("goto ds:off_25825[bp]");            //jmp ds:off_25825[bp]
loc_1AF09:                                      //loc_1AF09:
    sub_1B251();                                //call sub_1B251
    _STOP_("goto $+2");                         //jmp short $+2
loc_1AF0E:                                      //loc_1AF0E:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AF14()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _si = 0x5315;                               //mov si, 5315h
    _bx = memory16(_es, _di);                   //mov bx, es:[di]
    if (_bx != 0x0000)                          //jnz short loc_1AF30
        goto loc_1AF30;
    goto loc_1AFB1;                             //jmp loc_1AFB1
loc_1AF30:                                      //loc_1AF30:
    if ((short)_bx > (short)0x0001)             //jg short loc_1AFB1
        goto loc_1AFB1;
    _bx -= 1;                                   //dec bx
    _ax = _bx;                                  //mov ax, bx
    _dx = 0x0100;                               //mov dx, 100h
    _push(_dx);                                 //push dx
loc_1AF3F:                                      //loc_1AF3F:
    _dx >>= 1;                                  //shr dx, 1
    if (_dx == 0)                               //jz short loc_1AF47
        goto loc_1AF47;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AF3F;                             //jmp short loc_1AF3F
loc_1AF47:                                      //loc_1AF47:
    _dx = _pop();                               //pop dx
    _si += _ax;                                 //add si, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _al = memory(_ds, _bx + 21264);             //mov al, [bx+5310h]
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _si += _ax;                                 //add si, ax
    memory(_ds, _bx + 21264) += 1;              //inc byte ptr [bx+5310h]
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    _STOP_("goto off_25831[bx]");               //jmp off_25831[bx]
loc_1AF66:                                      //loc_1AF66:
    _bx = 0x0002;                               //mov bx, 2
    _STOP_("goto $+2");                         //jmp short $+2
loc_1AF6B:                                      //loc_1AF6B:
    _ax = memory16(_es, _di + 2);               //mov ax, es:[di+2]
    _push(_bx);                                 //push bx
loc_1AF70:                                      //loc_1AF70:
    _bx >>= 1;                                  //shr bx, 1
    if (_bx == 0)                               //jz short loc_1AF78
        goto loc_1AF78;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AF70;                             //jmp short loc_1AF70
loc_1AF78:                                      //loc_1AF78:
    _bx = _pop();                               //pop bx
    memory16(_ds, _si) = _ax;                   //mov [si], ax
    _ax = memory16(_es, _di + 6);               //mov ax, es:[di+6]
    _push(_bx);                                 //push bx
loc_1AF80:                                      //loc_1AF80:
    _bx >>= 1;                                  //shr bx, 1
    if (_bx == 0)                               //jz short loc_1AF88
        goto loc_1AF88;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AF80;                             //jmp short loc_1AF80
loc_1AF88:                                      //loc_1AF88:
    _bx = _pop();                               //pop bx
    memory16(_ds, _si + 4) = _ax;               //mov [si+4], ax
    _bx = 0x0008;                               //mov bx, 8
    _ax = memory16(_es, _di + 4);               //mov ax, es:[di+4]
    _push(_bx);                                 //push bx
loc_1AF94:                                      //loc_1AF94:
    _bx >>= 1;                                  //shr bx, 1
    if (_bx == 0)                               //jz short loc_1AF9C
        goto loc_1AF9C;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AF94;                             //jmp short loc_1AF94
loc_1AF9C:                                      //loc_1AF9C:
    _bx = _pop();                               //pop bx
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    _ax = memory16(_es, _di + 8);               //mov ax, es:[di+8]
    _push(_bx);                                 //push bx
loc_1AFA5:                                      //loc_1AFA5:
    _bx >>= 1;                                  //shr bx, 1
    if (_bx == 0)                               //jz short loc_1AFAD
        goto loc_1AFAD;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AFA5;                             //jmp short loc_1AFA5
loc_1AFAD:                                      //loc_1AFAD:
    _bx = _pop();                               //pop bx
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
loc_1AFB1:                                      //loc_1AFB1:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1AFB7()
{
    _ax = memory16(_es, _di + 6);               //mov ax, es:[di+6]
    _push(_cx);                                 //push cx
loc_1AFBC:                                      //loc_1AFBC:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1AFC4
        goto loc_1AFC4;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AFBC;                             //jmp short loc_1AFBC
loc_1AFC4:                                      //loc_1AFC4:
    _cx = _pop();                               //pop cx
    if (!(memory16(_es, _di + 0x1C) & 0x0200))  //jz short loc_1AFD4
        goto loc_1AFD4;
    _ax += 1;                                   //inc ax
    memory16(_es, _di + 0x1C) &= 0xfdff;        //and word ptr es:[di+1Ch], 0FDFFh
loc_1AFD4:                                      //loc_1AFD4:
    memory16(_ds, 0x5423) = _ax;                //mov word_257D3, ax
    _ax = 0x0014;                               //mov ax, 14h
    if (memory(_ds, 0x541F) == 0x01)            //jz short loc_1AFE5
        goto loc_1AFE5;
    _ax = memory16(_es, _di + 10);              //mov ax, es:[di+0Ah]
loc_1AFE5:                                      //loc_1AFE5:
    _push(_cx);                                 //push cx
loc_1AFE6:                                      //loc_1AFE6:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1AFEE
        goto loc_1AFEE;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AFE6;                             //jmp short loc_1AFE6
loc_1AFEE:                                      //loc_1AFEE:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x542B) = _ax;                //mov word_257DB, ax
    _ax = memory16(_es, _di + 20);              //mov ax, es:[di+14h]
    _push(_cx);                                 //push cx
loc_1AFF7:                                      //loc_1AFF7:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1AFFF
        goto loc_1AFFF;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1AFF7;                             //jmp short loc_1AFF7
loc_1AFFF:                                      //loc_1AFFF:
    _cx = _pop();                               //pop cx
    if (!(memory16(_es, _di + 0x1C) & 0x0400))  //jz short loc_1B00F
        goto loc_1B00F;
    _ax += 1;                                   //inc ax
    memory16(_es, _di + 0x1C) &= 0xfbff;        //and word ptr es:[di+1Ch], 0FBFFh
loc_1B00F:                                      //loc_1B00F:
    memory16(_ds, 0x5421) = _ax;                //mov word_257D1, ax
    _ax = 0x0014;                               //mov ax, 14h
    if (memory(_ds, 0x5420) == 0x01)            //jz short loc_1B020
        goto loc_1B020;
    _ax = memory16(_es, _di + 24);              //mov ax, es:[di+18h]
loc_1B020:                                      //loc_1B020:
    _push(_cx);                                 //push cx
loc_1B021:                                      //loc_1B021:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B029
        goto loc_1B029;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B021;                             //jmp short loc_1B021
loc_1B029:                                      //loc_1B029:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x5429) = _ax;                //mov word_257D9, ax
    _ax = memory16(_es, _di + 30);              //mov ax, es:[di+1Eh]
    _push(_cx);                                 //push cx
loc_1B032:                                      //loc_1B032:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B03A
        goto loc_1B03A;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B032;                             //jmp short loc_1B032
loc_1B03A:                                      //loc_1B03A:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x5431) = _ax;                //mov word_257E1, ax
    _cx = 0x0008;                               //mov cx, 8
    _ax = memory16(_es, _di + 8);               //mov ax, es:[di+8]
    _push(_cx);                                 //push cx
loc_1B046:                                      //loc_1B046:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B04E
        goto loc_1B04E;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B046;                             //jmp short loc_1B046
loc_1B04E:                                      //loc_1B04E:
    _cx = _pop();                               //pop cx
    if (!(memory16(_es, _di + 0x1C) & 0x0100))  //jz short loc_1B061
        goto loc_1B061;
    _ax = _ax + memory16(_es, _di + 38);        //add ax, es:[di+26h]
    memory16(_es, _di + 0x1C) &= 0x00fe;        //and word ptr es:[di+1Ch], 0FEh
loc_1B061:                                      //loc_1B061:
    memory16(_ds, 0x542F) = _ax;                //mov word_257DF, ax
    _ax = 0x0019;                               //mov ax, 19h
    if (memory(_ds, 0x541F) == 0x01)            //jz short loc_1B072
        goto loc_1B072;
    _ax = memory16(_es, _di + 12);              //mov ax, es:[di+0Ch]
loc_1B072:                                      //loc_1B072:
    _push(_cx);                                 //push cx
loc_1B073:                                      //loc_1B073:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B07B
        goto loc_1B07B;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B073;                             //jmp short loc_1B073
loc_1B07B:                                      //loc_1B07B:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x5427) = _ax;                //mov word_257D7, ax
    _ax = memory16(_es, _di + 22);              //mov ax, es:[di+16h]
    _push(_cx);                                 //push cx
loc_1B084:                                      //loc_1B084:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B08C
        goto loc_1B08C;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B084;                             //jmp short loc_1B084
loc_1B08C:                                      //loc_1B08C:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x542D) = _ax;                //mov word_257DD, ax
    _ax = 0x0019;                               //mov ax, 19h
    if (memory(_ds, 0x5420) == 0x01)            //jz short loc_1B09E
        goto loc_1B09E;
    _ax = memory16(_es, _di + 26);              //mov ax, es:[di+1Ah]
loc_1B09E:                                      //loc_1B09E:
    _push(_cx);                                 //push cx
loc_1B09F:                                      //loc_1B09F:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B0A7
        goto loc_1B0A7;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B09F;                             //jmp short loc_1B09F
loc_1B0A7:                                      //loc_1B0A7:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x5425) = _ax;                //mov word_257D5, ax
    _ax = memory16(_es, _di + 32);              //mov ax, es:[di+20h]
    _push(_cx);                                 //push cx
loc_1B0B0:                                      //loc_1B0B0:
    _cx >>= 1;                                  //shr cx, 1
    if (_cx == 0)                               //jz short loc_1B0B8
        goto loc_1B0B8;
    _ax <<= 1;                                  //shl ax, 1
    goto loc_1B0B0;                             //jmp short loc_1B0B0
loc_1B0B8:                                      //loc_1B0B8:
    _cx = _pop();                               //pop cx
    memory16(_ds, 0x5433) = _ax;                //mov word_257E3, ax
}

void sub_1B0BD()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _bx = _di;                                  //mov bx, di
    if (memory(_ds, 0x541F) == 0x02)            //jz short loc_1B106
        goto loc_1B106;
    _ax = memory16(_ds, 0x542F);                //mov ax, word_257DF
    _mul(memory16(_ds, 0x542B));                //mul word_257DB
    _ax = _ax + memory16(_ds, 0x5423);          //add ax, word_257D3
    _si = _ax;                                  //mov si, ax
    if (memory(_ds, 0x541F) != 0x01)            //jnz short loc_1B0ED
        goto loc_1B0ED;
    _bp = memory16(_es, _bx);                   //mov bp, es:[bx]
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _lds(_ax, _ds, _bp + 21525);                //lds ax, ds:[bp+5415h]
    goto loc_1B0F1;                             //jmp short loc_1B0F1
loc_1B0ED:                                      //loc_1B0ED:
    _lds(_ax, _es, _bx + 2);                    //lds ax, es:[bx+2]
loc_1B0F1:                                      //loc_1B0F1:
    _si += _ax;                                 //add si, ax
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    _push(_bx);                                 //push bx
    sub_1CE29();                                //call sub_1CE29
    _bx = _pop();                               //pop bx
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
loc_1B106:                                      //loc_1B106:
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x542D);                //mov ax, word_257DD
    _mul(memory16(_ds, 0x5429));                //mul word_257D9
    _ax = _ax + memory16(_ds, 0x5421);          //add ax, word_257D1
    _di = _ax;                                  //mov di, ax
    if (memory(_ds, 0x5420) != 0x01)            //jnz short loc_1B130
        goto loc_1B130;
    _bp = memory16(_es, _bx + 14);              //mov bp, es:[bx+0Eh]
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _les(_ax, _ds, _bp + 21525);                //les ax, ds:[bp+5415h]
    _ds = _pop();                               //pop ds
    goto loc_1B140;                             //jmp short loc_1B140
loc_1B130:                                      //loc_1B130:
    _les(_ax, _es, _bx + 16);                   //les ax, es:[bx+10h]
    _ds = _pop();                               //pop ds
    _di += _ax;                                 //add di, ax
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
loc_1B140:                                      //loc_1B140:
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_1B146()
{
    _dx = _bx;                                  //mov dx, bx
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _ax = _dx;                                  //mov ax, dx
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _dx += _ax;                                 //add dx, ax
    _ax <<= 1;                                  //shl ax, 1
    _ax += _dx;                                 //add ax, dx
    _ax -= _bx;                                 //sub ax, bx
}

void sub_1B15F()
{
    _ax = _ax ^ _ax;                            //xor ax, ax
    _dl = memory(_ds, _si + 34);                //mov dl, [si+22h]
    if (!(_dl & _bh))                           //jz short loc_1B16A
        goto loc_1B16A;
    _al = 0x01;                                 //mov al, 1
loc_1B16A:                                      //loc_1B16A:
    _dl = memory(_ds, _si + 35);                //mov dl, [si+23h]
    if (!(_dl & _bh))                           //jz short loc_1B173
        goto loc_1B173;
    _al |= 0x02;                                //or al, 2
loc_1B173:                                      //loc_1B173:
    _dl = memory(_ds, _si + 36);                //mov dl, [si+24h]
    if (!(_dl & _bh))                           //jz short loc_1B17C
        goto loc_1B17C;
    _al |= 0x04;                                //or al, 4
loc_1B17C:                                      //loc_1B17C:
    _dl = memory(_ds, _si + 37);                //mov dl, [si+25h]
    if (!(_dl & _bh))                           //jz short loc_1B185
        goto loc_1B185;
    _al |= 0x08;                                //or al, 8
loc_1B185:                                      //loc_1B185:
    _dl = _al;                                  //mov dl, al
    _dl <<= 1;                                  //shl dl, 1
    _dl <<= 1;                                  //shl dl, 1
    _dl <<= 1;                                  //shl dl, 1
    _dl <<= 1;                                  //shl dl, 1
    _al |= _dl;                                 //or al, dl
    _ah = _al;                                  //mov ah, al
}

void sub_1B196()
{
    _di = 0x5311;                               //mov di, 5311h
    _les(_di, _ds, _di);                        //les di, [di]
    _si = _ax;                                  //mov si, ax
    _ds = _dx;                                  //mov ds, dx
    sub_1B146();                                //call sub_1B146
    _di += _ax;                                 //add di, ax
    _di += 0x0023;                              //add di, 23h
    _si += 0x0023;                              //add si, 23h
    _cx = 0x0008;                               //mov cx, 8
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
}

void sub_1B1B0()
{
    _di = 0x5311;                               //mov di, 5311h
    _les(_di, _ds, _di);                        //les di, [di]
    _si = _ax;                                  //mov si, ax
    _ds = _dx;                                  //mov ds, dx
    sub_1B146();                                //call sub_1B146
    _di += _ax;                                 //add di, ax
    _di += 0x0033;                              //add di, 33h
    _si += 0x0033;                              //add si, 33h
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    if (memory16(_ds, 0x541D) != 0x0005)        //jnz short loc_1B1D4
        goto loc_1B1D4;
    _di += 0x0030;                              //add di, 30h
loc_1B1D4:                                      //loc_1B1D4:
    _ds = _pop();                               //pop ds
    _cx = 0x0018;                               //mov cx, 18h
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
}

void sub_1B1DD()
{
    _dx = 0x03ce;                               //mov dx, 3CEh
    _cx = 0x0007;                               //mov cx, 7
loc_1B1E3:                                      //loc_1B1E3:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _out(_dx, _ax);                             //out dx, ax
    if (--_cx)                                  //loop loc_1B1E3
        goto loc_1B1E3;
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _out(_dx, _ax);                             //out dx, ax
}

void sub_1B1F2()
{
    _si = 0x5311;                               //mov si, 5311h
    _les(_si, _ds, _si);                        //les si, [si]
    sub_1B146();                                //call sub_1B146
    _si += _ax;                                 //add si, ax
    _si += 0x0023;                              //add si, 23h
    _dx = _si;                                  //mov dx, si
    _ax = 0x1002;                               //mov ax, 1002h
    _interrupt(16);                             //int 10h
}

void sub_1B207()
{
    _si = 0x5311;                               //mov si, 5311h
    _les(_si, _ds, _si);                        //les si, [si]
    sub_1B146();                                //call sub_1B146
    _si += _ax;                                 //add si, ax
    _si += 0x0033;                              //add si, 33h
    _dx = 0x03c8;                               //mov dx, 3C8h
    _al = 0x00;                                 //mov al, 0
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _cx = 0x0008;                               //mov cx, 8
loc_1B21E:                                      //loc_1B21E:
    _al = memory(_es, _si);                     //mov al, es:[si]
    _out(_dx, _al);                             //out dx, al
    _al = memory(_es, _si + 1);                 //mov al, es:[si+1]
    _out(_dx, _al);                             //out dx, al
    _al = memory(_es, _si + 2);                 //mov al, es:[si+2]
    _out(_dx, _al);                             //out dx, al
    _si += 0x0003;                              //add si, 3
    if (--_cx)                                  //loop loc_1B21E
        goto loc_1B21E;
    _dx -= 1;                                   //dec dx
    _al = 0x10;                                 //mov al, 10h
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _cx = 0x0008;                               //mov cx, 8
loc_1B239:                                      //loc_1B239:
    _al = memory(_es, _si);                     //mov al, es:[si]
    _out(_dx, _al);                             //out dx, al
    _al = memory(_es, _si + 1);                 //mov al, es:[si+1]
    _out(_dx, _al);                             //out dx, al
    _al = memory(_es, _si + 2);                 //mov al, es:[si+2]
    _out(_dx, _al);                             //out dx, al
    _si += 0x0003;                              //add si, 3
    if (--_cx)                                  //loop loc_1B239
        goto loc_1B239;
}

void sub_1B251()
{
    _flags.interrupt = false;                   //cli
    _dx = 0x03d4;                               //mov dx, 3D4h
    _al = 0x0c;                                 //mov al, 0Ch
    _out(_dx, _al);                             //out dx, al
    _dx += 1;                                   //inc dx
    _in(_al, _dx);                              //in al, dx
    _ah = 0x20;                                 //mov ah, 20h
    _al = _al ^ _ah;                            //xor al, ah
    _out(_dx, _al);                             //out dx, al
    _flags.interrupt = true;                    //sti
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    _xchg(_ax, memory16(_ds, _bx + _si + 2));   //xchg ax, [bx+si+2]
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
}

void sub_1B380()
{
    _cx = 0x0002;                               //mov cx, 2
    sub_1AFB7();                                //call sub_1AFB7
    _ax = memory16(_ds, 0x542B);                //mov ax, word_257DB
    _mul(memory16(_ds, 0x5427));                //mul word_257D7
    _bp = _ax;                                  //mov bp, ax
    _ax = memory16(_ds, 0x5429);                //mov ax, word_257D9
    _mul(memory16(_ds, 0x5425));                //mul word_257D5
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_es, _di + 28);              //mov ax, es:[di+1Ch]
    sub_1B0BD();                                //call sub_1B0BD
    _push(_bx);                                 //push bx
    _push(_ds);                                 //push ds
    _bx = _ax;                                  //mov bx, ax
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 21814);           //mov ax, [bx+5536h]
    _ds = _pop();                               //pop ds
    _bx = _pop();                               //pop bx
    ax();                                       //call ax
}

void loc_1B3B6()
{
loc_1B3B6:
    sub_1B3E8();                                //call sub_1B3E8
    _ah += 1;                                   //inc ah
    if ((char)_ah > (char)0x03)                 //jg short locret_1B421
        { locret_1B421(); return; }
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B3B6;                             //jmp short loc_1B3B6
}

void sub_1B3E8()
{
    _push(_bx);                                 //push bx
    _push(_bp);                                 //push bp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B405:                                      //loc_1B405:
    if (_dl == 0x00)                            //jz short loc_1B41C
        goto loc_1B41C;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += _bp;                                 //add di, bp
    goto loc_1B405;                             //jmp short loc_1B405
loc_1B41C:                                      //loc_1B41C:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    _bx = _pop();                               //pop bx
}

void locret_1B421()
{
    WORD _cs = _seg001;

    return;                                     //retn
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x5429);                //mov ax, word_257D9
    memory16(_cs, 0xA9C) = _ax;                 //mov cs:word_1B62C, ax
    _ax = memory16(_ds, 0x542B);                //mov ax, word_257DB
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short locret_1B4AD
        goto locret_1B4AD;
loc_1B43F:                                      //loc_1B43F:
    if (_dl == 0x00)                            //jz short locret_1B4AD
        goto locret_1B4AD;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
loc_1B44A:                                      //loc_1B44A:
    _dx = memory16(_ds, _si);                   //mov dx, [si]
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    _dx = _dx | memory16(_ds, _si);             //or dx, [si]
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    _dx = _dx | memory16(_ds, _si);             //or dx, [si]
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    _dx = _dx | memory16(_ds, _si);             //or dx, [si]
    _dx = (~_dx);                               //not dx
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _dx;                                 //and ax, dx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si -= _bp;                                 //sub si, bp
    _di -= _bx;                                 //sub di, bx
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _dx;                                 //and ax, dx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si -= _bp;                                 //sub si, bp
    _di -= _bx;                                 //sub di, bx
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _dx;                                 //and ax, dx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si -= _bp;                                 //sub si, bp
    _di -= _bx;                                 //sub di, bx
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _dx;                                 //and ax, dx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si += 0x0002;                              //add si, 2
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_1B44A
        goto loc_1B44A;
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _ax;                                 //add si, ax
    _di = _di + memory16(_cs, 0xA9C);           //add di, cs:word_1B62C
    goto loc_1B43F;                             //jmp short loc_1B43F
locret_1B4AD:                                   //locret_1B4AD:
    return;                                     //retn
    return;                                     //retn
    memory(_cs, 0x973) = 0x21;                  //mov cs:byte_1B503, 21h
    goto loc_1B4C5;                             //jmp short loc_1B4C5
    memory(_cs, 0x973) = 0x09;                  //mov cs:byte_1B503, 9
    goto loc_1B4C5;                             //jmp short loc_1B4C5
    memory(_cs, 0x973) = 0x31;                  //mov cs:byte_1B503, 31h
loc_1B4C5:                                      //loc_1B4C5:
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1B4C7:                                      //loc_1B4C7:
    loc_1B4D7();                                //call loc_1B4D7
    _ah += 1;                                   //inc ah
    if ((char)_ah > (char)0x03)                 //jg short locret_1B51F
        goto locret_1B51F;
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    goto loc_1B4C7;                             //jmp short loc_1B4C7
loc_1B4D7:                                      //loc_1B4D7:
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_bp);                                 //push bp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short loc_1B519
        goto loc_1B519;
loc_1B4F7:                                      //loc_1B4F7:
    if (_dl == 0x00)                            //jz short loc_1B519
        goto loc_1B519;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
loc_1B500:                                      //loc_1B500:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _STOP_("db 26h");                           //db 26h
    _STOP_("byte_1B503 db 21h");                //byte_1B503 db 21h
    _ax += 0xc683;                              //add ax, 0C683h
    _al = _al + memory(_ds, _bp + _di + 711);   //add al, [bp+di+2C7h]
    if (--_cx)                                  //loop loc_1B500
        goto loc_1B500;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += _bp;                                 //add di, bp
    goto loc_1B4F7;                             //jmp short loc_1B4F7
loc_1B519:                                      //loc_1B519:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    return;                                     //retn
locret_1B51F:                                   //locret_1B51F:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    _flags.direction = false;                   //cld
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1B52D:                                      //loc_1B52D:
    goto loc_1B55E;                             //jmp short loc_1B55E
loc_1B52F:                                      //loc_1B52F:
    _ah += 1;                                   //inc ah
    if ((char)_ah > (char)0x03)                 //jg short locret_1B597
        goto locret_1B597;
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B52D;                             //jmp short loc_1B52D
loc_1B55E:                                      //loc_1B55E:
    _push(_bx);                                 //push bx
    _push(_bp);                                 //push bp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B57B:                                      //loc_1B57B:
    if (_dl == _ch)                             //jz short loc_1B591
        goto loc_1B591;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += _bp;                                 //add di, bp
    goto loc_1B57B;                             //jmp short loc_1B57B
loc_1B591:                                      //loc_1B591:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    _bx = _pop();                               //pop bx
    goto loc_1B52F;                             //jmp short loc_1B52F
locret_1B597:                                   //locret_1B597:
    return;                                     //retn
    _flags.direction = false;                   //cld
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1B59B:                                      //loc_1B59B:
    goto loc_1B5AA;                             //jmp short loc_1B5AA
loc_1B59D:                                      //loc_1B59D:
    _ah += 1;                                   //inc ah
    if ((char)_ah > (char)0x03)                 //jg short locret_1B5FF
        goto locret_1B5FF;
    _si += _bp;                                 //add si, bp
    _di += _bx;                                 //add di, bx
    goto loc_1B59B;                             //jmp short loc_1B59B
loc_1B5AA:                                      //loc_1B5AA:
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_bp);                                 //push bp
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B5C8:                                      //loc_1B5C8:
    if (_dl == _ch)                             //jz short loc_1B5F8
        goto loc_1B5F8;
    _dl -= 1;                                   //dec dl
loc_1B5CE:                                      //loc_1B5CE:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    if (!(_ah & 0x0f))                          //jz short loc_1B5D9
        goto loc_1B5D9;
    _ah |= 0x0f;                                //or ah, 0Fh
loc_1B5D9:                                      //loc_1B5D9:
    if (!(_ah & 0xf0))                          //jz short loc_1B5E1
        goto loc_1B5E1;
    _ah |= 0xf0;                                //or ah, 0F0h
loc_1B5E1:                                      //loc_1B5E1:
    _ah = (~_ah);                               //not ah
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_1B5CE
        goto loc_1B5CE;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += _bp;                                 //add di, bp
    goto loc_1B5C8;                             //jmp short loc_1B5C8
loc_1B5F8:                                      //loc_1B5F8:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _bp = _pop();                               //pop bp
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B59D;                             //jmp short loc_1B59D
locret_1B5FF:                                   //locret_1B5FF:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
}

void sub_1B603()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    memory(_ds, 0x541F) = 0x00;                 //mov byte_257CF, 0
    memory(_ds, 0x5420) = 0x00;                 //mov byte_257D0, 0
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_258F4[bx]
    {
      case 0: break;
      case 2: sub_1B380(); break;
      case 4: sub_1B380(); break;
      case 6: break;
      case 8: break;
      case 10: break;
      case 12: sub_1B660(); break;
      case 14: break;
      case 16: loc_1B6CC(); break;
      case 18: sub_1B795(); break;
      case 20: sub_1B78D(); break;
      case 22: sub_1B79D(); break;
      case 24: sub_1B6C3(); break;
      case 26: break;
      case 28: sub_1B630(); break;
      case 30: sub_1B630(); break;
      case 32: break;
      case 34: break;
      case 36: break;
      default:
        _ASSERT(0);
    }
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1B630()
{
    _si = 0x556a;                               //mov si, 556Ah
    sub_1B1DD();                                //call sub_1B1DD
    _cx = 0x0002;                               //mov cx, 2
    sub_1AFB7();                                //call sub_1AFB7
    _ax = memory16(_ds, 0x542B);                //mov ax, word_257DB
    _mul(memory16(_ds, 0x5427));                //mul word_257D7
    _bp = _ax;                                  //mov bp, ax
    _bx = memory16(_es, _di + 28);              //mov bx, es:[di+1Ch]
    _push(_bx);                                 //push bx
    _bx = _di;                                  //mov bx, di
    sub_1B0BD();                                //call sub_1B0BD
    _bx = _pop();                               //pop bx
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 21840);           //mov ax, [bx+5550h]
    _ds = _pop();                               //pop ds
    ax();                                       //call ax
}

void sub_1B660()
{
    _flags.direction = false;                   //cld
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _al = 0x01;                                 //mov al, 1
loc_1B669:                                      //loc_1B669:
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    goto loc_1B690;                             //jmp short loc_1B690
loc_1B66F:                                      //loc_1B66F:
    _al <<= 1;                                  //shl al, 1
    if ((char)_al > (char)0x08)                 //jg short locret_1B6C2
        goto locret_1B6C2;
    _si += _bp;                                 //add si, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B669;                             //jmp short loc_1B669
loc_1B690:                                      //loc_1B690:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B6A7:                                      //loc_1B6A7:
    if (_dl == _ch)                             //jz short loc_1B6BE
        goto loc_1B6BE;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += 0x0028;                              //add di, 28h
    goto loc_1B6A7;                             //jmp short loc_1B6A7
loc_1B6BE:                                      //loc_1B6BE:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1B66F;                             //jmp short loc_1B66F
locret_1B6C2:                                   //locret_1B6C2:
    return;
}

void sub_1B6C3()
{
    WORD _cs = _seg001;

    memory16(_cs, 0xB81) = 0x9090;              //mov cs:word_1B711, 9090h
    _STOP_("goto loc_1B6D3");                   //jmp short loc_1B6D3
    _STOP_("sp-trace-fail");                    //sub_1B6C3 endp_failed
    _STOP_("continues");                        //loc_1B6CC:
}

void sub_1B78D()
{
    WORD _cs = _seg001;

    memory(_cs, 0xC63) = 0x21;                  //mov cs:byte_1B7F3, 21h
    _STOP_("goto loc_1B7A3");                   //jmp short loc_1B7A3
}

void sub_1B795()
{
    WORD _cs = _seg001;

    memory(_cs, 0xC63) = 0x09;                  //mov cs:byte_1B7F3, 9
    _STOP_("goto loc_1B7A3");                   //jmp short loc_1B7A3
}

void sub_1B79D()
{
    WORD _cs = _seg001;

    memory(_cs, 0xC63) = 0x31;                  //mov cs:byte_1B7F3, 31h
loc_1B7A3:                                      //loc_1B7A3:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
    _ah = 0x01;                                 //mov ah, 1
loc_1B7B3:                                      //loc_1B7B3:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    _xchg(_al, _ah);                            //xchg al, ah
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    _xchg(_ah, _al);                            //xchg ah, al
    loc_1B7CE();                                //call loc_1B7CE
    _al += 1;                                   //inc al
    _ah <<= 1;                                  //shl ah, 1
    if ((char)_al > (char)0x03)                 //jg short nullsub_39
        _STOP_("goto nullsub_39");
    _si += _bp;                                 //add si, bp
    goto loc_1B7B3;                             //jmp short loc_1B7B3
}

void loc_1B7CE()
{
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x542B);                //mov bx, word_257DB
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short loc_1B80A
        goto loc_1B80A;
loc_1B7E8:                                      //loc_1B7E8:
    if (_dl == _ch)                             //jz short loc_1B80A
        goto loc_1B80A;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
loc_1B7F0:                                      //loc_1B7F0:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _STOP_("db 26h");                           //db 26h
    _STOP_("byte_1B7F3 db 21h");                //byte_1B7F3 db 21h
    _ax += 0xc683;                              //add ax, 0C683h
    _al = _al + memory(_ds, _bp + _di + 711);   //add al, [bp+di+2C7h]
    if (--_cx)                                  //loop loc_1B7F0
        goto loc_1B7F0;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bx;                                 //add si, bx
    _di += 0x0028;                              //add di, 28h
    goto loc_1B7E8;                             //jmp short loc_1B7E8
loc_1B80A:                                      //loc_1B80A:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _al = 0x01;                                 //mov al, 1
loc_1B822:                                      //loc_1B822:
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    goto loc_1B849;                             //jmp short loc_1B849
loc_1B828:                                      //loc_1B828:
    _al <<= 1;                                  //shl al, 1
    if ((char)_al > (char)0x08)                 //jg short locret_1B890
        goto locret_1B890;
    _si += _bp;                                 //add si, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B822;                             //jmp short loc_1B822
loc_1B849:                                      //loc_1B849:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bp = memory16(_ds, 0x542B);                //mov bp, word_257DB
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B862:                                      //loc_1B862:
    if (_dl == _ch)                             //jz short loc_1B88A
        goto loc_1B88A;
    _dl -= 1;                                   //dec dl
loc_1B868:                                      //loc_1B868:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _al &= 0x0f;                                //and al, 0Fh
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ax += 0x0000;                              //add ax, 0
    _stosw<MemAuto, DirAuto>();                 //stosw
    if (--_cx)                                  //loop loc_1B868
        goto loc_1B868;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bp;                                 //add si, bp
    _di += 0x0050;                              //add di, 50h
    goto loc_1B862;                             //jmp short loc_1B862
loc_1B88A:                                      //loc_1B88A:
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    goto loc_1B828;                             //jmp short loc_1B828
locret_1B890:                                   //locret_1B890:
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _al = 0x01;                                 //mov al, 1
loc_1B89A:                                      //loc_1B89A:
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    goto loc_1B8AA;                             //jmp short loc_1B8AA
loc_1B8A0:                                      //loc_1B8A0:
    _al <<= 1;                                  //shl al, 1
    if ((char)_al > (char)0x08)                 //jg short locret_1B903
        goto locret_1B903;
    _si += _bp;                                 //add si, bp
    goto loc_1B89A;                             //jmp short loc_1B89A
loc_1B8AA:                                      //loc_1B8AA:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bp = memory16(_ds, 0x542B);                //mov bp, word_257DB
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B8C3:                                      //loc_1B8C3:
    if (_dl == _ch)                             //jz short loc_1B8FD
        goto loc_1B8FD;
    _dl -= 1;                                   //dec dl
loc_1B8C9:                                      //loc_1B8C9:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    _al &= 0x0f;                                //and al, 0Fh
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ah >>= 1;                                  //shr ah, 1
    _ax += 0x0000;                              //add ax, 0
    if (_al == 0x00)                            //jz short loc_1B8E0
        goto loc_1B8E0;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1B8E0:                                      //loc_1B8E0:
    if (_ah == 0x00)                            //jz short loc_1B8E9
        goto loc_1B8E9;
    memory(_es, _di + 1) = _ah;                 //mov es:[di+1], ah
loc_1B8E9:                                      //loc_1B8E9:
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_1B8C9
        goto loc_1B8C9;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _di -= _cx;                                 //sub di, cx
    _si += _bp;                                 //add si, bp
    _di += 0x0050;                              //add di, 50h
    goto loc_1B8C3;                             //jmp short loc_1B8C3
loc_1B8FD:                                      //loc_1B8FD:
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    goto loc_1B8A0;                             //jmp short loc_1B8A0
locret_1B903:                                   //locret_1B903:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
}

void sub_1B907()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bp = memory16(_es, _di + 14);              //mov bp, es:[di+0Eh]
    if ((short)_bp > (short)0x0001)             //jg short loc_1B932
        goto loc_1B932;
    memory(_ds, 0x541F) = 0x00;                 //mov byte_257CF, 0
    memory(_ds, 0x5420) = 0x01;                 //mov byte_257D0, 1
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_2590E[bx]
    {
      case 0: break;
      case 2: sub_1B630(); break;
      case 4: sub_1B630(); break;
      case 6: break;
      case 8: break;
      case 10: break;
      default:
        _ASSERT(0);
    }
loc_1B932:                                      //loc_1B932:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1B940()
{
    _si = 0x56a4;                               //mov si, 56A4h
    sub_1B1DD();                                //call sub_1B1DD
    _cx = 0x0002;                               //mov cx, 2
    sub_1AFB7();                                //call sub_1AFB7
    _ax = memory16(_ds, 0x5429);                //mov ax, word_257D9
    _mul(memory16(_ds, 0x5425));                //mul word_257D5
    _bp = _ax;                                  //mov bp, ax
    _bx = memory16(_es, _di + 28);              //mov bx, es:[di+1Ch]
    _push(_bx);                                 //push bx
    _bx = _di;                                  //mov bx, di
    sub_1B0BD();                                //call sub_1B0BD
    _bx = _pop();                               //pop bx
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 22154);           //mov ax, [bx+568Ah]
    _ds = _pop();                               //pop ds
    ax();                                       //call ax
}

void loc_1B979()
{
loc_1B979:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    sub_1B999();                                //call sub_1B999
    _al += 1;                                   //inc al
    if ((char)_al > (char)0x03)                 //jg short locret_1B9CB
        { locret_1B9CB(); return; }
    _di += _bp;                                 //add di, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1B979;                             //jmp short loc_1B979
}

void sub_1B999()
{
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x5429);                //mov bx, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1B9B0:                                      //loc_1B9B0:
    if (_dl == 0x00)                            //jz short loc_1B9C8
        goto loc_1B9C8;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += _bx;                                 //add di, bx
    goto loc_1B9B0;                             //jmp short loc_1B9B0
loc_1B9C8:                                      //loc_1B9C8:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
}

void locret_1B9CB()
{
    WORD _cs = _seg001;

    return;                                     //retn
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x5429);                //mov bx, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short locret_1BA52
        goto locret_1BA52;
loc_1B9E3:                                      //loc_1B9E3:
    if (_dl == 0x00)                            //jz short locret_1BA52
        goto locret_1BA52;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    _dx = 0x03ce;                               //mov dx, 3CEh
loc_1B9F1:                                      //loc_1B9F1:
    _push(_di);                                 //push di
    _ax = 0x0805;                               //mov ax, 805h
    _out(_dx, _ax);                             //out dx, ax
    _bx = memory16(_ds, _si);                   //mov bx, [si]
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0004;                               //mov ax, 4
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bx;                                 //and ax, bx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _di += _bp;                                 //add di, bp
    _ax = 0x0104;                               //mov ax, 104h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bx;                                 //and ax, bx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _di += _bp;                                 //add di, bp
    _ax = 0x0204;                               //mov ax, 204h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bx;                                 //and ax, bx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _di += _bp;                                 //add di, bp
    _ax = 0x0304;                               //mov ax, 304h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bx;                                 //and ax, bx
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _di = _pop();                               //pop di
    _si += 0x0002;                              //add si, 2
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_1B9F1
        goto loc_1B9F1;
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += _bx;                                 //add di, bx
    goto loc_1B9E3;                             //jmp short loc_1B9E3
locret_1BA52:                                   //locret_1BA52:
    return;                                     //retn
    return;                                     //retn
    memory(_cs, 0xF19) = 0x21;                  //mov cs:byte_1BAA9, 21h
    goto loc_1BA6A;                             //jmp short loc_1BA6A
    memory(_cs, 0xF19) = 0x09;                  //mov cs:byte_1BAA9, 9
    goto loc_1BA6A;                             //jmp short loc_1BA6A
    memory(_cs, 0xF19) = 0x31;                  //mov cs:byte_1BAA9, 31h
loc_1BA6A:                                      //loc_1BA6A:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
loc_1BA72:                                      //loc_1BA72:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    loc_1BA83();                                //call loc_1BA83
    _al += 1;                                   //inc al
    if ((char)_al > (char)0x03)                 //jg short locret_1BAC4
        goto locret_1BAC4;
    _di += _bp;                                 //add di, bp
    goto loc_1BA72;                             //jmp short loc_1BA72
loc_1BA83:                                      //loc_1BA83:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x5429);                //mov bx, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short loc_1BAC0
        goto loc_1BAC0;
loc_1BA9D:                                      //loc_1BA9D:
    if (_dl == 0x00)                            //jz short loc_1BAC0
        goto loc_1BAC0;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
loc_1BAA6:                                      //loc_1BAA6:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _STOP_("db 26h");                           //db 26h
    _STOP_("byte_1BAA9 db 21h");                //byte_1BAA9 db 21h
    _ax += 0xc683;                              //add ax, 0C683h
    _al = _al + memory(_ds, _bp + _di + 711);   //add al, [bp+di+2C7h]
    if (--_cx)                                  //loop loc_1BAA6
        goto loc_1BAA6;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += _bx;                                 //add di, bx
    goto loc_1BA9D;                             //jmp short loc_1BA9D
loc_1BAC0:                                      //loc_1BAC0:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    return;                                     //retn
locret_1BAC4:                                   //locret_1BAC4:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
loc_1BAD8:                                      //loc_1BAD8:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    goto loc_1BAF7;                             //jmp short loc_1BAF7
loc_1BADE:                                      //loc_1BADE:
    _al += 1;                                   //inc al
    if ((char)_al > (char)0x03)                 //jg short locret_1BB39
        goto locret_1BB39;
    _di += _bp;                                 //add di, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1BAD8;                             //jmp short loc_1BAD8
loc_1BAF7:                                      //loc_1BAF7:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1BB10:                                      //loc_1BB10:
    if (_dl == _ch)                             //jz short loc_1BB33
        goto loc_1BB33;
    _dl -= 1;                                   //dec dl
loc_1BB16:                                      //loc_1BB16:
    _lodsw<MemAuto, DirAuto>();                 //lodsw
    _ah <<= 1;                                  //shl ah, 1
    _ah <<= 1;                                  //shl ah, 1
    _ah <<= 1;                                  //shl ah, 1
    _ah <<= 1;                                  //shl ah, 1
    _al |= _ah;                                 //or al, ah
    _stosb<MemAuto, DirAuto>();                 //stosb
    if (--_cx)                                  //loop loc_1BB16
        goto loc_1BB16;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0050;                              //add si, 50h
    _di += _bp;                                 //add di, bp
    goto loc_1BB10;                             //jmp short loc_1BB10
loc_1BB33:                                      //loc_1BB33:
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    goto loc_1BADE;                             //jmp short loc_1BADE
locret_1BB39:                                   //locret_1BB39:
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
loc_1BB43:                                      //loc_1BB43:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    goto loc_1BB62;                             //jmp short loc_1BB62
loc_1BB49:                                      //loc_1BB49:
    _al += 1;                                   //inc al
    if ((char)_al > (char)0x03)                 //jg short locret_1BBB4
        goto locret_1BBB4;
    _di += _bp;                                 //add di, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_dx);                                 //push dx
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _dx = _pop();                               //pop dx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    goto loc_1BB43;                             //jmp short loc_1BB43
loc_1BB62:                                      //loc_1BB62:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bp = memory16(_ds, 0x5429);                //mov bp, word_257D9
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1BB7B:                                      //loc_1BB7B:
    if (_dl == _ch)                             //jz short loc_1BBAE
        goto loc_1BBAE;
    _dl -= 1;                                   //dec dl
loc_1BB81:                                      //loc_1BB81:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _ah = _al;                                  //mov ah, al
    if (!(_ah & 0x0f))                          //jz short loc_1BB8C
        goto loc_1BB8C;
    _ah |= 0x0f;                                //or ah, 0Fh
loc_1BB8C:                                      //loc_1BB8C:
    if (!(_ah & 0xf0))                          //jz short loc_1BB94
        goto loc_1BB94;
    _ah |= 0xf0;                                //or ah, 0F0h
loc_1BB94:                                      //loc_1BB94:
    _ah = (~_ah);                               //not ah
    memory(_es, _di) &= _ah;                    //and es:[di], ah
    memory(_es, _di) |= _al;                    //or es:[di], al
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_1BB81
        goto loc_1BB81;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0050;                              //add si, 50h
    _di += _bp;                                 //add di, bp
    goto loc_1BB7B;                             //jmp short loc_1BB7B
loc_1BBAE:                                      //loc_1BBAE:
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    goto loc_1BB49;                             //jmp short loc_1BB49
locret_1BBB4:                                   //locret_1BBB4:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
}

void sub_1BBB8()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bp = memory16(_es, _di);                   //mov bp, es:[di]
    if ((short)_bp > (short)0x0001)             //jg short loc_1BBE2
        goto loc_1BBE2;
    memory(_ds, 0x541F) = 0x01;                 //mov byte_257CF, 1
    memory(_ds, 0x5420) = 0x00;                 //mov byte_257D0, 0
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_25A48[bx]
    {
      case 0: break;
      case 2: sub_1B940(); break;
      case 4: sub_1B940(); break;
      case 6: break;
      case 8: break;
      case 10: break;
      default:
        _ASSERT(0);
    }
loc_1BBE2:                                      //loc_1BBE2:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BBF0()
{
    _si = 0x56ce;                               //mov si, 56CEh
    sub_1B1DD();                                //call sub_1B1DD
    _cx = 0x0002;                               //mov cx, 2
    sub_1AFB7();                                //call sub_1AFB7
    _bx = memory16(_es, _di + 28);              //mov bx, es:[di+1Ch]
    _push(_bx);                                 //push bx
    _bx = _di;                                  //mov bx, di
    sub_1B0BD();                                //call sub_1B0BD
    _bx = _pop();                               //pop bx
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx <<= 1;                                  //shl bx, 1
    _ax = memory16(_ds, _bx + 22196);           //mov ax, [bx+56B4h]
    _ds = _pop();                               //pop ds
    ax();                                       //call ax
}

void loc_1BC30()
{
loc_1BC30:
    WORD _cs = _seg001;

    if (_dl == 0x00)                            //jz short locret_1BC47
        goto locret_1BC47;
    _dl -= 1;                                   //dec dl
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += 0x0028;                              //add di, 28h
    goto loc_1BC30;                             //jmp short loc_1BC30
locret_1BC47:                                   //locret_1BC47:
    return;                                     //retn
    _dx = 0x03ce;                               //mov dx, 3CEh
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x5433);                //mov bx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _bh = _cl;                                  //mov bh, cl
    _ds = _pop();                               //pop ds
    if (_cx == 0)                               //jcxz short loc_1BC60
        goto loc_1BC60;
    goto loc_1BC63;                             //jmp short loc_1BC63
loc_1BC60:                                      //loc_1BC60:
    goto locret_1BCE5;                          //jmp locret_1BCE5
loc_1BC63:                                      //loc_1BC63:
    _dx = 0x03ce;                               //mov dx, 3CEh
loc_1BC66:                                      //loc_1BC66:
    if (_bl == 0x00)                            //jz short locret_1BCE5
        goto locret_1BCE5;
    _bl -= 1;                                   //dec bl
    _cx >>= 1;                                  //shr cx, 1
loc_1BC6F:                                      //loc_1BC6F:
    _ax = 0x0805;                               //mov ax, 805h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _bp = _ax;                                  //mov bp, ax
    _ax = 0x0005;                               //mov ax, 5
    _out(_dx, _ax);                             //out dx, ax
    _ax = 0x0004;                               //mov ax, 4
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0102;                               //mov ax, 102h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bp;                                 //and ax, bp
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _ax = 0x0202;                               //mov ax, 202h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0104;                               //mov ax, 104h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bp;                                 //and ax, bp
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _ax = 0x0204;                               //mov ax, 204h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0402;                               //mov ax, 402h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bp;                                 //and ax, bp
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _ax = 0x0802;                               //mov ax, 802h
    _out(_dx, _ax);                             //out dx, ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0x0304;                               //mov ax, 304h
    _out(_dx, _ax);                             //out dx, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax &= _bp;                                 //and ax, bp
    _ax = _ax | memory16(_ds, _si);             //or ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si += 0x0002;                              //add si, 2
    _di += 0x0002;                              //add di, 2
    if (--_cx)                                  //loop loc_1BC6F
        goto loc_1BC6F;
    _cl = _bh;                                  //mov cl, bh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += 0x0028;                              //add di, 28h
    goto loc_1BC66;                             //jmp short loc_1BC66
locret_1BCE5:                                   //locret_1BCE5:
    return;                                     //retn
    return;                                     //retn
    memory(_cs, 0x11B8) = 0x21;                 //mov cs:byte_1BD48, 21h
    goto loc_1BCFD;                             //jmp short loc_1BCFD
    memory(_cs, 0x11B8) = 0x09;                 //mov cs:byte_1BD48, 9
    goto loc_1BCFD;                             //jmp short loc_1BCFD
    memory(_cs, 0x11B8) = 0x31;                 //mov cs:byte_1BD48, 31h
loc_1BCFD:                                      //loc_1BCFD:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
    _ah = 0x01;                                 //mov ah, 1
loc_1BD0D:                                      //loc_1BD0D:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    _xchg(_al, _ah);                            //xchg al, ah
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    _xchg(_ah, _al);                            //xchg ah, al
    loc_1BD26();                                //call loc_1BD26
    _al += 1;                                   //inc al
    _ah <<= 1;                                  //shl ah, 1
    if ((char)_al > (char)0x03)                 //jg short locret_1BD64
        goto locret_1BD64;
    goto loc_1BD0D;                             //jmp short loc_1BD0D
loc_1BD26:                                      //loc_1BD26:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    if (_cx == 0)                               //jcxz short loc_1BD60
        goto loc_1BD60;
    _ds = _pop();                               //pop ds
loc_1BD3C:                                      //loc_1BD3C:
    if (_dl == 0x00)                            //jz short loc_1BD60
        goto loc_1BD60;
    _dl -= 1;                                   //dec dl
    _cx >>= 1;                                  //shr cx, 1
loc_1BD45:                                      //loc_1BD45:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _STOP_("db 26h");                           //db 26h
    _STOP_("byte_1BD48 db 21h");                //byte_1BD48 db 21h
    _ax += 0xc683;                              //add ax, 0C683h
    _al = _al + memory(_ds, _bp + _di + 711);   //add al, [bp+di+2C7h]
    if (--_cx)                                  //loop loc_1BD45
        goto loc_1BD45;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0028;                              //add si, 28h
    _di += 0x0028;                              //add di, 28h
    goto loc_1BD3C;                             //jmp short loc_1BD3C
loc_1BD60:                                      //loc_1BD60:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    return;                                     //retn
locret_1BD64:                                   //locret_1BD64:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03c4;                               //mov dx, 3C4h
    _ax = 0x0f02;                               //mov ax, 0F02h
    _out(_dx, _ax);                             //out dx, ax
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1BD88:                                      //loc_1BD88:
    if (_dl == _ch)                             //jz short locret_1BD9E
        goto locret_1BD9E;
    _dl -= 1;                                   //dec dl
    _rep_movsb<MemAuto, MemAuto, DirAuto>();    //rep movsb
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0050;                              //add si, 50h
    _di += 0x0050;                              //add di, 50h
    goto loc_1BD88;                             //jmp short loc_1BD88
locret_1BD9E:                                   //locret_1BD9E:
    return;                                     //retn
    _flags.direction = false;                   //cld
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x04;                                 //mov al, 4
    _out(_dx, _al);                             //out dx, al
    _al = 0x00;                                 //mov al, 0
    _ah = 0x01;                                 //mov ah, 1
loc_1BDAA:                                      //loc_1BDAA:
    _dx = 0x03cf;                               //mov dx, 3CFh
    _out(_dx, _al);                             //out dx, al
    _xchg(_al, _ah);                            //xchg al, ah
    _dx = 0x03c5;                               //mov dx, 3C5h
    _out(_dx, _al);                             //out dx, al
    _xchg(_ah, _al);                            //xchg ah, al
    goto loc_1BDC2;                             //jmp short loc_1BDC2
loc_1BDB8:                                      //loc_1BDB8:
    _al += 1;                                   //inc al
    _ah <<= 1;                                  //shl ah, 1
    if ((char)_al > (char)0x03)                 //jg short locret_1BDFA
        goto locret_1BDFA;
    goto loc_1BDAA;                             //jmp short loc_1BDAA
loc_1BDC2:                                      //loc_1BDC2:
    _push(_ax);                                 //push ax
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _dx = memory16(_ds, 0x5433);                //mov dx, word_257E3
    _cx = memory16(_ds, 0x5431);                //mov cx, word_257E1
    _dh = _cl;                                  //mov dh, cl
    _ds = _pop();                               //pop ds
loc_1BDD6:                                      //loc_1BDD6:
    if (_dl == _ch)                             //jz short loc_1BDF5
        goto loc_1BDF5;
    _dl -= 1;                                   //dec dl
loc_1BDDC:                                      //loc_1BDDC:
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    if (_al == _ch)                             //jz short loc_1BDE4
        goto loc_1BDE4;
    memory(_es, _di) = _al;                     //mov es:[di], al
loc_1BDE4:                                      //loc_1BDE4:
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_1BDDC
        goto loc_1BDDC;
    _cl = _dh;                                  //mov cl, dh
    _si -= _cx;                                 //sub si, cx
    _di -= _cx;                                 //sub di, cx
    _si += 0x0050;                              //add si, 50h
    _di += 0x0050;                              //add di, 50h
    goto loc_1BDD6;                             //jmp short loc_1BDD6
loc_1BDF5:                                      //loc_1BDF5:
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _ax = _pop();                               //pop ax
    goto loc_1BDB8;                             //jmp short loc_1BDB8
locret_1BDFA:                                   //locret_1BDFA:
    return;                                     //retn
    return;                                     //retn
    return;                                     //retn
}

void sub_1BDFE()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = memory16(_es, _di);                   //mov bx, es:[di]
    if ((short)_bx > (short)0x0001)             //jg short loc_1BE31
        goto loc_1BE31;
    _bp = memory16(_es, _di + 14);              //mov bp, es:[di+0Eh]
    if ((short)_bp > (short)0x0001)             //jg short loc_1BE31
        goto loc_1BE31;
    memory(_ds, 0x541F) = 0x01;                 //mov byte_257CF, 1
    memory(_ds, 0x5420) = 0x01;                 //mov byte_257D0, 1
    _si = memory16(_ds, 0x541D);                //mov si, word_257CD
    _si <<= 1;                                  //shl si, 1
    switch (_si)                                //call off_25A72[si]
    {
      case 0: break;
      case 2: sub_1BBF0(); break;
      case 4: sub_1BBF0(); break;
      case 6: break;
      case 8: break;
      case 10: break;
      default:
        _ASSERT(0);
    }
loc_1BE31:                                      //loc_1BE31:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BE40()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _di = 0x68a2;                               //mov di, 68A2h
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _es = _bx;                                  //mov es, bx
    _di = memory16(_ds, _di);                   //mov di, [di]
    sub_1C063();                                //call sub_1C063
    _ax = _ax ^ _ax;                            //xor ax, ax
    _al = memory(_ds, _si);                     //mov al, [si]
    _al = _al + memory(_es, _di + 4);           //add al, es:[di+4]
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BE65()
{
    WORD _cs = _seg001;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _di = 0x68a2;                               //mov di, 68A2h
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _es = _bx;                                  //mov es, bx
    _di = memory16(_ds, _di);                   //mov di, [di]
    _dl = _dl ^ _dl;                            //xor dl, dl
    _al = memory(_es, _di);                     //mov al, es:[di]
    _cl = _al;                                  //mov cl, al
loc_1BE81:                                      //loc_1BE81:
    _dh = _al;                                  //mov dh, al
//    _push(_cs);                                 //push cs
    sub_1BE40();                                //call near ptr sub_1BE40
    if (_al <= _dl)                             //jbe short loc_1BE8F
        goto loc_1BE8F;
    _dl = _al;                                  //mov dl, al
    _cl = _dh;                                  //mov cl, dh
loc_1BE8F:                                      //loc_1BE8F:
    _al = _dh;                                  //mov al, dh
    _al += 1;                                   //inc al
    if (_al <= memory(_es, _di + 1))            //jbe short loc_1BE81
        goto loc_1BE81;
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _al = _cl;                                  //mov al, cl
}

void sub_1BEA1()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_26CF6[bx]
    {
      case 0: break;
      case 2: sub_1C07F(); break;
      case 4: sub_1C07F(); break;
      case 6: break;
      case 8: break;
      case 10: sub_1C07F(); break;
      case 12: break;
      case 14: sub_1C197(); break;
      case 16: sub_1C197(); break;
      case 18: break;
      case 20: break;
      case 22: sub_1C197(); break;
      case 24: sub_20375(); break;
      case 26: sub_20375(); break;
      case 28: sub_20375(); break;
      case 30: break;
      case 32: break;
      case 34: sub_20375(); break;
      default:
        _ASSERT(0);
    }
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BEBB()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory16(_ds, 0x68A4) = _dx;                //mov word_26C54, dx
    memory16(_ds, 0x68A2) = _ax;                //mov word_26C52, ax
    _di = 0x68a2;                               //mov di, 68A2h
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _es = _bx;                                  //mov es, bx
    _di = memory16(_ds, _di);                   //mov di, [di]
    _al = memory(_es, _di + 3);                 //mov al, es:[di+3]
    _al += 0x02;                                //add al, 2
    memory(_ds, 0x693E) = _al;                  //mov byte_26CEE, al
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BEE5()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x6942);                //mov ax, word_26CF2
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BEF8()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x6944);                //mov ax, word_26CF4
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BF0B()
{
    WORD _cs = _seg001;
    _push(0xab01);
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x000a;                               //mov ax, 0Ah
    _dx = 0x000a;                               //mov dx, 0Ah
//    _push(_cs);                                 //push cs
    sub_1BFD1();                                //call near ptr sub_1BFD1
    _ax = 0x0000;                               //mov ax, 0
    _bx = 0x0000;                               //mov bx, 0
    _cx = 0x013f;                               //mov cx, 13Fh
    _dx = 0x00c7;                               //mov dx, 0C7h
//    _push(_cs);                                 //push cs
    sub_1BFB2();                                //call near ptr sub_1BFB2
    _bx = 0x0000;                               //mov bx, 0
//    _push(_cs);                                 //push cs
    sub_1BF99();                                //call near ptr sub_1BF99
    _al = 0x08;                                 //mov al, 8
//    _push(_cs);                                 //push cs
    sub_1BFE8();                                //call near ptr sub_1BFE8
    _ax = 0x000f;                               //mov ax, 0Fh
    _dx = 0x0000;                               //mov dx, 0
//    _push(_cs);                                 //push cs
    sub_1BEA1();                                //call near ptr sub_1BEA1
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _ASSERT(_pop() == 0xab01);
}

void sub_1BF4C()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _di = 0x68a2;                               //mov di, 68A2h
    _bx = memory16(_ds, _di + 2);               //mov bx, [di+2]
    _es = _bx;                                  //mov es, bx
    _di = memory16(_ds, _di);                   //mov di, [di]
    if (_al < memory(_es, _di))                 //jb short loc_1BF76
        goto loc_1BF76;
    if (_al >= memory(_es, _di + 1))            //jnb short loc_1BF76
        goto loc_1BF76;
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_26D02[bx]
    {
      case 0: break;
      case 2: sub_1C197(); break;
      case 4: sub_1C197(); break;
      case 6: break;
      case 8: break;
      case 10: sub_1C197(); break;
      case 12: sub_20375(); break;
      case 14: sub_20375(); break;
      case 16: sub_20375(); break;
      case 18: break;
      case 20: break;
      case 22: sub_20375(); break;
      default:
        _ASSERT(0);
    }
loc_1BF76:                                      //loc_1BF76:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BF7C()
{
    WORD _cs = _seg001;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
loc_1BF86:                                      //loc_1BF86:
    _al = memory(_ds, _si);                     //mov al, [si]
    if (_al == 0x00)                            //jz short loc_1BF93
        goto loc_1BF93;
//    _push(_cs);                                 //push cs
    sub_1BF4C();                                //call near ptr sub_1BF4C
    _si += 1;                                   //inc si
    goto loc_1BF86;                             //jmp short loc_1BF86
loc_1BF93:                                      //loc_1BF93:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BF99()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    if ((short)_bx > (short)0x0001)             //jg short loc_1BFAC
        goto loc_1BFAC;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x6940) = _bx;                //mov word_26CF0, bx
loc_1BFAC:                                      //loc_1BFAC:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BFB2()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    memory16(_ds, 0x6936) = _ax;                //mov word_26CE6, ax
    memory16(_ds, 0x6938) = _bx;                //mov word_26CE8, bx
    memory16(_ds, 0x693A) = _cx;                //mov word_26CEA, cx
    memory16(_ds, 0x693C) = _dx;                //mov word_26CEC, dx
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BFD1()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory16(_ds, 0x6944) = _dx;                //mov word_26CF4, dx
    memory16(_ds, 0x6942) = _ax;                //mov word_26CF2, ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BFE8()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory(_ds, 0x693E) = _al;                  //mov byte_26CEE, al
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1BFFB()
{
    WORD _cs = _seg001;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.direction = false;                   //cld
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _cx = _cx ^ _cx;                            //xor cx, cx
loc_1C007:                                      //loc_1C007:
    _al = memory(_ds, _si);                     //mov al, [si]
    if (_al == 0x00)                            //jz short loc_1C016
        goto loc_1C016;
//    _push(_cs);                                 //push cs
    sub_1BE40();                                //call near ptr sub_1BE40
    _cx += _ax;                                 //add cx, ax
    _si += 1;                                   //inc si
    goto loc_1C007;                             //jmp short loc_1C007
loc_1C016:                                      //loc_1C016:
    _ax = _cx;                                  //mov ax, cx
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1C01E()
{
    _si = 0x695e;                               //mov si, 695Eh
    memory16(_ds, _si) = 0x68b6;                //mov word ptr [si], 68B6h
    memory16(_ds, _si + 2) = _ds;               //mov word ptr [si+2], ds
    _bp = memory16(_ds, 0x6940);                //mov bp, word_26CF0
    _bp <<= 1;                                  //shl bp, 1
    _bp <<= 1;                                  //shl bp, 1
    _ax = _ax + memory16(_ds, _bp + 21525);     //add ax, ds:[bp+5415h]
    memory16(_ds, _si + 8) = _ax;               //mov [si+8], ax
    _ax = memory16(_ds, _bp + 21527);           //mov ax, ds:[bp+5417h]
    memory16(_ds, _si + 10) = _ax;              //mov [si+0Ah], ax
    _ax = _ax ^ _ax;                            //xor ax, ax
    _al = _bl;                                  //mov al, bl
    memory16(_ds, _si + 12) = _ax;              //mov [si+0Ch], ax
    _al = _bh;                                  //mov al, bh
    memory16(_ds, _si + 14) = _ax;              //mov [si+0Eh], ax
    _al = _cl;                                  //mov al, cl
    memory16(_ds, _si + 16) = _ax;              //mov [si+10h], ax
    _al = _ch;                                  //mov al, ch
    memory16(_ds, _si + 18) = _ax;              //mov [si+12h], ax
    memory(_ds, _si + 22) = _dl;                //mov [si+16h], dl
    _dx = _ds;                                  //mov dx, ds
    _ax = _si;                                  //mov ax, si
    sub_1FBD5();                                //call sub_1FBD5
}

void sub_1C063()
{
    _al = _al - memory(_es, _di);               //sub al, es:[di]
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax <<= 1;                                  //shl ax, 1
    _bx = _es;                                  //mov bx, es
    _ds = _bx;                                  //mov ds, bx
    _si = _di;                                  //mov si, di
    _si += 0x0006;                              //add si, 6
    _si += _ax;                                 //add si, ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _xchg(_ah, _al);                            //xchg ah, al
    _ax += _di;                                 //add ax, di
    _si = _ax;                                  //mov si, ax
}

void sub_1C07F()
{
    _si = 0x68a6;                               //mov si, 68A6h
    sub_1C08F();                                //call sub_1C08F
    _si = 0x68ae;                               //mov si, 68AEh
    _ax = _dx;                                  //mov ax, dx
    sub_1C08F();                                //call sub_1C08F
    //_STOP_("goto locret_1C0BD");                //jmp short locret_1C0BD
}

void sub_1C08F()
{
    memory16(_ds, _si) = 0x0000;                //mov word ptr [si], 0
    memory16(_ds, _si + 2) = 0x0000;            //mov word ptr [si+2], 0
    if (!(_ax & 0x0001))                        //jz short loc_1C0A0
        goto loc_1C0A0;
    memory(_ds, _si) = 0xff;                    //mov byte ptr [si], 0FFh
loc_1C0A0:                                      //loc_1C0A0:
    if (!(_ax & 0x0002))                        //jz short loc_1C0A9
        goto loc_1C0A9;
    memory(_ds, _si + 1) = 0xff;                //mov byte ptr [si+1], 0FFh
loc_1C0A9:                                      //loc_1C0A9:
    if (!(_ax & 0x0004))                        //jz short loc_1C0B4
        goto loc_1C0B4;
    memory(_ds, _si + 2) = 0xff;                //mov byte ptr [si+2], 0FFh
    if (!(_ax & 0x0004))                        //jz short $+2
        _STOP_("goto $+2");
loc_1C0B4:                                      //loc_1C0B4:
    if (!(_ax & 0x0008))                        //jz short locret_1C0BD
        goto locret_1C0BD;
    memory(_ds, _si + 3) = 0xff;                //mov byte ptr [si+3], 0FFh
locret_1C0BD:                                   //locret_1C0BD:
    return;
}

void sub_1C0C0()
{
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    if ((short)_ax < (short)memory16(_ds, 0x6936))//jl short loc_1C0EB
        goto loc_1C0EB;
    _flags.carry = (_al + _bh) >= 0x100;        //add al, bh
    _al += _bh;
    if (!_flags.carry)                          //jnb short loc_1C0CE
        goto loc_1C0CE;
    _ah += 1;                                   //inc ah
loc_1C0CE:                                      //loc_1C0CE:
    _ax -= 1;                                   //dec ax
    if ((short)_ax > (short)memory16(_ds, 0x693A))//jg short loc_1C0EB
        goto loc_1C0EB;
    if ((short)_dx < (short)memory16(_ds, 0x6938))//jl short loc_1C0EB
        goto loc_1C0EB;
    _flags.carry = (_dl + _bl) >= 0x100;        //add dl, bl
    _dl += _bl;
    if (!_flags.carry)                          //jnb short loc_1C0E1
        goto loc_1C0E1;
    _dh += 1;                                   //inc dh
loc_1C0E1:                                      //loc_1C0E1:
    _dx -= 1;                                   //dec dx
    if ((short)_dx > (short)memory16(_ds, 0x693C))//jg short loc_1C0EB
        goto loc_1C0EB;
    _flags.carry = false;                       //clc
    goto loc_1C0EC;                             //jmp short loc_1C0EC
loc_1C0EB:                                      //loc_1C0EB:
    _flags.carry = true;                        //stc
loc_1C0EC:                                      //loc_1C0EC:
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
}

void sub_1C0EF()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _si = 0x68ae;                               //mov si, 68AEh
    _di = 0x68b6;                               //mov di, 68B6h
    _cx = 0x0080;                               //mov cx, 80h
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
loc_1C105:                                      //loc_1C105:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_ds, _di) = _ax;                   //mov [di], ax
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    memory16(_ds, _di + 2) = _ax;               //mov [di+2], ax
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_1C105
        goto loc_1C105;
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_1C11E()
{
    sub_1C0EF();                                //call sub_1C0EF
    sub_1C063();                                //call sub_1C063
    _al = memory(_es, _di + 2);                 //mov al, es:[di+2]
    _bl = memory(_es, _di + 3);                 //mov bl, es:[di+3]
    _bh = memory(_ds, _si);                     //mov bh, [si]
    _cl = _bh;                                  //mov cl, bh
    _bh = _bh + memory(_es, _di + 4);           //add bh, es:[di+4]
    _dl = memory(_ds, _si + 1);                 //mov dl, [si+1]
    _dh = memory(_ds, _si + 2);                 //mov dh, [si+2]
    _si += 0x0003;                              //add si, 3
    _push(_ds);                                 //push ds
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _es = _bp;                                  //mov es, bp
    _bp = 0x68a6;                               //mov bp, 68A6h
    _di = 0x68b6;                               //mov di, 68B6h
    _ds = _pop();                               //pop ds
}

void sub_1C14D()
{
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _push(_cx);                                 //push cx
    _push(_dx);                                 //push dx
    _push(_bp);                                 //push bp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _di += _cx;                                 //add di, cx
    _cl = _bh;                                  //mov cl, bh
    _cl &= 0x07;                                //and cl, 7
    _al = _al ^ _al;                            //xor al, al
    if (_cx == 0)                               //jcxz short loc_1C18C
        goto loc_1C18C;
loc_1C16D:                                      //loc_1C16D:
    _flags.carry = true;                        //stc
    _rcr(_al, 1);                               //rcr al, 1
    if (--_cx)                                  //loop loc_1C16D
        goto loc_1C16D;
    _cx = 0x0004;                               //mov cx, 4
loc_1C175:                                      //loc_1C175:
    if (_bl == 0x00)                            //jz short loc_1C18C
        goto loc_1C18C;
    _bl -= 1;                                   //dec bl
loc_1C17C:                                      //loc_1C17C:
    memory(_es, _di) &= _al;                    //and es:[di], al
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_1C17C
        goto loc_1C17C;
    _cx = 0x0004;                               //mov cx, 4
    _di -= _cx;                                 //sub di, cx
    _di += 0x0008;                              //add di, 8
    goto loc_1C175;                             //jmp short loc_1C175
loc_1C18C:                                      //loc_1C18C:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    _dx = _pop();                               //pop dx
    _cx = _pop();                               //pop cx
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
}

void sub_1C197()
{
    sub_1C11E();                                //call sub_1C11E
    if (_cl != 0x00)                            //jnz short loc_1C1A2
        goto loc_1C1A2;
    goto loc_1C26D;                             //jmp loc_1C26D
loc_1C1A2:                                      //loc_1C1A2:
    _push(_ax);                                 //push ax
    sub_1C14D();                                //call sub_1C14D
    _al = 0x08;                                 //mov al, 8
    _mul(_dh);                                  //mul dh
    _ah = _ah ^ _ah;                            //xor ah, ah
    _di += _ax;                                 //add di, ax
    _ch = _ch ^ _ch;                            //xor ch, ch
    _cl -= 1;                                   //dec cl
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _cx += 1;                                   //inc cx
    _dh = _cl;                                  //mov dh, cl
    _push(_bx);                                 //push bx
loc_1C1BC:                                      //loc_1C1BC:
    if (_dl == 0x00)                            //jz short loc_1C21A
        goto loc_1C21A;
    _dl -= 1;                                   //dec dl
    _push(_di);                                 //push di
    _push(_dx);                                 //push dx
loc_1C1C5:                                      //loc_1C1C5:
    _al = memory(_ds, _si);                     //mov al, [si]
    _bl = _al;                                  //mov bl, al
    _bh = _al;                                  //mov bh, al
    _ax = memory16(_es, _bp + 0);               //mov ax, es:[bp+0]
    _ax &= _bx;                                 //and ax, bx
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_es, _bp + 2);               //mov ax, es:[bp+2]
    _ax &= _bx;                                 //and ax, bx
    _dx |= _ax;                                 //or dx, ax
    _dh |= _dl;                                 //or dh, dl
    _dl = _dh;                                  //mov dl, dh
    _dx = (~_dx);                               //not dx
    if (_dx == 0xffff)                          //jz short loc_1C202
        goto loc_1C202;
    _ax = memory16(_es, _bp + 0);               //mov ax, es:[bp+0]
    _ax &= _bx;                                 //and ax, bx
    memory16(_es, _di) &= _dx;                  //and es:[di], dx
    memory16(_es, _di) |= _ax;                  //or es:[di], ax
    _ax = memory16(_es, _bp + 2);               //mov ax, es:[bp+2]
    _ax &= _bx;                                 //and ax, bx
    memory16(_es, _di + 2) &= _dx;              //and es:[di+2], dx
    memory16(_es, _di + 2) |= _ax;              //or es:[di+2], ax
    goto loc_1C20B;                             //jmp short loc_1C20B
loc_1C202:                                      //loc_1C202:
    _bx = (~_bx);                               //not bx
    memory16(_es, _di) &= _bx;                  //and es:[di], bx
    memory16(_es, _di + 2) &= _bx;              //and es:[di+2], bx
loc_1C20B:                                      //loc_1C20B:
    _si += 1;                                   //inc si
    _di += 0x0004;                              //add di, 4
    if (--_cx)                                  //loop loc_1C1C5
        goto loc_1C1C5;
    _dx = _pop();                               //pop dx
    _cl = _dh;                                  //mov cl, dh
    _di = _pop();                               //pop di
    _di += 0x0008;                              //add di, 8
    goto loc_1C1BC;                             //jmp short loc_1C1BC
loc_1C21A:                                      //loc_1C21A:
    _bx = _pop();                               //pop bx
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _dx = _pop();                               //pop dx
    _dh = _dh ^ _dh;                            //xor dh, dh
    _dx = -_dx;                                 //neg dx
    _dx = _dx + memory16(_ds, 0x6944);          //add dx, word_26CF4
    _ax = memory16(_ds, 0x6942);                //mov ax, word_26CF2
    _flags.carry = (memory(_ds, 0x6942) + _bh) >= 0x100;
    memory(_ds, 0x6942) += _bh;
    if (!_flags.carry)                          //jnb short loc_1C238
        goto loc_1C238;
    memory16(_ds, 0x6942) += 0x0100;            //add word_26CF2, 100h
loc_1C238:                                      //loc_1C238:
    sub_1C0C0();                                //call sub_1C0C0
    if (_FIXME_)                                //jb short loc_1C26D
        goto loc_1C26D;
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _cx = _dx;                                  //mov cx, dx
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _cx += _dx;                                 //add cx, dx
    _dx = _ax;                                  //mov dx, ax
    _dx &= 0x0007;                              //and dx, 7
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax += _cx;                                 //add ax, cx
    _bh -= 1;                                   //dec bh
    _bh >>= 1;                                  //shr bh, 1
    _bh >>= 1;                                  //shr bh, 1
    _bh >>= 1;                                  //shr bh, 1
    _bh += 1;                                   //inc bh
    _cl = _bh;                                  //mov cl, bh
    _ch = _bl;                                  //mov ch, bl
    _bl = 0x02;                                 //mov bl, 2
    _bh = 0x28;                                 //mov bh, 28h
    sub_1C01E();                                //call sub_1C01E
loc_1C26D:                                      //loc_1C26D:
    nullsub_8();                                //call nullsub_8
}

void sub_1C280()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    memory16(_ds, 0x4E10) = _di;                //mov word_251C0, di
    memory16(_ds, 0x4E0C) = _di;                //mov word_251BC, di
    memory16(_ds, 0x4E0E) = _si;                //mov word_251BE, si
    memory16(_ds, 0x4E0A) = _si;                //mov word_251BA, si
    _es = _di;                                  //mov es, di
    _di = _si;                                  //mov di, si
    memory16(_ds, 0x4E14) = _bx;                //mov word_251C4, bx
    memory16(_ds, 0x4E2A) = _bx;                //mov word_251DA, bx
    memory16(_ds, 0x4E12) = _ax;                //mov word_251C2, ax
    memory16(_ds, 0x4E28) = _ax;                //mov word_251D8, ax
    _bx = _dx;                                  //mov bx, dx
    _ax = _cx;                                  //mov ax, cx
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4E0C) = _dx;                //mov word_251BC, dx
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
loc_1C2BC:                                      //loc_1C2BC:
    sub_1CC89();                                //call sub_1CC89
    if (_FIXME_)                                //jnb short loc_1C2C6
        goto loc_1C2C6;
    _ax = 0x0003;                               //mov ax, 3
    goto loc_1C2F8;                             //jmp short loc_1C2F8
loc_1C2C6:                                      //loc_1C2C6:
    _push(_si);                                 //push si
    _push(_ds);                                 //push ds
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _si = memory16(_ds, 0x4E31);                //mov si, word_251E1
    _si &= 0x7fff;                              //and si, 7FFFh
    _si -= 1;                                   //dec si
    _si <<= 1;                                  //shl si, 1
    _bp = memory16(_ds, _si + 20023);           //mov bp, [si+4E37h]
    _ds = _pop();                               //pop ds
    _si = _pop();                               //pop si
    bp();                                       //call bp
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4E35);                //mov ax, word_251E5
    memory16(_ds, 0x4E2A) = _ax;                //mov word_251DA, ax
    _ax = memory16(_ds, 0x4E33);                //mov ax, word_251E3
    memory16(_ds, 0x4E28) = _ax;                //mov word_251D8, ax
    if ((short)memory16(_ds, 0x4E31) > (short)0x0000)//jg short loc_1C2BC
        goto loc_1C2BC;
loc_1C2F8:                                      //loc_1C2F8:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1C2FE()
{
    _dx = memory16(_ds, 0x4E26);                //mov dx, word_251D6
    memory16(_ds, 0x4E14) = _dx;                //mov word_251C4, dx
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    memory16(_ds, 0x4E12) = _ax;                //mov word_251C2, ax
    memory(_ds, 0x4E12) &= 0xf0;                //and byte ptr word_251C2, 0F0h
    if (_dx != memory16(_ds, 0x4E14))           //jnz short loc_1C31D
        goto loc_1C31D;
    if (_ax == memory16(_ds, 0x4E12))           //jz short loc_1C328
        goto loc_1C328;
loc_1C31D:                                      //loc_1C31D:
    _flags.carry = (memory16(_ds, 0x4E12) + 0x0010) >= 0x10000;
    memory16(_ds, 0x4E12) += 0x0010;
    if (!_flags.carry)                          //jnb short loc_1C328
        goto loc_1C328;
    memory16(_ds, 0x4E14) += 1;                 //inc word_251C4
loc_1C328:                                      //loc_1C328:
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    memory16(_ds, 0x4E18) = _ax;                //mov word_251C8, ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    memory16(_ds, 0x4E16) = _ax;                //mov word_251C6, ax
    _ax = memory16(_ds, 0x4E18);                //mov ax, word_251C8
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E16);                //mov di, word_251C6
    _bx = memory16(_ds, 0x4E14);                //mov bx, word_251C4
    _ax = memory16(_ds, 0x4E12);                //mov ax, word_251C2
    sub_1CDE5();                                //call sub_1CDE5
    _al &= 0xfe;                                //and al, 0FEh
    memory16(_ds, 0x4E08) = _dx;                //mov word_251B8, dx
    memory16(_ds, 0x4E06) = _ax;                //mov word_251B6, ax
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = memory16(_ds, 0x4E14);                //mov bx, word_251C4
    _ax = memory16(_ds, 0x4E12);                //mov ax, word_251C2
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4DFC) = _dx;                //mov word_251AC, dx
    memory16(_ds, 0x4DFA) = _ax;                //mov word_251AA, ax
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E0E);                //mov di, word_251BE
    _bx = memory16(_ds, 0x4E14);                //mov bx, word_251C4
    _ax = memory16(_ds, 0x4E12);                //mov ax, word_251C2
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4DF8) = _dx;                //mov word_251A8, dx
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = _bx ^ _bx;                            //xor bx, bx
    _ax = 0x0010;                               //mov ax, 10h
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4E00) = _dx;                //mov word_251B0, dx
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    if (_dx < memory16(_ds, 0x4DFC))            //jb short loc_1C3B5
        goto loc_1C3B5;
    if (_dx != memory16(_ds, 0x4DFC))           //jnz short loc_1C3A8
        goto loc_1C3A8;
    if (_ax <= memory16(_ds, 0x4DFA))           //jbe short loc_1C3B5
        goto loc_1C3B5;
loc_1C3A8:                                      //loc_1C3A8:
    memory16(_ds, 0x4E14) = 0x0000;             //mov word_251C4, 0
    memory16(_ds, 0x4E12) = 0x0002;             //mov word_251C2, 2
    return;                                     //retn
loc_1C3B5:                                      //loc_1C3B5:
    _cx = memory16(_ds, 0x4E14);                //mov cx, word_251C4
    _bx = memory16(_ds, 0x4E12);                //mov bx, word_251C2
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DFA);                //mov di, word_251AA
    _si = memory16(_ds, 0x4DF6);                //mov si, word_251A6
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    _ds = _ax;                                  //mov ds, ax
loc_1C3CF:                                      //loc_1C3CF:
    _flags.carry = _si < 0x0002;                //sub si, 2
    _si -= 0x0002;
    if (!_flags.carry)                          //jnb short loc_1C3DC
        goto loc_1C3DC;
    _si += 0x0010;                              //add si, 10h
    _ax = _ds;                                  //mov ax, ds
    _ax -= 1;                                   //dec ax
    _ds = _ax;                                  //mov ds, ax
loc_1C3DC:                                      //loc_1C3DC:
    _flags.carry = _di < 0x0002;                //sub di, 2
    _di -= 0x0002;
    if (!_flags.carry)                          //jnb short loc_1C3E9
        goto loc_1C3E9;
    _di += 0x0010;                              //add di, 10h
    _ax = _es;                                  //mov ax, es
    _ax -= 1;                                   //dec ax
    _es = _ax;                                  //mov es, ax
loc_1C3E9:                                      //loc_1C3E9:
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _flags.carry = _bx < 0x0002;                //sub bx, 2
    _bx -= 0x0002;
    if (!_flags.carry)                          //jnb short loc_1C3F7
        goto loc_1C3F7;
    _bx += 0x0010;                              //add bx, 10h
    _cx -= 1;                                   //dec cx
loc_1C3F7:                                      //loc_1C3F7:
    if (_cx != 0x0000)                          //jnz short loc_1C3CF
        goto loc_1C3CF;
    if (_bx != 0x0000)                          //jnz short loc_1C3CF
        goto loc_1C3CF;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x4E14) = 0x0000;             //mov word_251C4, 0
    memory16(_ds, 0x4E12) = 0x0001;             //mov word_251C2, 1
}

void loc_1C4A0()
{
loc_1C4A0:
    _flags.carry = _si < 0x0001;                //sub si, 1
    _si -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1C4AD
        goto loc_1C4AD;
    _si += 0x0010;                              //add si, 10h
    _ax = _ds;                                  //mov ax, ds
    _ax -= 1;                                   //dec ax
    _ds = _ax;                                  //mov ds, ax
loc_1C4AD:                                      //loc_1C4AD:
    _flags.carry = _di < 0x0001;                //sub di, 1
    _di -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1C4BA
        goto loc_1C4BA;
    _di += 0x0010;                              //add di, 10h
    _ax = _es;                                  //mov ax, es
    _ax -= 1;                                   //dec ax
    _es = _ax;                                  //mov es, ax
loc_1C4BA:                                      //loc_1C4BA:
    _al = memory(_ds, _si);                     //mov al, [si]
    memory(_es, _di) = _al;                     //mov es:[di], al
    _ax = _ds;                                  //mov ax, ds
    _bp = _cx;                                  //mov bp, cx
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _dx = memory16(_ds, 0x4E08);                //mov dx, word_251B8
    _cx = memory16(_ds, 0x4E06);                //mov cx, word_251B6
    _ds = _ax;                                  //mov ds, ax
    if (_ax != _dx)                             //jnz short loc_1C4DA
        goto loc_1C4DA;
    if (_si == _cx)                             //jz short loc_1C52F
        goto loc_1C52F;
loc_1C4DA:                                      //loc_1C4DA:
    _cx = _bp;                                  //mov cx, bp
    if (--_cx)                                  //loop loc_1C4A0
        goto loc_1C4A0;
    _bp = _ds;                                  //mov bp, ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    memory16(_ds, 0x4E04) = _ax;                //mov word_251B4, ax
    _di = memory16(_ds, 0x4DF6);                //mov di, word_251A6
    memory16(_ds, 0x4E02) = _di;                //mov word_251B2, di
    _es = _ax;                                  //mov es, ax
    _ds = _bp;                                  //mov ds, bp
loc_1C4F7:                                      //loc_1C4F7:
    _flags.carry = _si < 0x0001;                //sub si, 1
    _si -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1C504
        goto loc_1C504;
    _si += 0x0010;                              //add si, 10h
    _ax = _ds;                                  //mov ax, ds
    _ax -= 1;                                   //dec ax
    _ds = _ax;                                  //mov ds, ax
loc_1C504:                                      //loc_1C504:
    _flags.carry = _di < 0x0001;                //sub di, 1
    _di -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1C511
        goto loc_1C511;
    _di += 0x0010;                              //add di, 10h
    _ax = _es;                                  //mov ax, es
    _ax -= 1;                                   //dec ax
    _es = _ax;                                  //mov es, ax
loc_1C511:                                      //loc_1C511:
    _al = memory(_ds, _si);                     //mov al, [si]
    memory(_es, _di) = _al;                     //mov es:[di], al
    _ax = _ds;                                  //mov ax, ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _dx = memory16(_ds, 0x4E08);                //mov dx, word_251B8
    _cx = memory16(_ds, 0x4E06);                //mov cx, word_251B6
    _ds = _ax;                                  //mov ds, ax
    if (_ax != _dx)                             //jnz short loc_1C4F7
        goto loc_1C4F7;
    if (_si != _cx)                             //jnz short loc_1C4F7
        goto loc_1C4F7;
loc_1C52F:                                      //loc_1C52F:
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    memory16(_ds, 0x4E00) = _ax;                //mov word_251B0, ax
    _ax = memory16(_ds, 0x4E0E);                //mov ax, word_251BE
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    _ax = _es;                                  //mov ax, es
    _ds = _ax;                                  //mov ds, ax
    _si = _di;                                  //mov si, di
loc_1C546:                                      //loc_1C546:
    _al = memory(_ds, _si);                     //mov al, [si]
    _bp = _ds;                                  //mov bp, ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory(_ds, 0x4E2C) = _al;                  //mov byte_251DC, al
    _ds = _bp;                                  //mov ds, bp
    _bp = _bx;                                  //mov bp, bx
    _si += 0x0001;                              //add si, 1
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _bx = _ds;                                  //mov bx, ds
    _ds = _bp;                                  //mov ds, bp
    _dx = memory16(_ds, 0x4DF8);                //mov dx, word_251A8
    _cx = memory16(_ds, 0x4DF6);                //mov cx, word_251A6
    _ds = _bx;                                  //mov ds, bx
    if (_bx != _dx)                             //jnz short loc_1C595
        goto loc_1C595;
    if (_si != _cx)                             //jnz short loc_1C595
        goto loc_1C595;
    _ds = _bp;                                  //mov ds, bp
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4E04) = _ax;                //mov word_251B4, ax
    _si = 0x4e97;                               //mov si, 4E97h
    memory16(_ds, 0x4E02) = _si;                //mov word_251B2, si
    _ds = _ax;                                  //mov ds, ax
loc_1C595:                                      //loc_1C595:
    _bp = _ds;                                  //mov bp, ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _al = memory(_ds, 0x4E22);                  //mov al, byte ptr word_251D2
    _ah = memory(_ds, 0x4E2C);                  //mov ah, byte_251DC
    _ds = _bp;                                  //mov ds, bp
    if (_al == _ah)                             //jz short loc_1C5AC
        goto loc_1C5AC;
    goto loc_1C695;                             //jmp loc_1C695
loc_1C5AC:                                      //loc_1C5AC:
    _al = memory(_ds, _si);                     //mov al, [si]
    _ds = _bx;                                  //mov ds, bx
    memory(_ds, 0x4E1E) = _al;                  //mov byte ptr word_251CE, al
    _ds = _bp;                                  //mov ds, bp
    _bp = _bx;                                  //mov bp, bx
    _si += 0x0001;                              //add si, 1
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _bx = _ds;                                  //mov bx, ds
    _ds = _bp;                                  //mov ds, bp
    _dx = memory16(_ds, 0x4DF8);                //mov dx, word_251A8
    _cx = memory16(_ds, 0x4DF6);                //mov cx, word_251A6
    _ds = _bx;                                  //mov ds, bx
    if (_bx != _dx)                             //jnz short loc_1C5F6
        goto loc_1C5F6;
    if (_si != _cx)                             //jnz short loc_1C5F6
        goto loc_1C5F6;
    _ds = _bp;                                  //mov ds, bp
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4E04) = _ax;                //mov word_251B4, ax
    _si = 0x4e97;                               //mov si, 4E97h
    memory16(_ds, 0x4E02) = _si;                //mov word_251B2, si
    _ds = _ax;                                  //mov ds, ax
loc_1C5F6:                                      //loc_1C5F6:
    _bp = _ds;                                  //mov bp, ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _al = memory(_ds, 0x4E22);                  //mov al, byte ptr word_251D2
    _ah = memory(_ds, 0x4E1E);                  //mov ah, byte ptr word_251CE
    _ds = _bp;                                  //mov ds, bp
    if (_al != _ah)                             //jnz short loc_1C60D
        goto loc_1C60D;
    goto loc_1C695;                             //jmp loc_1C695
loc_1C60D:                                      //loc_1C60D:
    _al = memory(_ds, _si);                     //mov al, [si]
    _ds = _bx;                                  //mov ds, bx
    memory(_ds, 0x4E16) = _al;                  //mov byte ptr word_251C6, al
    _ds = _bp;                                  //mov ds, bp
    _bp = _bx;                                  //mov bp, bx
    _si += 0x0001;                              //add si, 1
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _bx = _ds;                                  //mov bx, ds
    _ds = _bp;                                  //mov ds, bp
    _dx = memory16(_ds, 0x4DF8);                //mov dx, word_251A8
    _cx = memory16(_ds, 0x4DF6);                //mov cx, word_251A6
    _ds = _bx;                                  //mov ds, bx
    if (_bx != _dx)                             //jnz short loc_1C657
        goto loc_1C657;
    if (_si != _cx)                             //jnz short loc_1C657
        goto loc_1C657;
    _ds = _bp;                                  //mov ds, bp
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4E04) = _ax;                //mov word_251B4, ax
    _si = 0x4e97;                               //mov si, 4E97h
    memory16(_ds, 0x4E02) = _si;                //mov word_251B2, si
    _ds = _ax;                                  //mov ds, ax
loc_1C657:                                      //loc_1C657:
    _bp = _ds;                                  //mov bp, ds
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _ax = memory16(_ds, 0x4E00);                //mov ax, word_251B0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DFE);                //mov di, word_251AE
    _al = memory(_ds, 0x4E1E);                  //mov al, byte ptr word_251CE
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di += 0x0001;                              //add di, 1
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    memory16(_ds, 0x4E00) = _dx;                //mov word_251B0, dx
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    if (_bp != _dx)                             //jnz short loc_1C68B
        goto loc_1C68B;
    if (_si != _di)                             //jnz short loc_1C68B
        goto loc_1C68B;
    goto locret_1C72E;                          //jmp locret_1C72E
loc_1C68B:                                      //loc_1C68B:
    memory(_ds, 0x4E16) -= 1;                   //dec byte ptr word_251C6
    _ds = _bp;                                  //mov ds, bp
    if (memory(_ds, 0x4E16) != 0)               //jnz short loc_1C657
        goto loc_1C657;
    goto loc_1C6C0;                             //jmp short loc_1C6C0
loc_1C695:                                      //loc_1C695:
    _bp = _ds;                                  //mov bp, ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4E00);                //mov ax, word_251B0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DFE);                //mov di, word_251AE
    _al = memory(_ds, 0x4E2C);                  //mov al, byte_251DC
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di += 0x0001;                              //add di, 1
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    memory16(_ds, 0x4E00) = _dx;                //mov word_251B0, dx
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    _ds = _bp;                                  //mov ds, bp
loc_1C6C0:                                      //loc_1C6C0:
    _bp = _ds;                                  //mov bp, ds
    _dx = _es;                                  //mov dx, es
    if (_bp != _dx)                             //jnz short loc_1C6CC
        goto loc_1C6CC;
    if (_si == _di)                             //jz short locret_1C72E
        goto locret_1C72E;
loc_1C6CC:                                      //loc_1C6CC:
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _dx = memory16(_ds, 0x4E2F);                //mov dx, word_251DF
    _cx = memory16(_ds, 0x4E2D);                //mov cx, word_251DD
    _ds = _bp;                                  //mov ds, bp
    if (_bp == _dx)                             //jz short loc_1C6E2
        goto loc_1C6E2;
    goto loc_1C546;                             //jmp loc_1C546
loc_1C6E2:                                      //loc_1C6E2:
    if (_si == _cx)                             //jz short loc_1C6E9
        goto loc_1C6E9;
    goto loc_1C546;                             //jmp loc_1C546
loc_1C6E9:                                      //loc_1C6E9:
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = memory16(_ds, 0x4E26);                //mov ax, word_251D6
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E24);                //mov di, word_251D4
    sub_1CE29();                                //call sub_1CE29
    memory16(_ds, 0x4E26) = _dx;                //mov word_251D6, dx
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _ax = memory16(_ds, 0x4E0E);                //mov ax, word_251BE
    _flags.carry = _di < _ax;                   //sub di, ax
    _di -= _ax;
    if (!_flags.carry)                          //jnb short loc_1C716
        goto loc_1C716;
    _di += 0x0010;                              //add di, 10h
    _ax = _es;                                  //mov ax, es
    _ax -= 1;                                   //dec ax
    _es = _ax;                                  //mov es, ax
loc_1C716:                                      //loc_1C716:
    _bx = memory16(_ds, 0x4E10);                //mov bx, word_251C0
    _ax = _es;                                  //mov ax, es
    _ax -= _bx;                                 //sub ax, bx
    if (_ax != memory16(_ds, 0x4E26))           //jnz short locret_1C72F
        goto locret_1C72F;
    if (_di != memory16(_ds, 0x4E24))           //jnz short locret_1C72F
        goto locret_1C72F;
    _ax = 0x0001;                               //mov ax, 1
    return;                                     //retn
locret_1C72E:                                   //locret_1C72E:
    return;                                     //retn
locret_1C72F:                                   //locret_1C72F:
    return;                                     //retn
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E0E);                //mov di, word_251BE
    _bx = memory16(_ds, 0x4E26);                //mov bx, word_251D6
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    sub_1CDA0();                                //call sub_1CDA0
    if (_dx > memory16(_ds, 0x4E0C))            //ja short locret_1C72E
        goto locret_1C72E;
    if (_dx != memory16(_ds, 0x4E0C))           //jnz short loc_1C758
        goto loc_1C758;
    if (_ax > memory16(_ds, 0x4E0A))            //ja short locret_1C72E
        goto locret_1C72E;
loc_1C758:                                      //loc_1C758:
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E0E);                //mov di, word_251BE
    _bx = _bx ^ _bx;                            //xor bx, bx
    _ax = 0x000c;                               //mov ax, 0Ch
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4DF8) = _dx;                //mov word_251A8, dx
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, 0x4E22) = _ax;                //mov word_251D2, ax
    memory16(_ds, 0x4DF6) += 0x0002;            //add word_251A6, 2
    _dx = memory16(_ds, 0x4E26);                //mov dx, word_251D6
    memory16(_ds, 0x4E20) = _dx;                //mov word_251D0, dx
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    memory16(_ds, 0x4E1E) = _ax;                //mov word_251CE, ax
    memory(_ds, 0x4E1E) &= 0xe0;                //and byte ptr word_251CE, 0E0h
    if (_dx != memory16(_ds, 0x4E20))           //jnz short loc_1C7A9
        goto loc_1C7A9;
    if (_ax == memory16(_ds, 0x4E1E))           //jz short loc_1C7AF
        goto loc_1C7AF;
    _dx = memory16(_ds, 0x4E20);                //mov dx, word_251D0
    _ax = memory16(_ds, 0x4E1E);                //mov ax, word_251CE
loc_1C7A9:                                      //loc_1C7A9:
    _flags.carry = (_ax + 0x0020) >= 0x10000;   //add ax, 20h
    _ax += 0x0020;
    if (!_flags.carry)                          //jnb short loc_1C7AF
        goto loc_1C7AF;
    _dx += 1;                                   //inc dx
loc_1C7AF:                                      //loc_1C7AF:
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    memory16(_ds, 0x4E20) = _dx;                //mov word_251D0, dx
    memory16(_ds, 0x4E1E) = _ax;                //mov word_251CE, ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    memory16(_ds, 0x4E18) = _ax;                //mov word_251C8, ax
    _di = memory16(_ds, 0x4E0A);                //mov di, word_251BA
    memory16(_ds, 0x4E16) = _di;                //mov word_251C6, di
    _es = _ax;                                  //mov es, ax
    _bx = memory16(_ds, 0x4E20);                //mov bx, word_251D0
    _ax = memory16(_ds, 0x4E1E);                //mov ax, word_251CE
    sub_1CDE5();                                //call sub_1CDE5
    memory16(_ds, 0x4E18) = _dx;                //mov word_251C8, dx
    memory16(_ds, 0x4E16) = _ax;                //mov word_251C6, ax
    memory(_ds, 0x4E16) &= 0xfe;                //and byte ptr word_251C6, 0FEh
    _dx = memory16(_ds, 0x4E18);                //mov dx, word_251C8
    memory16(_ds, 0x4DFC) = _dx;                //mov word_251AC, dx
    _ax = memory16(_ds, 0x4E16);                //mov ax, word_251C6
    memory16(_ds, 0x4DFA) = _ax;                //mov word_251AA, ax
    memory16(_ds, 0x4E00) = _dx;                //mov word_251B0, dx
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _ax = memory16(_ds, 0x4E20);                //mov ax, word_251D0
    memory16(_ds, 0x4E18) = _ax;                //mov word_251C8, ax
    _ax = memory16(_ds, 0x4E1E);                //mov ax, word_251CE
    memory16(_ds, 0x4E16) = _ax;                //mov word_251C6, ax
    _si = memory16(_ds, 0x4DF6);                //mov si, word_251A6
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    _ds = _ax;                                  //mov ds, ax
loc_1C818:                                      //loc_1C818:
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    memory16(_es, _di + 2) = _ax;               //mov es:[di+2], ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si += 0x0004;                              //add si, 4
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _bp = _ds;                                  //mov bp, ds
    _di += 0x0004;                              //add di, 4
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _ax = memory16(_ds, 0x4E18);                //mov ax, word_251C8
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E16);                //mov di, word_251C6
    _bx = _bx ^ _bx;                            //xor bx, bx
    _ax = 0x0004;                               //mov ax, 4
    sub_1CDE5();                                //call sub_1CDE5
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    memory16(_ds, 0x4E18) = _dx;                //mov word_251C8, dx
    memory16(_ds, 0x4E16) = _ax;                //mov word_251C6, ax
    _ds = _bp;                                  //mov ds, bp
    if (_dx != 0x0000)                          //jnz short loc_1C818
        goto loc_1C818;
    if (_ax != 0x0000)                          //jnz short loc_1C818
        goto loc_1C818;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x4DF8) = _bp;                //mov word_251A8, bp
    memory16(_ds, 0x4DF6) = _si;                //mov word_251A6, si
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x4E00) = _ax;                //mov word_251B0, ax
    memory16(_ds, 0x4DFE) = _di;                //mov word_251AE, di
    _ax = memory16(_ds, 0x4E26);                //mov ax, word_251D6
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4DFA);                //mov ax, word_251AA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    memory16(_ds, 0x4E0C) = _ax;                //mov word_251BC, ax
    _ax = memory16(_ds, 0x4DFA);                //mov ax, word_251AA
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
    _ax = memory16(_ds, 0x4E2A);                //mov ax, word_251DA
    memory16(_ds, 0x4E26) = _ax;                //mov word_251D6, ax
    _ax = memory16(_ds, 0x4E28);                //mov ax, word_251D8
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    sub_1C2FE();                                //call sub_1C2FE
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0C) = _ax;                //mov word_251BC, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4DFA) = _ax;                //mov word_251AA, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4DFC) = _ax;                //mov word_251AC, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E26) = _ax;                //mov word_251D6, ax
    if (memory16(_ds, 0x4E14) != 0x0000)        //jnz short loc_1C8EB
        goto loc_1C8EB;
    if (memory16(_ds, 0x4E12) != 0x0002)        //jnz short loc_1C8EB
        goto loc_1C8EB;
    goto locret_1C72E;                          //jmp locret_1C72E
loc_1C8EB:                                      //loc_1C8EB:
    _ax = memory16(_ds, 0x4E26);                //mov ax, word_251D6
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E2A);                //mov ax, word_251DA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E28);                //mov ax, word_251D8
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E08);                //mov ax, word_251B8
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4E06);                //mov di, word_251B6
    _bx = memory16(_ds, 0x4E2A);                //mov bx, word_251DA
    _ax = memory16(_ds, 0x4E28);                //mov ax, word_251D8
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4E04) = _dx;                //mov word_251B4, dx
    memory16(_ds, 0x4E02) = _ax;                //mov word_251B2, ax
    _bx = memory16(_ds, 0x4E20);                //mov bx, word_251D0
    _ax = memory16(_ds, 0x4E1E);                //mov ax, word_251CE
    sub_1CDA0();                                //call sub_1CDA0
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = _bx ^ _bx;                            //xor bx, bx
    _ax = 0x000e;                               //mov ax, 0Eh
    sub_1CDA0();                                //call sub_1CDA0
    memory16(_ds, 0x4E08) = _dx;                //mov word_251B8, dx
    memory16(_ds, 0x4E06) = _ax;                //mov word_251B6, ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    memory16(_ds, 0x4E00) = _ax;                //mov word_251B0, ax
    _di = memory16(_ds, 0x4E0A);                //mov di, word_251BA
    memory16(_ds, 0x4DFE) = _di;                //mov word_251AE, di
    _es = _ax;                                  //mov es, ax
    _bx = _bx ^ _bx;                            //xor bx, bx
    _ax = 0x0400;                               //mov ax, 400h
    sub_1CDE5();                                //call sub_1CDE5
    memory16(_ds, 0x4E00) = _dx;                //mov word_251B0, dx
    memory16(_ds, 0x4DFE) = _ax;                //mov word_251AE, ax
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    memory16(_ds, 0x4E0C) = _ax;                //mov word_251BC, ax
    _ax = memory16(_ds, 0x4DFA);                //mov ax, word_251AA
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    _ax = memory16(_ds, 0x4E0E);                //mov ax, word_251BE
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    memory16(_ds, 0x4E1C) = 0x0000;             //mov word_251CC, 0
    memory16(_ds, 0x4E1A) = 0x0000;             //mov word_251CA, 0
    memory16(_ds, 0x4E14) = 0x0000;             //mov word_251C4, 0
    memory16(_ds, 0x4E12) = 0x0000;             //mov word_251C2, 0
    memory16(_ds, 0x4E18) = 0x0000;             //mov word_251C8, 0
    memory16(_ds, 0x4E16) = 0x0000;             //mov word_251C6, 0
loc_1C99D:                                      //loc_1C99D:
    memory16(_ds, 0x4E16) -= 0x0001;            //sub word_251C6, 1
    if ((short)memory16(_ds, 0x4E16) >= 0 /*CHECK*/)//jns short loc_1C9F2
        goto loc_1C9F2;
    _bp = _ds;                                  //mov bp, ds
    _si = memory16(_ds, 0x4E0A);                //mov si, word_251BA
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    _ds = _ax;                                  //mov ds, ax
    _dx = memory16(_ds, _si + 2);               //mov dx, [si+2]
    _xchg(_dh, _dl);                            //xchg dh, dl
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _xchg(_ah, _al);                            //xchg ah, al
    _push(_ax);                                 //push ax
    _push(_dx);                                 //push dx
    _si += 0x0004;                              //add si, 4
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _dx = _pop();                               //pop dx
    _ax = _pop();                               //pop ax
    _cx = _ds;                                  //mov cx, ds
    _ds = _bp;                                  //mov ds, bp
    memory16(_ds, 0x4E0C) = _cx;                //mov word_251BC, cx
    memory16(_ds, 0x4E0A) = _si;                //mov word_251BA, si
    memory16(_ds, 0x4E16) = 0x001f;             //mov word_251C6, 1Fh
    memory16(_ds, 0x4E26) = _ax;                //mov word_251D6, ax
    memory16(_ds, 0x4E24) = _dx;                //mov word_251D4, dx
loc_1C9F2:                                      //loc_1C9F2:
    _dx = memory16(_ds, 0x4E26);                //mov dx, word_251D6
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    _flags.carry = !!(_ax & 0x8000);            //shl ax, 1
    _ax <<= 1;
    _rcl(_dx, 1);                               //rcl dx, 1
    memory16(_ds, 0x4E26) = _dx;                //mov word_251D6, dx
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    if (!_flags.carry)                          //jnb short loc_1CA09
        goto loc_1CA09;
    goto loc_1CB57;                             //jmp loc_1CB57
loc_1CA09:                                      //loc_1CA09:
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DF6);                //mov di, word_251A6
    _si = memory16(_ds, 0x4E06);                //mov si, word_251B6
    _ax = memory16(_ds, 0x4E08);                //mov ax, word_251B8
    _ds = _ax;                                  //mov ds, ax
    _al = memory(_ds, _si);                     //mov al, [si]
    memory(_es, _di) = _al;                     //mov es:[di], al
    _si += 0x0001;                              //add si, 1
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _bp = _ds;                                  //mov bp, ds
    _di += 0x0001;                              //add di, 1
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x4E08) = _bp;                //mov word_251B8, bp
    memory16(_ds, 0x4E06) = _si;                //mov word_251B6, si
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    memory16(_ds, 0x4DF6) = _di;                //mov word_251A6, di
    _flags.carry = (memory16(_ds, 0x4E12) + 0x0001) >= 0x10000;
    memory16(_ds, 0x4E12) += 0x0001;
    if (!_flags.carry)                          //jnb short loc_1CA67
        goto loc_1CA67;
    memory16(_ds, 0x4E14) += 1;                 //inc word_251C4
loc_1CA67:                                      //loc_1CA67:
    _dx = memory16(_ds, 0x4E00);                //mov dx, word_251B0
    _ax = memory16(_ds, 0x4DFE);                //mov ax, word_251AE
    if (_dx != memory16(_ds, 0x4DF8))           //jnz short loc_1CA92
        goto loc_1CA92;
    if (_ax != memory16(_ds, 0x4DF6))           //jnz short loc_1CA92
        goto loc_1CA92;
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    _ax = 0x4e97;                               //mov ax, 4E97h
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    memory16(_ds, 0x4E1C) = 0x0000;             //mov word_251CC, 0
    memory16(_ds, 0x4E1A) = 0x0001;             //mov word_251CA, 1
loc_1CA92:                                      //loc_1CA92:
    _dx = memory16(_ds, 0x4E08);                //mov dx, word_251B8
    _ax = memory16(_ds, 0x4E06);                //mov ax, word_251B6
    if (_dx != memory16(_ds, 0x4E04))           //jnz short loc_1CAA8
        goto loc_1CAA8;
    if (_ax != memory16(_ds, 0x4E02))           //jnz short loc_1CAA8
        goto loc_1CAA8;
    goto loc_1CBB4;                             //jmp loc_1CBB4
loc_1CAA8:                                      //loc_1CAA8:
    _dx = memory16(_ds, 0x4E08);                //mov dx, word_251B8
    _ax = memory16(_ds, 0x4E06);                //mov ax, word_251B6
    if (_dx <= memory16(_ds, 0x4DF8))           //jbe short loc_1CAB8
        goto loc_1CAB8;
    goto loc_1C99D;                             //jmp loc_1C99D
loc_1CAB8:                                      //loc_1CAB8:
    if (_dx != memory16(_ds, 0x4DF8))           //jnz short loc_1CAC3
        goto loc_1CAC3;
    if (_ax <= memory16(_ds, 0x4DF6))           //jbe short loc_1CAC3
        goto loc_1CAC3;
    goto loc_1C99D;                             //jmp loc_1C99D
loc_1CAC3:                                      //loc_1CAC3:
    if (memory16(_ds, 0x4E1C) == 0x0000)        //jz short loc_1CACD
        goto loc_1CACD;
    goto loc_1C99D;                             //jmp loc_1C99D
loc_1CACD:                                      //loc_1CACD:
    if (memory16(_ds, 0x4E1A) == 0x0000)        //jz short loc_1CAD7
        goto loc_1CAD7;
    goto loc_1C99D;                             //jmp loc_1C99D
loc_1CAD7:                                      //loc_1CAD7:
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    memory16(_ds, 0x4DFC) = _ax;                //mov word_251AC, ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    memory16(_ds, 0x4DFA) = _ax;                //mov word_251AA, ax
    _dx = memory16(_ds, 0x4E08);                //mov dx, word_251B8
    _cx = memory16(_ds, 0x4E06);                //mov cx, word_251B6
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DFA);                //mov di, word_251AA
    _si = memory16(_ds, 0x4E02);                //mov si, word_251B2
    _ax = memory16(_ds, 0x4E04);                //mov ax, word_251B4
    _ds = _ax;                                  //mov ds, ax
loc_1CAFD:                                      //loc_1CAFD:
    _flags.carry = _si < 0x0001;                //sub si, 1
    _si -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1CB0A
        goto loc_1CB0A;
    _si += 0x0010;                              //add si, 10h
    _ax = _ds;                                  //mov ax, ds
    _ax -= 1;                                   //dec ax
    _ds = _ax;                                  //mov ds, ax
loc_1CB0A:                                      //loc_1CB0A:
    _flags.carry = _di < 0x0001;                //sub di, 1
    _di -= 0x0001;
    if (!_flags.carry)                          //jnb short loc_1CB17
        goto loc_1CB17;
    _di += 0x0010;                              //add di, 10h
    _ax = _es;                                  //mov ax, es
    _ax -= 1;                                   //dec ax
    _es = _ax;                                  //mov es, ax
loc_1CB17:                                      //loc_1CB17:
    _al = memory(_ds, _si);                     //mov al, [si]
    memory(_es, _di) = _al;                     //mov es:[di], al
    _ax = _ds;                                  //mov ax, ds
    if (_dx != _ax)                             //jnz short loc_1CAFD
        goto loc_1CAFD;
    if (_cx != _si)                             //jnz short loc_1CAFD
        goto loc_1CAFD;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    memory16(_ds, 0x4E04) = _bp;                //mov word_251B4, bp
    memory16(_ds, 0x4E02) = _si;                //mov word_251B2, si
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x4DFC) = _ax;                //mov word_251AC, ax
    memory16(_ds, 0x4DFA) = _di;                //mov word_251AA, di
    _ax = memory16(_ds, 0x4DFC);                //mov ax, word_251AC
    memory16(_ds, 0x4E08) = _ax;                //mov word_251B8, ax
    _ax = memory16(_ds, 0x4DFA);                //mov ax, word_251AA
    memory16(_ds, 0x4E06) = _ax;                //mov word_251B6, ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    memory16(_ds, 0x4E04) = _ax;                //mov word_251B4, ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    memory16(_ds, 0x4E02) = _ax;                //mov word_251B2, ax
    goto loc_1C99D;                             //jmp loc_1C99D
loc_1CB57:                                      //loc_1CB57:
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DF6);                //mov di, word_251A6
    _al = memory(_ds, 0x4E22);                  //mov al, byte ptr word_251D2
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di += 0x0001;                              //add di, 1
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    memory16(_ds, 0x4DF6) = _di;                //mov word_251A6, di
    _flags.carry = (memory16(_ds, 0x4E12) + 0x0001) >= 0x10000;
    memory16(_ds, 0x4E12) += 0x0001;
    if (!_flags.carry)                          //jnb short loc_1CB86
        goto loc_1CB86;
    memory16(_ds, 0x4E14) += 1;                 //inc word_251C4
loc_1CB86:                                      //loc_1CB86:
    _dx = memory16(_ds, 0x4E00);                //mov dx, word_251B0
    _ax = memory16(_ds, 0x4DFE);                //mov ax, word_251AE
    if (_dx != memory16(_ds, 0x4DF8))           //jnz short loc_1CBB1
        goto loc_1CBB1;
    if (_ax != memory16(_ds, 0x4DF6))           //jnz short loc_1CBB1
        goto loc_1CBB1;
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    _ax = 0x4e97;                               //mov ax, 4E97h
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    memory16(_ds, 0x4E1C) = 0x0000;             //mov word_251CC, 0
    memory16(_ds, 0x4E1A) = 0x0001;             //mov word_251CA, 1
loc_1CBB1:                                      //loc_1CBB1:
    goto loc_1CAA8;                             //jmp loc_1CAA8
loc_1CBB4:                                      //loc_1CBB4:
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0C) = _ax;                //mov word_251BC, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E28) = _ax;                //mov word_251D8, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E2A) = _ax;                //mov word_251DA, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E26) = _ax;                //mov word_251D6, ax
loc_1CBCC:                                      //loc_1CBCC:
    _al = memory(_ds, 0x4E22);                  //mov al, byte ptr word_251D2
    memory(_es, _di) = _al;                     //mov es:[di], al
    _di += 0x0001;                              //add di, 1
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _flags.carry = (memory16(_ds, 0x4E12) + 0x0001) >= 0x10000;
    memory16(_ds, 0x4E12) += 0x0001;
    if (!_flags.carry)                          //jnb short loc_1CBE9
        goto loc_1CBE9;
    memory16(_ds, 0x4E14) += 1;                 //inc word_251C4
loc_1CBE9:                                      //loc_1CBE9:
    _dx = memory16(_ds, 0x4E00);                //mov dx, word_251B0
    _ax = memory16(_ds, 0x4DFE);                //mov ax, word_251AE
    if (_dx != memory16(_ds, 0x4DF8))           //jnz short loc_1CC14
        goto loc_1CC14;
    if (_ax != memory16(_ds, 0x4DF6))           //jnz short loc_1CC14
        goto loc_1CC14;
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    _ax = 0x4e97;                               //mov ax, 4E97h
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    memory16(_ds, 0x4E1C) = 0x0000;             //mov word_251CC, 0
    memory16(_ds, 0x4E1A) = 0x0001;             //mov word_251CA, 1
loc_1CC14:                                      //loc_1CC14:
    _dx = memory16(_ds, 0x4E26);                //mov dx, word_251D6
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    if (_dx > memory16(_ds, 0x4E14))            //ja short loc_1CBCC
        goto loc_1CBCC;
    if (_dx != memory16(_ds, 0x4E14))           //jnz short loc_1CC29
        goto loc_1CC29;
    if (_ax > memory16(_ds, 0x4E12))            //ja short loc_1CBCC
        goto loc_1CBCC;
loc_1CC29:                                      //loc_1CC29:
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x4DF8) = _ax;                //mov word_251A8, ax
    _ax = 0x4e97;                               //mov ax, 4E97h
    memory16(_ds, 0x4DF6) = _ax;                //mov word_251A6, ax
    _cx = 0x0400;                               //mov cx, 400h
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _ax = memory16(_ds, 0x4E00);                //mov ax, word_251B0
    _es = _ax;                                  //mov es, ax
    _di = memory16(_ds, 0x4DFE);                //mov di, word_251AE
    _si = memory16(_ds, 0x4DF6);                //mov si, word_251A6
    _ax = memory16(_ds, 0x4DF8);                //mov ax, word_251A8
    _ds = _ax;                                  //mov ds, ax
loc_1CC4E:                                      //loc_1CC4E:
    _ax = memory16(_ds, _si + 2);               //mov ax, [si+2]
    memory16(_es, _di + 2) = _ax;               //mov es:[di+2], ax
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    memory16(_es, _di) = _ax;                   //mov es:[di], ax
    _si += 0x0004;                              //add si, 4
    _push(_di);                                 //push di
    _push(_bp);                                 //push bp
    _push(_es);                                 //push es
    _ax = _ds;                                  //mov ax, ds
    _es = _ax;                                  //mov es, ax
    _di = _si;                                  //mov di, si
    sub_1CE29();                                //call sub_1CE29
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _es = _pop();                               //pop es
    _bp = _pop();                               //pop bp
    _di = _pop();                               //pop di
    _di += 0x0004;                              //add di, 4
    sub_1CE29();                                //call sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    if (--_cx)                                  //loop loc_1CC4E
        goto loc_1CC4E;
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x0001;                               //mov ax, 1
}

void sub_1CC89()
{
    _ax = memory16(_ds, 0x4E2A);                //mov ax, word_251DA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E28);                //mov ax, word_251D8
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0C);                //mov ax, word_251BC
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0A);                //mov ax, word_251BA
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E10);                //mov ax, word_251C0
    _es = _ax;                                  //mov es, ax
    _push(_ax);                                 //push ax
    _ax = memory16(_ds, 0x4E0E);                //mov ax, word_251BE
    _di = _ax;                                  //mov di, ax
    _push(_ax);                                 //push ax
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _xchg(_ah, _al);                            //xchg ah, al
    _bx = memory16(_es, _di + 2);               //mov bx, es:[di+2]
    _xchg(_bh, _bl);                            //xchg bh, bl
    memory16(_ds, 0x4E26) = _ax;                //mov word_251D6, ax
    memory16(_ds, 0x4E24) = _bx;                //mov word_251D4, bx
    memory16(_ds, 0x4E35) = _ax;                //mov word_251E5, ax
    memory16(_ds, 0x4E33) = _bx;                //mov word_251E3, bx
    if (_ax > 0x000f)                           //ja short loc_1CD36
        goto loc_1CD36;
    if (_ax != 0x000f)                          //jnz short loc_1CCD0
        goto loc_1CCD0;
    if (_bx > 0xffff)                           //ja short loc_1CD36
        goto loc_1CD36;
loc_1CCD0:                                      //loc_1CCD0:
    _ax = memory16(_es, _di + 6);               //mov ax, es:[di+6]
    _xchg(_ah, _al);                            //xchg ah, al
    _bx = memory16(_es, _di + 4);               //mov bx, es:[di+4]
    _xchg(_bh, _bl);                            //xchg bh, bl
    memory16(_ds, 0x4E20) = _ax;                //mov word_251D0, ax
    memory16(_ds, 0x4E1E) = _bx;                //mov word_251CE, bx
    _ax = memory16(_es, _di + 8);               //mov ax, es:[di+8]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, 0x4E31) = _ax;                //mov word_251E1, ax
    _si = _ax;                                  //mov si, ax
    _si &= 0x003f;                              //and si, 3Fh
    if (_si > 0x001e)                           //ja short loc_1CD36
        goto loc_1CD36;
    _si += _si;                                 //add si, si
    _bx = memory16(_ds, _si + 20059);           //mov bx, [si+4E5Bh]
    _xchg(_bh, _bl);                            //xchg bh, bl
    if ((short)_bx < (short)0x0000)             //jl short loc_1CD36
        goto loc_1CD36;
    _si = _ax;                                  //mov si, ax
    _si &= 0x7f00;                              //and si, 7F00h
    if (_si != 0)                               //jnz short loc_1CD36
        goto loc_1CD36;
    _bx = memory16(_ds, 0x4E26);                //mov bx, word_251D6
    _ax = memory16(_ds, 0x4E24);                //mov ax, word_251D4
    _si = memory16(_ds, 0x4E31);                //mov si, word_251E1
    _si = _si ^ _bx;                            //xor si, bx
    _si = _si ^ _ax;                            //xor si, ax
    memory16(_ds, 0x4E26) = _bx;                //mov word_251D6, bx
    memory16(_ds, 0x4E24) = _ax;                //mov word_251D4, ax
    _ax = memory16(_ds, 0x4E20);                //mov ax, word_251D0
    _bx = memory16(_ds, 0x4E1E);                //mov bx, word_251CE
    _si = _si ^ _bx;                            //xor si, bx
    _si = _si ^ _ax;                            //xor si, ax
    _ax = memory16(_es, _di + 10);              //mov ax, es:[di+0Ah]
    _xchg(_ah, _al);                            //xchg ah, al
    if (_si == _ax)                             //jz short loc_1CD37
        goto loc_1CD37;
loc_1CD36:                                      //loc_1CD36:
    _flags.carry = true;                        //stc
loc_1CD37:                                      //loc_1CD37:
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0E) = _ax;                //mov word_251BE, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E10) = _ax;                //mov word_251C0, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0A) = _ax;                //mov word_251BA, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E0C) = _ax;                //mov word_251BC, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E28) = _ax;                //mov word_251D8, ax
    _ax = _pop();                               //pop ax
    memory16(_ds, 0x4E2A) = _ax;                //mov word_251DA, ax
}

void sub_1CD50()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _flags.carry = (_ax + 0x000f) >= 0x10000;   //add ax, 0Fh
    _ax += 0x000f;
    if (!_flags.carry)                          //jnb short loc_1CD5B
        goto loc_1CD5B;
    _dx += 1;                                   //inc dx
loc_1CD5B:                                      //loc_1CD5B:
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _dx & 1;                     //shr dx, 1
    _dx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ah = 0x48;                                 //mov ah, 48h
    _interrupt(33);                             //int 21h
    if (_flags.carry)                           //jb short loc_1CD78
        goto loc_1CD78;
    _dx = _dx ^ _dx;                            //xor dx, dx
    _xchg(_ax, _dx);                            //xchg ax, dx
    goto loc_1CD7C;                             //jmp short loc_1CD7C
loc_1CD78:                                      //loc_1CD78:
    _dx = _dx ^ _dx;                            //xor dx, dx
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1CD7C:                                      //loc_1CD7C:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CD82()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _es = _ax;                                  //mov es, ax
    _ah = 0x49;                                 //mov ah, 49h
    _interrupt(33);                             //int 21h
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CDA0()
{
    WORD _cs = _seg004;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
//    _push(_cs);                                 //push cs
    sub_1CE29();                                //call near ptr sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _cx = _ax;                                  //mov cx, ax
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _bx = _cx;                                  //mov bx, cx
    _bx &= 0x000f;                              //and bx, 0Fh
    _bx += _di;                                 //add bx, di
    _dx = _bx;                                  //mov dx, bx
    _bx = _es;                                  //mov bx, es
    _ax += _bx;                                 //add ax, bx
    _xchg(_ax, _dx);                            //xchg ax, dx
    if ((short)_ax <= (short)0x000f)            //jle short loc_1CDDF
        goto loc_1CDDF;
    _ax &= 0x000f;                              //and ax, 0Fh
    _dx += 1;                                   //inc dx
loc_1CDDF:                                      //loc_1CDDF:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CDE5()
{
    WORD _cs = _seg004;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bp = _dseg;                                //mov bp, seg dseg
    _ds = _bp;                                  //mov ds, bp
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
//    _push(_cs);                                 //push cs
    sub_1CE29();                                //call near ptr sub_1CE29
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _cx = _ax;                                  //mov cx, ax
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _flags.carry = _bx & 1;                     //shr bx, 1
    _bx >>= 1;
    _rcr(_ax, 1);                               //rcr ax, 1
    _bx = _cx;                                  //mov bx, cx
    _bx &= 0x000f;                              //and bx, 0Fh
    _flags.carry = _di < _bx;                   //sub di, bx
    _di -= _bx;
    if (!_flags.carry)                          //jnb short loc_1CE1A
        goto loc_1CE1A;
    _di += 0x0010;                              //add di, 10h
    _ax += 1;                                   //inc ax
loc_1CE1A:                                      //loc_1CE1A:
    _dx = _di;                                  //mov dx, di
    _bx = _es;                                  //mov bx, es
    _bx -= _ax;                                 //sub bx, ax
    _ax = _bx;                                  //mov ax, bx
    _xchg(_ax, _dx);                            //xchg ax, dx
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CE29()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _di;                                  //mov ax, di
    _di &= 0x000f;                              //and di, 0Fh
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _bx = _es;                                  //mov bx, es
    _ax += _bx;                                 //add ax, bx
    _dx = _ax;                                  //mov dx, ax
    _ax = _di;                                  //mov ax, di
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CE50()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    memory16(_ds, 0x5676) = _ax;                //mov word_25A26, ax
    memory16(_ds, 0x5678) = 0x0000;             //mov word_25A28, 0
    memory16(_ds, 0x567A) = 0x0000;             //mov word_25A2A, 0
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1CE6F()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = memory16(_ds, 0x5678);                //mov bx, word_25A28
    _bp = memory16(_ds, 0x567A);                //mov bp, word_25A2A
    _ax = _bp;                                  //mov ax, bp
    _ax += 0x2432;                              //add ax, 2432h
    _ax = _ax ^ _bx;                            //xor ax, bx
    _ax = _ax ^ memory16(_ds, 0x5676);          //xor ax, word_25A26
    _bp = _ax;                                  //mov bp, ax
    _ror(_ax, 1);                               //ror ax, 1
    _ax = _ax - memory16(_ds, 0x5676);          //sub ax, word_25A26
    _ax = _ax ^ _bx;                            //xor ax, bx
    _ax += 0x1c12;                              //add ax, 1C12h
    _ax = _ax ^ _bp;                            //xor ax, bp
    _ror(_ax, 1);                               //ror ax, 1
    _flags.carry = (_ax + _bp) >= 0x10000;      //add ax, bp
    _ax += _bp;
    _rcr(_ax, 1);                               //rcr ax, 1
    _bx = _ax;                                  //mov bx, ax
    _ax = memory16(_ds, 0x5676);                //mov ax, word_25A26
    _ax += _bp;                                 //add ax, bp
    _ax = _ax ^ 0x3812;                         //xor ax, 3812h
    _ax = _ax ^ _bx;                            //xor ax, bx
    memory16(_ds, 0x5676) = _ax;                //mov word_25A26, ax
    memory16(_ds, 0x5678) = _bx;                //mov word_25A28, bx
    memory16(_ds, 0x567A) = _bp;                //mov word_25A2A, bp
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void loc_1CF08()
{
loc_1CF08:
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di += 0x1000;                              //add di, 1000h
    _si += _bp;                                 //add si, bp
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di -= 0x1000;                              //sub di, 1000h
    _di += _bp;                                 //add di, bp
    _si += _bp;                                 //add si, bp
    _dx -= 1;                                   //dec dx
    if (_dx != 0)                               //jnz short loc_1CF08
        goto loc_1CF08;
    return;                                     //retn
loc_1CF2A:                                      //loc_1CF2A:
    _ax = _es;                                  //mov ax, es
    _bx = memory16(_es, _di);                   //mov bx, es:[di]
    _xchg(_bh, _bl);                            //xchg bh, bl
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ax += _bx;                                 //add ax, bx
    _cx = _bx;                                  //mov cx, bx
    _bx = memory16(_es, _di + 2);               //mov bx, es:[di+2]
    _cx |= _bx;                                 //or cx, bx
    if (_cx == 0)                               //jz short locret_1CF69
        goto locret_1CF69;
    _xchg(_bh, _bl);                            //xchg bh, bl
    _cx = _bx;                                  //mov cx, bx
    _cx &= 0x000f;                              //and cx, 0Fh
    _cx += 0x0800;                              //add cx, 800h
    _bx &= 0xfff0;                              //and bx, 0FFF0h
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _ax += _bx;                                 //add ax, bx
    memory16(_es, _di + 2) = _ax;               //mov es:[di+2], ax
    memory16(_es, _di) = _cx;                   //mov es:[di], cx
    _di += 0x0004;                              //add di, 4
    goto loc_1CF2A;                             //jmp short loc_1CF2A
locret_1CF69:                                   //locret_1CF69:
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _lds(_si, _ss, _bp + 4);                    //lds si, [bp+4]
    _les(_di, _ss, _bp + 8);                    //les di, [bp+8]
    _ax = memory16(_ds, _si - 4);               //mov ax, [si-4]
    _bx = memory16(_ds, _si - 2);               //mov bx, [si-2]
    _mul(_bx);                                  //mul bx
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _cx = _ax;                                  //mov cx, ax
loc_1CF86:                                      //loc_1CF86:
    _push(_cx);                                 //push cx
    _al = memory(_es, _di);                     //mov al, es:[di]
    _ah = memory(_es, _di + 2);                 //mov ah, es:[di+2]
    _bl = memory(_es, _di + 4);                 //mov bl, es:[di+4]
    _bh = memory(_es, _di + 6);                 //mov bh, es:[di+6]
    _cx = 0x0008;                               //mov cx, 8
    _si = _si ^ _si;                            //xor si, si
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_1CF9D:                                      //loc_1CF9D:
    _bp = _bp ^ _bp;                            //xor bp, bp
    _flags.carry = !!(_bh & 0x80);              //shl bh, 1
    _bh <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _bp += 0x67f9;                              //add bp, 67F9h
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _bp = memory16(_ss, _bp + 0);               //mov bp, [bp+0]
    if (_bp == 0x67f9)                          //jz short loc_1CFCB
        goto loc_1CFCB;
    _bp &= 0x0003;                              //and bp, 3
    _si |= _bp;                                 //or si, bp
    goto loc_1CFD0;                             //jmp short loc_1CFD0
loc_1CFCB:                                      //loc_1CFCB:
    _bp &= 0x0003;                              //and bp, 3
    _dx |= _bp;                                 //or dx, bp
loc_1CFD0:                                      //loc_1CFD0:
    if (--_cx)                                  //loop loc_1CF9D
        goto loc_1CF9D;
    _al = memory(_es, _di + 1);                 //mov al, es:[di+1]
    _ah = memory(_es, _di + 3);                 //mov ah, es:[di+3]
    _bl = memory(_es, _di + 5);                 //mov bl, es:[di+5]
    _bh = memory(_es, _di + 7);                 //mov bh, es:[di+7]
    memory16(_es, _di) = _si;                   //mov es:[di], si
    _dx = (~_dx);                               //not dx
    memory16(_es, _di + 2) = _dx;               //mov es:[di+2], dx
    _cx = 0x0008;                               //mov cx, 8
    _si = _si ^ _si;                            //xor si, si
    _dx = _dx ^ _dx;                            //xor dx, dx
loc_1CFF2:                                      //loc_1CFF2:
    _bp = _bp ^ _bp;                            //xor bp, bp
    _flags.carry = !!(_bh & 0x80);              //shl bh, 1
    _bh <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_bl & 0x80);              //shl bl, 1
    _bl <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bp, 1);                               //rcl bp, 1
    _bp += 0x67f9;                              //add bp, 67F9h
    _si <<= 1;                                  //shl si, 1
    _si <<= 1;                                  //shl si, 1
    _dx <<= 1;                                  //shl dx, 1
    _dx <<= 1;                                  //shl dx, 1
    _bp = memory16(_ss, _bp + 0);               //mov bp, [bp+0]
    if (_bp == 0x67f9)                          //jz short loc_1D020
        goto loc_1D020;
    _bp &= 0x0003;                              //and bp, 3
    _si |= _bp;                                 //or si, bp
    goto loc_1D025;                             //jmp short loc_1D025
loc_1D020:                                      //loc_1D020:
    _bp &= 0x0003;                              //and bp, 3
    _dx |= _bp;                                 //or dx, bp
loc_1D025:                                      //loc_1D025:
    if (--_cx)                                  //loop loc_1CFF2
        goto loc_1CFF2;
    memory16(_es, _di + 4) = _si;               //mov es:[di+4], si
    _dx = (~_dx);                               //not dx
    memory16(_es, _di + 6) = _dx;               //mov es:[di+6], dx
    _di += 0x0008;                              //add di, 8
    _cx = _pop();                               //pop cx
    _cx -= 1;                                   //dec cx
    if (_cx == 0)                               //jz short loc_1D03B
        goto loc_1D03B;
    goto loc_1CF86;                             //jmp loc_1CF86
loc_1D03B:                                      //loc_1D03B:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _lds(_si, _ss, _bp + 4);                    //lds si, [bp+4]
    _les(_di, _ss, _bp + 8);                    //les di, [bp+8]
    _bx = _si;                                  //mov bx, si
    _al = memory(_ds, _si - 4);                 //mov al, [si-4]
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _mul(_ah);                                  //mul ah
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _si += _ax;                                 //add si, ax
    _cx = _ax;                                  //mov cx, ax
loc_1D062:                                      //loc_1D062:
    _push(_cx);                                 //push cx
    _ah = memory(_ds, _bx);                     //mov ah, [bx]
    _bx += 1;                                   //inc bx
    _cx = 0x0008;                               //mov cx, 8
loc_1D069:                                      //loc_1D069:
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    if (!_flags.carry)                          //jnb short loc_1D070
        goto loc_1D070;
    _lodsb<MemAuto, DirAuto>();                 //lodsb
loc_1D070:                                      //loc_1D070:
    _stosb<MemAuto, DirAuto>();                 //stosb
    if (--_cx)                                  //loop loc_1D069
        goto loc_1D069;
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1D062
        goto loc_1D062;
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _les(_di, _ss, _bp + 4);                    //les di, [bp+4]
    _lds(_si, _ss, _bp + 8);                    //lds si, [bp+8]
    _bx = _di;                                  //mov bx, di
    _al = memory(_es, _di + -4);                //mov al, es:[di-4]
    _ah = memory(_es, _di + -2);                //mov ah, es:[di-2]
    _mul(_ah);                                  //mul ah
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _di += _ax;                                 //add di, ax
    _cx = _ax;                                  //mov cx, ax
loc_1D09F:                                      //loc_1D09F:
    _push(_cx);                                 //push cx
    _push(_bx);                                 //push bx
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _bx = memory16(_ds, _si + 2);               //mov bx, [si+2]
    _cx = memory16(_ds, _si + 4);               //mov cx, [si+4]
    _dx = memory16(_ds, _si + 6);               //mov dx, [si+6]
    memory(_ds, _si + 1) = _cl;                 //mov [si+1], cl
    memory(_ds, _si + 2) = _ah;                 //mov [si+2], ah
    memory(_ds, _si + 3) = _ch;                 //mov [si+3], ch
    memory(_ds, _si + 4) = _bl;                 //mov [si+4], bl
    memory(_ds, _si + 5) = _dl;                 //mov [si+5], dl
    memory(_ds, _si + 6) = _bh;                 //mov [si+6], bh
    _bx = _pop();                               //pop bx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _cx = 0x0008;                               //mov cx, 8
loc_1D0C4:                                      //loc_1D0C4:
    _ah <<= 1;                                  //shl ah, 1
    _lodsb<MemAuto, DirAuto>();                 //lodsb
    _al |= _al;                                 //or al, al
    if (_al == 0)                               //jz short loc_1D0CF
        goto loc_1D0CF;
    _stosb<MemAuto, DirAuto>();                 //stosb
    _ah |= 0x01;                                //or ah, 1
loc_1D0CF:                                      //loc_1D0CF:
    if (--_cx)                                  //loop loc_1D0C4
        goto loc_1D0C4;
    memory(_es, _bx) = _ah;                     //mov es:[bx], ah
    _bx += 1;                                   //inc bx
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1D09F
        goto loc_1D09F;
    _si = memory16(_ss, _bp + 4);               //mov si, [bp+4]
    _di -= _si;                                 //sub di, si
    _ax = _di;                                  //mov ax, di
    _dx = _dx ^ _dx;                            //xor dx, dx
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _bp = _pop();                               //pop bp
    return;                                     //retn
    _cx = memory16(_ss, _bp + 6);               //mov cx, [bp+6]
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
    _cx += 0x0001;                              //add cx, 1
    _cx &= 0xfffe;                              //and cx, 0FFFEh
    _di = memory16(_ss, _bp + 4);               //mov di, [bp+4]
    _di >>= 1;                                  //shr di, 1
    _di >>= 1;                                  //shr di, 1
    _di &= 0xfffe;                              //and di, 0FFFEh
    memory16(_ds, 0x6815) = _cx;                //mov word_26BC5, cx
    _cx -= _di;                                 //sub cx, di
    memory16(_ds, 0x680D) = _di;                //mov word_26BBD, di
    memory16(_ds, 0x680F) = _cx;                //mov word_26BBF, cx
    _di = memory16(_ss, _bp + 8);               //mov di, [bp+8]
    memory16(_ds, 0x6811) = _di;                //mov word_26BC1, di
    _cx = memory16(_ss, _bp + 10);              //mov cx, [bp+0Ah]
    memory16(_ds, 0x6817) = _cx;                //mov word_26BC7, cx
    _cx -= _di;                                 //sub cx, di
    memory16(_ds, 0x6813) = _cx;                //mov word_26BC3, cx
    return;                                     //retn
    _les(_bx, _ss, _bp + 4);                    //les bx, [bp+4]
    _bx |= _bx;                                 //or bx, bx
    if (_bx == 0)                               //jz short locret_1D12C
        goto locret_1D12C;
    sub_1D12D();                                //call sub_1D12D
locret_1D12C:                                   //locret_1D12C:
    return;
}

void sub_1D12D()
{
    memory16(_ds, 0x6809) = _bx;                //mov word ptr dword_26BB9, bx
    _si = _es;                                  //mov si, es
    memory16(_ds, 0x680B) = _si;                //mov word ptr dword_26BB9+2, si
    _ax = _bx;                                  //mov ax, bx
    _ax |= _si;                                 //or ax, si
    if (_ax == 0)                               //jz short locret_1D140
        goto locret_1D140;
    sub_1D141();                                //call sub_1D141
locret_1D140:                                   //locret_1D140:
    return;
}

void sub_1D141()
{
    _les(_bx, _ds, 0x6809);                     //les bx, dword_26BB9
loc_1D145:                                      //loc_1D145:
    _push(_es);                                 //push es
    _les(_di, _es, _bx);                        //les di, es:[bx]
    _ax = _es;                                  //mov ax, es
    _ax |= _di;                                 //or ax, di
    if (_ax == 0)                               //jz short loc_1D155
        goto loc_1D155;
    _push(_bx);                                 //push bx
    _si = 0x56e2;                               //mov si, 56E2h
    goto loc_1D15B;                             //jmp short loc_1D15B
loc_1D155:                                      //loc_1D155:
    goto loc_1D1D3;                             //jmp short loc_1D1D3
loc_1D158:                                      //loc_1D158:
    goto loc_1D1CB;                             //jmp short loc_1D1CB
    _STOP_("db 90h");                           //db 90h
loc_1D15B:                                      //loc_1D15B:
    _al = memory(_es, _di + 10);                //mov al, es:[di+0Ah]
    if (!(_al & 0x80))                          //jz short loc_1D158
        goto loc_1D158;
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    _ax = _ax - memory16(_es, _di + 20);        //sub ax, es:[di+14h]
    _bx = _ax;                                  //mov bx, ax
    _bx &= 0x0003;                              //and bx, 3
    _bx += _bx;                                 //add bx, bx
    memory(_ds, 0x683B) = _bl;                  //mov byte_26BEB, bl
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0x6821) = _ax;                //mov word_26BD1, ax
    _ax = memory16(_es, _di + 2);               //mov ax, es:[di+2]
    _ax = _ax - memory16(_es, _di + 22);        //sub ax, es:[di+16h]
    memory16(_ds, 0x6823) = _ax;                //mov word_26BD3, ax
    _dx = memory16(_ds, 0x6817);                //mov dx, word_26BC7
    _ax = memory16(_ds, 0x6823);                //mov ax, word_26BD3
    if ((short)_dx <= (short)_ax)               //jle short loc_1D1C9
        goto loc_1D1C9;
    _dx = memory16(_ds, 0x6815);                //mov dx, word_26BC5
    _ax = memory16(_ds, 0x6821);                //mov ax, word_26BD1
    if ((short)_dx <= (short)_ax)               //jle short loc_1D1C9
        goto loc_1D1C9;
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_es, _di + 16);              //mov ax, es:[di+10h]
    _flags.sign = (short)(_dx + _ax) < 0;       //add dx, ax
    _dx += _ax;
    if (_flags.sign)                            //js short loc_1D158
        goto loc_1D158;
    _ax = memory16(_ds, 0x680D);                //mov ax, word_26BBD
    if ((short)_dx <= (short)_ax)               //jle short loc_1D1C9
        goto loc_1D1C9;
    _ax = memory16(_ds, 0x6823);                //mov ax, word_26BD3
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_es, _di + 18);              //mov ax, es:[di+12h]
    _flags.sign = (short)(_dx + _ax) < 0;       //add dx, ax
    _dx += _ax;
    if (_flags.sign)                            //js short loc_1D1C9
        goto loc_1D1C9;
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    if ((short)_dx <= (short)_ax)               //jle short loc_1D1C9
        goto loc_1D1C9;
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    sub_1D2E6();                                //call sub_1D2E6
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
loc_1D1C9:                                      //loc_1D1C9:
    goto loc_1D158;                             //jmp short loc_1D158
loc_1D1CB:                                      //loc_1D1CB:
    _bx = _pop();                               //pop bx
    _es = _pop();                               //pop es
    _bx += 0x0004;                              //add bx, 4
    goto loc_1D145;                             //jmp loc_1D145
loc_1D1D3:                                      //loc_1D1D3:
    _es = _pop();                               //pop es
}

void loc_1D1DC()
{
loc_1D1DC:
    _STOP_("goto loc_1D255");                   //jmp short loc_1D255
    _STOP_("db 90h");                           //db 90h
loc_1D1DF:                                      //loc_1D1DF:
    _ax = memory16(_ds, 0x6821);                //mov ax, word_26BD1
    _flags.sign = (short)(_ax + memory16(_es, _di + 16)) < 0;
    _ax = _ax + memory16(_es, _di + 16);
    if (_flags.sign)                            //js short loc_1D1DC
        goto loc_1D1DC;
    if ((short)_ax <= (short)memory16(_ds, 0x680D))//jle short loc_1D1DC
        goto loc_1D1DC;
    _ax = memory16(_ds, 0x6823);                //mov ax, word_26BD3
    _flags.sign = (short)(_ax + memory16(_es, _di + 18)) < 0;
    _ax = _ax + memory16(_es, _di + 18);
    if (_flags.sign)                            //js short loc_1D255
        _STOP_("goto loc_1D255");
    if ((short)_ax <= (short)memory16(_ds, 0x6811))//jle short loc_1D255
        _STOP_("goto loc_1D255");
    if ((short)_ax <= (short)memory16(_ds, 0x6821))//jle short loc_1D255
        _STOP_("goto loc_1D255");
    _ax = memory16(_ds, 0x6817);                //mov ax, word_26BC7
    if ((short)_ax <= (short)memory16(_ds, 0x6823))//jle short loc_1D255
        _STOP_("goto loc_1D255");
}

void sub_1D20C()
{
    memory(_ds, 0x683C) = 0x00;                 //mov byte_26BEC, 0
    memory16(_ds, 0x6819) = 0x0000;             //mov word_26BC9, 0
    _ax = memory16(_ds, 0x680D);                //mov ax, word_26BBD
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
    if ((short)_ax >= 0)                        //jns short loc_1D227
        goto loc_1D227;
    _ax = -_ax;                                 //neg ax
    memory16(_ds, 0x6819) = _ax;                //mov word_26BC9, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1D227:                                      //loc_1D227:
    memory16(_ds, 0x681F) = _ax;                //mov word_26BCF, ax
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_1D233
        goto loc_1D233;
    memory(_ds, 0x683C) |= 0x02;                //or byte_26BEC, 2
loc_1D233:                                      //loc_1D233:
    _ax = memory16(_ds, 0x6815);                //mov ax, word_26BC5
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
    if ((short)_ax < 0)                         //js short loc_1D258
        goto loc_1D258;
    _ax = _ax - memory16(_es, _di + 16);        //sub ax, es:[di+10h]
    if ((short)_ax < 0)                         //js short loc_1D258
        goto loc_1D258;
    memory(_ds, 0x683C) |= 0x01;                //or byte_26BEC, 1
    _ax = memory16(_ds, 0x681F);                //mov ax, word_26BCF
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_es, _di + 16);        //add ax, es:[di+10h]
    memory16(_ds, 0x6835) = _ax;                //mov word_26BE5, ax
    goto loc_1D26A;                             //jmp short loc_1D26A
loc_1D255:                                      //loc_1D255:
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
loc_1D258:                                      //loc_1D258:
    memory(_ds, 0x683C) |= 0x01;                //or byte_26BEC, 1
    _ax = memory16(_ds, 0x681F);                //mov ax, word_26BCF
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_ds, 0x6815);          //add ax, word_26BC5
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
loc_1D26A:                                      //loc_1D26A:
    memory16(_ds, 0x6835) = _ax;                //mov word_26BE5, ax
    memory16(_ds, 0x681B) = 0x0000;             //mov word_26BCB, 0
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
    if ((short)_ax >= 0)                        //jns short loc_1D283
        goto loc_1D283;
    _ax = -_ax;                                 //neg ax
    memory16(_ds, 0x681B) = _ax;                //mov word_26BCB, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1D283:                                      //loc_1D283:
    memory16(_ds, 0x681D) = _ax;                //mov word_26BCD, ax
    _ax = memory16(_ds, 0x6817);                //mov ax, word_26BC7
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
    if ((short)_ax < 0)                         //js short loc_1D2A0
        goto loc_1D2A0;
    _ax = _ax - memory16(_es, _di + 18);        //sub ax, es:[di+12h]
    if ((short)_ax < 0)                         //js short loc_1D2A0
        goto loc_1D2A0;
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_es, _di + 18);        //add ax, es:[di+12h]
    goto loc_1D2AD;                             //jmp short loc_1D2AD
loc_1D2A0:                                      //loc_1D2A0:
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_ds, 0x6817);          //add ax, word_26BC7
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
loc_1D2AD:                                      //loc_1D2AD:
    memory16(_ds, 0x6837) = _ax;                //mov word_26BE7, ax
    _ax = memory16(_ds, 0x681B);                //mov ax, word_26BCB
    _ax = _ax + memory16(_ds, 0x6811);          //add ax, word_26BC1
    if (!(_ax & _ax))                           //jz short loc_1D2BF
        goto loc_1D2BF;
    _bl = 0x50;                                 //mov bl, 50h
    _mul(_bl);                                  //mul bl
loc_1D2BF:                                      //loc_1D2BF:
    _ax += _si;                                 //add ax, si
    _ax = _ax + memory16(_ds, 0x6819);          //add ax, word_26BC9
    _ax = _ax + memory16(_ds, 0x680D);          //add ax, word_26BBD
    memory16(_ds, 0x56E8) = _ax;                //mov word_25A98, ax
    if (memory16(_ds, 0x6835) == 0xffff)        //jz short loc_1D2E3
        goto loc_1D2E3;
    if ((short)memory16(_ds, 0x6835) < 0 /*CHECK*/)//js short loc_1D2E3
        goto loc_1D2E3;
    if (!(memory16(_ds, 0x6837) & 0xffff))      //jz short loc_1D2E3
        goto loc_1D2E3;
    if (_FIXME_)                                //js short loc_1D2E3
        goto loc_1D2E3;
    _ax |= 0x0001;                              //or ax, 1
    return;                                     //retn
loc_1D2E3:                                      //loc_1D2E3:
    goto loc_1D255;                             //jmp loc_1D255
}

void sub_1D2E6()
{
    sub_1D20C();                                //call sub_1D20C
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    if (!(_ax & _ax))                           //jz short loc_1D2F6
        goto loc_1D2F6;
    _bl = memory(_es, _di + 16);                //mov bl, es:[di+10h]
    _mul(_bl);                                  //mul bl
loc_1D2F6:                                      //loc_1D2F6:
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    memory16(_ds, 0x56E6) = _ax;                //mov word_25A96, ax
    _ax = memory16(_ds, 0x6837);                //mov ax, word_26BE7
    memory16(_ds, 0x6837) = _ax;                //mov word_26BE7, ax
    _ax = memory16(_ds, 0x6835);                //mov ax, word_26BE5
    _dx = memory16(_es, _di + 16);              //mov dx, es:[di+10h]
    memory16(_ds, 0x6831) = _dx;                //mov word_26BE1, dx
    _cx = 0x0050;                               //mov cx, 50h
    memory16(_ds, 0x6833) = _cx;                //mov word_26BE3, cx
    memory16(_ds, 0x6835) = _ax;                //mov word_26BE5, ax
    _les(_di, _ds, _di + 12);                   //les di, [di+0Ch]
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x6827) = _ax;                //mov word_26BD7, ax
    _ax = _ax - memory16(_ds, _di + 8);         //sub ax, [di+8]
    _ax = _ax + memory16(_ds, 0x56EC);          //add ax, word_25A9C
    memory16(_ds, 0x682B) = _ax;                //mov word_26BDB, ax
    _di = _di + memory16(_ds, 0x56E6);          //add di, word_25A96
    memory16(_ds, 0x6825) = _di;                //mov word_26BD5, di
    memory16(_ds, 0x6829) = _di;                //mov word_26BD9, di
    _si = memory16(_ds, 0x56E8);                //mov si, word_25A98
    memory16(_ds, 0x682D) = _si;                //mov word_26BDD, si
    _ax = _ds;                                  //mov ax, ds
    memory16(_ds, 0x682F) = _ax;                //mov word_26BDF, ax
    _si = 0x6825;                               //mov si, 6825h
    _push(_es);                                 //push es
    _push(_di);                                 //push di
    loc_1D34E();                                //call loc_1D34E
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
}

void loc_1D34E()
{
    WORD _cs = _seg006;

    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax -= 1;                                   //dec ax
    memory16(_cs, 0x3213) = _ax;                //mov cs:word_200D3, ax
    _al = memory(_ds, _si + 23);                //mov al, [si+17h]
    memory(_cs, 0x3215) = _al;                  //mov cs:byte_200D5, al
    _bx = memory16(_ds, _si + 12);              //mov bx, [si+0Ch]
    _ax = memory16(_ds, _si + 16);              //mov ax, [si+10h]
    _bx -= _ax;                                 //sub bx, ax
    memory16(_cs, 0x3211) = _bx;                //mov cs:word_200D1, bx
    _bx = memory16(_ds, _si + 14);              //mov bx, [si+0Eh]
    _bx -= _ax;                                 //sub bx, ax
    memory16(_cs, 0x320F) = _bx;                //mov cs:word_200CF, bx
    _bx = 0x0522;                               //mov bx, 522h
    if (_ax & 0x0001)                           //jnz short loc_1D37F
        goto loc_1D37F;
    _bx = 0x053e;                               //mov bx, 53Eh
loc_1D37F:                                      //loc_1D37F:
    memory16(_cs, 0x51E) = _bx;                 //mov cs:word_1D3DE, bx
    _bx = 0x08ba;                               //mov bx, 8BAh
    if (_ax & 0x0001)                           //jnz short loc_1D38F
        goto loc_1D38F;
    _bx = 0x08d6;                               //mov bx, 8D6h
loc_1D38F:                                      //loc_1D38F:
    memory16(_cs, 0x8B6) = _bx;                 //mov cs:word_1D776, bx
    _xchg(_ax, _bx);                            //xchg ax, bx
    _bx &= 0xfffe;                              //and bx, 0FFFEh
    _ax = memory16(_cs, _bx + 12823);           //mov ax, cs:[bx+3217h]
    memory16(_cs, 0x53F) = _ax;                 //mov cs:word_1D3FF, ax
    _ax = memory16(_cs, _bx + 12879);           //mov ax, cs:[bx+324Fh]
    memory16(_cs, 0x8D7) = _ax;                 //mov cs:word_1D797, ax
    _push(memory16(_cs, 0x3213));               //push cs:word_200D3
    _push(_ds);                                 //push ds
    _push(_si);                                 //push si
    _les(_bp, _ds, _si + 4);                    //les bp, [si+4]
    _bl = memory(_ds, _si + 22);                //mov bl, [si+16h]
    _cl = _bl;                                  //mov cl, bl
    _bh = _bh ^ _bh;                            //xor bh, bh
    _di = memory16(_cs, _bx + 12935);           //mov di, cs:[bx+3287h]
    _lds(_si, _ds, _si + 8);                    //lds si, [si+8]
    _dx = _di;                                  //mov dx, di
    _dx = (~_dx);                               //not dx
    _al = memory(_cs, 0x3215);                  //mov al, cs:byte_200D5
    if (!(_al & 0x02))                          //jz short near ptr byte_1D3DD
        _STOP_("goto near ptr byte_1D3DD");
    _dl = memory(_es, _bp + -1);                //mov dl, es:[bp-1]
    _dh = 0xff;                                 //mov dh, 0FFh
    _ror(_dx, _cl);                             //ror dx, cl
    _di = (~_di);                               //not di
    _dx &= _di;                                 //and dx, di
    _di = (~_di);                               //not di
    _STOP_("byte_1D3DD db 0B8h");               //byte_1D3DD db 0B8h
    _STOP_("word_1D3DE dw 0");                  //word_1D3DE dw 0
    _STOP_("goto ax");                          //jmp ax
    _STOP_("db 26h, 8Ah, 66h, 0, 0B0h, 0FFh, 0D3h, 0C8...");
    _STOP_("db 23h, 0C7h, 0Bh, 0C2h, 20h, 24h, 46h, 45...");
    _STOP_("db 86h, 0FBh, 23h, 0DFh, 8Bh, 0D3h, 0F7h, ...");
    _STOP_("word_1D3FF dw 0");                  //word_1D3FF dw 0
    _STOP_("goto ax");                          //jmp ax
    _STOP_("db 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h, 0C8h...");
    _STOP_("db 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, 21h, 4...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0...");
    _STOP_("db 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, 23h...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 86h...");
    _STOP_("db 0C8h, 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, ...");
    _STOP_("db 4, 2 dup(46h), 2 dup(45h), 0F7h, 0D7h, ...");
    _STOP_("db 0D3h, 0F7h, 0D7h, 2Eh, 0A0h, 15h, 32h, ...");
    _STOP_("db 4, 0Bh, 0D7h, 20h, 34h, 2Eh, 0FFh, 0Eh,...");
    _STOP_("db 0Dh, 2Eh, 3, 2Eh, 11h, 32h, 2Eh, 3, 36h...");
    _STOP_("db 76h, 0FCh, 5Eh, 1Fh, 2Eh, 8Fh, 6, 13h, ...");
    _STOP_("db 16h, 0C4h, 2Ch, 0C5h, 74h, 8, 0BAh, 2 d...");
    _STOP_("db 15h, 32h, 0A8h, 2, 74h, 0Eh, 26h, 8Ah, ...");
    _STOP_("db 0F6h, 0D3h, 0CAh, 0F7h, 0D7h, 23h, 0D7h...");
    _STOP_("db 0B8h");                          //db 0B8h
    _STOP_("word_1D776 dw 0");                  //word_1D776 dw 0
    _STOP_("goto ax");                          //jmp ax
    _STOP_("db 26h, 8Ah, 66h, 0, 32h, 0C0h, 0D3h, 0C8h...");
    _STOP_("db 23h, 0C7h, 0Bh, 0C2h, 8, 24h, 46h, 45h,...");
    _STOP_("db 86h, 0FBh, 23h, 0DFh, 8Bh, 0D3h, 0F7h, ...");
    _STOP_("word_1D797 dw 0");                  //word_1D797 dw 0
    _STOP_("goto ax");                          //jmp ax
    _STOP_("db 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h, 0C8h...");
    _STOP_("db 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, 9, 4, ...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h, 8Bh, 0D8...");
    _STOP_("db 0Bh, 0C2h, 86h, 0C4h, 9, 4, 2 dup(46h),...");
    _STOP_("db 0F7h, 0D7h, 23h, 0DFh, 8Bh, 0D3h, 0F7h,...");
    _STOP_("db 46h, 0, 86h, 0C4h, 0D3h, 0C8h"); //db 46h, 0, 86h, 0C4h, 0D3h, 0C8h
    _STOP_("db 8Bh, 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 86h, 0C4h, 0D3h...");
    _STOP_("db 0D8h, 23h, 0C7h, 0Bh, 0C2h, 86h, 0C4h, ...");
    _STOP_("db 2 dup(45h), 0F7h, 0D7h, 23h, 0DFh, 8Bh,...");
    _STOP_("db 0D7h, 2Eh, 0A0h, 15h, 32h, 24h, 1, 75h,...");
    _STOP_("db 0FFh, 0Eh, 13h, 32h, 78h, 0Dh, 2Eh, 3, ...");
    _STOP_("db 2Eh, 3, 36h, 0Fh, 32h, 0E9h, 79h, 0FCh,...");
loc_1DAE4:                                      //loc_1DAE4:
    _push(_ax);                                 //push ax
    _ax = 0x0003;                               //mov ax, 3
    _interrupt(16);                             //int 10h
    _ax = _pop();                               //pop ax
    _dl = _al;                                  //mov dl, al
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(33);                             //int 21h
    _interrupt(32);                             //int 20h
    return;                                     //retn
loc_1DAF4:                                      //loc_1DAF4:
    _ax = _es;                                  //mov ax, es
    _bx = memory16(_es, _di);                   //mov bx, es:[di]
    _xchg(_bh, _bl);                            //xchg bh, bl
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ror(_bx, 1);                               //ror bx, 1
    _ax += _bx;                                 //add ax, bx
    _cx = _bx;                                  //mov cx, bx
    _bx = memory16(_es, _di + 2);               //mov bx, es:[di+2]
    _cx |= _bx;                                 //or cx, bx
    if (_cx == 0)                               //jz short locret_1DB36
        goto locret_1DB36;
    _xchg(_bh, _bl);                            //xchg bh, bl
    _cx = _bx;                                  //mov cx, bx
    _cx &= 0x000f;                              //and cx, 0Fh
    _cx += 0x0800;                              //add cx, 800h
    _bx &= 0xfff0;                              //and bx, 0FFF0h
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _bx >>= 1;                                  //shr bx, 1
    _ax += _bx;                                 //add ax, bx
    memory16(_es, _di + 2) = _ax;               //mov es:[di+2], ax
    memory16(_es, _di) = _cx;                   //mov es:[di], cx
    sub_1DB37();                                //call sub_1DB37
    _di += 0x0004;                              //add di, 4
    goto loc_1DAF4;                             //jmp short loc_1DAF4
locret_1DB36:                                   //locret_1DB36:
    return;
}

void sub_1DB37()
{
    WORD _cs = _seg006;

    _push(_ds);                                 //push ds
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_ax);                                 //push ax
    _push(_cx);                                 //push cx
    _ax = memory16(_ds, 0x541D);                //mov ax, word_257CD
    memory16(_cs, 0xDED) = _ax;                 //mov cs:word_1DCAD, ax
    _lds(_di, _es, _di);                        //lds di, es:[di]
    _cx = memory16(_ds, _di + -2);              //mov cx, [di-2]
    _xchg(_ch, _cl);                            //xchg ch, cl
    memory16(_ds, _di + -2) = _cx;              //mov [di-2], cx
    _FIXME_;                                    //and cx, cx
    _cx &= _cx;
    if (_flags.sign)                            //js short loc_1DB56
        goto loc_1DB56;
    if (_cx == 0)                               //jz short loc_1DB56
        goto loc_1DB56;
    goto loc_1DB59;                             //jmp short loc_1DB59
loc_1DB56:                                      //loc_1DB56:
    goto loc_1DCA7;                             //jmp loc_1DCA7
loc_1DB59:                                      //loc_1DB59:
    _ax = memory16(_ds, _di + -4);              //mov ax, [di-4]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -4) = _ax;              //mov [di-4], ax
    _ax = memory16(_ds, _di + -6);              //mov ax, [di-6]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -6) = _ax;              //mov [di-6], ax
    _ax = memory16(_ds, _di + -8);              //mov ax, [di-8]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -8) = _ax;              //mov [di-8], ax
    _ax = memory16(_ds, _di + -12);             //mov ax, [di-0Ch]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -12) = _ax;             //mov [di-0Ch], ax
    _ax = memory16(_ds, _di + -10);             //mov ax, [di-0Ah]
    _xchg(_al, _ah);                            //xchg al, ah
    memory16(_ds, _di + -10) = _ax;             //mov [di-0Ah], ax
    _al &= 0xc0;                                //and al, 0C0h
    if (_al != 0)                               //jnz short loc_1DB56
        goto loc_1DB56;
    _si = _di;                                  //mov si, di
    _ax = memory16(_cs, 0xDED);                 //mov ax, cs:word_1DCAD
    if (_ax == 0x0000)                          //jz short loc_1DB93
        goto loc_1DB93;
    goto loc_1DC6C;                             //jmp loc_1DC6C
loc_1DB93:                                      //loc_1DB93:
    _ax = memory16(_ds, _di + -4);              //mov ax, [di-4]
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _dx = _ax;                                  //mov dx, ax
    _FIXME_;                                    //and dx, dx
    _dx &= _dx;
    if (_flags.sign)                            //js short loc_1DB56
        goto loc_1DB56;
    if (_dx == 0)                               //jz short loc_1DB56
        goto loc_1DB56;
loc_1DBA2:                                      //loc_1DBA2:
    _al = memory(_ds, _si + 2);                 //mov al, [si+2]
    _ah = memory(_ds, _si + 1);                 //mov ah, [si+1]
    memory(_ds, _si + 1) = _al;                 //mov [si+1], al
    _al = memory(_ds, _si + 4);                 //mov al, [si+4]
    memory(_ds, _si + 4) = _ah;                 //mov [si+4], ah
    memory(_ds, _si + 2) = _al;                 //mov [si+2], al
    _al = memory(_ds, _si + 6);                 //mov al, [si+6]
    _ah = memory(_ds, _si + 3);                 //mov ah, [si+3]
    memory(_ds, _si + 3) = _al;                 //mov [si+3], al
    _al = memory(_ds, _si + 5);                 //mov al, [si+5]
    memory(_ds, _si + 5) = _ah;                 //mov [si+5], ah
    memory(_ds, _si + 6) = _al;                 //mov [si+6], al
    _ax = memory16(_ds, _si);                   //mov ax, [si]
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _xchg(_bh, _bl);                            //xchg bh, bl
    memory16(_ds, _si) = _bx;                   //mov [si], bx
    _ax = memory16(_ds, _si + 4);               //mov ax, [si+4]
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_al & 0x80);              //shl al, 1
    _al <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _flags.carry = !!(_ah & 0x80);              //shl ah, 1
    _ah <<= 1;
    _rcl(_bx, 1);                               //rcl bx, 1
    _xchg(_bh, _bl);                            //xchg bh, bl
    memory16(_ds, _si + 4) = _bx;               //mov [si+4], bx
    _ax = _ax ^ _ax;                            //xor ax, ax
    memory16(_ds, _si + 2) = _ax;               //mov [si+2], ax
    memory16(_ds, _si + 6) = _ax;               //mov [si+6], ax
    _si += 0x0008;                              //add si, 8
    _dx -= 1;                                   //dec dx
    if (_dx != 0)                               //jnz short loc_1DC66
        goto loc_1DC66;
    if (--_cx)                                  //loop loc_1DC69
        goto loc_1DC69;
    goto loc_1DCA7;                             //jmp short loc_1DCA7
loc_1DC66:                                      //loc_1DC66:
    goto loc_1DBA2;                             //jmp loc_1DBA2
loc_1DC69:                                      //loc_1DC69:
    goto loc_1DB93;                             //jmp loc_1DB93
loc_1DC6C:                                      //loc_1DC6C:
    _ax = memory16(_ds, _di + -4);              //mov ax, [di-4]
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _dx = _ax;                                  //mov dx, ax
    _FIXME_;                                    //and dx, dx
    _dx &= _dx;
    if (_flags.sign)                            //js short loc_1DCA7
        goto loc_1DCA7;
    if (_dx == 0)                               //jz short loc_1DCA7
        goto loc_1DCA7;
loc_1DC7B:                                      //loc_1DC7B:
    _al = memory(_ds, _si + 2);                 //mov al, [si+2]
    _ah = memory(_ds, _si + 1);                 //mov ah, [si+1]
    memory(_ds, _si + 1) = _al;                 //mov [si+1], al
    _al = memory(_ds, _si + 4);                 //mov al, [si+4]
    memory(_ds, _si + 4) = _ah;                 //mov [si+4], ah
    memory(_ds, _si + 2) = _al;                 //mov [si+2], al
    _al = memory(_ds, _si + 6);                 //mov al, [si+6]
    _ah = memory(_ds, _si + 3);                 //mov ah, [si+3]
    memory(_ds, _si + 3) = _al;                 //mov [si+3], al
    _al = memory(_ds, _si + 5);                 //mov al, [si+5]
    memory(_ds, _si + 5) = _ah;                 //mov [si+5], ah
    memory(_ds, _si + 6) = _al;                 //mov [si+6], al
    _si += 0x0008;                              //add si, 8
    _dx -= 1;                                   //dec dx
    if (_dx != 0)                               //jnz short loc_1DC7B
        goto loc_1DC7B;
    if (--_cx)                                  //loop loc_1DC6C
        goto loc_1DC6C;
loc_1DCA7:                                      //loc_1DCA7:
    _cx = _pop();                               //pop cx
    _ax = _pop();                               //pop ax
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
}

void sub_1DCAF()
{
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax >>= 1;                                  //shr ax, 1
    _ax &= 0xfffe;                              //and ax, 0FFFEh
    memory16(_ds, 0x680D) = _ax;                //mov word_26BBD, ax
    _dx = memory16(_ss, _bp + 8);               //mov dx, [bp+8]
    _dx += 1;                                   //inc dx
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx >>= 1;                                  //shr dx, 1
    _dx &= 0xfffe;                              //and dx, 0FFFEh
    memory16(_ds, 0x680F) = _dx;                //mov word_26BBF, dx
    _dx -= _ax;                                 //sub dx, ax
    memory16(_ds, 0x6815) = _dx;                //mov word_26BC5, dx
    _ax = memory16(_ss, _bp + 6);               //mov ax, [bp+6]
    memory16(_ds, 0x6811) = _ax;                //mov word_26BC1, ax
    _dx = memory16(_ss, _bp + 10);              //mov dx, [bp+0Ah]
    memory16(_ds, 0x6813) = _dx;                //mov word_26BC3, dx
    _dx -= _ax;                                 //sub dx, ax
    memory16(_ds, 0x6817) = _dx;                //mov word_26BC7, dx
}

void sub_1DCE9()
{
    _les(_bx, _ss, _bp + 4);                    //les bx, [bp+4]
    _bx |= _bx;                                 //or bx, bx
    if (_bx == 0)                               //jz short locret_1DCF3
        goto locret_1DCF3;
    sub_1DCF4();                                //call sub_1DCF4
locret_1DCF3:                                   //locret_1DCF3:
    return;
}

void sub_1DCF4()
{
    memory16(_ds, 0x6809) = _bx;                //mov word ptr dword_26BB9, bx
    _si = _es;                                  //mov si, es
    memory16(_ds, 0x680B) = _si;                //mov word ptr dword_26BB9+2, si
    _ax = _bx;                                  //mov ax, bx
    _ax |= _si;                                 //or ax, si
    if (_ax == 0)                               //jz short locret_1DD07
        goto locret_1DD07;
    sub_1DD08();                                //call sub_1DD08
locret_1DD07:                                   //locret_1DD07:
    return;
}

void sub_1DD08()
{
    WORD _cs = _seg006;

    _les(_bx, _ds, 0x6809);                     //les bx, dword_26BB9
loc_1DD0C:                                      //loc_1DD0C:
    _push(_es);                                 //push es
    _les(_di, _es, _bx);                        //les di, es:[bx]
    _ax = _es;                                  //mov ax, es
    _ax |= _di;                                 //or ax, di
    if (_ax == 0)                               //jz short loc_1DD19
        goto loc_1DD19;
    _push(_bx);                                 //push bx
    goto loc_1DD1F;                             //jmp short loc_1DD1F
loc_1DD19:                                      //loc_1DD19:
    goto loc_1DDBF;                             //jmp loc_1DDBF
loc_1DD1C:                                      //loc_1DD1C:
    goto loc_1DDB7;                             //jmp loc_1DDB7
loc_1DD1F:                                      //loc_1DD1F:
    _al = memory(_es, _di + 10);                //mov al, es:[di+0Ah]
    if (!(_al & 0x80))                          //jz short loc_1DD1C
        goto loc_1DD1C;
    _ax = memory16(_es, _di);                   //mov ax, es:[di]
    if (!(memory(_es, _di + 10) & 0x20))        //jz short loc_1DD41
        goto loc_1DD41;
    _bx = memory16(_es, _di + 16);              //mov bx, es:[di+10h]
    _bx <<= 1;                                  //shl bx, 1
    _bx <<= 1;                                  //shl bx, 1
    _ax -= _bx;                                 //sub ax, bx
    _ax = _ax + memory16(_es, _di + 20);        //add ax, es:[di+14h]
    goto loc_1DD45;                             //jmp short loc_1DD45
loc_1DD41:                                      //loc_1DD41:
    _ax = _ax - memory16(_es, _di + 20);        //sub ax, es:[di+14h]
loc_1DD45:                                      //loc_1DD45:
    if (!(memory(_es, _di + 10) & 0x01))        //jz short loc_1DD52
        goto loc_1DD52;
    _ax += 0x0004;                              //add ax, 4
    _ax &= 0xfff8;                              //and ax, 0FFF8h
loc_1DD52:                                      //loc_1DD52:
    _bx = _ax;                                  //mov bx, ax
    _bx &= 0x0007;                              //and bx, 7
    memory(_cs, 0x3216) = _bl;                  //mov cs:byte_200D6, bl
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    _sar(_ax, 1);                               //sar ax, 1
    memory16(_ds, 0x6821) = _ax;                //mov word_26BD1, ax
    _ax = memory16(_es, _di + 2);               //mov ax, es:[di+2]
    _ax = _ax - memory16(_es, _di + 22);        //sub ax, es:[di+16h]
    memory16(_ds, 0x6823) = _ax;                //mov word_26BD3, ax
    _dx = memory16(_ds, 0x6813);                //mov dx, word_26BC3
    _ax = memory16(_ds, 0x6823);                //mov ax, word_26BD3
    if ((short)_dx <= (short)_ax)               //jle short loc_1DD1C
        goto loc_1DD1C;
    _dx = memory16(_ds, 0x680F);                //mov dx, word_26BBF
    _ax = memory16(_ds, 0x6821);                //mov ax, word_26BD1
    if ((short)_dx <= (short)_ax)               //jle short loc_1DD1C
        goto loc_1DD1C;
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_es, _di + 16);              //mov ax, es:[di+10h]
    _ax >>= 1;                                  //shr ax, 1
    _flags.sign = (short)(_dx + _ax) < 0;       //add dx, ax
    _dx += _ax;
    if (_flags.sign)                            //js short loc_1DD1C
        goto loc_1DD1C;
    _ax = memory16(_ds, 0x680D);                //mov ax, word_26BBD
    if ((short)_dx < (short)_ax)                //jl short loc_1DD1C
        goto loc_1DD1C;
    _ax = memory16(_ds, 0x6823);                //mov ax, word_26BD3
    _dx = _ax;                                  //mov dx, ax
    _ax = memory16(_es, _di + 18);              //mov ax, es:[di+12h]
    _flags.sign = (short)(_dx + _ax) < 0;       //add dx, ax
    _dx += _ax;
    if (_flags.sign)                            //js short loc_1DDB7
        goto loc_1DDB7;
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    if ((short)_dx < (short)_ax)                //jl short loc_1DDB7
        goto loc_1DDB7;
    _push(_bx);                                 //push bx
    _push(_di);                                 //push di
    sub_1DEFD();                                //call sub_1DEFD
    _di = _pop();                               //pop di
    _bx = _pop();                               //pop bx
    goto loc_1DD1C;                             //jmp loc_1DD1C
loc_1DDB7:                                      //loc_1DDB7:
    _bx = _pop();                               //pop bx
    _es = _pop();                               //pop es
    _bx += 0x0004;                              //add bx, 4
    goto loc_1DD0C;                             //jmp loc_1DD0C
loc_1DDBF:                                      //loc_1DDBF:
    _es = _pop();                               //pop es
}

void loc_1DDC8()
{
loc_1DDC8:
    _STOP_("goto loc_1DE5E");                   //jmp loc_1DE5E
loc_1DDCB:                                      //loc_1DDCB:
    _ax = memory16(_es, _di + 16);              //mov ax, es:[di+10h]
    _ax >>= 1;                                  //shr ax, 1
    _flags.sign = (short)(_ax + memory16(_ds, 0x6821)) < 0;
    _ax = _ax + memory16(_ds, 0x6821);
    if (_flags.sign)                            //js short loc_1DDC8
        goto loc_1DDC8;
    if ((short)_ax <= (short)memory16(_ds, 0x680D))//jle short loc_1DDC8
        goto loc_1DDC8;
    _ax = memory16(_es, _di + 18);              //mov ax, es:[di+12h]
    if ((short)_ax >= (short)0x0064)            //jge short loc_1DDC8
        goto loc_1DDC8;
    _flags.sign = (short)(_ax + memory16(_ds, 0x6823)) < 0;
    _ax = _ax + memory16(_ds, 0x6823);
    if (_flags.sign)                            //js short loc_1DE5E
        _STOP_("goto loc_1DE5E");
    if ((short)_ax <= (short)memory16(_ds, 0x6811))//jle short loc_1DE5E
        _STOP_("goto loc_1DE5E");
    _ax = memory16(_ds, 0x680F);                //mov ax, word_26BBF
    if ((short)_ax <= (short)memory16(_ds, 0x6821))//jle short loc_1DE5E
        _STOP_("goto loc_1DE5E");
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    _flags.sign = (short)(_ax + memory16(_ds, 0x6813)) < 0;
    _ax = _ax + memory16(_ds, 0x6813);
    if (_flags.sign)                            //js short loc_1DE5E
        _STOP_("goto loc_1DE5E");
    if ((short)_ax <= (short)memory16(_ds, 0x6823))//jle short loc_1DE5E
        _STOP_("goto loc_1DE5E");
}

void sub_1DE10()
{
    memory(_ds, 0x683C) = 0x00;                 //mov byte_26BEC, 0
    memory16(_ds, 0x6819) = 0x0000;             //mov word_26BC9, 0
    _ax = memory16(_ds, 0x680D);                //mov ax, word_26BBD
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
    if ((short)_ax >= 0)                        //jns short loc_1DE2B
        goto loc_1DE2B;
    _ax = -_ax;                                 //neg ax
    memory16(_ds, 0x6819) = _ax;                //mov word_26BC9, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1DE2B:                                      //loc_1DE2B:
    memory16(_ds, 0x681F) = _ax;                //mov word_26BCF, ax
    _ax &= _ax;                                 //and ax, ax
    if (_ax == 0)                               //jz short loc_1DE37
        goto loc_1DE37;
    memory(_ds, 0x683C) |= 0x02;                //or byte_26BEC, 2
loc_1DE37:                                      //loc_1DE37:
    _ax = memory16(_ds, 0x680F);                //mov ax, word_26BBF
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
    if ((short)_ax < 0)                         //js short loc_1DE61
        goto loc_1DE61;
    _bx = memory16(_es, _di + 16);              //mov bx, es:[di+10h]
    _bx >>= 1;                                  //shr bx, 1
    _bx += 1;                                   //inc bx
    _ax -= _bx;                                 //sub ax, bx
    if ((short)_ax < 0)                         //js short loc_1DE61
        goto loc_1DE61;
    _ax = memory16(_es, _di + 16);              //mov ax, es:[di+10h]
    _ax >>= 1;                                  //shr ax, 1
    _ax = _ax - memory16(_ds, 0x681F);          //sub ax, word_26BCF
    if ((short)_ax >= 0)                        //jns short loc_1DE59
        goto loc_1DE59;
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1DE59:                                      //loc_1DE59:
    memory16(_ds, 0x6835) = _ax;                //mov word_26BE5, ax
    goto loc_1DE73;                             //jmp short loc_1DE73
loc_1DE5E:                                      //loc_1DE5E:
    _ax = _ax ^ _ax;                            //xor ax, ax
    return;                                     //retn
loc_1DE61:                                      //loc_1DE61:
    _ax = memory16(_ds, 0x681F);                //mov ax, word_26BCF
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_ds, 0x680F);          //add ax, word_26BBF
    _ax = _ax - memory16(_ds, 0x6821);          //sub ax, word_26BD1
    memory(_ds, 0x683C) |= 0x01;                //or byte_26BEC, 1
loc_1DE73:                                      //loc_1DE73:
    memory16(_ds, 0x6835) = _ax;                //mov word_26BE5, ax
    memory16(_ds, 0x681B) = 0x0000;             //mov word_26BCB, 0
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
    if ((short)_ax >= 0)                        //jns short loc_1DE8C
        goto loc_1DE8C;
    _ax = -_ax;                                 //neg ax
    memory16(_ds, 0x681B) = _ax;                //mov word_26BCB, ax
    _ax = _ax ^ _ax;                            //xor ax, ax
loc_1DE8C:                                      //loc_1DE8C:
    memory16(_ds, 0x681D) = _ax;                //mov word_26BCD, ax
    _ax = memory16(_ds, 0x6811);                //mov ax, word_26BC1
    _ax = _ax + memory16(_ds, 0x6817);          //add ax, word_26BC7
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
    if ((short)_ax < 0)                         //js short loc_1DEAD
        goto loc_1DEAD;
    _ax = _ax - memory16(_es, _di + 18);        //sub ax, es:[di+12h]
    if ((short)_ax < 0)                         //js short loc_1DEAD
        goto loc_1DEAD;
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_es, _di + 18);        //add ax, es:[di+12h]
    goto loc_1DEBE;                             //jmp short loc_1DEBE
loc_1DEAD:                                      //loc_1DEAD:
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    _ax = -_ax;                                 //neg ax
    _ax = _ax + memory16(_ds, 0x6811);          //add ax, word_26BC1
    _ax = _ax + memory16(_ds, 0x6817);          //add ax, word_26BC7
    _ax = _ax - memory16(_ds, 0x6823);          //sub ax, word_26BD3
loc_1DEBE:                                      //loc_1DEBE:
    memory16(_ds, 0x6837) = _ax;                //mov word_26BE7, ax
    _ax = memory16(_ds, 0x681B);                //mov ax, word_26BCB
    _ax = _ax + memory16(_ds, 0x6811);          //add ax, word_26BC1
    if (!(_ax & _ax))                           //jz short loc_1DED0
        goto loc_1DED0;
    _bl = 0x28;                                 //mov bl, 28h
    _mul(_bl);                                  //mul bl
loc_1DED0:                                      //loc_1DED0:
    _ax = _ax + memory16(_ds, 0x56E2);          //add ax, word_25A92
    _ax = _ax + memory16(_ds, 0x6819);          //add ax, word_26BC9
    _ax = _ax + memory16(_ds, 0x680D);          //add ax, word_26BBD
    memory16(_ds, 0x56E8) = _ax;                //mov word_25A98, ax
    _ax = memory16(_ds, 0x6835);                //mov ax, word_26BE5
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_ax == 0)                               //jz short loc_1DEFA
        goto loc_1DEFA;
    if (_flags.sign)                            //js short loc_1DEFA
        goto loc_1DEFA;
    _ax = memory16(_ds, 0x6837);                //mov ax, word_26BE7
    _FIXME_;                                    //and ax, ax
    _ax &= _ax;
    if (_ax == 0)                               //jz short loc_1DEFA
        goto loc_1DEFA;
    if (_flags.sign)                            //js short loc_1DEFA
        goto loc_1DEFA;
    if ((short)_ax >= (short)0x0064)            //jge short loc_1DEFA
        goto loc_1DEFA;
    _ax |= 0x0001;                              //or ax, 1
    return;                                     //retn
loc_1DEFA:                                      //loc_1DEFA:
    goto loc_1DE5E;                             //jmp loc_1DE5E
}

void sub_1DEFD()
{
    WORD _cs = _seg006;

    sub_1DE10();                                //call sub_1DE10
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    if (!(_ax & _ax))                           //jz short loc_1DF0F
        goto loc_1DF0F;
    _bl = memory(_es, _di + 16);                //mov bl, es:[di+10h]
    _bl += _bl;                                 //add bl, bl
    _mul(_bl);                                  //mul bl
loc_1DF0F:                                      //loc_1DF0F:
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    memory16(_ds, 0x56E6) = _ax;                //mov word_25A96, ax
    _ax = memory16(_ds, 0x6835);                //mov ax, word_26BE5
    _dx = memory16(_es, _di + 16);              //mov dx, es:[di+10h]
    _dx >>= 1;                                  //shr dx, 1
    _cl = 0x28;                                 //mov cl, 28h
    _cl -= _al;                                 //sub cl, al
    _ch = _ch ^ _ch;                            //xor ch, ch
    _dh = _ch;                                  //mov dh, ch
    memory(_ds, 0x683A) = 0x00;                 //mov byte_26BEA, 0
    goto loc_1DF66;                             //jmp short loc_1DF66
    _ax = memory16(_ds, 0x681D);                //mov ax, word_26BCD
    if (!(_ax & _ax))                           //jz short loc_1DF47
        goto loc_1DF47;
    _bl = memory(_es, _di + 16);                //mov bl, es:[di+10h]
    _mul(_bl);                                  //mul bl
loc_1DF47:                                      //loc_1DF47:
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    _ax = _ax + memory16(_ds, 0x681F);          //add ax, word_26BCF
    memory16(_ds, 0x56E6) = _ax;                //mov word_25A96, ax
    _ax = memory16(_ds, 0x6835);                //mov ax, word_26BE5
    _dx = memory16(_es, _di + 16);              //mov dx, es:[di+10h]
    _dx >>= 1;                                  //shr dx, 1
    _cl = 0x28;                                 //mov cl, 28h
    _cl -= _al;                                 //sub cl, al
    _ch = _ch ^ _ch;                            //xor ch, ch
    memory(_ds, 0x683A) = 0x01;                 //mov byte_26BEA, 1
loc_1DF66:                                      //loc_1DF66:
    _push(_es);                                 //push es
    _push(_di);                                 //push di
    _al = memory(_cs, 0x3216);                  //mov al, cs:byte_200D6
    memory(_ds, 0x683B) = _al;                  //mov byte_26BEB, al
    _les(_bp, _es, _di + 12);                   //les bp, es:[di+0Ch]
    _bp = _bp + memory16(_ds, 0x56E6);          //add bp, word_25A96
    memory16(_ds, 0x6825) = _bp;                //mov word_26BD5, bp
    _ax = _es;                                  //mov ax, es
    memory16(_ds, 0x6827) = _ax;                //mov word_26BD7, ax
    _si = memory16(_ds, 0x56E8);                //mov si, word_25A98
    memory16(_ds, 0x682D) = _si;                //mov word_26BDD, si
    _ax = memory16(_ds, 0x56E4);                //mov ax, word_25A94
    memory16(_ds, 0x682F) = _ax;                //mov word_26BDF, ax
    memory16(_ds, 0x6833) = 0x0028;             //mov word_26BE3, 28h
    memory16(_ds, 0x6831) = _dx;                //mov word_26BE1, dx
    _si = 0x6825;                               //mov si, 6825h
    sub_1DFA1();                                //call sub_1DFA1
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
}

void sub_1DFA1()
{
    WORD _cs = _seg006;

    _push(_ds);                                 //push ds
    _al = memory(_ds, _si + 23);                //mov al, [si+17h]
    memory(_cs, 0x3215) = _al;                  //mov cs:byte_200D5, al
    _al = memory(_ds, _si + 22);                //mov al, [si+16h]
    memory(_cs, 0x3216) = _al;                  //mov cs:byte_200D6, al
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax -= 1;                                   //dec ax
    memory16(_cs, 0x3213) = _ax;                //mov cs:word_200D3, ax
    if ((short)_ax >= 0)                        //jns short loc_1DFBD
        goto loc_1DFBD;
    goto loc_1EFF9;                             //jmp loc_1EFF9
loc_1DFBD:                                      //loc_1DFBD:
    _bx = memory16(_ds, _si + 16);              //mov bx, [si+10h]
    _ax = memory16(_ds, _si + 14);              //mov ax, [si+0Eh]
    _ax -= _bx;                                 //sub ax, bx
    memory16(_cs, 0x320F) = _ax;                //mov cs:word_200CF, ax
    _cx = memory16(_ds, _si + 12);              //mov cx, [si+0Ch]
    _cx -= _bx;                                 //sub cx, bx
    _al = memory(_ds, _si + 21);                //mov al, [si+15h]
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x05;                                 //mov al, 5
    _out(_dx, _al);                             //out dx, al
    _STOP_("goto $+2");                         //jmp short $+2
loc_1DFDB:                                      //loc_1DFDB:
    _STOP_("goto $+2");                         //jmp short $+2
loc_1DFDD:                                      //loc_1DFDD:
    _dx += 1;                                   //inc dx
    _al = 0x00;                                 //mov al, 0
    _out(_dx, _al);                             //out dx, al
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    _dx = 0x03ce;                               //mov dx, 3CEh
    _al = 0x03;                                 //mov al, 3
    _out(_dx, _al);                             //out dx, al
    _STOP_("goto $+2");                         //jmp short $+2
loc_1DFED:                                      //loc_1DFED:
    _STOP_("goto $+2");                         //jmp short $+2
loc_1DFEF:                                      //loc_1DFEF:
    _dx += 1;                                   //inc dx
    _al = 0x00;                                 //mov al, 0
    _out(_dx, _al);                             //out dx, al
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _push(_dx);                                 //push dx
    _push(_ax);                                 //push ax
    _dx = 0x03c4;                               //mov dx, 3C4h
    _al = 0x02;                                 //mov al, 2
    _out(_dx, _al);                             //out dx, al
    _STOP_("goto $+2");                         //jmp short $+2
loc_1DFFF:                                      //loc_1DFFF:
    _STOP_("goto $+2");                         //jmp short $+2
loc_1E001:                                      //loc_1E001:
    _dx += 1;                                   //inc dx
    _al = 0x0f;                                 //mov al, 0Fh
    _out(_dx, _al);                             //out dx, al
    _ax = _pop();                               //pop ax
    _dx = _pop();                               //pop dx
    _bx += _bx;                                 //add bx, bx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax += _ax;                                 //add ax, ax
    _dx = _ax;                                  //mov dx, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _dx;                                 //add ax, dx
    _bp = 0x328f;                               //mov bp, 328Fh
    _bp += _ax;                                 //add bp, ax
    _dx = memory16(_cs, _bp + 4);               //mov dx, cs:[bp+4]
    _di = memory16(_cs, _bp);                   //mov di, cs:[bp+0]
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    memory16(_cs, 0x25E2) = _ax;                //mov cs:word_1F4A2, ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    _push(_ax);                                 //push ax
    _push(_bx);                                 //push bx
    _al = memory(_cs, 0x320E);                  //mov al, cs:byte_200CE
    _bx = 0x11da;                               //mov bx, 11DAh
    _al &= 0x40;                                //and al, 40h
    if (_al == 0)                               //jz short loc_1E03B
        goto loc_1E03B;
    _bx = 0x11e2;                               //mov bx, 11E2h
loc_1E03B:                                      //loc_1E03B:
    _ax = memory16(_cs, _bx);                   //mov ax, cs:[bx]
    memory16(_cs, 0x11D5) = _ax;                //mov cs:word_1E095, ax
    _al = memory(_cs, _bx + 2);                 //mov al, cs:[bx+2]
    memory(_cs, 0x11D7) = _al;                  //mov cs:byte_1E097, al
    _al = memory(_cs, _bx + 4);                 //mov al, cs:[bx+4]
    memory(_cs, 0x11D8) = _al;                  //mov cs:byte_1E098, al
    _al = memory(_cs, _bx + 6);                 //mov al, cs:[bx+6]
    memory(_cs, 0x11D9) = _al;                  //mov cs:byte_1E099, al
    _bx = _pop();                               //pop bx
    _ax = _pop();                               //pop ax
    _les(_bp, _ds, _si);                        //les bp, [si]
    _lds(_si, _ds, _si + 8);                    //lds si, [si+8]
    _bl = memory(_cs, 0x3216);                  //mov bl, cs:byte_200D6
    _bh = _bh ^ _bh;                            //xor bh, bh
    _bx += _bx;                                 //add bx, bx
    _di = memory16(_cs, _bx + 13093);           //mov di, cs:[bx+3325h]
    if (_dx == 0x0004)                          //jz short loc_1E08A
        goto loc_1E08A;
    if (_dx == 0x0002)                          //jz short loc_1E08C
        goto loc_1E08C;
    if (_dx == 0x0001)                          //jz short loc_1E088
        goto loc_1E088;
    if (_dx == 0x0003)                          //jz short loc_1E088
        goto loc_1E088;
loc_1E083:                                      //loc_1E083:
    _ah = 0x01;                                 //mov ah, 1
    _STOP_("goto loc_1DAE4");                   //jmp loc_1DAE4
loc_1E088:                                      //loc_1E088:
    goto loc_1E083;                             //jmp short loc_1E083
loc_1E08A:                                      //loc_1E08A:
    _cx += _cx;                                 //add cx, cx
loc_1E08C:                                      //loc_1E08C:
    _cx += _cx;                                 //add cx, cx
    memory16(_cs, 0x3211) = _cx;                //mov cs:word_200D1, cx
    _STOP_("goto ax");                          //jmp ax
    _STOP_("word_1E095 dw 0");                  //word_1E095 dw 0
    _STOP_("byte_1E097 db 0");                  //byte_1E097 db 0
    _STOP_("byte_1E098 db 0");                  //byte_1E098 db 0
    _STOP_("byte_1E099 db 0");                  //byte_1E099 db 0
    _STOP_("db 2, 1, 2, 0, 4, 0, 8, 0, 2, 1, 2, 0, 8, ...");
    _STOP_("db 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h, 0C5...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D3h, 0...");
    _STOP_("db 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0...");
    _STOP_("db 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, 0CEh,...");
    _STOP_("db 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h, 1...");
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 4...");
    _STOP_("db 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, ...");
    _STOP_("db 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h, 8Bh,...");
    _STOP_("db 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, 32h, ...");
    _STOP_("db 0CAh, 59h, 50h, 52h, 23h, 0C7h, 23h, 0D...");
    _STOP_("db 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0...");
    _STOP_("db 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4...");
    _STOP_("db 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 2...");
    _STOP_("db 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 1...");
    _STOP_("db 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0F...");
    _STOP_("db 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, ...");
    _STOP_("db 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2E...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh");                    //db 0D3h, 0CAh
    _STOP_("db 59h, 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0B...");
    _STOP_("db 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, ...");
    _STOP_("db 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4...");
    _STOP_("db 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 2...");
    _STOP_("db 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 1...");
    _STOP_("db 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0F...");
    _STOP_("db 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, ...");
    _STOP_("db 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2E...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0C7h, 2...");
    _STOP_("db 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, ...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 8...");
    _STOP_("db 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, ...");
    _STOP_("db 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2Eh, 8A...");
    _STOP_("db 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, 50h, ...");
    _STOP_("db 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0...");
    _STOP_("db 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh...");
    _STOP_("db 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4...");
    _STOP_("db 24h, 88h");                      //db 24h, 88h
    _STOP_("db 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3...");
    _STOP_("db 0D8h, 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86...");
    _STOP_("db 0E9h, 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h,...");
    _STOP_("db 0, 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h,...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0C7h, 2...");
    _STOP_("db 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, ...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 8...");
    _STOP_("db 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, ...");
    _STOP_("db 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2Eh, 8A...");
    _STOP_("db 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, 50h, ...");
    _STOP_("db 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0...");
    _STOP_("db 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh...");
    _STOP_("db 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4...");
    _STOP_("db 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0E...");
    _STOP_("db 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5Bh, 0F7...");
    _STOP_("db 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0CFh, ...");
    _STOP_("db 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h, 0C5...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D3h, 0...");
    _STOP_("db 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0...");
    _STOP_("db 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, 0CEh,...");
    _STOP_("db 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h, 1...");
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 4...");
    _STOP_("db 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, ...");
    _STOP_("db 0F7h, 0D7h");                    //db 0F7h, 0D7h
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0C7h, 2...");
    _STOP_("db 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, ...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 8...");
    _STOP_("db 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, ...");
    _STOP_("db 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2Eh, 8A...");
    _STOP_("db 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, 50h, ...");
    _STOP_("db 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0...");
    _STOP_("db 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh...");
    _STOP_("db 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4...");
    _STOP_("db 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0E...");
    _STOP_("db 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5Bh, 0F7...");
    _STOP_("db 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0CFh, ...");
    _STOP_("db 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h, 0C5...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D3h, 0...");
    _STOP_("db 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0...");
    _STOP_("db 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, 0CEh,...");
    _STOP_("db 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h, 1...");
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 4...");
    _STOP_("db 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, ...");
    _STOP_("db 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h, 8Bh,...");
    _STOP_("db 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, 32h, ...");
    _STOP_("db 0CAh, 59h, 50h, 52h, 23h, 0C7h, 23h, 0D...");
    _STOP_("db 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0...");
    _STOP_("db 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BA...");
    _STOP_("db 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, ...");
    _STOP_("db 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3...");
    _STOP_("db 0D8h, 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86...");
    _STOP_("db 0E9h, 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h,...");
    _STOP_("db 0, 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h,...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0C7h, 2...");
    _STOP_("db 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, ...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 8...");
    _STOP_("db 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, ...");
    _STOP_("db 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2Eh, 8A...");
    _STOP_("db 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, 50h, ...");
    _STOP_("db 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0...");
    _STOP_("db 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh...");
    _STOP_("db 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4...");
    _STOP_("db 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0E...");
    _STOP_("db 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5Bh, 0F7...");
    _STOP_("db 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0CFh, ...");
    _STOP_("db 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h, 0C5...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D3h, 0...");
    _STOP_("db 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0...");
    _STOP_("db 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, 0CEh,...");
    _STOP_("db 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h, 1...");
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh");                           //db 2Eh
    _STOP_("db 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 5...");
    _STOP_("db 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, ...");
    _STOP_("db 0D7h, 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, ...");
    _STOP_("db 4, 51h, 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, ...");
    _STOP_("db 59h, 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0B...");
    _STOP_("db 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, ...");
    _STOP_("db 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4...");
    _STOP_("db 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 2...");
    _STOP_("db 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 1...");
    _STOP_("db 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0F...");
    _STOP_("db 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, ...");
    _STOP_("db 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2E...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh...");
    _STOP_("db 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 1...");
    _STOP_("db 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2...");
    _STOP_("db 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, ...");
    _STOP_("db 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h...");
    _STOP_("db 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, ...");
    _STOP_("db 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0C7h, 2...");
    _STOP_("db 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, ...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 8...");
    _STOP_("db 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, ...");
    _STOP_("db 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2Eh, 8A...");
    _STOP_("db 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, 50h, ...");
    _STOP_("db 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0...");
    _STOP_("db 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8, 0EFh...");
    _STOP_("db 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8Ah, 0C4...");
    _STOP_("db 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11h, 0E...");
    _STOP_("db 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5Bh, 0F7...");
    _STOP_("db 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0CFh, ...");
    _STOP_("db 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h, 0C5...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D3h, 0...");
    _STOP_("db 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0...");
    _STOP_("db 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, 0CEh,...");
    _STOP_("db 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h, 1...");
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 4...");
    _STOP_("db 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, ...");
    _STOP_("db 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h, 8Bh,...");
    _STOP_("db 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, 32h, ...");
    _STOP_("db 0CAh, 59h, 50h, 52h, 23h, 0C7h, 23h, 0D...");
    _STOP_("db 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0...");
    _STOP_("db 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4...");
    _STOP_("db 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 2...");
    _STOP_("db 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 1...");
    _STOP_("db 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0F...");
    _STOP_("db 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h, 26h, ...");
    _STOP_("db 26h, 8Bh, 56h, 2, 83h, 0C5h, 4, 51h, 2E...");
    _STOP_("db 16h, 32h, 0D3h, 0C8h, 0D3h, 0CAh, 59h, ...");
    _STOP_("db 0C7h, 23h, 0D7h, 0Bh, 0D8h, 0Bh, 0CAh, ...");
    _STOP_("db 0C1h, 0Ah, 0E0h, 0BAh, 0CEh, 3, 0B0h, 8...");
    _STOP_("db 0C4h, 3, 2Eh, 0A1h, 0D5h, 11h, 0EFh, 8A...");
    _STOP_("db 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0h, 0D7h, 11...");
    _STOP_("db 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0EEh, 88h, 0...");
    _STOP_("db 0D9h, 11h, 0EEh, 88h, 2Ch, 46h, 59h, 5B...");
    _STOP_("db 86h, 0FBh, 86h, 0E9h, 23h, 0DFh, 23h, 0...");
    _STOP_("db 26h, 8Bh, 46h, 0, 26h, 8Bh, 56h, 2, 83h...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D3h, 0C8h, 0D...");
    _STOP_("db 50h, 52h, 23h, 0C7h, 23h, 0D7h, 0Bh, 0D...");
    _STOP_("db 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0E0h, 0BAh, ...");
    _STOP_("db 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0A1h, 0D5h...");
    _STOP_("db 8Ah");                           //db 8Ah
    _STOP_("db 0C4h, 42h, 8Ah, 24h, 88h, 1Ch, 2Eh, 0A0...");
    _STOP_("db 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0D8h, 11h, 0...");
    _STOP_("db 2Eh, 0A0h, 0D9h, 11h, 0EEh, 88h, 2Ch, 4...");
    _STOP_("db 0F7h, 0D7h, 86h, 0FBh, 86h, 0E9h, 23h, ...");
    _STOP_("db 0F7h, 0D7h, 26h, 8Bh, 46h, 0, 26h, 8Bh,...");
    _STOP_("db 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16h, 32h, ...");
    _STOP_("db 0CAh, 59h, 50h, 52h, 23h, 0C7h, 23h, 0D...");
    _STOP_("db 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0C1h, 0Ah, 0...");
    _STOP_("db 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, 2Eh, 0...");
    _STOP_("db 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88h, 1C...");
    _STOP_("db 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0A0h, 0...");
    _STOP_("db 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0EEh, 8...");
    _STOP_("db 59h, 5Bh, 0F7h, 0D7h, 86h, 0FBh, 86h, 0...");
    _STOP_("db 23h, 0CFh, 0F7h, 0D7h, 26h, 8Bh, 46h, 0...");
    _STOP_("db 2, 83h, 0C5h, 4, 51h, 2Eh, 8Ah, 0Eh, 16...");
    _STOP_("db 0C8h, 0D3h, 0CAh, 59h, 50h, 52h, 23h, 0...");
    _STOP_("db 0Bh, 0D8h, 0Bh, 0CAh, 8Bh, 0C3h, 0Bh, 0...");
    _STOP_("db 0BAh, 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4...");
    _STOP_("db 0D5h, 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 2...");
    _STOP_("db 2Eh, 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2...");
    _STOP_("db 11h, 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 1...");
    _STOP_("db 2Ch, 46h, 59h, 5Bh, 0F7h, 0D7h, 86h, 0F...");
    _STOP_("db 23h, 0DFh, 23h, 0CFh, 0F7h, 0D7h, 2Eh, ...");
    _STOP_("db 24h, 1, 75h, 30h, 8Bh, 0C3h, 0Bh, 0C1h,...");
    _STOP_("db 0CEh, 3, 0B0h, 8, 0EFh, 0BAh, 0C4h, 3, ...");
    _STOP_("db 11h, 0EFh, 8Ah, 0C4h, 42h, 8Ah, 24h, 88...");
    _STOP_("db 0A0h, 0D7h, 11h, 0EEh, 88h, 3Ch, 2Eh, 0...");
    _STOP_("db 0EEh, 88h, 0Ch, 2Eh, 0A0h, 0D9h, 11h, 0...");
    _STOP_("db 2Eh, 0FFh, 0Eh, 13h, 32h, 78h, 38h, 2Eh...");
    _STOP_("db 32h, 2Eh, 3, 36h, 0Fh, 32h, 33h, 0DBh, ...");
    _STOP_("db 0A0h, 15h, 32h, 24h, 2, 74h, 1Fh, 26h, ...");
    _STOP_("db 26h, 8Bh, 46h, 0FEh, 2Eh, 8Ah, 0Eh, 16h...");
    _STOP_("db 0CBh, 0D3h, 0C8h, 8Bh, 0C8h, 0F7h, 0D7h...");
    _STOP_("db 86h, 0E9h, 23h, 0DFh, 23h, 0CFh, 0F7h, ...");
    _STOP_("db 4");                             //db 4
loc_1EFF9:                                      //loc_1EFF9:
    _dx = 0x03ce;                               //mov dx, 3CEh
    _ax = 0xff08;                               //mov ax, 0FF08h
    _out(_dx, _ax);                             //out dx, ax
    _ds = _pop();                               //pop ds
}

void loc_1F4EC()
{
loc_1F4EC:
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di += 0x2000;                              //add di, 2000h
    _si += _bp;                                 //add si, bp
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di += 0x2000;                              //add di, 2000h
    _si += _bp;                                 //add si, bp
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di += 0x2000;                              //add di, 2000h
    _si += _bp;                                 //add si, bp
    _cx = _bx;                                  //mov cx, bx
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _si -= _ax;                                 //sub si, ax
    _di -= _ax;                                 //sub di, ax
    _di -= 0x6000;                              //sub di, 6000h
    _di += _bp;                                 //add di, bp
    _si += _bp;                                 //add si, bp
    _dx -= 1;                                   //dec dx
    if (_dx != 0)                               //jnz short loc_1F4EC
        goto loc_1F4EC;
    return;                                     //retn
    _STOP_("db 1Eh, 57h, 56h, 50h, 53h, 51h, 52h, 26h,...");
    _STOP_("db 4Dh, 0DCh, 86h, 0E9h, 23h, 0C9h, 78h, 6...");
    _STOP_("db 0F7h, 0EBh, 3, 0E9h, 68h, 1, 8Bh, 45h, ...");
    _STOP_("db 0D1h, 0E8h, 0D1h, 0E8h, 8Bh, 0D0h, 23h,...");
    _STOP_("db 74h, 0ECh, 8Bh, 45h, 0EAh, 86h, 0E0h, 3...");
    _STOP_("db 3, 0E9h, 4Ch, 1, 51h, 52h, 57h, 8Bh, 4,...");
    _STOP_("db 8Bh, 4Ch, 4, 8Bh, 54h, 6, 86h, 0C4h, 86...");
    _STOP_("db 0CDh, 86h, 0D6h, 0D1h, 0D2h, 0D1h, 0D7h...");
    _STOP_("db 0D7h, 0D1h, 0D3h, 0D1h, 0D7h, 0D1h, 0D0...");
    _STOP_("db 0D1h, 0D2h, 0D1h, 0D7h, 3 dup(0D1h), 0D...");
    _STOP_("db 0D1h, 0D7h, 0D1h, 0D0h, 0D1h, 0D7h, 0D1...");
    _STOP_("db 0D7h, 3 dup(0D1h), 0D7h, 0D1h, 0D3h, 0D...");
    _STOP_("db 0D0h, 0D1h, 0D7h, 0D1h, 0D2h, 0D1h, 0D7...");
    _STOP_("db 0D7h, 0D1h, 0D3h, 0D1h, 0D7h, 0D1h, 0D0...");
    _STOP_("db 97h, 86h, 0C4h, 89h, 4, 97h, 0D1h, 0D2h...");
    _STOP_("db 3 dup(0D1h), 0D7h, 0D1h, 0D3h, 0D1h, 0D...");
    _STOP_("db 0D1h, 0D7h, 0D1h, 0D2h, 0D1h, 0D7h, 3 d...");
    _STOP_("db 0D1h, 0D3h, 0D1h, 0D7h, 0D1h, 0D0h, 0D1...");
    _STOP_("db 0D2h, 0D1h, 0D7h, 3 dup(0D1h), 0D7h, 0D...");
    _STOP_("db 0D7h, 0D1h, 0D0h, 0D1h, 0D7h, 0D1h, 0D2...");
    _STOP_("db 3 dup(0D1h), 0D7h, 0D1h, 0D3h, 0D1h, 0D...");
    _STOP_("db 0D1h, 0D7h, 97h, 86h, 0C4h, 89h, 44h, 2...");
    _STOP_("db 0D2h, 0D1h, 0D7h, 3 dup(0D1h), 0D7h, 0D...");
    _STOP_("db 0D7h, 0D1h, 0D0h, 0D1h, 0D7h, 0D1h, 0D2...");
    _STOP_("db 3 dup(0D1h), 0D7h, 0D1h, 0D3h, 0D1h, 0D...");
    _STOP_("db 0D1h, 0D7h, 0D1h, 0D2h, 0D1h, 0D7h, 3 d...");
    _STOP_("db 0D1h, 0D3h, 0D1h, 0D7h, 0D1h, 0D0h, 0D1...");
    _STOP_("db 0D2h, 0D1h, 0D7h, 3 dup(0D1h), 0D7h, 0D...");
    _STOP_("db 0D7h, 0D1h, 0D0h, 0D1h, 0D7h, 97h, 86h,...");
    _STOP_("db 4, 97h, 0D1h, 0D2h, 0D1h, 0D7h, 3 dup(0...");
    _STOP_("db 0D3h, 0D1h, 0D7h, 0D1h, 0D0h, 0D1h, 0D7...");
    _STOP_("db 0D1h, 0D7h, 3 dup(0D1h), 0D7h, 0D1h, 0D...");
    _STOP_("db 0D1h, 0D0h, 0D1h, 0D7h, 0D1h, 0D2h, 0D1...");
    _STOP_("db 0D7h, 0D1h, 0D3h, 0D1h, 0D7h, 0D1h, 0D0...");
    _STOP_("db 0D1h, 0D2h, 0D1h, 0D7h, 3 dup(0D1h), 0D...");
    _STOP_("db 0D1h, 0D7h, 0D1h, 0D0h, 0D1h, 0D7h, 97h...");
    _STOP_("db 89h, 44h, 6, 97h, 5Fh, 5Ah, 59h, 83h, 0...");
    _STOP_("db 75h, 0Dh, 0E2h, 8, 5Ah, 59h, 5Bh, 58h, ...");
    _STOP_("db 0C3h, 0E9h, 9Bh, 0FEh, 0E9h, 0B6h, 0FEh...");
    _STOP_("db 0EBh, 0EEh, 0C4h, 7Eh, 4, 8Ch, 0C0h, 26...");
    _STOP_("db 83h, 0FBh, 0FFh, 74h, 38h, 86h, 0FBh, 0...");
    _STOP_("db 0CBh, 0D1h, 0CBh, 0D1h, 0CBh, 3, 0C3h, ...");
    _STOP_("db 8Bh, 5Dh, 2, 0Bh, 0CBh, 74h, 27h, 86h, ...");
    _STOP_("db 83h, 0E1h, 0Fh, 81h, 0C1h, 0, 8, 83h, 0...");
    _STOP_("db 0EBh, 0D1h, 0EBh, 0D1h, 0EBh, 0D1h, 0EB...");
    _STOP_("db 89h, 45h, 2, 26h, 89h, 0Dh, 0E8h, 33h, ...");
    _STOP_("db 4, 0EBh, 0B9h, 0C3h, 8Bh, 4Eh, 6, 0D1h,...");
    _STOP_("db 1, 83h, 0E1h, 0FEh, 8Bh, 7Eh, 4, 0D1h, ...");
    _STOP_("db 0FEh, 2Bh, 0CFh, 89h, 3Eh, 0Dh, 68h, 89...");
    _STOP_("db 68h, 8Bh, 7Eh, 8, 89h, 3Eh, 11h, 68h, 8...");
    _STOP_("db 2Bh, 0CFh, 89h, 0Eh, 13h, 68h, 0C3h, 0C...");
    _STOP_("db 0DBh, 74h, 3, 0E8h, 1, 0, 0C3h, 89h, 1E...");
    _STOP_("db 0C6h, 89h, 36h, 0Bh, 68h, 8Bh, 0C3h, 0B...");
    _STOP_("db 3, 0E8h, 1, 0, 0C3h");           //db 3, 0E8h, 1, 0, 0C3h
    _STOP_("db 0C4h, 1Eh, 9, 68h, 6, 26h, 0C4h, 3Fh, 8...");
    _STOP_("db 0C7h, 74h, 3, 53h, 0EBh, 6, 0E9h, 8Fh, ...");
    _STOP_("db 0, 26h, 8Ah, 45h, 0Ah, 0A8h, 80h, 74h, ...");
    _STOP_("db 5, 26h, 2Bh, 45h, 14h, 8Bh, 0D8h, 80h, ...");
    _STOP_("db 2, 0DBh, 2Eh, 88h, 1Eh, 16h, 32h, 0D1h,...");
    _STOP_("db 21h, 68h, 26h, 8Bh, 45h, 2, 26h, 2Bh, 4...");
    _STOP_("db 23h, 68h, 26h, 8Bh, 45h, 10h, 0D1h, 0E8...");
    _STOP_("db 26h, 8Bh, 45h, 12h, 23h, 0C0h, 74h, 0C0...");
    _STOP_("db 17h, 68h, 0A1h, 23h, 68h, 3Bh, 0D0h, 7E...");
    _STOP_("db 16h, 15h, 68h, 0A1h, 21h, 68h, 3Bh, 0D0...");
    _STOP_("db 8Bh, 0D0h, 26h, 8Bh, 45h, 10h, 0D1h, 0E...");
    _STOP_("db 78h, 9Eh, 0A1h, 0Dh, 68h, 3Bh, 0D0h, 7E...");
    _STOP_("db 23h, 68h, 8Bh, 0D0h, 26h, 8Bh, 45h, 12h...");
    _STOP_("db 11h, 0A1h, 11h, 68h, 3Bh, 0D0h, 7Eh, 0A...");
    _STOP_("db 0E8h, 39h, 1, 5Fh, 5Bh, 0E9h, 79h, 0FFh...");
    _STOP_("db 0C3h, 4, 0E9h, 61h, 0FFh, 7, 0C3h, 26h,...");
    _STOP_("db 80h, 75h, 3, 0E9h, 8Ah, 0, 26h, 8Bh, 45...");
    _STOP_("db 0E8h, 3, 6, 21h, 68h, 78h, 0F1h, 3Bh, 6...");
    _STOP_("db 0EBh, 26h, 8Bh, 45h, 12h, 3Dh, 64h, 0, ...");
    _STOP_("db 6, 23h, 68h, 78h, 69h, 3 dup(90h), 3Bh,...");
    _STOP_("db 7Eh, 60h, 0A1h, 15h, 68h, 3Bh, 6, 21h, ...");
    _STOP_("db 0A1h, 17h, 68h, 3Bh, 6, 23h, 68h, 7Eh, ...");
    _STOP_("db 3Ch, 68h, 0, 0C7h, 6, 19h, 68h, 2 dup(0...");
    _STOP_("db 68h, 2Bh, 6, 21h, 68h, 79h, 7, 0F7h, 0D...");
    _STOP_("db 68h, 33h, 0C0h, 0A3h, 1Fh, 68h, 23h, 0C...");
    _STOP_("db 0Eh, 3Ch, 68h, 2, 0A1h, 15h, 68h, 2Bh, ...");
    _STOP_("db 78h, 21h, 26h, 8Bh, 5Dh, 10h, 0D1h, 0EB...");
    _STOP_("db 0C3h, 78h, 16h, 26h, 8Bh, 45h, 10h, 0D1...");
    _STOP_("db 6, 1Fh, 68h, 79h, 2, 33h, 0C0h, 0A3h, 3...");
    _STOP_("db 15h, 33h, 0C0h, 0C3h, 0A1h, 1Fh, 68h, 0...");
    _STOP_("db 6, 15h, 68h, 2Bh, 6, 21h, 68h, 80h, 0Eh...");
    _STOP_("db 0A3h, 35h, 68h, 0C7h, 6, 1Bh, 68h, 2 du...");
    _STOP_("db 68h, 2Bh, 6, 23h, 68h, 79h, 7, 0F7h, 0D...");
    _STOP_("db 68h, 33h, 0C0h, 0A3h, 1Dh, 68h, 0A1h, 1...");
    _STOP_("db 6, 23h, 68h, 78h, 11h, 26h, 2Bh, 45h, 1...");
    _STOP_("db 0A1h, 1Dh, 68h, 0F7h, 0D8h, 26h, 3, 45h...");
    _STOP_("db 0Dh, 0A1h, 1Dh, 68h, 0F7h, 0D8h, 3, 6, ...");
    _STOP_("db 6, 23h, 68h, 0A3h, 37h, 68h, 0A1h, 1Bh,...");
    _STOP_("db 68h, 85h, 0C0h, 74h, 4, 0B3h, 0A0h, 0F6...");
    _STOP_("db 56h, 3, 6, 19h, 68h, 3, 6, 0Dh, 68h, 0A...");
    _STOP_("db 0A1h, 35h, 68h, 23h, 0C0h, 74h, 14h, 78...");
    _STOP_("db 37h, 68h, 23h, 0C0h, 74h, 0Bh, 78h, 9, ...");
    _STOP_("db 7Dh, 4, 0Dh, 1, 0, 0C3h, 0E9h, 6Ah, 0FF...");
    _STOP_("db 0FFh, 0A1h, 1Dh, 68h, 85h, 0C0h, 74h, 8...");
    _STOP_("db 10h, 0D0h, 0EBh, 0F6h, 0E3h, 3, 6, 1Fh,...");
    _STOP_("db 56h, 0A1h, 35h, 68h, 26h, 8Bh, 55h, 10h...");
    _STOP_("db 0B1h, 0A0h, 2Ah, 0C8h, 32h, 0EDh, 8Ah, ...");
    _STOP_("db 3Ah, 68h, 0, 0EBh, 2Ch, 0A1h, 1Dh, 68h, 85h");
    _STOP_("db 0C0h, 74h, 6, 26h, 8Ah, 5Dh, 10h, 0F6h,...");
    _STOP_("db 1Fh, 68h, 3, 6, 1Fh, 68h, 0A3h, 0E6h, 5...");
    _STOP_("db 68h, 26h, 8Bh, 55h, 10h, 0D1h, 0EAh, 0B...");
    _STOP_("db 0C8h, 32h, 0EDh, 0C6h, 6, 3Ah, 68h, 1, ...");
    _STOP_("db 0A0h, 16h, 32h, 0A2h, 3Bh, 68h, 0C4h, 6...");
    _STOP_("db 0E6h, 56h, 89h, 2Eh, 25h, 68h, 8Ch, 0C0...");
    _STOP_("db 68h, 8Bh, 36h, 0E8h, 56h, 89h, 36h, 2Dh...");
    memory16(_ds, 0x682F) = _ax;                //mov word_26BDF, ax
    memory16(_ds, 0x6833) = 0x00a0;             //mov word_26BE3, 0A0h
    memory16(_ds, 0x6831) = _dx;                //mov word_26BE1, dx
    _si = 0x6825;                               //mov si, 6825h
    sub_1F9B0();                                //call sub_1F9B0
    _di = _pop();                               //pop di
    _es = _pop();                               //pop es
}

void sub_1F9B0()
{
    WORD _cs = _seg006;

    _push(_ds);                                 //push ds
    _al = memory(_ds, _si + 23);                //mov al, [si+17h]
    memory(_cs, 0x3215) = _al;                  //mov cs:byte_200D5, al
    _al = memory(_ds, _si + 22);                //mov al, [si+16h]
    memory(_cs, 0x3216) = _al;                  //mov cs:byte_200D6, al
    _ax = memory16(_ds, _si + 18);              //mov ax, [si+12h]
    _ax -= 1;                                   //dec ax
    memory16(_cs, 0x3213) = _ax;                //mov cs:word_200D3, ax
    if ((short)_ax >= 0)                        //jns short loc_1F9CC
        goto loc_1F9CC;
    goto loc_1FA9F;                             //jmp loc_1FA9F
loc_1F9CC:                                      //loc_1F9CC:
    _bx = memory16(_ds, _si + 16);              //mov bx, [si+10h]
    _ax = memory16(_ds, _si + 14);              //mov ax, [si+0Eh]
    _ax -= _bx;                                 //sub ax, bx
    memory16(_cs, 0x320F) = _ax;                //mov cs:word_200CF, ax
    _cx = memory16(_ds, _si + 12);              //mov cx, [si+0Ch]
    _cx -= _bx;                                 //sub cx, bx
    _al = memory(_ds, _si + 21);                //mov al, [si+15h]
    _dh = _bl;                                  //mov dh, bl
    _bx += _bx;                                 //add bx, bx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _ax += _ax;                                 //add ax, ax
    _di = _ax;                                  //mov di, ax
    _ax += _ax;                                 //add ax, ax
    _ax += _di;                                 //add ax, di
    _bp = 0x3335;                               //mov bp, 3335h
    _bp += _ax;                                 //add bp, ax
    _di = memory16(_cs, _bp);                   //mov di, cs:[bp+0]
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    memory16(_cs, 0x2BE4) = _ax;                //mov cs:word_1FAA4, ax
    _ax = memory16(_cs, _bp + 2);               //mov ax, cs:[bp+2]
    _les(_bp, _ds, _si);                        //les bp, [si]
    _lds(_si, _ds, _si + 8);                    //lds si, [si+8]
    _bl = memory(_cs, 0x3216);                  //mov bl, cs:byte_200D6
    _bh = _bh ^ _bh;                            //xor bh, bh
    _sar(_bx, 1);                               //sar bx, 1
    _sar(_bx, 1);                               //sar bx, 1
    _dl = memory(_cs, _bx + 13307);             //mov dl, cs:[bx+33FBh]
    memory16(_cs, 0x3211) = _cx;                //mov cs:word_200D1, cx
    _STOP_("goto ax");                          //jmp ax
    _STOP_("db 52h, 22h, 0C9h, 75h, 18h, 26h, 8Ah, 5Eh...");
    _STOP_("db 0FFh, 2Eh, 8Ah, 1, 22h, 4, 0Ah, 0C3h, 8...");
    _STOP_("db 0CEh, 75h, 0EBh, 5Ah, 0EBh, 33h, 26h, 8...");
    _STOP_("db 2Eh, 8Ah, 0Eh, 16h, 32h, 0D2h, 0C8h, 8A...");
    _STOP_("db 0C2h, 0Ah, 0D8h, 32h, 0FFh, 8Ah, 4, 2Eh...");
    _STOP_("db 0C3h, 88h, 4, 46h, 8Ah, 0DCh, 0F6h, 0D2...");
    _STOP_("db 0F6h, 0D2h, 0FEh, 0CEh, 75h, 0D6h, 5Ah,...");
    _STOP_("db 32h, 24h, 1, 75h, 0, 2Eh, 0FFh, 0Eh, 13...");
    _STOP_("db 2Ah, 2Eh, 3, 2Eh, 11h, 32h, 2Eh, 3, 36h...");
    _STOP_("db 8Ah, 0Eh, 16h, 32h, 0BFh, 0E8h, 2Bh, 32...");
    _STOP_("db 0A0h, 15h, 32h, 24h, 2, 74h, 0Ch, 26h, ...");
    _STOP_("db 0D2h, 0CBh, 0F6h, 0D2h, 22h, 0DAh, 0F6h...");
    _STOP_("db 4");                             //db 4
loc_1FA9F:                                      //loc_1FA9F:
    _ds = _pop();                               //pop ds
}

void sub_1FBAD()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = 0x2d09;                               //mov bx, 2D09h
    _di = memory16(_ds, 0x541D);                //mov di, word_257CD
    _di += _di;                                 //add di, di
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    _les(_di, _ss, _bp + 4);                    //les di, [bp+4]
    ax();                                       //call ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1FBD5()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = _dseg;                                //mov bx, seg dseg
    _ds = _bx;                                  //mov ds, bx
    _ds = _dx;                                  //mov ds, dx
    _si = _ax;                                  //mov si, ax
    _bx = 0x2d37;                               //mov bx, 2D37h
    _di = memory16(_ds, 0x541D);                //mov di, word_257CD
    _di += _di;                                 //add di, di
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    ax();                                       //call ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1FC03()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = 0x2d61;                               //mov bx, 2D61h
    _di = memory16(_ds, 0x541D);                //mov di, word_257CD
    _di += _di;                                 //add di, di
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    ax();                                       //call ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1FC2D()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _push(_ds);                                 //push ds
    _lds(_si, _ds, 0x56DE);                     //lds si, dword ptr word_25A8E
    _lds(_si, _ds, _si);                        //lds si, [si]
    _ax = _ds;                                  //mov ax, ds
    _ds = _pop();                               //pop ds
    memory16(_ds, 0x56E2) = _si;                //mov word_25A92, si
    memory16(_ds, 0x56E4) = _ax;                //mov word_25A94, ax
    _bx = 0x2d9c;                               //mov bx, 2D9Ch
    _di = memory16(_ds, 0x541D);                //mov di, word_257CD
    _di += _di;                                 //add di, di
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    ax();                                       //call ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1FC68()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = 0x2dc6;                               //mov bx, 2DC6h
    _di = memory16(_ds, 0x541D);                //mov di, word_257CD
    _di += _di;                                 //add di, di
    _ax = memory16(_cs, _bx + _di);             //mov ax, cs:[bx+di]
    _indirectCall(_cs, _ax);
    //ax();                                       //call ax
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_1FC92()
{
    _push(_ds);                                 //push ds
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ss, _bp + 4);               //mov ax, [bp+4]
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _ax += 0x5415;                              //add ax, 5415h
    memory16(_ds, 0x56DE) = _ax;                //mov word_25A8E, ax
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_ds, 0x56E0) = _ax;                //mov seg_25A90, ax
    _ds = _pop();                               //pop ds
}

void sub_1FCAD()
{
    WORD _cs = _seg006;

    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _les(_si, _ss, _bp + 4);                    //les si, [bp+4]
    memory16(_ds, 0x56EE) = 0x56f0;             //mov word_25A9E, 56F0h
loc_1FCC0:                                      //loc_1FCC0:
    _push(_es);                                 //push es
    _les(_bx, _es, _si);                        //les bx, es:[si]
    _ax = _es;                                  //mov ax, es
    _ax |= _bx;                                 //or ax, bx
    if (_ax != 0)                               //jnz short loc_1FCD1
        goto loc_1FCD1;
    _es = _pop();                               //pop es
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
    return;                                     //retf
loc_1FCD1:                                      //loc_1FCD1:
    _ax = memory16(_es, _bx + 4);               //mov ax, es:[bx+4]
    _ax <<= 1;                                  //shl ax, 1
    _ax <<= 1;                                  //shl ax, 1
    _di = _dseg;                                //mov di, seg dseg
    _ds = _di;                                  //mov ds, di
    _lds(_di, _es, _bx + 6);                    //lds di, es:[bx+6]
    _di += _ax;                                 //add di, ax
    _lds(_di, _ds, _di);                        //lds di, [di]
    memory16(_es, _bx + 12) = _di;              //mov es:[bx+0Ch], di
    _ax = _ds;                                  //mov ax, ds
    memory16(_es, _bx + 14) = _ax;              //mov es:[bx+0Eh], ax
    _ax |= _di;                                 //or ax, di
    if (_ax != 0)                               //jnz short loc_1FCFA
        goto loc_1FCFA;
    memory16(_es, _bx + 10) = 0x0000;           //mov word ptr es:[bx+0Ah], 0
loc_1FCFA:                                      //loc_1FCFA:
    _ax = memory16(_ds, _di + -2);              //mov ax, [di-2]
    memory16(_es, _bx + 18) = _ax;              //mov es:[bx+12h], ax
    _ax = memory16(_ds, _di + -4);              //mov ax, [di-4]
    memory16(_es, _bx + 16) = _ax;              //mov es:[bx+10h], ax
    _ax = memory16(_ds, _di + -6);              //mov ax, [di-6]
    memory16(_es, _bx + 20) = _ax;              //mov es:[bx+14h], ax
    _ax = memory16(_ds, _di + -8);              //mov ax, [di-8]
    memory16(_es, _bx + 22) = _ax;              //mov es:[bx+16h], ax
    _ax = memory16(_ds, _di + -12);             //mov ax, [di-0Ch]
    memory16(_es, _bx + 24) = _ax;              //mov es:[bx+18h], ax
    if (_ax < 0x0003)                           //jb short loc_1FD25
        goto loc_1FD25;
    _ax = 0x0003;                               //mov ax, 3
loc_1FD25:                                      //loc_1FD25:
    memory16(_es, _bx + 24) = _ax;              //mov es:[bx+18h], ax
    _ax |= _ax;                                 //or ax, ax
    if (_ax == 0)                               //jz short loc_1FD50
        goto loc_1FD50;
    _push(_ds);                                 //push ds
    _push(_di);                                 //push di
    _push(_es);                                 //push es
    _push(_si);                                 //push si
    _push(_cx);                                 //push cx
    _cx = _ax;                                  //mov cx, ax
    _lea(_si, _ds, _di + -12);                  //lea si, [di-0Ch]
    _lea(_di, _ds, _bx + 26);                   //lea di, [bx+1Ah]
loc_1FD3A:                                      //loc_1FD3A:
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    _movsw<MemAuto, MemAuto, DirAuto>();        //movsw
    _si -= 1;                                   //dec si
    _si -= 1;                                   //dec si
    if (--_cx)                                  //loop loc_1FD3A
        goto loc_1FD3A;
    _cx = _pop();                               //pop cx
    _si = _pop();                               //pop si
    _es = _pop();                               //pop es
    _di = _pop();                               //pop di
    _ds = _pop();                               //pop ds
loc_1FD50:                                      //loc_1FD50:
    _al = memory(_ds, _di + -10);               //mov al, [di-0Ah]
    memory(_es, _bx + 11) = _al;                //mov es:[bx+0Bh], al
    _al &= 0xc0;                                //and al, 0C0h
    if (_al != 0)                               //jnz short loc_1FD62
        goto loc_1FD62;
loc_1FD5B:                                      //loc_1FD5B:
    _si += 0x0004;                              //add si, 4
    _es = _pop();                               //pop es
    goto loc_1FCC0;                             //jmp loc_1FCC0
loc_1FD62:                                      //loc_1FD62:
    if (_al & 0x40)                             //jnz short loc_1FD69
        goto loc_1FD69;
    goto loc_1FF28;                             //jmp loc_1FF28
loc_1FD69:                                      //loc_1FD69:
    _push(_si);                                 //push si
    _push(_di);                                 //push di
    _dh = memory(_es, _bx + 10);                //mov dh, es:[bx+0Ah]
    _ax = memory16(_es, 0x56EE);                //mov ax, es:56EEh
    _si = _di;                                  //mov si, di
    _si -= 0x000c;                              //sub si, 0Ch
    _di = _ax;                                  //mov di, ax
    _ax += 0x000c;                              //add ax, 0Ch
    memory16(_es, _bx + 12) = _ax;              //mov es:[bx+0Ch], ax
    _ax = _dseg;                                //mov ax, seg dseg
    memory16(_es, _bx + 14) = _ax;              //mov es:[bx+0Eh], ax
    _es = _ax;                                  //mov es, ax
    _cx = 0x0006;                               //mov cx, 6
    _rep_movsw<MemAuto, MemAuto, DirAuto>();    //rep movsw
    _bx = _si;                                  //mov bx, si
    _al = memory(_ds, _si - 4);                 //mov al, [si-4]
    _al >>= 1;                                  //shr al, 1
    _al >>= 1;                                  //shr al, 1
    _ah = memory(_ds, _si - 2);                 //mov ah, [si-2]
    _mul(_ah);                                  //mul ah
    _si += _ax;                                 //add si, ax
    _cx = _ax;                                  //mov cx, ax
    if (_dh & 0x20)                             //jnz short loc_1FDA9
        goto loc_1FDA9;
    goto loc_1FEC3;                             //jmp loc_1FEC3
loc_1FDA9:                                      //loc_1FDA9:
    _cx = memory16(_ds, _bx + -4);              //mov cx, [bx-4]
    _bp = _cx;                                  //mov bp, cx
    _cx <<= 1;                                  //shl cx, 1
    _di -= _cx;                                 //sub di, cx
    _di -= 0x0008;                              //sub di, 8
    _cx = memory16(_ds, _bx + -2);              //mov cx, [bx-2]
loc_1FDB8:                                      //loc_1FDB8:
    _push(_cx);                                 //push cx
    _cx = _bp;                                  //mov cx, bp
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _di += _cx;                                 //add di, cx
    _cx = _bp;                                  //mov cx, bp
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
loc_1FDC7:                                      //loc_1FDC7:
    _push(_cx);                                 //push cx
    _cl = memory(_ds, _bx);                     //mov cl, [bx]
    _bx += 1;                                   //inc bx
    _push(_bx);                                 //push bx
    _ah = _ah ^ _ah;                            //xor ah, ah
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x80))                          //jz short loc_1FDE0
        goto loc_1FDE0;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FDE0:                                      //loc_1FDE0:
    _ch = _al;                                  //mov ch, al
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x40))                          //jz short loc_1FDF4
        goto loc_1FDF4;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FDF4:                                      //loc_1FDF4:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x20))                          //jz short loc_1FE07
        goto loc_1FE07;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE07:                                      //loc_1FE07:
    _dl = _al;                                  //mov dl, al
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x10))                          //jz short loc_1FE1B
        goto loc_1FE1B;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE1B:                                      //loc_1FE1B:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x08))                          //jz short loc_1FE2E
        goto loc_1FE2E;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE2E:                                      //loc_1FE2E:
    _dh = _al;                                  //mov dh, al
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x04))                          //jz short loc_1FE42
        goto loc_1FE42;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE42:                                      //loc_1FE42:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x02))                          //jz short loc_1FE55
        goto loc_1FE55;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _bx += _ax;                                 //add bx, ax
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE55:                                      //loc_1FE55:
    _ah = _al;                                  //mov ah, al
    _al = _al ^ _al;                            //xor al, al
    if (!(_cl & 0x01))                          //jz short loc_1FE6C
        goto loc_1FE6C;
    _al = memory(_ds, _si);                     //mov al, [si]
    _bx = 0x66f0;                               //mov bx, 66F0h
    _flags.carry = (_bl + _al) >= 0x100;        //add bl, al
    _bl += _al;
    _bh = _bh + 0x00 + _flags.carry;            //adc bh, 0
    _al = memory(_es, _bx);                     //mov al, es:[bx]
    _si += 1;                                   //inc si
loc_1FE6C:                                      //loc_1FE6C:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _cl = _ah;                                  //mov cl, ah
    _ax = memory16(_cs, 0xDED);                 //mov ax, cs:word_1DCAD
    if (_ax != 0x0000)                          //jnz short loc_1FE90
        goto loc_1FE90;
    _ax = memory16(_es, _di + -2);              //mov ax, es:[di-2]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_es, _di + -2) = _ax;              //mov es:[di-2], ax
    _ax = memory16(_es, _di + -4);              //mov ax, es:[di-4]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_es, _di + -4) = _ax;              //mov es:[di-4], ax
    _xchg(_ch, _dl);                            //xchg ch, dl
    _xchg(_dh, _cl);                            //xchg dh, cl
loc_1FE90:                                      //loc_1FE90:
    _al = _ch;                                  //mov al, ch
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _dl;                                  //mov al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _dh;                                  //mov al, dh
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _cl;                                  //mov al, cl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _di -= 0x0010;                              //sub di, 10h
    _bx = _pop();                               //pop bx
    _cx = _pop();                               //pop cx
    _cx -= 1;                                   //dec cx
    _cx |= _cx;                                 //or cx, cx
    if (_cx == 0)                               //jz short loc_1FEA9
        goto loc_1FEA9;
    goto loc_1FDC7;                             //jmp loc_1FDC7
loc_1FEA9:                                      //loc_1FEA9:
    _cx = _pop();                               //pop cx
    _cx -= 1;                                   //dec cx
    _cx |= _cx;                                 //or cx, cx
    if (_cx == 0)                               //jz short loc_1FEB2
        goto loc_1FEB2;
    goto loc_1FDB8;                             //jmp loc_1FDB8
loc_1FEB2:                                      //loc_1FEB2:
    _bp <<= 1;                                  //shl bp, 1
    _di += _bp;                                 //add di, bp
    _di += 0x0008;                              //add di, 8
    memory16(_es, 0x56EE) = _di;                //mov es:word_25A9E, di
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1FD5B;                             //jmp loc_1FD5B
loc_1FEC3:                                      //loc_1FEC3:
    _push(_cx);                                 //push cx
    _cl = memory(_ds, _bx);                     //mov cl, [bx]
    _bx += 1;                                   //inc bx
    _ax = _ax ^ _ax;                            //xor ax, ax
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FED0
        goto loc_1FED0;
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
loc_1FED0:                                      //loc_1FED0:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FED8
        goto loc_1FED8;
    _ah = memory(_ds, _si);                     //mov ah, [si]
    _si += 1;                                   //inc si
loc_1FED8:                                      //loc_1FED8:
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FEE1
        goto loc_1FEE1;
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
loc_1FEE1:                                      //loc_1FEE1:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _ch = _ch ^ _ch;                            //xor ch, ch
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FEEB
        goto loc_1FEEB;
    _ch = memory(_ds, _si);                     //mov ch, [si]
    _si += 1;                                   //inc si
loc_1FEEB:                                      //loc_1FEEB:
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FEF4
        goto loc_1FEF4;
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
loc_1FEF4:                                      //loc_1FEF4:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _dl = _dl ^ _dl;                            //xor dl, dl
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FEFE
        goto loc_1FEFE;
    _dl = memory(_ds, _si);                     //mov dl, [si]
    _si += 1;                                   //inc si
loc_1FEFE:                                      //loc_1FEFE:
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FF07
        goto loc_1FF07;
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
loc_1FF07:                                      //loc_1FF07:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _ah;                                  //mov al, ah
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _ch;                                  //mov al, ch
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _dl;                                  //mov al, dl
    _stosb<MemAuto, DirAuto>();                 //stosb
    _al = _al ^ _al;                            //xor al, al
    _flags.carry = !!(_cx & 0x8000);            //shl cx, 1
    _cx <<= 1;
    if (!_flags.carry)                          //jnb short loc_1FF1A
        goto loc_1FF1A;
    _al = memory(_ds, _si);                     //mov al, [si]
    _si += 1;                                   //inc si
loc_1FF1A:                                      //loc_1FF1A:
    _stosb<MemAuto, DirAuto>();                 //stosb
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1FEC3
        goto loc_1FEC3;
    memory16(_es, 0x56EE) = _di;                //mov es:word_25A9E, di
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    goto loc_1FD5B;                             //jmp loc_1FD5B
loc_1FF28:                                      //loc_1FF28:
    goto loc_1FD5B;                             //jmp loc_1FD5B
}

void loc_1FF67()
{
loc_1FF67:
    WORD _cs = _seg006;

    _push(_cx);                                 //push cx
    _cx = _bp;                                  //mov cx, bp
    _cx <<= 1;                                  //shl cx, 1
    _cx <<= 1;                                  //shl cx, 1
    _di += _cx;                                 //add di, cx
    _cx = _bp;                                  //mov cx, bp
    _cx >>= 1;                                  //shr cx, 1
    _cx >>= 1;                                  //shr cx, 1
loc_1FF76:                                      //loc_1FF76:
    _push(_cx);                                 //push cx
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    _cl = _al;                                  //mov cl, al
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    _ch = _al;                                  //mov ch, al
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    _dl = _al;                                  //mov dl, al
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    _dh = _al;                                  //mov dh, al
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    memory(_ds, _di) = _al;                     //mov [di], al
    _di += 1;                                   //inc di
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    memory(_ds, _di) = _al;                     //mov [di], al
    _di += 1;                                   //inc di
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    memory(_ds, _di) = _al;                     //mov [di], al
    _di += 1;                                   //inc di
    _al = memory(_es, _si);                     //mov al, es:[si]
    _si += 1;                                   //inc si
    _xlat();                                    //xlat
    memory(_ds, _di) = _al;                     //mov [di], al
    _di += 1;                                   //inc di
    _ax = memory16(_cs, 0xDED);                 //mov ax, cs:word_1DCAD
    if (_ax != 0x0000)                          //jnz short loc_1FFD0
        goto loc_1FFD0;
    _ax = memory16(_ds, _di + -2);              //mov ax, [di-2]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -2) = _ax;              //mov [di-2], ax
    _ax = memory16(_ds, _di + -4);              //mov ax, [di-4]
    _xchg(_ah, _al);                            //xchg ah, al
    memory16(_ds, _di + -4) = _ax;              //mov [di-4], ax
    _xchg(_dh, _dl);                            //xchg dh, dl
    _xchg(_ch, _cl);                            //xchg ch, cl
loc_1FFD0:                                      //loc_1FFD0:
    memory16(_ds, _di) = _cx;                   //mov [di], cx
    memory16(_ds, _di + 2) = _dx;               //mov [di+2], dx
    _di -= 0x000c;                              //sub di, 0Ch
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1FF76
        goto loc_1FF76;
    _cx = _pop();                               //pop cx
    if (--_cx)                                  //loop loc_1FF67
        goto loc_1FF67;
    _ax = _es;                                  //mov ax, es
    _dx = _ds;                                  //mov dx, ds
    _es = _dx;                                  //mov es, dx
    _ds = _ax;                                  //mov ds, ax
    _bp <<= 1;                                  //shl bp, 1
    _di += _bp;                                 //add di, bp
    _di += 0x0008;                              //add di, 8
    memory16(_es, 0x56EE) = _di;                //mov es:word_25A9E, di
    _di = _pop();                               //pop di
    _si = _pop();                               //pop si
    _STOP_("goto loc_1FD5B");                   //jmp loc_1FD5B
}

void sub_1FFF7()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _bx = 0x66f0;                               //mov bx, 66F0h
    _cx = 0x0000;                               //mov cx, 0
    _ax = memory16(_ds, 0x541D);                //mov ax, word_257CD
    if (_ax != 0x0000)                          //jnz short loc_20045
        goto loc_20045;
loc_2000F:                                      //loc_2000F:
    _dl = _cl;                                  //mov dl, cl
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_al, 1);                               //rcr al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcl(_ah, 1);                               //rcl ah, 1
    _ax <<= 1;                                  //shl ax, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_al, 1);                               //rcr al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcl(_ah, 1);                               //rcl ah, 1
    _ax <<= 1;                                  //shl ax, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_al, 1);                               //rcr al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcl(_ah, 1);                               //rcl ah, 1
    _ax <<= 1;                                  //shl ax, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcr(_al, 1);                               //rcr al, 1
    _flags.carry = _dl & 1;                     //shr dl, 1
    _dl >>= 1;
    _rcl(_ah, 1);                               //rcl ah, 1
    _ax <<= 1;                                  //shl ax, 1
    memory(_ds, _bx) = _ah;                     //mov [bx], ah
    _bx += 1;                                   //inc bx
    _cx += 1;                                   //inc cx
    if ((short)_cx <= (short)0x00ff)            //jle short loc_2000F
        goto loc_2000F;
    goto loc_20071;                             //jmp short loc_20071
loc_20045:                                      //loc_20045:
    _ah = _cl;                                  //mov ah, cl
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    _flags.carry = _ah & 1;                     //shr ah, 1
    _ah >>= 1;
    _rcl(_al, 1);                               //rcl al, 1
    memory(_ds, _bx) = _al;                     //mov [bx], al
    _bx += 1;                                   //inc bx
    _cx += 1;                                   //inc cx
    if ((short)_cx <= (short)0x00ff)            //jle short loc_20045
        goto loc_20045;
loc_20071:                                      //loc_20071:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_20077()
{
    WORD _cs = _seg006;

    const int var_s4 = 4;                       //var_s4  = word ptr  4
    const int var_s6 = 6;                       //var_s6  = word ptr  6
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = memory16(_ss, _bp + var_s4);          //mov ax, [bp+var_s4]
    memory16(_ds, 0x67F0) = _ax;                //mov word_26BA0, ax
    _dx = memory16(_ss, _bp + var_s6);          //mov dx, [bp+var_s6]
    memory16(_ds, 0x67F2) = _dx;                //mov word_26BA2, dx
    _es = _dx;                                  //mov es, dx
    _di = _ax;                                  //mov di, ax
    _al = memory(_es, _di + 10);                //mov al, es:[di+0Ah]
    memory(_cs, 0x320E) = _al;                  //mov cs:byte_200CE, al
    _bp = _sp;                                  //mov bp, sp
    _ax = _dseg;                                //mov ax, seg dseg
    _push(_ax);                                 //push ax
    _ax = 0x67f0;                               //mov ax, 67F0h
    _push(_ax);                                 //push ax
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bp -= 0x0002;                              //sub bp, 2
//    _push(_cs);                                 //push cs
    sub_1FCAD();                                //call near ptr sub_1FCAD
    _bp = _pop();                               //pop bp
    _sp = _bp;                                  //mov sp, bp
    _bp = _sp;                                  //mov bp, sp
    _ax = _dseg;                                //mov ax, seg dseg
    _push(_ax);                                 //push ax
    _ax = 0x67f0;                               //mov ax, 67F0h
    _push(_ax);                                 //push ax
    _push(_bp);                                 //push bp
    _bp = _sp;                                  //mov bp, sp
    _bp -= 0x0002;                              //sub bp, 2
//    _push(_cs);                                 //push cs
    sub_1FC2D();                                //call near ptr sub_1FC2D
    _bp = _pop();                               //pop bp
    _sp = _bp;                                  //mov sp, bp
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_202C0()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _ax = _dseg;                                //mov ax, seg dseg
    _ds = _ax;                                  //mov ds, ax
    _ax = 0x0002;                               //mov ax, 2
    _interrupt(16);                             //int 10h
    _si = 0x6840;                               //mov si, 6840h
    _bh = _bh ^ _bh;                            //xor bh, bh
    _dx = 0x0101;                               //mov dx, 101h
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(16);                             //int 10h
    _ah = 0x09;                                 //mov ah, 9
    _dx = _si;                                  //mov dx, si
    _interrupt(33);                             //int 21h
    _si = 0x6858;                               //mov si, 6858h
    _di = 0x689e;                               //mov di, 689Eh
    _bh = 0x00;                                 //mov bh, 0
    _cx = 0x0004;                               //mov cx, 4
    _dx = 0x0a21;                               //mov dx, 0A21h
loc_202EF:                                      //loc_202EF:
    if (memory(_ds, _di) != 0x01)               //jnz short loc_20302
        goto loc_20302;
    _ah = 0x02;                                 //mov ah, 2
    _interrupt(16);                             //int 10h
    _push(_dx);                                 //push dx
    _ah = 0x09;                                 //mov ah, 9
    _dx = _si;                                  //mov dx, si
    _interrupt(33);                             //int 21h
    _dx = _pop();                               //pop dx
    _dh += 1;                                   //inc dh
loc_20302:                                      //loc_20302:
    _si += 0x0011;                              //add si, 11h
    _di += 1;                                   //inc di
    if (--_cx)                                  //loop loc_202EF
        goto loc_202EF;
loc_20308:                                      //loc_20308:
    _al = 0x3f;                                 //mov al, 3Fh
    sub_197AA();                                //call sub_197AA
    std::cout << "Override vga\n"; _flags.zero = 0;
    if (!_flags.zero)                                //jnz short loc_2032E
        goto loc_2032E;
    _al = 0x40;                                 //mov al, 40h
    sub_197AA();                                //call sub_197AA
    if (!_flags.zero)                                //jnz short loc_20336
        goto loc_20336;
    _al = 0x41;                                 //mov al, 41h
    sub_197AA();                                //call sub_197AA
    if (!_flags.zero)                                //jnz short loc_2033E
        goto loc_2033E;
    _al = 0x42;                                 //mov al, 42h
    sub_197AA();                                //call sub_197AA
    if (!_flags.zero)                                //jnz short loc_20346
        goto loc_20346;
    goto loc_20308;                             //jmp short loc_20308
loc_2032E:                                      //loc_2032E:
    memory16(_ds, 0x689C) = 0x8000;             //mov word_26C4C, 8000h
    goto loc_20353;                             //jmp short loc_20353
loc_20336:                                      //loc_20336:
    memory16(_ds, 0x689C) = 0x0000;             //mov word_26C4C, 0
    goto loc_20353;                             //jmp short loc_20353
loc_2033E:                                      //loc_2033E:
    memory16(_ds, 0x689C) = 0x0001;             //mov word_26C4C, 1
    goto loc_20353;                             //jmp short loc_20353
loc_20346:                                      //loc_20346:
    memory16(_ds, 0x689C) = 0x0004;             //mov word_26C4C, 4
    goto loc_20353;                             //jmp short loc_20353
    sub_197AE();                                //call sub_197AE
loc_20353:                                      //loc_20353:
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_20360()
{
    _push(_di);                                 //push di
    _push(_si);                                 //push si
    _push(_bp);                                 //push bp
    _push(_ds);                                 //push ds
    _push(_es);                                 //push es
    _bx = memory16(_ds, 0x541D);                //mov bx, word_257CD
    _bx <<= 1;                                  //shl bx, 1
    switch (_bx)                                //call off_26D26[bx]
    {
      case 0: sub_20375(); break;
      case 2: sub_20375(); break;
      case 4: sub_20375(); break;
      case 6: break;
      case 8: break;
      case 10: sub_20375(); break;
      default:
        _ASSERT(0);
    }
    _es = _pop();                               //pop es
    _ds = _pop();                               //pop ds
    _bp = _pop();                               //pop bp
    _si = _pop();                               //pop si
    _di = _pop();                               //pop di
}

void sub_20375()
{
    _dx = 0x03da;                               //mov dx, 3DAh
loc_20378:                                      //loc_20378:
    _in(_al, _dx);                              //in al, dx
    if (!(_al & 0x08))                          //jz short loc_20378
        goto loc_20378;
loc_2037D:                                      //loc_2037D:
    _in(_al, _dx);                              //in al, dx
    if (_al & 0x08)                             //jnz short loc_2037D
        goto loc_2037D;
}

void sub_20385()
{
    _dx = 0x03ba;                               //mov dx, 3BAh
loc_20388:                                      //loc_20388:
    _in(_al, _dx);                              //in al, dx
    _al &= 0x80;                                //and al, 80h
    if (_al != 0)                               //jnz short loc_20388
        goto loc_20388;
loc_2038D:                                      //loc_2038D:
    _in(_al, _dx);                              //in al, dx
    _al &= 0x80;                                //and al, 80h
    if (_al == 0)                               //jz short loc_2038D
        goto loc_2038D;
}


