

;
; +-------------------------------------------------------------------------+
; |   This file	has been generated by The Interactive Disassembler (IDA)    |
; |	      Copyright	(c) 2014 Hex-Rays, <support@hex-rays.com>	    |
; |			 License info: 48-3057-7374-2C			    |
; |	Zhou Tao, Jiangsu Australia Sinuo Network Technology Co., Ltd.	    |
; +-------------------------------------------------------------------------+
;
; Input	MD5   :	5DA33E337326CF9B75B4ADBEC1045DA9
; Input	CRC32 :	D190FC84

; File Name   :	G:\rick2\MAINEGA.EXE
; Format      :	MS-DOS executable (EXE)
; Base Address:	1000h Range: 10000h-1C4EFh Loaded length: C4EFh
; Entry	Point :	1040:BE76

		.686p
		.mmx
		.model large

; ===========================================================================

; Segment type:	Uninitialized
seg000		segment	byte stack 'STACK' use16
		assume cs:seg000
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
		db 400h	dup(0)
seg000		ends

; ===========================================================================

; Segment type:	Pure code
seg001		segment	byte public 'CODE' use16
		assume cs:seg001
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
		dw 124h
off_10402	dw offset sub_10533	; DATA XREF: start:loc_1C2E5r
off_10404	dw offset sub_10594	; DATA XREF: sub_16B9B+5848r
off_10406	dw offset sub_105A1	; DATA XREF: sub_16B9B+584Cr
off_10408	dw offset sub_105CC	; DATA XREF: start+BBr
off_1040A	dw offset sub_10702	; DATA XREF: start+C2r	start+E7r
off_1040C	dw offset sub_107F1	; DATA XREF: sub_19C43+Dr
					; sub_19EE5+11r
off_1040E	dw offset sub_10836	; DATA XREF: sub_19F8A+8r
					; sub_19F8A+12r
		dw 47Bh
		dw 4DDh
		dw 586h
		dw 5A5h
		dw 5C4h
off_1041A	dw offset sub_109D3	; DATA XREF: sub_1A592+35r
off_1041C	dw offset sub_109EE	; DATA XREF: sub_199C8:loc_19A10r
					; sub_19E18+13r ...
off_1041E	dw offset sub_10A67	; DATA XREF: sub_16B9B+58ECr
		dw 7C4h
		dw 82Eh
off_10424	dw offset sub_1091B	; DATA XREF: sub_16B9B+58F0r
off_10426	dw offset sub_10D03	; DATA XREF: sub_199C8+5r sub_19E18+6r ...
off_10428	dw offset sub_10DF8	; DATA XREF: start+FEr
off_1042A	dw offset sub_10D3D	; DATA XREF: start+B7r
		dw 0A23h
		dw 0A40h
		dw 0AA6h
		dw 0AC0h
		dw 0A7Fh
		dw 0AD8h
off_10438	dw offset nullsub_1	; DATA XREF: sub_19F8A+16r
					; sub_16B9B+58FFr
off_1043A	dw offset nullsub_3	; DATA XREF: sub_19EE5r
					; sub_194C4:loc_19F12r	...
off_1043C	dw offset nullsub_2	; DATA XREF: start+DBr	sub_16B9B+585Er
off_1043E	dw offset sub_11162	; DATA XREF: sub_16B9B+58F4r
		dw 0DF1h
off_10442	dw offset sub_112D6	; DATA XREF: sub_16B9B+5856r
		dw 0F76h
off_10446	dw offset sub_107AC	; DATA XREF: sub_199C8+1Br
					; sub_199C8+25r ...
off_10448	dw offset nullsub_4	; DATA XREF: sub_16B9B+5862r
		dw 0AE8h
		dw 0
		dw 0
		dw 0
		dw 0
		dw 0
word_10456	dw 0			; DATA XREF: sub_108F7+13r
					; sub_10E40+7r	...
		db 2 dup(0)
word_1045A	dw 0			; DATA XREF: sub_108F7+Er sub_10D03+7r ...
		db 6 dup(0)
		dw 0
		dw 0
		db    0
		db    0
		db    0
		db    0
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  6Dh	; m
		db  61h	; a
		db  70h	; p
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  78h	; x
		db  6Dh	; m
		db  61h	; a
		db  70h	; p
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  62h	; b
		db  6Ch	; l
		db  6Bh	; k
		db  73h	; s
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  74h	; t
		db  72h	; r
		db  67h	; g
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  64h	; d
		db  74h	; t
		db  61h	; a
		db  62h	; b
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  73h	; s
		db  65h	; e
		db  74h	; t
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  63h	; c
		db  61h	; a
		db  72h	; r
		db  74h	; t
		db  31h	; 1
		db  2Eh	; .
		db  64h	; d
		db  61h	; a
		db  74h	; t
		db    0
		db  72h	; r
		db  70h	; p
		db  73h	; s
		db  70h	; p
		db  73h	; s
		db  74h	; t
		db  2Eh	; .
		db  65h	; e
		db  73h	; s
		db  70h	; p
		db    0
		db    0
		db  72h	; r
		db  73h	; s
		db  70h	; p
		db  31h	; 1
		db  73h	; s
		db  74h	; t
		db  2Eh	; .
		db  65h	; e
		db  73h	; s
		db  70h	; p
		db    0
		db    0
		db  72h	; r
		db  70h	; p
		db  63h	; c
		db  68h	; h
		db  73h	; s
		db  74h	; t
		db  2Eh	; .
		db  65h	; e
		db  63h	; c
		db  68h	; h
		db    0
		db    0
		db  72h	; r
		db  63h	; c
		db  68h	; h
		db  31h	; 1
		db  73h	; s
		db  74h	; t
		db  2Eh	; .
		db  65h	; e
		db  63h	; c
		db  68h	; h
		db    0
		db    0
		db  72h	; r
		db  63h	; c
		db  61h	; a
		db  31h	; 1
		db  73h	; s
		db  74h	; t
		db  2Eh	; .
		db  65h	; e
		db  63h	; c
		db  68h	; h
		db    0
		db    0
		db  72h	; r
		db  68h	; h
		db  65h	; e
		db  61h	; a
		db  64h	; d
		db  65h	; e
		db  67h	; g
		db  61h	; a
		db  2Eh	; .
		db  65h	; e
		db  63h	; c
		db  68h	; h
		db    0
		db  74h	; t
		db  69h	; i
		db  74h	; t
		db  6Ch	; l
		db  65h	; e
		db  61h	; a
		db  2Eh	; .
		db  65h	; e
		db  67h	; g
		db  61h	; a
		db    0
		db    0
		db  74h	; t
		db  69h	; i
		db  74h	; t
		db  6Ch	; l
		db  65h	; e
		db  62h	; b
		db  2Eh	; .
		db  65h	; e
		db  67h	; g
		db  61h	; a
		db    0
		db    0
		db 0FFh
		db  90h	; ê

; =============== S U B	R O U T	I N E =======================================


sub_10524	proc near
		mov	ah, 0Fh
		nop
		nop
		int	10h		; - VIDEO - GET	CURRENT	VIDEO MODE
					; Return: AH = number of columns on screen
					; AL = current video mode
					; BH = current active display page
		mov	ds:6Ah,	al
		mov	ax, 0Dh
		int	10h		; - VIDEO - SET	VIDEO MODE
					; AL = mode
		retn
sub_10524	endp


; =============== S U B	R O U T	I N E =======================================


sub_10533	proc near		; CODE XREF: start:loc_1C2E5p
					; DATA XREF: seg001:off_10402o

; FUNCTION CHUNK AT 9331 SIZE 00000010 BYTES

		mov	ah, 48h	; 'H'
		mov	bx, 200h
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1053F
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1053F:				; CODE XREF: sub_10533+7j
		mov	ds:4Ch,	ax
		mov	ah, 48h	; 'H'
		mov	bx, 0AAAh
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1054E
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1054E:				; CODE XREF: sub_10533+16j
		mov	ds:62h,	ax
		mov	ah, 48h	; 'H'
		mov	bx, 0AAAh
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1055D
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1055D:				; CODE XREF: sub_10533+25j
		mov	ds:64h,	ax
		mov	ah, 48h	; 'H'
		mov	bx, 0AAAh
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1056C
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1056C:				; CODE XREF: sub_10533+34j
		mov	ds:66h,	ax
		mov	ah, 48h	; 'H'
		mov	bx, 0AAAh
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1057B
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1057B:				; CODE XREF: sub_10533+43j
		mov	ds:68h,	ax
		mov	ah, 48h	; 'H'
		mov	bx, 80h	; 'Ä'
		int	21h		; DOS -	2+ - ALLOCATE MEMORY
					; BX = number of 16-byte paragraphs desired
		jnb	short loc_1058A
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1058A:				; CODE XREF: sub_10533+52j
		mov	ds:52h,	ax
		mov	word ptr ds:56h, 0A400h
		retn
sub_10533	endp


; =============== S U B	R O U T	I N E =======================================


sub_10594	proc near		; CODE XREF: sub_16B9B+5848p
					; DATA XREF: seg001:off_10404o
		mov	ax, ds:62h
		mov	cx, 4344h
		mov	dx, 0CDh ; 'Õ'
		call	sub_1A65B
		retn
sub_10594	endp


; =============== S U B	R O U T	I N E =======================================


sub_105A1	proc near		; CODE XREF: sub_16B9B+584Cp
					; DATA XREF: seg001:off_10406o
		mov	ax, ds:4Ch
		mov	cx, 0
		mov	dx, 0E5h ; 'Â'
		call	sub_1A65B
		mov	cx, 400h
		mov	ax, 0A680h
		call	sub_105F7
		mov	ax, ds:4Ch
		mov	cx, 0
		mov	dx, 0F1h ; 'Ò'
		call	sub_1A65B
		mov	cx, 80h	; 'Ä'
		mov	ax, 0A700h
		call	sub_105F7
		retn
sub_105A1	endp


; =============== S U B	R O U T	I N E =======================================


sub_105CC	proc near		; CODE XREF: start+BBp
					; DATA XREF: seg001:off_10408o
		mov	ax, ds:4Ch
		mov	cx, 0
		mov	dx, 0D9h ; 'Ÿ'
		call	sub_1A65B
		mov	cx, 400h
		mov	ax, 0A600h
		call	sub_105F7
		mov	ax, ds:4Ch
		mov	cx, 0
		mov	dx, 0FDh ; '˝'
		call	sub_1A65B
		mov	cx, 180h
		mov	ax, 0A980h
		call	sub_105F7
		retn
sub_105CC	endp


; =============== S U B	R O U T	I N E =======================================


sub_105F7	proc near		; CODE XREF: sub_105A1+12p
					; sub_105A1+27p ...
		push	ds
		push	es
		mov	bp, cx
		mov	dx, ds:4Ch
		mov	ds, dx
		mov	es, ax
		xor	si, si
		xor	di, di
		push	dx
		mov	ax, 5
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)
		pop	dx
		push	dx
		mov	dx, 3C4h
		mov	ax, 102h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, bp
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 202h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, bp
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 402h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, bp
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 802h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, bp
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		push	dx
		mov	ax, 105h
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		pop	dx
		pop	es
		pop	ds
		retn
sub_105F7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10661	proc near		; CODE XREF: sub_107AC+38p
					; sub_107F1+38p ...
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		retn
sub_10661	endp

; ---------------------------------------------------------------------------
		db 4 dup(0), 14h, 4, 6,	14h, 15h, 16h, 2, 12h, 11h, 13h
		db 10h,	2 dup(7), 17h, 0, 1, 2,	3, 4, 5, 6, 7, 8, 9, 0Ah
		db 0Bh,	0Ch, 0Dh, 0Eh, 0Fh, 6 dup(0), 6, 2, 0, 3, 2, 0
		db 5, 2	dup(2),	6, 3, 0, 7, 4, 3, 7, 6,	3, 0, 3, 2, 1
		db 5, 2	dup(1),	2, 7, 1, 4, 7, 2 dup(2), 3 dup(3), 3 dup(4)
		db 5, 2	dup(6),	7, 3 dup(0), 90h, 34h dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_10702	proc near		; CODE XREF: start+C2p	start+E7p
					; DATA XREF: ...
		mov	byte ptr ds:279h, 0
		mov	si, 29Ah
		mov	di, 2CEh
		mov	cx, 33h	; '3'
		rep movsb
		mov	ax, 1A00h
		int	10h		; - VIDEO - DISPLAY COMBINATION	(PS,VGA/MCGA): read display combination	code
		cmp	bl, 5
		jle	short loc_10731
		cmp	bl, 7
		jl	short loc_10731
		cmp	bl, 8
		jg	short loc_10731
		mov	si, 28Ah
		mov	byte ptr ds:279h, 1
		jmp	short loc_1073E
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_10731:				; CODE XREF: sub_10702+18j
					; sub_10702+1Dj ...
		mov	si, 27Ah
		mov	byte ptr ds:279h, 0
		mov	byte ptr ds:278h, 1

loc_1073E:				; CODE XREF: sub_10702+2Cj
		mov	byte ptr ds:301h, 0
		mov	cx, 10h

loc_10746:				; CODE XREF: sub_10702+59j
		mov	ah, 10h
		mov	al, 0
		mov	bh, [si]
		inc	si
		mov	bl, ds:301h
		inc	byte ptr ds:301h
		push	si
		push	cx
		int	10h		; - VIDEO - SET	PALETTE	REGISTER (Jr, PS, TANDY	1000, EGA, VGA)
					; BL = palette register	to set
					; BH = color value to store
		pop	cx
		pop	si
		loop	loc_10746
		cmp	byte ptr ds:279h, 1
		jnz	short loc_1076A
		call	sub_10776
		call	sub_1079D

loc_1076A:				; CODE XREF: sub_10702+60j
		mov	di, 29Ah
		mov	si, 2CEh
		mov	cx, 33h	; '3'
		rep movsb
		retn
sub_10702	endp


; =============== S U B	R O U T	I N E =======================================


sub_10776	proc near		; CODE XREF: sub_10702+62p
		mov	si, 29Ah
		mov	byte ptr ds:301h, 0
		mov	cx, 10h

loc_10781:				; CODE XREF: sub_10776+24j
		push	cx
		mov	bh, 9
		mov	al, [si]
		imul	bh
		mov	[si], al
		inc	si
		mov	al, [si]
		imul	bh
		mov	[si], al
		inc	si
		mov	al, [si]
		imul	bh
		mov	[si], al
		inc	si
		pop	cx
		loop	loc_10781
		retn
sub_10776	endp


; =============== S U B	R O U T	I N E =======================================


sub_1079D	proc near		; CODE XREF: sub_10702+65p
		xor	bx, bx
		mov	cx, 10h
		mov	dx, 29Ah
		mov	al, 12h
		mov	ah, 10h
		int	10h		; - VIDEO - SET	BLOCK OF DAC REGISTERS (EGA, VGA/MCGA)
					; BX = starting	color register,	CX = number of registers to set
					; ES:DX	-> table of 3*CX bytes where each 3 byte group represents one
					; byte each of red, green and blue (0-63)
		retn
sub_1079D	endp


; =============== S U B	R O U T	I N E =======================================


sub_107AC	proc near		; CODE XREF: sub_199C8+1Bp
					; sub_199C8+25p ...
		xor	dx, dx
		mov	cx, dx
		mov	ch, ah
		mov	dh, ah
		shr	dx, 1
		shr	dx, 1
		add	dx, cx
		xor	ah, ah
		add	dx, ax
		mov	di, dx
		push	ds
		push	es
		mov	es, word ptr ds:5Ah
		mov	cx, 27h	; '''
		mov	ax, 0A980h
		mov	ds, ax
		assume ds:nothing

loc_107CE:				; CODE XREF: sub_107AC+40j
		xor	ax, ax
		mov	al, cs:[si]
		inc	si
		cmp	al, 0FFh
		jz	short loc_107EE
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	bx, si
		mov	si, ax
		mov	ax, di
		call	sub_10661
		mov	si, bx
		mov	di, ax
		inc	di
		jmp	short loc_107CE
; ---------------------------------------------------------------------------

loc_107EE:				; CODE XREF: sub_107AC+2Aj
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_107AC	endp


; =============== S U B	R O U T	I N E =======================================


sub_107F1	proc near		; CODE XREF: sub_19C43+Dp
					; sub_19EE5+11p
					; DATA XREF: ...
		xor	dx, dx
		mov	cx, dx
		mov	ch, ah
		mov	dh, ah
		shr	dx, 1
		shr	dx, 1
		add	dx, cx
		xor	ah, ah
		add	dx, ax
		mov	di, dx
		push	ds
		push	es
		mov	es, word ptr ds:5Ah
		mov	cx, 27h	; '''
		mov	ax, 0A600h
		mov	ds, ax
		assume ds:nothing

loc_10813:				; CODE XREF: sub_107F1+40j
		xor	ax, ax
		mov	al, cs:[si]
		inc	si
		cmp	al, 0FFh
		jz	short loc_10833
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	bx, si
		mov	si, ax
		mov	ax, di
		call	sub_10661
		mov	si, bx
		mov	di, ax
		inc	di
		jmp	short loc_10813
; ---------------------------------------------------------------------------

loc_10833:				; CODE XREF: sub_107F1+2Aj
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_107F1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10836	proc near		; CODE XREF: sub_19F8A+8p
					; sub_19F8A+12p
					; DATA XREF: ...
		xor	dx, dx
		mov	cx, dx
		mov	ch, ah
		mov	dh, ah
		shr	dx, 1
		shr	dx, 1
		add	dx, cx
		xor	ah, ah
		add	dx, ax
		mov	di, dx
		push	ds
		push	es
		mov	es, word ptr ds:5Ch
		mov	cx, 27h	; '''
		mov	ax, 0A600h
		mov	ds, ax
		assume ds:nothing

loc_10858:				; CODE XREF: sub_10836+40j
		xor	ax, ax
		mov	al, cs:[si]
		inc	si
		cmp	al, 0FFh
		jz	short loc_10878
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	bx, si
		mov	si, ax
		mov	ax, di
		call	sub_10661
		mov	si, bx
		mov	di, ax
		inc	di
		jmp	short loc_10858
; ---------------------------------------------------------------------------

loc_10878:				; CODE XREF: sub_10836+2Aj
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_10836	endp


; =============== S U B	R O U T	I N E =======================================


sub_1087B	proc near
		mov	cx, 100h
		mov	ax, 0
		mov	dx, 8
		mov	di, 2F73h

loc_10887:				; CODE XREF: sub_1087B+Fj
		stosw
		add	ax, dx
		loop	loc_10887
		retn
sub_1087B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1088D	proc near		; CODE XREF: sub_108DD+6p
					; sub_108DD+13p ...
		push	ds
		push	es
		mov	es, word ptr ds:56h
		mov	ax, 0A680h
		mov	ds, ax
		assume ds:nothing
		mov	cx, 20h	; ' '

loc_1089B:				; CODE XREF: sub_1088D+47j
		mov	bp, cx
		xor	ax, ax
		mov	al, cs:[bx]
		cmp	ax, 0F8h ; '¯'
		jl	short loc_108AA
		call	sub_19593

loc_108AA:				; CODE XREF: sub_1088D+18j
		inc	bx
		shl	ax, 1
		add	ax, 2F73h
		mov	si, ax
		mov	si, cs:[si]
		mov	cx, 1Fh
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, cx
		movsb
		add	di, 0FF20h
		mov	cx, bp
		loop	loc_1089B
		add	di, 0E0h ; '‡'
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_1088D	endp


; =============== S U B	R O U T	I N E =======================================


sub_108DD	proc near
		mov	bx, 571Ch
		mov	di, 1E00h
		call	sub_1088D
		mov	di, 0
		mov	bx, 573Ch
		mov	cx, 1Ah

loc_108EF:				; CODE XREF: sub_108DD+17j
		push	cx
		call	sub_1088D
		pop	cx
		loop	loc_108EF
		retn
sub_108DD	endp


; =============== S U B	R O U T	I N E =======================================


sub_108F7	proc near		; CODE XREF: sub_1091B+2Ap
					; sub_1091B+4Ap ...
		or	ax, ax
		jz	short locret_1091A
		push	ds
		push	es
		mov	dx, ax
		mov	bp, 20h	; ' '
		mov	bx, 8
		mov	es, cs:word_1045A
		assume es:nothing
		mov	ds, cs:word_10456
		assume ds:nothing

loc_1090F:				; CODE XREF: sub_108F7+1Fj
		mov	cx, bp
		rep movsb
		add	di, bx
		dec	dx
		jnz	short loc_1090F
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing

locret_1091A:				; CODE XREF: sub_108F7+2j
		retn
sub_108F7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1091B	proc near		; CODE XREF: sub_16B9B+58F0p
					; DATA XREF: seg001:off_10424o
		mov	dx, ds:6C45h
		add	dx, 0C0h ; '¿'
		and	dx, 0FFh
		cmp	dx, ds:6C45h
		jg	short loc_10969
		mov	ax, dx
		mov	si, 0
		mov	di, 144h
		mov	dx, 100h
		sub	dx, ds:6C45h
		add	dx, dx
		mov	bx, 3173h
		add	bx, dx
		add	di, [bx]
		call	sub_108F7
		mov	si, 0
		mov	dx, ds:6C45h
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	si, dx
		mov	di, 144h
		mov	ax, 100h
		sub	ax, ds:6C45h
		call	sub_108F7
		retn
; ---------------------------------------------------------------------------

loc_10969:				; CODE XREF: sub_1091B+10j
		mov	si, 0
		mov	dx, ds:6C45h
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	si, dx
		mov	di, 144h
		mov	ax, 0C0h ; '¿'
		call	sub_108F7
		retn
sub_1091B	endp


; =============== S U B	R O U T	I N E =======================================


sub_10986	proc near
		mov	bx, 573Ch
		mov	ax, ds:6C45h
		and	ax, 0F8h
		sub	ax, 8
		and	ax, 0FFh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	di, ax
		call	sub_1088D
		retn
sub_10986	endp


; =============== S U B	R O U T	I N E =======================================


sub_109A5	proc near
		mov	bx, 5A5Ch
		mov	ax, ds:6C45h
		and	ax, 0F8h
		add	ax, 0D0h ; '–'
		and	ax, 0FFh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	di, ax
		call	sub_1088D
		retn
sub_109A5	endp


; =============== S U B	R O U T	I N E =======================================


sub_109C4	proc near
		mov	di, 3173h
		xor	ax, ax
		mov	cx, 100h

loc_109CC:				; CODE XREF: sub_109C4+Cj
		stosw
		add	ax, 28h	; '('
		loop	loc_109CC
		retn
sub_109C4	endp


; =============== S U B	R O U T	I N E =======================================


sub_109D3	proc near		; CODE XREF: sub_1A592+35p
					; DATA XREF: seg001:off_1041Ao
		mov	word ptr ds:5Ah, 0A000h
		mov	word ptr ds:5Ch, 0A200h
		mov	word ptr ds:5Eh, 0
		mov	word ptr ds:60h, 2000h
		retn
sub_109D3	endp

; ---------------------------------------------------------------------------
		db 23h,	90h

; =============== S U B	R O U T	I N E =======================================


sub_109EE	proc near		; CODE XREF: sub_199C8:loc_19A10p
					; sub_19E18+13p ...
		push	ds
		push	es
		push	ax
		push	cx
		push	dx
		mov	ax, ds:5Ah
		mov	dx, ds:5Ch
		mov	ds:5Ch,	ax
		mov	ds:5Ah,	dx
		mov	ax, ds:5Eh
		mov	dx, ds:60h
		mov	ds:60h,	ax
		mov	ds:5Eh,	dx
		mov	cx, ds:60h
		push	dx
		push	ax
		mov	ax, 40h	; '@'
		mov	es, ax
		assume es:nothing
		mov	dx, es:63h
		add	dx, 6

loc_10A22:				; CODE XREF: sub_109EE+37j
		in	al, dx
		and	al, 8
		jnz	short loc_10A22

loc_10A27:				; CODE XREF: sub_109EE+3Cj
		in	al, dx
		and	al, 8
		jz	short loc_10A27
		sub	dx, 6
		cli
		mov	al, 0Ch
		out	dx, al
		inc	dx
		mov	al, ch
		out	dx, al
		dec	dx
		mov	al, 0Dh
		out	dx, al
		inc	dx
		mov	al, cl
		out	dx, al
		sti
		mov	ah, ch
		shl	ax, 1
		mov	es:4Eh,	ax
		mov	ax, 40h	; '@'
		mov	es, ax
		mov	dx, es:63h
		add	dx, 6

loc_10A55:				; CODE XREF: sub_109EE+6Aj
		in	al, dx
		and	al, 8
		jnz	short loc_10A55

loc_10A5A:				; CODE XREF: sub_109EE+6Fj
		in	al, dx
		and	al, 8
		jz	short loc_10A5A
		pop	ax
		pop	dx
		pop	dx
		pop	cx
		pop	ax
		pop	es
		assume es:nothing
		pop	ds
		retn
sub_109EE	endp


; =============== S U B	R O U T	I N E =======================================


sub_10A67	proc near		; CODE XREF: sub_16B9B+58ECp
					; DATA XREF: seg001:off_1041Eo
		cmp	word ptr ds:9173h, 0
		jnz	short loc_10A6F
		retn
; ---------------------------------------------------------------------------

loc_10A6F:				; CODE XREF: sub_10A67+5j
		mov	bx, ds:9175h
		mov	cx, 8

loc_10A76:				; CODE XREF: sub_10A67+70j
					; sub_10A67+79j
		push	cx
		mov	al, [bx]
		or	al, al
		jz	short loc_10AD2
		js	short loc_10ADC
		xor	dx, dx
		mov	dl, [bx+1]
		nop
		mov	cl, dl
		inc	cl
		and	cl, 3
		and	dl, 0FCh
		or	dl, cl
		mov	[bx+1],	dl
		nop
		mov	di, [bx+4]
		nop
		mov	bp, cs:[bx+6]
		nop
		xor	si, si
		push	ds
		push	es
		mov	es, word ptr ds:56h
		mov	ax, 0A700h
		mov	ds, ax
		assume ds:nothing
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		mov	si, dx
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		add	di, 1Fh
		movsb
		pop	es
		pop	ds
		assume ds:nothing

loc_10AD2:				; CODE XREF: sub_10A67+14j
		add	bx, 8
		nop
		pop	cx
		loop	loc_10A76
		jmp	short loc_10AE2
; ---------------------------------------------------------------------------
		align 2

loc_10ADC:				; CODE XREF: sub_10A67+16j
		mov	bx, 54FAh
		pop	cx
		loop	loc_10A76

loc_10AE2:				; CODE XREF: sub_10A67+72j
		mov	ds:9175h, bx
		retn
sub_10A67	endp


; =============== S U B	R O U T	I N E =======================================


sub_10AE7	proc near		; CODE XREF: sub_10BC4+29p
					; sub_10C2E+2Cp
		push	ds
		push	es
		mov	bx, 573Ch
		mov	di, 144h
		mov	es, word ptr ds:56h
		mov	ax, 0A680h
		mov	ds, ax
		assume ds:nothing
		mov	cx, 18h
		mov	dx, cs:word_18FF0
		and	dx, 7
		jz	short loc_10B43
		mov	si, dx
		mov	bp, 20h	; ' '
		xor	dx, 7

loc_10B0D:				; CODE XREF: sub_10AE7+43j
		push	si
		push	di
		xor	ax, ax
		mov	al, cs:[bx]
		inc	bx
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	si, ax
		push	dx

loc_10B1E:				; CODE XREF: sub_10AE7+3Cj
		movsb
		add	di, 27h	; '''
		dec	dx
		jns	short loc_10B1E
		pop	dx
		pop	di
		pop	si
		inc	di
		dec	bp
		jnz	short loc_10B0D
		inc	dx
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		mov	ax, dx
		shl	dx, 1
		shl	dx, 1
		add	dx, ax
		add	dx, 0FFE0h
		add	di, dx
		jmp	short loc_10B80
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_10B43:				; CODE XREF: sub_10AE7+1Cj
					; sub_10AE7:loc_10B80j
		mov	bp, 20h	; ' '

loc_10B46:				; CODE XREF: sub_10AE7+93j
		push	si
		push	di
		xor	ax, ax
		mov	al, cs:[bx]
		inc	bx
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	si, ax
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		movsb
		add	di, 27h	; '''
		pop	di
		pop	si
		inc	di
		dec	bp
		jnz	short loc_10B46
		add	di, 120h

loc_10B80:				; CODE XREF: sub_10AE7+59j
		loop	loc_10B43
		mov	dx, cs:word_18FF0
		and	dx, 7
		jz	short loc_10BAE
		mov	bp, 20h	; ' '

loc_10B8F:				; CODE XREF: sub_10AE7+C5j
		push	si
		push	di
		xor	ax, ax
		mov	al, cs:[bx]
		inc	bx
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	si, ax
		push	dx

loc_10BA0:				; CODE XREF: sub_10AE7+BEj
		movsb
		add	di, 27h	; '''
		dec	dx
		jns	short loc_10BA0
		pop	dx
		pop	di
		pop	si
		inc	di
		dec	bp
		jnz	short loc_10B8F

loc_10BAE:				; CODE XREF: sub_10AE7+A3j
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_10AE7	endp


; =============== S U B	R O U T	I N E =======================================


sub_10BB1	proc near		; CODE XREF: sub_10BC4+41p
					; sub_10C2E+41p
		mov	ax, ds:5Ah
		push	ax
		mov	ax, ds:56h
		mov	ds:5Ah,	ax
		call	word ptr ds:3Eh
		pop	ax
		mov	ds:5Ah,	ax
		retn
sub_10BB1	endp


; =============== S U B	R O U T	I N E =======================================


sub_10BC4	proc near
		mov	cx, ds:96F4h
		push	cx
		mov	word ptr ds:96F4h, 1
		push	ax
		push	dx
		call	word ptr ds:24h
		mov	word ptr ds:0B1Ch, 0
		call	word ptr ds:3Eh
		mov	word ptr ds:0B1Ch, 1
		pop	dx
		pop	ax
		call	sub_19351
		call	sub_19214
		call	sub_10AE7
		call	sub_1618F
		call	sub_15FE4
		mov	byte ptr ds:5B3Eh, 1
		nop
		call	sub_15F40
		mov	byte ptr ds:5B3Eh, 0
		nop
		call	sub_10BB1
		call	sub_19AF6
		call	word ptr ds:1Ch
		mov	si, 162h
		mov	cx, 10h

loc_10C15:				; CODE XREF: sub_10BC4+5Fj
		push	cx
		push	si
		call	sub_10C98
		call	word ptr ds:1Ch
		pop	si
		pop	cx
		add	si, 0FFFEh
		loop	loc_10C15
		call	sub_17047
		pop	cx
		mov	ds:96F4h, cx
		retn
sub_10BC4	endp


; =============== S U B	R O U T	I N E =======================================


sub_10C2E	proc near
		mov	cx, ds:96F4h
		push	cx
		mov	word ptr ds:96F4h, 1
		push	ax
		push	dx
		call	word ptr ds:24h
		mov	word ptr ds:0B1Ch, 0
		call	word ptr ds:3Eh
		mov	word ptr ds:0B1Ch, 1
		pop	dx
		pop	ax
		call	sub_19351
		call	sub_19214
		call	sub_1618F
		call	sub_10AE7
		call	sub_15FE4
		mov	byte ptr ds:5B3Eh, 1
		nop
		call	sub_15F40
		mov	byte ptr ds:5B3Eh, 0
		nop
		call	sub_10BB1
		call	sub_19AF6
		call	word ptr ds:1Ch
		mov	si, 144h
		mov	cx, 10h

loc_10C7F:				; CODE XREF: sub_10C2E+5Fj
		push	cx
		push	si
		call	sub_10CCD
		call	word ptr ds:1Ch
		pop	si
		pop	cx
		add	si, 2
		loop	loc_10C7F
		call	sub_17047
		pop	cx
		mov	ds:96F4h, cx
		retn
sub_10C2E	endp


; =============== S U B	R O U T	I N E =======================================


sub_10C98	proc near		; CODE XREF: sub_10BC4+53p
		push	ds
		push	es
		mov	bx, 144h
		mov	di, bx
		mov	bp, 0C0h ; '¿'
		mov	es, word ptr ds:5Ah
		mov	ax, ds:56h
		mov	dx, ds:5Ch

loc_10CAD:				; CODE XREF: sub_10C98+30j
		mov	ds, ax
		movsb
		movsb
		mov	ds, dx
		push	si
		mov	si, bx
		mov	cx, 1Eh
		rep movsb
		mov	bx, si
		pop	si
		add	bx, 0Ah
		add	si, 26h	; '&'
		add	di, 8
		dec	bp
		jnz	short loc_10CAD
		pop	es
		pop	ds
		retn
sub_10C98	endp


; =============== S U B	R O U T	I N E =======================================


sub_10CCD	proc near		; CODE XREF: sub_10C2E+53p
		push	ds
		push	es
		mov	bx, 146h
		mov	di, 144h
		mov	bp, 0C0h ; '¿'
		mov	es, word ptr ds:5Ah
		mov	ax, ds:56h
		mov	dx, ds:5Ch

loc_10CE3:				; CODE XREF: sub_10CCD+31j
		mov	ds, dx
		push	si
		mov	si, bx
		mov	cx, 1Eh
		rep movsb
		mov	bx, si
		pop	si
		mov	ds, ax
		movsb
		movsb
		add	bx, 0Ah
		add	si, 26h	; '&'
		add	di, 8
		dec	bp
		jnz	short loc_10CE3
		pop	es
		pop	ds
		retn
sub_10CCD	endp


; =============== S U B	R O U T	I N E =======================================


sub_10D03	proc near		; CODE XREF: sub_199C8+5p sub_19E18+6p ...
		push	ds
		push	es
		mov	ax, 0A700h
		mov	ds, ax
		assume ds:nothing
		mov	es, cs:word_1045A
		assume es:nothing
		mov	si, 100h
		lodsb
		xor	di, di
		mov	cx, 1F40h
		rep stosb
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		call	sub_19B1C
		call	word ptr ds:1Ch
		push	ds
		push	es
		mov	ax, 0A700h
		mov	ds, ax
		assume ds:nothing
		mov	es, cs:word_1045A
		assume es:nothing
		mov	si, 100h
		lodsb
		xor	di, di
		mov	cx, 1F40h
		rep stosb
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		retn
sub_10D03	endp


; =============== S U B	R O U T	I N E =======================================


sub_10D3D	proc near		; CODE XREF: start+B7p
					; DATA XREF: seg001:off_1042Ao
		mov	ax, ds:62h
		mov	cx, 0
		mov	dx, 10Ah
		call	sub_1A65B
		call	sub_10D5C
		mov	ax, ds:62h
		mov	cx, 0
		mov	dx, 116h
		call	sub_1A65B
		call	sub_10DAA
		retn
sub_10D3D	endp


; =============== S U B	R O U T	I N E =======================================


sub_10D5C	proc near		; CODE XREF: sub_10D3D+Cp
		push	ds
		push	es
		mov	ax, ds:62h
		mov	ds, ax
		mov	ax, 0A780h
		mov	es, ax
		assume es:nothing
		xor	si, si
		xor	di, di
		push	dx
		mov	ax, 5
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)
		pop	dx
		push	dx
		mov	dx, 3C4h
		mov	ax, 102h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, 0FA0h
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 202h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, 0FA0h
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		push	dx
		mov	ax, 105h
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		pop	dx
		pop	es
		assume es:nothing
		pop	ds
		retn
sub_10D5C	endp


; =============== S U B	R O U T	I N E =======================================


sub_10DAA	proc near		; CODE XREF: sub_10D3D+1Bp
		push	ds
		push	es
		mov	ax, ds:62h
		mov	ds, ax
		mov	ax, 0A780h
		mov	es, ax
		assume es:nothing
		xor	si, si
		xor	di, di
		push	dx
		mov	ax, 5
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)
		pop	dx
		push	dx
		mov	dx, 3C4h
		mov	ax, 402h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, 0FA0h
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 802h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		mov	cx, 0FA0h
		xor	di, di
		rep movsw
		push	dx
		mov	dx, 3C4h
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		pop	dx
		push	dx
		mov	ax, 105h
		mov	dx, 3CEh
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		pop	dx
		pop	es
		assume es:nothing
		pop	ds
		retn
sub_10DAA	endp


; =============== S U B	R O U T	I N E =======================================


sub_10DF8	proc near		; CODE XREF: start+FEp
					; DATA XREF: seg001:off_10428o
		push	ds
		push	es
		mov	ax, 0A780h
		mov	ds, ax
		assume ds:nothing
		mov	ax, 0A000h
		mov	es, ax
		assume es:nothing
		xor	si, si
		mov	di, si
		mov	cx, 1F40h
		rep movsb
		mov	ax, 0A780h
		mov	ds, ax
		mov	ax, 0A200h
		mov	es, ax
		assume es:nothing
		xor	si, si
		mov	di, si
		mov	cx, 1F40h
		rep movsb
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		retn
sub_10DF8	endp


; =============== S U B	R O U T	I N E =======================================


sub_10E23	proc near
		xor	dx, dx
		mov	dl, ah
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		mov	cx, dx
		shl	dx, 1
		shl	dx, 1
		add	dx, cx
		mov	cl, 3
		shl	dx, cl
		mov	di, dx
		xor	ah, ah
		add	di, ax
		retn
sub_10E23	endp


; =============== S U B	R O U T	I N E =======================================


sub_10E40	proc near
		push	ds
		push	es
		mov	ax, 0A600h
		mov	ds, ax
		assume ds:nothing
		mov	es, cs:word_10456
		assume es:nothing

loc_10E4C:				; CODE XREF: sub_10E40+3Aj
		push	cx
		push	si
		push	di

loc_10E4F:				; CODE XREF: sub_10E40+2Cj
		xor	ax, ax
		mov	al, cs:[si]
		inc	si
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		push	si
		push	di
		mov	si, ax
		push	cx
		mov	cx, 27h	; '''
		call	sub_10661
		pop	cx
		pop	di
		pop	si
		inc	di
		dec	cl
		jnz	short loc_10E4F
		pop	di
		add	di, 140h
		pop	si
		add	si, 20h	; ' '
		pop	cx
		dec	ch
		jnz	short loc_10E4C
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		retn
sub_10E40	endp


; =============== S U B	R O U T	I N E =======================================


sub_10E7F	proc near
		push	ds
		push	es
		mov	es, word ptr ds:5Ah
		mov	ds, word ptr ds:56h
		mov	di, 144h
		mov	si, di
		mov	bp, 0C0h ; '¿'

loc_10E91:				; CODE XREF: sub_10E7F+22j
		mov	cx, 20h	; ' '
		push	si
		push	di
		rep movsb
		pop	di
		pop	si
		add	si, 28h	; '('
		add	di, 28h	; '('
		dec	bp
		jnz	short loc_10E91
		pop	es
		pop	ds
		retn
sub_10E7F	endp


; =============== S U B	R O U T	I N E =======================================


sub_10EA6	proc near
		push	ds
		push	es
		mov	ax, 0A700h
		mov	ds, ax
		assume ds:nothing
		mov	es, cs:word_10456
		assume es:nothing
		mov	si, 100h
		lodsb
		xor	di, di
		mov	cx, 1F40h
		rep stosb
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		retn
sub_10EA6	endp


; =============== S U B	R O U T	I N E =======================================


sub_10EC0	proc near
		mov	dx, ds:5Ah
		push	dx
		mov	dx, ds:56h
		mov	ds:5Ah,	dx
		call	word ptr ds:0Ch
		pop	dx
		mov	ds:5Ah,	dx
		retn
sub_10EC0	endp

; ---------------------------------------------------------------------------
		add	[bx+si-6F70h], dx
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		retn
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_1. PRESS KEYPAD CTRL-"+" TO EXPAND]
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_2. PRESS KEYPAD CTRL-"+" TO EXPAND]
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_3. PRESS KEYPAD CTRL-"+" TO EXPAND]
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_4. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_10EE8	proc near
		mov	ax, cs:word_19AF4
		cmp	ax, 1
		jz	short locret_10EF6
		dec	ax
		mov	cs:word_19AF4, ax

locret_10EF6:				; CODE XREF: sub_10EE8+7j
		retn
sub_10EE8	endp

; ---------------------------------------------------------------------------
		align 10h
word_10F00	dw 0			; DATA XREF: sub_1A5F0+2w
word_10F02	dw 0			; DATA XREF: sub_164A0+7r
word_10F04	dw 0			; DATA XREF: sub_164A0+23r
		db 16h dup(0)
word_10F1C	dw 0			; DATA XREF: sub_1A5F0+9w
word_10F1E	dw 0			; DATA XREF: sub_18351+159r
					; sub_18351+166r ...
		db 4 dup(0)
word_10F24	dw 0			; DATA XREF: sub_18351:loc_1849Ar
					; sub_18351+382r ...
		db 12h dup(0)
word_10F38	dw 0			; DATA XREF: sub_1A5F0+5w
		db 18h dup(0)
word_10F52	dw 0			; DATA XREF: sub_18D28:loc_18E7Er
		db 2 dup(0FFh),	0D0h dup(0), 2 dup(0FFh), 138h dup(0)
		db 2 dup(0FFh)

; =============== S U B	R O U T	I N E =======================================


sub_11162	proc near		; CODE XREF: sub_16B9B+58F4p
					; DATA XREF: seg001:off_1043Eo
		push	ds
		push	es
		mov	es, word ptr ds:5Ah
		mov	si, 0B00h
		mov	dx, 3CEh
		mov	ax, 1
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; enable set/reset
		mov	ax, 3
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; data rotate and function select for write mode 00. Bits:
					; 0-2: set rotate count	for write mode 00
					; 3-4: fn for write modes 00 and 02
					;      00=no change; 01=AND; 10=OR; 11=XOR
		mov	ax, 5
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)

loc_1117A:				; CODE XREF: sub_11162+32j
		mov	ax, [si]
		or	ax, ax
		js	short loc_11196
		jz	short loc_11191
		cmp	word ptr [si+0Ah], 0FEh	; '˛'
		jz	short loc_11191
		push	ds
		push	si
		call	word ptr ds:40h
		pop	si
		pop	ds

loc_11191:				; CODE XREF: sub_11162+1Ej
					; sub_11162+25j
		add	si, 1Ch
		jmp	short loc_1117A
; ---------------------------------------------------------------------------

loc_11196:				; CODE XREF: sub_11162+1Cj
		mov	si, 0B56h

loc_11199:				; CODE XREF: sub_11162+53j
		mov	ax, [si]
		or	ah, ah
		js	short loc_111B7
		test	al, 1
		jz	short loc_111B2
		cmp	word ptr [si+0Ah], 0FEh	; '˛'
		jz	short loc_111B2
		push	ds
		push	si
		call	word ptr ds:40h
		pop	si
		pop	ds

loc_111B2:				; CODE XREF: sub_11162+3Fj
					; sub_11162+46j
		add	si, 34h	; '4'
		jmp	short loc_11199
; ---------------------------------------------------------------------------

loc_111B7:				; CODE XREF: sub_11162+3Bj
		mov	si, 0C28h

loc_111BA:				; CODE XREF: sub_11162+74j
		mov	ax, [si]
		or	ah, ah
		js	short loc_111D8
		test	al, 1
		jz	short loc_111D3
		cmp	word ptr [si+0Ah], 0FEh	; '˛'
		jz	short loc_111D3
		push	ds
		push	si
		call	word ptr ds:40h
		pop	si
		pop	ds

loc_111D3:				; CODE XREF: sub_11162+60j
					; sub_11162+67j
		add	si, 34h	; '4'
		jmp	short loc_111BA
; ---------------------------------------------------------------------------

loc_111D8:				; CODE XREF: sub_11162+5Cj
		mov	dx, 3C4h
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	dl, 0CEh ; 'Œ'
		mov	ax, 105h
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		mov	ax, 1
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; enable set/reset
		mov	ax, 0FF08h
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		pop	es
		pop	ds
		retn
sub_11162	endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_6. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_111F1	proc near
		xor	bp, bp
		mov	ax, [si+4]
		sub	ax, 38h	; '8'
		mov	dx, ds:8BF0h
		and	dx, 7
		sub	ax, dx
		cmp	ax, 8
		jge	short loc_1122C
		mov	cx, 8
		sub	cx, ax
		mov	ax, cx
		neg	cx
		add	cx, 15h
		jg	short loc_11218
		jmp	locret_112D5
; ---------------------------------------------------------------------------

loc_11218:				; CODE XREF: sub_111F1+22j
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		shl	ax, 1
		shl	ax, 1
		add	ax, dx
		mov	bp, ax
		mov	ax, 140h
		jmp	short loc_11252
; ---------------------------------------------------------------------------
		align 2

loc_1122C:				; CODE XREF: sub_111F1+14j
		cmp	ax, 0B3h ; '≥'
		jle	short loc_11241
		mov	cx, 0B3h ; '≥'
		sub	cx, ax
		add	cx, 15h
		jg	short loc_1123E
		jmp	locret_112D5
; ---------------------------------------------------------------------------

loc_1123E:				; CODE XREF: sub_111F1+48j
		jmp	short loc_11244
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_11241:				; CODE XREF: sub_111F1+3Ej
		mov	cx, 15h

loc_11244:				; CODE XREF: sub_111F1:loc_1123Ej
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	dx, ax
		shl	ax, 1
		shl	ax, 1
		add	ax, dx

loc_11252:				; CODE XREF: sub_111F1+38j
		mov	di, ax
		mov	ax, [si+2]
		add	ax, 20h	; ' '
		and	ax, 0FFF8h
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		add	di, ax
		mov	ax, [si+0Ah]
		cmp	ax, 80h	; 'Ä'
		jl	short loc_11270
		sub	ax, 40h	; '@'

loc_11270:				; CODE XREF: sub_111F1+7Aj
		mov	bx, 1A4h
		mul	bx
		mov	bx, [si+2]
		add	bx, 20h	; ' '
		and	bx, 6
		add	bx, 62h	; 'b'
		mov	ds, word ptr [bx]
		mov	si, ax
		add	si, bp
		mov	bp, 24h	; '$'
		mov	dh, 3

loc_1128D:				; CODE XREF: sub_111F1+E2j
		push	cx
		mov	cx, 4

loc_11291:				; CODE XREF: sub_111F1+DCj
		mov	ah, [si]
		or	ah, ah
		jz	short loc_112C9
		mov	al, 8
		mov	dl, 0CEh ; 'Œ'
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; set/reset.
					; Data bits 0-3	select planes for write	mode 00
		mov	dl, 0C4h ; 'ƒ'
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	ah, es:[di]
		mov	ah, 1
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	ah, [si+1]
		mov	es:[di], ah
		mov	ah, 2
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	ah, [si+2]
		mov	es:[di], ah
		mov	ah, 4
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	ah, [si+3]
		mov	es:[di], ah
		mov	ah, 8
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	ah, [si+4]
		mov	es:[di], ah

loc_112C9:				; CODE XREF: sub_111F1+A4j
		inc	di
		add	si, 5
		loop	loc_11291
		add	di, bp
		pop	cx
		dec	cx
		jnz	short loc_1128D

locret_112D5:				; CODE XREF: sub_111F1+24j
					; sub_111F1+4Aj
		retn
sub_111F1	endp


; =============== S U B	R O U T	I N E =======================================


sub_112D6	proc near		; CODE XREF: sub_16B9B+5856p
					; DATA XREF: seg001:off_10442o
		push	ds
		push	es
		mov	ds, word ptr ds:62h
		mov	bp, 64h	; 'd'
		xor	di, di
		xor	si, si
		mov	cx, 888h

loc_112E6:				; CODE XREF: sub_112D6+9Aj
		push	cx
		push	si
		push	di
		mov	ah, [si]
		mov	al, [si+5]
		mov	bh, [si+0Ah]
		mov	bl, 0
		push	bp
		mov	cx, 3

loc_112F7:				; CODE XREF: sub_112D6+48j
		clc
		rcr	ah, 1
		rcr	al, 1
		rcr	bh, 1
		rcr	bl, 1
		clc
		rcr	ah, 1
		rcr	al, 1
		rcr	bh, 1
		rcr	bl, 1
		mov	es, word ptr cs:[bp+0]
		inc	bp
		inc	bp
		mov	es:[di], ah
		mov	es:[di+5], al
		mov	es:[di+0Ah], bh
		mov	es:[di+0Fh], bl
		loop	loc_112F7
		pop	bp
		inc	si
		inc	di
		mov	cx, 4

loc_11326:				; CODE XREF: sub_112D6+8Cj
		push	cx
		mov	ah, [si]
		mov	al, [si+5]
		mov	bh, [si+0Ah]
		mov	bl, 0
		push	bp
		mov	cx, 3

loc_11335:				; CODE XREF: sub_112D6+86j
		clc
		rcr	ah, 1
		rcr	al, 1
		rcr	bh, 1
		rcr	bl, 1
		clc
		rcr	ah, 1
		rcr	al, 1
		rcr	bh, 1
		rcr	bl, 1
		mov	es, word ptr cs:[bp+0]
		inc	bp
		inc	bp
		mov	es:[di], ah
		mov	es:[di+5], al
		mov	es:[di+0Ah], bh
		mov	es:[di+0Fh], bl
		loop	loc_11335
		pop	bp
		inc	si
		inc	di
		pop	cx
		loop	loc_11326
		pop	di
		pop	si
		add	si, 14h
		add	di, 14h
		pop	cx
		dec	cx
		jz	short loc_11373
		jmp	loc_112E6
; ---------------------------------------------------------------------------

loc_11373:				; CODE XREF: sub_112D6+98j
		pop	es
		pop	ds
		retn
sub_112D6	endp


; =============== S U B	R O U T	I N E =======================================


sub_11376	proc near
		push	ds
		push	es
		mov	es, word ptr ds:5Ah
		mov	si, 0B00h
		mov	dx, 3CEh
		mov	ax, 1
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; enable set/reset
		mov	ax, 3
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; data rotate and function select for write mode 00. Bits:
					; 0-2: set rotate count	for write mode 00
					; 3-4: fn for write modes 00 and 02
					;      00=no change; 01=AND; 10=OR; 11=XOR
		mov	ax, 5
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; mode register.Data bits:
					; 0-1: Write mode 0-2
					; 2: test condition
					; 3: read mode:	1=color	compare, 0=direct
					; 4: 1=use odd/even RAM	addressing
					; 5: 1=use CGA mid-res map (2-bits/pixel)
		mov	si, 9BD6h

loc_11391:				; CODE XREF: sub_11376+38j
		mov	ax, [si]
		or	ax, ax
		js	short loc_113B0
		jz	short loc_113AA
		cmp	word ptr [si+0Ah], 0FEh	; '˛'
		jz	short loc_113AA
		push	bx
		push	ds
		push	si
		call	word ptr ds:40h
		pop	si
		pop	ds
		pop	bx

loc_113AA:				; CODE XREF: sub_11376+21j
					; sub_11376+28j
		add	si, 1Ah
		nop
		jmp	short loc_11391
; ---------------------------------------------------------------------------

loc_113B0:				; CODE XREF: sub_11376+1Fj
		mov	dx, 3C4h
		mov	ax, 0F02h
		out	dx, ax		; EGA: sequencer address reg
					; unknown register
		mov	dl, 0CEh ; 'Œ'
		mov	ax, 105h
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		mov	ax, 1
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; enable set/reset
		mov	ax, 0FF08h
		out	dx, ax		; EGA: graph 1 and 2 addr reg:
					; unknown register
		pop	es
		pop	ds
		retn
sub_11376	endp

; ---------------------------------------------------------------------------
		db 1F68h dup(0), 72h, 63h, 68h,	33h, 73h, 65h, 74h, 2Eh
		db 64h,	61h, 74h, 0, 72h, 63h, 61h, 72h, 74h, 33h, 2Eh
		db 64h,	61h, 74h, 0, 63h, 67h, 61h, 2Eh, 64h, 72h, 76h
		db 0, 76h, 67h,	61h, 2Eh, 64h, 72h, 76h, 0, 63h, 67h, 61h
		db 2Eh,	64h, 72h, 76h, 0, 74h, 67h, 61h, 2Eh, 64h, 72h
		db 76h,	0
word_13367	dw 2F57h		; DATA XREF: start:loc_1C2CAw
					; start:loc_1C2D3w ...
		db 5, 0, 9, 0, 7, 0, 6,	0, 8, 26C8h dup(0), 0FFh, 90h
		db 502h	dup(0)
byte_15F3E	db 0			; DATA XREF: sub_16B9B+58D2w
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_15F40	proc near		; CODE XREF: sub_10BC4+38p
					; sub_10C2E+38p ...
		cmp	word ptr ds:762Dh, 1
		jnz	short loc_15F52
		cmp	word ptr ds:762Fh, 1
		jz	short locret_15F51
		call	sub_17A31

locret_15F51:				; CODE XREF: sub_15F40+Cj
		retn
; ---------------------------------------------------------------------------

loc_15F52:				; CODE XREF: sub_15F40+5j
		mov	bx, ds:5B3Ch
		or	bx, bx
		jnz	short loc_15F5B
		retn
; ---------------------------------------------------------------------------

loc_15F5B:				; CODE XREF: sub_15F40+18j
		mov	cx, ds:8BF0h
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1
		add	cx, 25h	; '%'

loc_15F68:				; CODE XREF: sub_15F40+45j
					; sub_15F40+4Ej
		mov	al, [bx]
		or	al, al
		jnz	short loc_15F6F
		retn
; ---------------------------------------------------------------------------

loc_15F6F:				; CODE XREF: sub_15F40+2Cj
		mov	ah, al
		inc	bx
		mov	al, [bx]
		cmp	al, cl
		jb	short loc_15F79
		retn
; ---------------------------------------------------------------------------

loc_15F79:				; CODE XREF: sub_15F40+36j
		test	ah, 80h
		jz	short loc_15F90
		inc	bx

loc_15F7F:				; CODE XREF: sub_15F40+77j
		inc	bx

loc_15F80:				; CODE XREF: sub_15F40+92j
		mov	al, [bx]
		inc	bx
		and	al, 3
		jz	short loc_15F68

loc_15F87:				; CODE XREF: sub_15F40+4Cj
		add	bx, 4
		dec	al
		jnz	short loc_15F87
		jmp	short loc_15F68
; ---------------------------------------------------------------------------

loc_15F90:				; CODE XREF: sub_15F40+3Cj
		inc	bx
		test	byte ptr [bx], 80h
		jz	short loc_15FD4
		mov	al, ds:5B3Eh
		or	al, al
		jnz	short loc_15FB9
		push	cx
		mov	cx, ds:8BF0h
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1
		mov	ah, cl
		dec	bx
		mov	al, [bx]
		inc	bx
		sub	al, ah
		cmp	al, 5
		pop	cx
		jb	short loc_15FB9
		cmp	al, 22h	; '"'
		jb	short loc_15F7F

loc_15FB9:				; CODE XREF: sub_15F40+5Bj
					; sub_15F40+73j
		dec	bx
		dec	bx
		push	bx

loc_15FBC:				; CODE XREF: sub_15F40+A2j
		mov	si, bx
		call	sub_16205
		pop	bx

loc_15FC2:				; CODE XREF: sub_15F40+9Fj
		inc	bx
		inc	bx
		inc	bx
		mov	cx, ds:8BF0h
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1
		add	cx, 25h	; '%'
		jmp	short loc_15F80
; ---------------------------------------------------------------------------

loc_15FD4:				; CODE XREF: sub_15F40+54j
		dec	bx
		dec	bx
		push	bx
		mov	si, bx
		xor	dx, dx
		call	sub_16222
		pop	bx
		jnb	short loc_15FC2
		push	bx
		jmp	short loc_15FBC
sub_15F40	endp


; =============== S U B	R O U T	I N E =======================================


sub_15FE4	proc near		; CODE XREF: sub_10BC4+2Fp
					; sub_10C2E+2Fp ...
		mov	bx, ds:8BFCh
		mov	ds:5B3Ch, bx
		or	bx, bx
		jnz	short loc_15FF1
		retn
; ---------------------------------------------------------------------------

loc_15FF1:				; CODE XREF: sub_15FE4+Aj
					; sub_15FE4+2Dj ...
		mov	al, [bx]
		or	al, al
		jnz	short loc_15FF8
		retn
; ---------------------------------------------------------------------------

loc_15FF8:				; CODE XREF: sub_15FE4+11j
		inc	bx
		mov	cx, ds:8BF0h
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1
		cmp	cl, [bx]
		jz	short loc_1601C
		jb	short loc_1601C
		add	bx, 2
		mov	al, [bx]
		inc	bx
		and	al, 3
		jz	short loc_15FF1

loc_16013:				; CODE XREF: sub_15FE4+34j
		add	bx, 4
		dec	al
		jnz	short loc_16013
		jmp	short loc_15FF1
; ---------------------------------------------------------------------------

loc_1601C:				; CODE XREF: sub_15FE4+21j
					; sub_15FE4+23j
		dec	bx
		mov	ds:5B3Ch, bx
		retn
sub_15FE4	endp


; =============== S U B	R O U T	I N E =======================================


sub_16022	proc near		; CODE XREF: sub_16205+13p
		call	sub_16126
		jnb	short loc_16028
		retn
; ---------------------------------------------------------------------------

loc_16028:				; CODE XREF: sub_16022+3j
		xor	ax, ax
		mov	[di+32h], ax
		mov	[di+18h], ax
		mov	[di+22h], ax
		mov	[di+1Ch], si
		xor	cx, cx
		mov	cl, [si]
		add	cx, cx
		mov	bx, 117Eh
		add	bx, cx
		mov	bx, [bx]
		mov	al, [bx]
		cbw
		mov	[di+1Eh], ax
		inc	bx
		mov	al, [bx]
		cbw
		mov	[di+20h], ax
		inc	bx
		mov	al, [bx]
		and	al, 0C0h
		mov	dl, al
		xor	ax, ax
		mov	al, [si+3]
		and	al, 3Ch
		cmp	al, 10h
		jnz	short loc_16072
		mov	word ptr [di+32h], 60h ; '`'
		test	byte ptr [si+3], 40h
		jz	short loc_16072
		mov	word ptr [di+1Ch], 0

loc_16072:				; CODE XREF: sub_16022+3Ej
					; sub_16022+49j
		or	al, 1
		or	al, dl
		mov	[di], al
		and	al, 3Fh
		mov	dl, al
		xor	ax, ax
		mov	al, [bx]
		add	al, al
		add	al, al
		or	al, dl
		mov	[di+2Ch], al
		inc	bx
		mov	ax, [bx]
		inc	bx
		inc	bx
		mov	[di+24h], ax
		mov	ax, [bx]
		inc	bx
		inc	bx
		mov	[di+16h], ax
		mov	ax, [bx]
		inc	bx
		inc	bx
		mov	[di+28h], ax
		mov	ax, [bx]
		mov	[di+2Ah], ax
		mov	al, [si+2]
		and	ax, 1Fh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		test	byte ptr [si+2], 20h
		jz	short loc_160BA
		inc	ax
		inc	ax
		inc	ax
		inc	ax

loc_160BA:				; CODE XREF: sub_16022+92j
		mov	[di+2],	ax
		mov	ax, ds:8BF0h
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		mov	dl, al
		mov	al, [si+1]
		sub	al, dl
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		test	byte ptr [si+2], 40h
		jz	short loc_160DC
		inc	ax
		inc	ax
		inc	ax

loc_160DC:				; CODE XREF: sub_16022+B5j
		mov	[di+4],	ax
		or	byte ptr [si], 80h
		mov	al, [di]
		and	al, 3Fh
		mov	ah, 29h	; ')'
		cmp	al, 21h	; '!'
		jnz	short loc_160F2
		mov	[di+0Ah], ah
		jmp	short locret_16125
; ---------------------------------------------------------------------------
		align 2

loc_160F2:				; CODE XREF: sub_16022+C8j
		mov	ah, 27h	; '''
		cmp	al, 29h	; ')'
		jnz	short loc_160FE
		mov	[di+0Ah], ah
		jmp	short locret_16125
; ---------------------------------------------------------------------------
		align 2

loc_160FE:				; CODE XREF: sub_16022+D4j
		mov	ah, 28h	; '('
		cmp	al, 2Dh	; '-'
		jnz	short loc_1610A
		mov	[di+0Ah], ah
		jmp	short locret_16125
; ---------------------------------------------------------------------------
		align 2

loc_1610A:				; CODE XREF: sub_16022+E0j
		push	si
		push	di
		push	bx
		mov	si, di
		mov	ax, [si+18h]
		push	ax
		mov	ax, [si+16h]
		push	ax
		call	sub_1718E
		pop	ax
		mov	[si+16h], ax
		pop	ax
		mov	[si+18h], ax
		pop	bx
		pop	di
		pop	si

locret_16125:				; CODE XREF: sub_16022+CDj
					; sub_16022+D9j ...
		retn
sub_16022	endp


; =============== S U B	R O U T	I N E =======================================


sub_16126	proc near		; CODE XREF: sub_16022p
		mov	di, 0C28h

loc_16129:				; CODE XREF: sub_16126+10j
		mov	ax, [di]
		or	ah, ah
		js	short loc_16138
		test	al, 1
		jz	short loc_1613A
		add	di, 34h	; '4'
		jmp	short loc_16129
; ---------------------------------------------------------------------------

loc_16138:				; CODE XREF: sub_16126+7j
		stc
		retn
; ---------------------------------------------------------------------------

loc_1613A:				; CODE XREF: sub_16126+Bj
		clc
		retn
sub_16126	endp


; =============== S U B	R O U T	I N E =======================================


sub_1613C	proc near		; CODE XREF: sub_16591+C0p
					; sub_16591:loc_16866p	...
		push	cx
		mov	cx, [si+2]
		cmp	cx, 0
		jl	short loc_1615C
		cmp	cx, 0E8h ; 'Ë'
		jg	short loc_1615C
		mov	cx, [si+4]
		cmp	cx, 0
		jl	short loc_1615C
		cmp	cx, 128h
		jge	short loc_1615C
		pop	cx
		clc
		retn
; ---------------------------------------------------------------------------

loc_1615C:				; CODE XREF: sub_1613C+7j sub_1613C+Dj ...
		pop	cx
		stc
		retn
sub_1613C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1615F	proc near		; CODE XREF: sub_16591+C5j
					; sub_16591+2DAp ...
		test	word ptr [si], 1
		jz	short locret_16173
		mov	bx, [si+1Ch]
		or	bx, bx
		jz	short loc_1616F
		and	byte ptr [bx], 7Fh

loc_1616F:				; CODE XREF: sub_1615F+Bj
		mov	word ptr [si], 0

locret_16173:				; CODE XREF: sub_1615F+4j
		retn
sub_1615F	endp


; =============== S U B	R O U T	I N E =======================================


sub_16174	proc near		; CODE XREF: sub_16591+4Bj
					; sub_16591:loc_16771j	...
		test	word ptr [si], 1
		jz	short locret_1618E
		mov	bx, [si+1Ch]
		or	bx, bx
		jz	short loc_1618A
		test	byte ptr [bx+3], 40h
		jnz	short loc_1618A
		and	byte ptr [bx], 7Fh

loc_1618A:				; CODE XREF: sub_16174+Bj
					; sub_16174+11j
		mov	word ptr [si], 0

locret_1618E:				; CODE XREF: sub_16174+4j
		retn
sub_16174	endp


; =============== S U B	R O U T	I N E =======================================


sub_1618F	proc near		; CODE XREF: sub_10BC4+2Cp
					; sub_10C2E+29p ...
		push	si
		mov	si, 0B56h

loc_16193:				; CODE XREF: sub_1618F+1Cj
		cmp	word ptr [si], 0FFFFh
		jz	short loc_161AD
		test	word ptr [si], 1
		jz	short loc_161A8
		mov	bx, [si+1Ch]
		and	byte ptr [bx], 7Fh
		mov	word ptr [si], 0

loc_161A8:				; CODE XREF: sub_1618F+Dj
		add	si, 34h	; '4'
		jmp	short loc_16193
; ---------------------------------------------------------------------------

loc_161AD:				; CODE XREF: sub_1618F+7j
		mov	si, 0C28h

loc_161B0:				; CODE XREF: sub_1618F+39j
		cmp	word ptr [si], 0FFFFh
		jz	short loc_161CA
		test	word ptr [si], 1
		jz	short loc_161C5
		mov	bx, [si+1Ch]
		and	byte ptr [bx], 7Fh
		mov	word ptr [si], 0

loc_161C5:				; CODE XREF: sub_1618F+2Aj
		add	si, 34h	; '4'
		jmp	short loc_161B0
; ---------------------------------------------------------------------------

loc_161CA:				; CODE XREF: sub_1618F+24j
		pop	si
		retn
sub_1618F	endp

; ---------------------------------------------------------------------------
		db 2 dup(0)
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_16205

loc_161CE:				; CODE XREF: sub_16205+7j
		or	byte ptr [si], 80h
		mov	word ptr ds:5DCCh, 1
		mov	word ptr ds:65E1h, 18h
		mov	si, 661Dh
		mov	di, 6624h
		mov	cx, 6
		rep movsb
		mov	ax, 13h
		call	sub_1AECD
		retn
; ---------------------------------------------------------------------------

loc_161EF:				; CODE XREF: sub_16205+Cj
		or	byte ptr [si], 80h
		mov	word ptr ds:5DCCh, 0
		mov	si, 6624h
		call	sub_16BC7
		mov	ax, 1
		call	sub_1AECD
		retn
; END OF FUNCTION CHUNK	FOR sub_16205

; =============== S U B	R O U T	I N E =======================================


sub_16205	proc near		; CODE XREF: sub_15F40+7Ep

; FUNCTION CHUNK AT 5DCE SIZE 00000037 BYTES

		xor	ah, ah
		mov	al, [si]
		cmp	ax, 78h	; 'x'
		jz	short loc_161CE
		cmp	ax, 7Ch	; '|'
		jz	short loc_161EF
		cmp	ax, 75h	; 'u'
		jge	short loc_1621C
		call	sub_16022
		retn
; ---------------------------------------------------------------------------

loc_1621C:				; CODE XREF: sub_16205+11j
		call	sub_1691D
		retn
sub_16205	endp

; ---------------------------------------------------------------------------
		db 0, 90h

; =============== S U B	R O U T	I N E =======================================


sub_16222	proc near		; CODE XREF: sub_15F40+9Bp
					; sub_16591+1D1p
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		mov	al, [si+3]
		and	al, 3
		jnz	short loc_1623E
		retn
; ---------------------------------------------------------------------------

loc_1623E:				; CODE XREF: sub_16222+19j
					; sub_16222+1E1j
		add	si, 4
		push	word ptr ds:54F8h
		push	ax
		pop	word ptr ds:54F8h
		pop	ax
		mov	al, [si+2]
		mov	cl, al
		shr	al, 1
		shr	al, 1
		shr	al, 1
		shr	al, 1
		and	al, 0Fh
		inc	al
		mov	ah, al
		mov	dx, ds:8BF0h
		shr	dx, 1
		shr	dx, 1
		shr	dx, 1
		mov	al, [si+1]
		sub	al, dl
		jns	short loc_1627D
		add	al, ah
		jns	short loc_16277

loc_16273:				; CODE XREF: sub_16222:loc_16277j
					; sub_16222+5Dj
		clc
		jmp	loc_163F5
; ---------------------------------------------------------------------------

loc_16277:				; CODE XREF: sub_16222+4Fj
		jz	short loc_16273
		mov	ah, al
		xor	al, al

loc_1627D:				; CODE XREF: sub_16222+4Bj
		cmp	al, 20h	; ' '
		jnb	short loc_16273
		xor	bx, bx
		mov	bl, al
		add	bx, bx
		add	bx, bx
		add	bx, bx
		add	ah, ah
		add	ah, ah
		add	ah, ah
		and	cl, 0Fh
		inc	cl
		add	cl, cl
		add	cl, cl
		add	cl, cl
		mov	dl, cl
		mov	dh, [si]
		push	si
		mov	al, [si+3]
		shr	al, 1
		jnb	short loc_162CD
		push	bx
		mov	cl, al
		push	cx
		mov	si, 0B1Ch
		call	sub_16407
		pop	cx
		mov	al, cl
		pop	bx
		jnb	short loc_162CD

loc_162B8:				; CODE XREF: sub_16222+C6j
					; sub_16222+E9j ...
		pop	si
		mov	al, [si+3]
		or	al, al
		jns	short loc_162C3
		jmp	loc_163F5
; ---------------------------------------------------------------------------

loc_162C3:				; CODE XREF: sub_16222+9Cj
		and	al, 40h
		jnz	short loc_162CB
		or	byte ptr [si+3], 80h

loc_162CB:				; CODE XREF: sub_16222+A3j
		stc
		retn
; ---------------------------------------------------------------------------

loc_162CD:				; CODE XREF: sub_16222+84j
					; sub_16222+94j
		shr	al, 1
		jnb	short loc_162EC
		mov	cl, al
		cmp	word ptr ds:0B00h, 1
		jnz	short loc_162EA
		push	cx
		push	bx
		call	sub_164A0
		pop	bx
		pop	cx
		jnb	short loc_162EA
		mov	byte ptr ds:5E20h, 0FFh
		jmp	short loc_162B8
; ---------------------------------------------------------------------------

loc_162EA:				; CODE XREF: sub_16222+B6j
					; sub_16222+BFj
		mov	al, cl

loc_162EC:				; CODE XREF: sub_16222+ADj
		shr	al, 1
		jnb	short loc_1630F
		mov	cl, al
		cmp	word ptr ds:0B38h, 2
		jnz	short loc_1630D
		mov	al, ds:0B4Ah
		cmp	al, 1
		jle	short loc_1630D
		cmp	al, 4
		jg	short loc_1630D
		push	cx
		push	bx
		call	sub_164E1
		pop	bx
		pop	cx
		jb	short loc_162B8

loc_1630D:				; CODE XREF: sub_16222+D5j
					; sub_16222+DCj ...
		mov	al, cl

loc_1630F:				; CODE XREF: sub_16222+CCj
		shr	al, 1
		jnb	short loc_1632F
		mov	cl, al
		cmp	word ptr ds:7ECCh, 1
		jnz	short loc_1632D
		push	cx
		push	bx
		call	sub_1646E
		pop	bx
		pop	cx
		jnb	short loc_1632D
		mov	ax, 14h
		call	sub_1AECD
		jmp	short loc_162B8
; ---------------------------------------------------------------------------

loc_1632D:				; CODE XREF: sub_16222+F8j
					; sub_16222+101j
		mov	al, cl

loc_1632F:				; CODE XREF: sub_16222+EFj
		shr	al, 1
		jnb	short loc_16389
		mov	cl, al
		push	si
		mov	si, 0B56h

loc_16339:				; CODE XREF: sub_16222+159j
		mov	bp, cs:[si]
		cmp	bp, 0FFFFh
		jz	short loc_1637D
		test	bp, 1
		jz	short loc_16378
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		push	cx
		push	bx
		call	sub_16519
		pop	bx
		pop	cx
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		jb	short loc_16382

loc_16378:				; CODE XREF: sub_16222+123j
		add	si, 34h	; '4'
		jmp	short loc_16339
; ---------------------------------------------------------------------------

loc_1637D:				; CODE XREF: sub_16222+11Dj
		pop	si
		clc
		jmp	short loc_16387
; ---------------------------------------------------------------------------
		align 2

loc_16382:				; CODE XREF: sub_16222+154j
		pop	si
		stc
		jmp	loc_162B8
; ---------------------------------------------------------------------------

loc_16387:				; CODE XREF: sub_16222+15Dj
		mov	al, cl

loc_16389:				; CODE XREF: sub_16222+10Fj
		shr	al, 1
		jnb	short loc_163F0
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		mov	bx, 0C28h

loc_163A4:				; CODE XREF: sub_16222+1CCj
		mov	al, [bx+1]
		or	al, al
		js	short loc_163F0
		mov	al, [bx]
		or	al, al
		jz	short loc_163EB
		cmp	bx, dx
		jz	short loc_163EB
		mov	si, bx
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		push	cx
		push	bx
		call	sub_16555
		pop	bx
		pop	cx
		push	word ptr ds:54F4h
		push	dx
		pop	word ptr ds:54F4h
		pop	dx
		push	word ptr ds:54F6h
		push	bx
		pop	word ptr ds:54F6h
		pop	bx
		jnb	short loc_163EB
		jmp	loc_162B8
; ---------------------------------------------------------------------------

loc_163EB:				; CODE XREF: sub_16222+18Dj
					; sub_16222+191j ...
		add	bx, 34h	; '4'
		jmp	short loc_163A4
; ---------------------------------------------------------------------------

loc_163F0:				; CODE XREF: sub_16222+169j
					; sub_16222+187j
		pop	si
		and	byte ptr [si+3], 7Fh

loc_163F5:				; CODE XREF: sub_16222+52j
					; sub_16222+9Ej
		push	word ptr ds:54F8h
		push	ax
		pop	word ptr ds:54F8h
		pop	ax
		dec	al
		jz	short locret_16406
		jmp	loc_1623E
; ---------------------------------------------------------------------------

locret_16406:				; CODE XREF: sub_16222+1DFj
		retn
sub_16222	endp


; =============== S U B	R O U T	I N E =======================================


sub_16407	proc near		; CODE XREF: sub_16222+8Dp
					; sub_16591+1AFp ...
		cmp	word ptr ds:7E16h, 1
		jnz	short loc_16410
		clc
		retn
; ---------------------------------------------------------------------------

loc_16410:				; CODE XREF: sub_16407+5j
		mov	bp, ds:0B1Eh
		add	bp, 14h
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jge	short loc_1646C
		sub	bp, 10h
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jle	short loc_1646C
		mov	bp, ds:0B20h
		mov	cx, bx
		cmp	word ptr ds:7E04h, 1
		jz	short loc_16454
		add	bp, 15h
		cmp	cx, bp
		jge	short loc_1646C
		sub	bp, 15h
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jle	short loc_1646C
		jmp	short loc_1646A
; ---------------------------------------------------------------------------
		align 2

loc_16454:				; CODE XREF: sub_16407+32j
		add	bp, 15h
		cmp	cx, bp
		jge	short loc_1646C
		sub	bp, 10h
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jle	short loc_1646C

loc_1646A:				; CODE XREF: sub_16407+4Aj
		stc
		retn
; ---------------------------------------------------------------------------

loc_1646C:				; CODE XREF: sub_16407+16j
					; sub_16407+25j ...
		clc
		retn
sub_16407	endp


; =============== S U B	R O U T	I N E =======================================


sub_1646E	proc near		; CODE XREF: sub_16222+FCp
					; sub_17222+397p
		mov	bp, ds:7ECEh
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jg	short loc_1649E
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jl	short loc_1649E
		mov	bp, ds:7ED0h
		mov	cx, bx
		cmp	cx, bp
		jg	short loc_1649E
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jl	short loc_1649E
		stc
		retn
; ---------------------------------------------------------------------------

loc_1649E:				; CODE XREF: sub_1646E+Aj
					; sub_1646E+16j ...
		clc
		retn
sub_1646E	endp


; =============== S U B	R O U T	I N E =======================================


sub_164A0	proc near		; CODE XREF: sub_16222+BAp
					; sub_16591+2C7p ...
		cmp	word ptr ds:0B00h, 1
		jnz	short loc_164DF
		mov	bp, cs:word_10F02
		add	bp, 8
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jg	short loc_164DF
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jl	short loc_164DF
		mov	bp, cs:word_10F04
		add	bp, 4
		mov	cx, bx
		cmp	cx, bp
		jg	short loc_164DF
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jl	short loc_164DF
		stc
		retn
; ---------------------------------------------------------------------------

loc_164DF:				; CODE XREF: sub_164A0+5j
					; sub_164A0+15j ...
		clc
		retn
sub_164A0	endp


; =============== S U B	R O U T	I N E =======================================


sub_164E1	proc near		; CODE XREF: sub_16222+E4p
					; sub_16591+2A6p ...
		mov	bp, ds:0B3Ah
		add	bp, 0Ch
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jg	short loc_16517
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jl	short loc_16517
		mov	bp, ds:0B3Ch
		add	bp, 0Ah
		mov	cx, bx
		cmp	cx, bp
		jg	short loc_16517
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jl	short loc_16517
		stc
		retn
; ---------------------------------------------------------------------------

loc_16517:				; CODE XREF: sub_164E1+Dj
					; sub_164E1+19j ...
		clc
		retn
sub_164E1	endp


; =============== S U B	R O U T	I N E =======================================


sub_16519	proc near		; CODE XREF: sub_16222+13Bp
					; sub_16591+16Cp
		mov	bp, [si+2]
		add	bp, 14h
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jge	short loc_16553
		sub	bp, 10h
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jle	short loc_16553
		mov	bp, [si+4]
		mov	cx, bx
		add	bp, 15h
		cmp	cx, bp
		jge	short loc_16553
		sub	bp, 15h
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jle	short loc_16553
		stc
		retn
; ---------------------------------------------------------------------------

loc_16553:				; CODE XREF: sub_16519+Cj
					; sub_16519+1Bj ...
		clc
		retn
sub_16519	endp


; =============== S U B	R O U T	I N E =======================================


sub_16555	proc near		; CODE XREF: sub_16222+1ABp
					; sub_16591+10Ap
		mov	bp, [si+2]
		add	bp, [si+1Eh]
		xor	cx, cx
		mov	cl, dh
		cmp	cx, bp
		jge	short loc_1658F
		sub	bp, [si+1Eh]
		mov	al, dh
		xor	dh, dh
		add	cx, dx
		mov	dh, al
		cmp	cx, bp
		jle	short loc_1658F
		mov	bp, [si+4]
		mov	cx, bx
		add	bp, [si+20h]
		cmp	cx, bp
		jge	short loc_1658F
		sub	bp, [si+20h]
		xchg	al, ah
		xor	ah, ah
		add	cx, ax
		xchg	al, ah
		cmp	cx, bp
		jle	short loc_1658F
		stc
		retn
; ---------------------------------------------------------------------------

loc_1658F:				; CODE XREF: sub_16555+Cj
					; sub_16555+1Bj ...
		clc
		retn
sub_16555	endp


; =============== S U B	R O U T	I N E =======================================


sub_16591	proc near		; CODE XREF: sub_168E4+19p
		mov	al, [si]
		and	al, 3Fh
		cmp	al, 21h	; '!'
		mov	ah, 29h	; ')'
		jnz	short loc_1659E
		jmp	loc_167D9
; ---------------------------------------------------------------------------

loc_1659E:				; CODE XREF: sub_16591+8j
		mov	ah, 27h	; '''
		cmp	al, 29h	; ')'
		jnz	short loc_165A7
		jmp	loc_167D9
; ---------------------------------------------------------------------------

loc_165A7:				; CODE XREF: sub_16591+11j
		mov	ah, 28h	; '('
		cmp	al, 2Dh	; '-'
		jnz	short loc_165B0
		jmp	loc_167D9
; ---------------------------------------------------------------------------

loc_165B0:				; CODE XREF: sub_16591+1Aj
		test	al, 2
		jz	short loc_165B7
		jmp	loc_16748
; ---------------------------------------------------------------------------

loc_165B7:				; CODE XREF: sub_16591+21j
		mov	bx, [si+24h]

loc_165BA:				; CODE XREF: sub_16591+3Cj
					; sub_16591+50j
		mov	al, [bx]
		cmp	al, 0
		jz	short loc_165CF
		cmp	al, 0FFh
		jnz	short loc_16604
		mov	ax, [bx+1]
		call	sub_1AECD
		add	bx, 3
		jmp	short loc_165BA
; ---------------------------------------------------------------------------

loc_165CF:				; CODE XREF: sub_16591+2Dj
		inc	bx
		mov	bx, [bx]
		mov	[si+24h], bx
		mov	al, [si+32h]
		test	al, 20h
		jz	short loc_165DF
		jmp	sub_16174
; ---------------------------------------------------------------------------

loc_165DF:				; CODE XREF: sub_16591+49j
		test	al, 10h
		jz	short loc_165BA
		test	al, 8
		jz	short loc_165EE
		and	byte ptr [si+32h], 0F7h
		jmp	short loc_165F2
; ---------------------------------------------------------------------------
		align 2

loc_165EE:				; CODE XREF: sub_16591+54j
		and	byte ptr [si+32h], 0EFh

loc_165F2:				; CODE XREF: sub_16591+5Aj
		mov	al, [si]
		and	al, 1Ch
		cmp	al, 14h
		jz	short loc_165FD
		jmp	loc_1679D
; ---------------------------------------------------------------------------

loc_165FD:				; CODE XREF: sub_16591+67j
		or	byte ptr [si+32h], 20h
		jmp	loc_1679D
; ---------------------------------------------------------------------------

loc_16604:				; CODE XREF: sub_16591+31j
		inc	bx
		mov	al, [bx]
		sar	al, 1
		sar	al, 1
		sar	al, 1
		sar	al, 1
		cmp	al, 7
		jnz	short loc_16615
		inc	al

loc_16615:				; CODE XREF: sub_16591+80j
		cbw
		mov	[si+2Eh], ax
		or	ax, ax
		jns	short loc_16625
		add	ax, [si+2]
		jb	short loc_1662A
		jmp	short loc_1662A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_16625:				; CODE XREF: sub_16591+8Aj
		add	ax, [si+2]
		jnb	short $+2

loc_1662A:				; CODE XREF: sub_16591+8Fj
					; sub_16591+91j ...
		mov	[si+2],	ax
		xor	dh, dh
		mov	al, [bx]
		and	al, 0Fh
		test	al, 8
		jz	short loc_1663B
		dec	dh
		or	al, 0F0h

loc_1663B:				; CODE XREF: sub_16591+A4j
		cmp	al, 7
		jnz	short loc_16641
		inc	al

loc_16641:				; CODE XREF: sub_16591+ACj
		mov	dl, al
		cbw
		mov	[si+30h], ax
		mov	cx, bx
		mov	bx, [si+4]
		add	bx, dx
		mov	[si+4],	bx
		call	sub_1613C
		jnb	short loc_16659
		jmp	sub_1615F
; ---------------------------------------------------------------------------

loc_16659:				; CODE XREF: sub_16591+C3j
		mov	bx, cx
		dec	bx
		mov	al, [bx]
		cbw
		inc	word ptr [si+22h]
		cmp	ax, [si+22h]
		jz	short loc_16669
		jnb	short loc_16673

loc_16669:				; CODE XREF: sub_16591+D4j
		mov	word ptr [si+22h], 0
		inc	bx
		inc	bx
		mov	[si+24h], bx

loc_16673:				; CODE XREF: sub_16591+D6j
		call	sub_1718E
		test	word ptr [si], 80h
		jz	short loc_166BD
		test	word ptr [si], 40h
		jnz	short loc_16685
		jmp	loc_16748
; ---------------------------------------------------------------------------

loc_16685:				; CODE XREF: sub_16591+EFj
		cmp	word ptr ds:0B38h, 1
		jnz	short loc_166BD
		mov	bx, ds:0B3Ch
		mov	dh, ds:0B3Ah
		add	dh, 8
		mov	dl, 8
		mov	ah, 10h
		call	sub_16555
		jnb	short loc_166BD
		mov	word ptr ds:0B38h, 2
		mov	word ptr ds:0B50h, 0
		mov	word ptr ds:0B4Eh, 7EB2h
		sub	word ptr ds:0B3Ch, 5
		mov	word ptr ds:0B4Ah, 0

loc_166BD:				; CODE XREF: sub_16591+E9j
					; sub_16591+F9j ...
		test	word ptr [si], 40h
		jnz	short loc_166C6
		jmp	loc_16748
; ---------------------------------------------------------------------------

loc_166C6:				; CODE XREF: sub_16591+130j
		cmp	word ptr [si+0Ah], 0FEh	; '˛'
		jz	short loc_16748
		nop
		nop
		nop
		mov	di, 0B56h

loc_166D3:				; CODE XREF: sub_16591+184j
		mov	ax, [di]
		cmp	ax, 0FFFFh
		jz	short loc_16717
		nop
		nop
		nop
		test	al, 1
		jz	short loc_16712
		nop
		nop
		nop
		cmp	word ptr [di+16h], 1
		jz	short loc_16712
		nop
		nop
		nop
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		push	si
		push	di
		mov	si, di
		call	sub_16519
		jnb	short loc_16710
		nop
		nop
		nop
		push	si
		mov	si, 6711h
		call	sub_16BC7
		pop	si
		call	sub_17674

loc_16710:				; CODE XREF: sub_16591+16Fj
		pop	di
		pop	si

loc_16712:				; CODE XREF: sub_16591+14Ej
					; sub_16591+157j
		add	di, 34h	; '4'
		jmp	short loc_166D3
; ---------------------------------------------------------------------------

loc_16717:				; CODE XREF: sub_16591+147j
		cmp	word ptr ds:7E16h, 1
		jz	short loc_16748
		nop
		nop
		nop
		test	byte ptr [si], 40h
		jz	short loc_16748
		nop
		nop
		nop
		mov	ax, [si+0Ah]
		cmp	ax, 0FEh ; '˛'
		jz	short loc_16748
		nop
		nop
		nop
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		call	sub_16407
		jnb	short loc_16748
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_16748:				; CODE XREF: sub_16591+23j
					; sub_16591+F1j ...
		mov	al, [si+32h]
		test	al, 40h
		jz	short loc_16750
		retn
; ---------------------------------------------------------------------------

loc_16750:				; CODE XREF: sub_16591+1BCj
		test	byte ptr [si+32h], 10h
		jz	short loc_1675C
		test	byte ptr [si], 20h
		jz	short loc_1675C
		retn
; ---------------------------------------------------------------------------

loc_1675C:				; CODE XREF: sub_16591+1C3j
					; sub_16591+1C8j
		push	si
		mov	dx, si
		mov	si, [si+1Ch]
		call	sub_16222
		pop	si
		jb	short loc_16774
		mov	al, [si]
		and	al, 1Ch
		cmp	al, 1Ch
		jz	short loc_16771
		retn
; ---------------------------------------------------------------------------

loc_16771:				; CODE XREF: sub_16591+1DDj
		jmp	sub_16174
; ---------------------------------------------------------------------------

loc_16774:				; CODE XREF: sub_16591+1D5j
		mov	al, [si]
		and	al, 1Ch
		jnz	short loc_16781
		mov	al, [si]
		xor	al, 2
		mov	[si], al
		retn
; ---------------------------------------------------------------------------

loc_16781:				; CODE XREF: sub_16591+1E7j
		cmp	al, 1Ch
		jnz	short loc_16786
		retn
; ---------------------------------------------------------------------------

loc_16786:				; CODE XREF: sub_16591+1F2j
		cmp	al, 0Ch
		jnz	short loc_1678D
		jmp	sub_16174
; ---------------------------------------------------------------------------

loc_1678D:				; CODE XREF: sub_16591+1F7j
		test	al, 8
		jz	short loc_167CA
		or	byte ptr [si+32h], 40h
		test	al, 10h
		jz	short loc_1679D
		or	byte ptr [si+32h], 20h

loc_1679D:				; CODE XREF: sub_16591+69j
					; sub_16591+70j ...
		mov	bx, [si+28h]
		mov	cx, [si+24h]
		mov	[si+28h], cx
		mov	[si+24h], bx
		mov	bx, [si+16h]
		mov	cx, [si+2Ah]
		mov	[si+16h], cx
		mov	[si+2Ah], bx
		mov	word ptr [si+18h], 0
		mov	word ptr [si+12h], 0
		mov	al, [si]
		mov	ah, [si+2Ch]
		mov	[si], ah
		mov	[si+2Ch], al
		retn
; ---------------------------------------------------------------------------

loc_167CA:				; CODE XREF: sub_16591+1FEj
		or	byte ptr [si+32h], 10h
		test	byte ptr [si], 20h
		jnz	short loc_167D4
		retn
; ---------------------------------------------------------------------------

loc_167D4:				; CODE XREF: sub_16591+240j
		or	byte ptr [si+32h], 8
		retn
; ---------------------------------------------------------------------------

loc_167D9:				; CODE XREF: sub_16591+Aj
					; sub_16591+13j ...
		mov	[si], al
		mov	[si+0Ah], ah
		mov	byte ptr [si+0Bh], 0
		mov	word ptr [si+1Eh], 18h
		mov	word ptr [si+20h], 15h
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		call	sub_16407
		jnb	short loc_16803
		call	sub_1686F
		call	sub_16174

loc_16803:				; CODE XREF: sub_16591+26Aj
		cmp	word ptr ds:0B38h, 2
		jnz	short loc_1683F
		mov	al, ds:0B4Ah
		cmp	al, 1
		jle	short loc_1683F
		cmp	al, 4
		jg	short loc_1683F
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		cmp	dh, 0Fh
		jnb	short loc_1682B
		xor	dh, dh
		jmp	short loc_1682E
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1682B:				; CODE XREF: sub_16591+293j
		sub	dh, 10h

loc_1682E:				; CODE XREF: sub_16591+297j
		sub	bx, 0Eh
		add	dl, 20h	; ' '
		add	ah, 1Dh
		call	sub_164E1
		jnb	short loc_1683F
		call	sub_16174

loc_1683F:				; CODE XREF: sub_16591+277j
					; sub_16591+27Ej ...
		cmp	word ptr ds:0B00h, 1
		jnz	short loc_16866
		mov	al, [si]
		cmp	al, 21h	; '!'
		jz	short loc_16866
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		call	sub_164A0
		jnb	short loc_16866
		call	sub_16174
		mov	word ptr ds:0B00h, 0

loc_16866:				; CODE XREF: sub_16591+2B3j
					; sub_16591+2B9j ...
		call	sub_1613C
		jnb	short locret_1686E
		call	sub_1615F

locret_1686E:				; CODE XREF: sub_16591+2D8j
		retn
sub_16591	endp


; =============== S U B	R O U T	I N E =======================================


sub_1686F	proc near		; CODE XREF: sub_16591+26Cp
		mov	al, [si]
		cmp	al, 21h	; '!'
		jnz	short loc_16884
		push	si
		mov	si, 6717h
		call	sub_16BC7
		pop	si
		mov	ax, 12h
		call	sub_1AECD
		retn
; ---------------------------------------------------------------------------

loc_16884:				; CODE XREF: sub_1686F+4j
		cmp	al, 29h	; ')'
		jz	short loc_16898
		mov	word ptr ds:6612h, 6
		call	sub_16C3D
		mov	ax, 11h
		call	sub_1AECD
		retn
; ---------------------------------------------------------------------------

loc_16898:				; CODE XREF: sub_1686F+17j
		mov	word ptr ds:6610h, 6
		call	sub_16C27
		mov	ax, 11h
		call	sub_1AECD
		retn
sub_1686F	endp


; =============== S U B	R O U T	I N E =======================================


sub_168A8	proc near		; CODE XREF: sub_16591+1B4j
					; sub_17222+3B9j ...
		mov	ax, 0Bh
		call	sub_1AECD
		mov	word ptr ds:7E16h, 1
		mov	word ptr ds:0B24h, 0FB00h
		mov	ax, ds:0B1Eh
		cmp	ax, 80h	; 'Ä'
		jl	short loc_168CB
		mov	word ptr ds:7E1Ch, 0FFFEh
		jmp	short loc_168D1
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_168CB:				; CODE XREF: sub_168A8+18j
		mov	word ptr ds:7E1Ch, 2

loc_168D1:				; CODE XREF: sub_168A8+20j
		mov	ax, ds:6614h
		or	ax, ax
		jz	short locret_168E3
		cmp	byte ptr ds:9804h, 1
		jz	short locret_168E3
		dec	word ptr ds:6614h

locret_168E3:				; CODE XREF: sub_168A8+2Ej
					; sub_168A8+35j
		retn
sub_168A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_168E4	proc near		; CODE XREF: sub_16B9B+58DAp
		cmp	word ptr ds:762Dh, 1
		jnz	short loc_168EF
		call	sub_17A8B
		retn
; ---------------------------------------------------------------------------

loc_168EF:				; CODE XREF: sub_168E4+5j
		mov	si, 0C28h

loc_168F2:				; CODE XREF: sub_168E4+20j
		mov	ax, [si]
		or	ax, ax
		js	short locret_16906
		test	al, 1
		jz	short loc_16901
		push	si
		call	sub_16591
		pop	si

loc_16901:				; CODE XREF: sub_168E4+16j
		add	si, 34h	; '4'
		jmp	short loc_168F2
; ---------------------------------------------------------------------------

locret_16906:				; CODE XREF: sub_168E4+12j
		retn
sub_168E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_16907	proc near		; CODE XREF: sub_1691Dp
		mov	di, 0B56h

loc_1690A:				; CODE XREF: sub_16907+10j
		mov	ax, [di]
		or	ah, ah
		js	short loc_16919
		test	al, 1
		jz	short loc_1691B
		add	di, 34h	; '4'
		jmp	short loc_1690A
; ---------------------------------------------------------------------------

loc_16919:				; CODE XREF: sub_16907+7j
		stc
		retn
; ---------------------------------------------------------------------------

loc_1691B:				; CODE XREF: sub_16907+Bj
		clc
		retn
sub_16907	endp


; =============== S U B	R O U T	I N E =======================================


sub_1691D	proc near		; CODE XREF: sub_16205:loc_1621Cp
		call	sub_16907
		jnb	short loc_16923
		retn
; ---------------------------------------------------------------------------

loc_16923:				; CODE XREF: sub_1691D+3j
		mov	word ptr [di+16h], 0
		mov	word ptr [di+18h], 0
		or	byte ptr [si], 80h
		mov	al, [si]
		and	al, 3
		mov	byte ptr [di+31h], 0
		mov	[di+30h], al
		mov	[di+1Ch], si
		or	word ptr [di], 1
		mov	al, [si]
		test	al, 4
		jz	short loc_16954
		mov	word ptr [di+0Ah], 2Ah ; '*'
		mov	word ptr [di+32h], 2Ah ; '*'
		jmp	short loc_1695E
; ---------------------------------------------------------------------------
		align 2

loc_16954:				; CODE XREF: sub_1691D+28j
		mov	word ptr [di+0Ah], 34h ; '4'
		mov	word ptr [di+32h], 34h ; '4'

loc_1695E:				; CODE XREF: sub_1691D+34j
		mov	al, [si+2]
		and	ax, 1Fh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	[di+2],	ax
		mov	ax, ds:8BF0h
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		mov	dl, al
		mov	al, [si+1]
		sub	al, dl
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		test	byte ptr [si+2], 40h
		jz	short loc_1698C
		inc	ax
		inc	ax
		inc	ax

loc_1698C:				; CODE XREF: sub_1691D+6Aj
		mov	[di+4],	ax
		mov	word ptr [di+1Eh], 10h
		mov	word ptr [di+20h], 15h
		mov	ax, [di+30h]
		cmp	ax, 1
		jnz	short loc_169B3
		mov	al, [si+3]
		and	al, 3Ch
		shl	ax, 1
		add	ax, 8
		mov	[di+12h], ax
		xor	ax, ax
		mov	[di+14h], ax

loc_169B3:				; CODE XREF: sub_1691D+82j
		mov	word ptr [di+8], 100h
		mov	byte ptr [di+6], 0
		mov	word ptr [di+10h], 0
		mov	ax, 0
		mov	[di+22h], ax
		mov	[di+24h], ax
		mov	[di+26h], ax
		mov	[di+28h], ax
		mov	[di+2Ah], ax
		mov	[di+2Ch], ax
		mov	word ptr [di+1Ah], 0
		mov	word ptr [di+10h], 2
		retn
sub_1691D	endp

; ---------------------------------------------------------------------------
		db 2 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_169E3	proc near		; CODE XREF: sub_16B9B+58D7p
		cmp	word ptr ds:5DCCh, 0
		jz	short locret_16A0E
		mov	ax, ds:65E1h
		inc	ax
		cmp	ax, 19h
		jnz	short loc_16A0B
		mov	si, 6624h
		mov	cx, 6
		mov	al, 0

loc_169FB:				; CODE XREF: sub_169E3+1Dj
		cmp	al, [si]
		jnz	short loc_16A03
		inc	si
		loop	loc_169FB
		retn
; ---------------------------------------------------------------------------

loc_16A03:				; CODE XREF: sub_169E3+1Aj
		mov	si, 662Bh
		call	sub_16BF7
		xor	ax, ax

loc_16A0B:				; CODE XREF: sub_169E3+Ej
		mov	ds:65E1h, ax

locret_16A0E:				; CODE XREF: sub_169E3+5j
		retn
sub_169E3	endp

; ---------------------------------------------------------------------------
		align 2
word_16A10	dw 6			; DATA XREF: sub_1A592+Cw
					; sub_16B9B+5822w
word_16A12	dw 6			; DATA XREF: sub_1A592+1Cw
					; sub_16B9B+5828w
word_16A14	dw 6			; DATA XREF: sub_1A592+2Cw
					; sub_16B9B:loc_1C3B0w	...
		db 6 dup(0), 0FFh, 2 dup(0), 2,	3 dup(0), 0FFh,	6 dup(0)
		db 0FFh, 4 dup(9), 8, 0, 0FFh, 2 dup(0), 8, 3 dup(0), 0FFh
		db 2 dup(0), 7,	3 dup(0), 0FFh,	2 dup(0), 6, 3 dup(0)
		db 0FFh, 2 dup(0), 5, 3	dup(0),	0FFh, 2	dup(0),	4, 3 dup(0)
		db 0FFh, 2 dup(0), 3, 3	dup(0),	0FFh, 2	dup(0),	2, 3 dup(0)
		db 0FFh, 2 dup(0), 1, 3	dup(0),	0FFh, 6	dup(0),	0FFh, 4Ah
		db 4Fh,	48h, 4Eh, 0Ch dup(20h),	0FFh, 3	dup(20h), 4 dup(2Eh)
		db 3 dup(20h), 0FFh, 53h, 49h, 4Dh, 4Fh, 6 dup(20h), 0FFh
		db 44h,	20h, 43h, 2 dup(4Fh), 50h, 45h,	52h, 2 dup(20h)
		db 0FFh, 53h, 41h, 2 dup(44h), 41h, 4Dh, 20h, 48h, 2Eh
		db 20h,	0FFh, 4Ch, 41h,	55h, 52h, 41h, 20h, 50h, 2Eh, 0Dh dup(20h)
		db 0FFh, 5Ah, 41h, 4Dh,	42h, 4Fh, 20h, 0, 3 dup(20h), 0FFh
		db 4Ah,	41h, 4Dh, 42h, 4Fh, 5 dup(20h),	0FFh, 52h, 41h
		db 4Dh,	42h, 4Fh, 5 dup(20h), 0FFh, 10h	dup(20h), 0FFh
		db 6 dup(0), 0FFh, 6 dup(0), 0FFh, 6 dup(0), 0FFh, 4 dup(0)
		db 5, 4	dup(0),	1, 5 dup(0), 5,	4 dup(0), 1, 5 dup(0)
		db 1, 5	dup(0),	5, 4 dup(0), 1,	4 dup(0), 1, 5 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_16B3B	proc near		; CODE XREF: sub_19EE5+8p
					; sub_1A257:loc_1A277p	...
		push	ds
		push	es
		push	bx
		call	sub_16C53
		call	sub_16C27
		call	sub_16C3D
		mov	ax, 4
		mov	si, 6616h
		call	word ptr ds:0Ch
		mov	ax, 0Dh
		mov	si, 66F6h
		call	word ptr ds:0Ch
		mov	ax, 15h
		mov	si, 66FDh
		call	word ptr ds:0Ch
		mov	ax, 1Eh
		mov	si, 6704h
		call	word ptr ds:0Ch
		mov	ax, 4
		mov	si, 6616h
		call	word ptr ds:0Eh
		mov	ax, 0Dh
		mov	si, 66F6h
		call	word ptr ds:0Eh
		mov	ax, 15h
		mov	si, 66FDh
		call	word ptr ds:0Eh
		mov	ax, 1Eh
		mov	si, 6704h
		call	word ptr ds:0Eh
		pop	bx
		pop	es
		pop	ds
		retn
sub_16B3B	endp


; =============== S U B	R O U T	I N E =======================================


sub_16B9B	proc near		; CODE XREF: start:loc_1C395p

; FUNCTION CHUNK AT 92F3 SIZE 0000001B BYTES
; FUNCTION CHUNK AT 930F SIZE 00000022 BYTES
; FUNCTION CHUNK AT BFB0 SIZE 0000010D BYTES

		call	word ptr ds:26h
		call	word ptr ds:28h
		mov	byte ptr ds:97DAh, 1
		nop
		mov	cx, 1E0h

loc_16BAC:				; CODE XREF: sub_16B9B+26j
		push	cx
		call	sub_19B1C
		call	sub_19BDC
		test	al, 10h
		jnz	short loc_16BC4
		mov	al, ds:0B888h
		and	al, 30h
		cmp	al, 30h	; '0'
		jz	short loc_16BC4
		pop	cx
		loop	loc_16BAC
		retn
; ---------------------------------------------------------------------------

loc_16BC4:				; CODE XREF: sub_16B9B+1Aj
					; sub_16B9B+23j
		jmp	loc_1C3B0
sub_16B9B	endp


; =============== S U B	R O U T	I N E =======================================


sub_16BC7	proc near		; CODE XREF: sub_16205-Ap
					; sub_16591+178p ...
		add	si, 5
		mov	di, 661Bh
		mov	bl, 0
		mov	cx, 6

loc_16BD2:				; CODE XREF: sub_16BC7+24j
					; sub_16BC7+2Dj
		mov	al, [si]
		mov	ah, [di]
		add	ah, al
		add	ah, bl
		xchg	al, ah
		xor	ah, ah
		cmp	ax, 0Ah
		jl	short loc_16BEE
		mov	bl, 1
		sub	al, 0Ah
		mov	[di], al
		dec	di
		dec	si
		loop	loc_16BD2
		retn
; ---------------------------------------------------------------------------

loc_16BEE:				; CODE XREF: sub_16BC7+1Aj
		mov	bl, 0
		mov	[di], al
		dec	di
		dec	si
		loop	loc_16BD2
		retn
sub_16BC7	endp


; =============== S U B	R O U T	I N E =======================================


sub_16BF7	proc near		; CODE XREF: sub_169E3+23p
		add	si, 5
		mov	di, 6629h
		mov	bl, 0
		mov	cx, 6

loc_16C02:				; CODE XREF: sub_16BF7+24j
					; sub_16BF7+2Dj
		mov	al, [si]
		mov	ah, [di]
		add	ah, al
		add	ah, bl
		xchg	al, ah
		xor	ah, ah
		cmp	ax, 0Ah
		jl	short loc_16C1E
		mov	bl, 1
		sub	al, 0Ah
		mov	[di], al
		dec	di
		dec	si
		loop	loc_16C02
		retn
; ---------------------------------------------------------------------------

loc_16C1E:				; CODE XREF: sub_16BF7+1Aj
		mov	bl, 0
		mov	[di], al
		dec	di
		dec	si
		loop	loc_16C02
		retn
sub_16BF7	endp


; =============== S U B	R O U T	I N E =======================================


sub_16C27	proc near		; CODE XREF: sub_1686F+2Fp
					; sub_16B3B+6p
		mov	di, 66F6h
		mov	cx, 6
		mov	al, 20h	; ' '
		rep stosb
		mov	cx, ds:6610h
		mov	di, 66F6h
		mov	al, 0Ah
		rep stosb
		retn
sub_16C27	endp


; =============== S U B	R O U T	I N E =======================================


sub_16C3D	proc near		; CODE XREF: sub_1686F+1Fp
					; sub_16B3B+9p
		mov	di, 66FDh
		mov	cx, 6
		mov	al, 20h	; ' '
		rep stosb
		mov	cx, ds:6612h
		mov	di, 66FDh
		mov	al, 0Bh
		rep stosb
		retn
sub_16C3D	endp


; =============== S U B	R O U T	I N E =======================================


sub_16C53	proc near		; CODE XREF: sub_16B3B+3p
		mov	di, 6704h
		mov	cx, 6
		mov	al, 20h	; ' '
		rep stosb
		mov	cx, ds:6614h
		mov	di, 6704h
		mov	al, 0Ch
		rep stosb
		retn
sub_16C53	endp


; =============== S U B	R O U T	I N E =======================================


sub_16C69	proc near		; CODE XREF: sub_16D69p
		mov	cx, 8
		mov	di, 6632h
		mov	bx, 668Dh

loc_16C72:				; CODE XREF: sub_16C69+17j
		mov	si, 6616h
		call	sub_16CB8
		jb	short loc_16C84
		add	bx, 0Bh
		add	di, 7
		loop	loc_16C72
		clc
		retn
; ---------------------------------------------------------------------------

loc_16C84:				; CODE XREF: sub_16C69+Fj
		mov	si, 6663h

loc_16C87:				; CODE XREF: sub_16C69+29j
		cmp	si, di
		jz	short loc_16C94
		mov	al, [si-1]
		mov	[si+6],	al
		dec	si
		jmp	short loc_16C87
; ---------------------------------------------------------------------------

loc_16C94:				; CODE XREF: sub_16C69+20j
		mov	cx, 7
		mov	si, 6616h
		rep movsb
		stc
		retn
sub_16C69	endp

; ---------------------------------------------------------------------------
		mov	si, 66E5h

loc_16CA1:				; CODE XREF: seg001:68ACj
		cmp	si, di
		jz	short loc_16CAE
		mov	al, [si-1]
		mov	[si+0Ah], al
		dec	si
		jmp	short loc_16CA1
; ---------------------------------------------------------------------------

loc_16CAE:				; CODE XREF: seg001:68A3j
		mov	cx, 0Bh
		mov	si, 6671h
		rep movsb
		stc
		retn

; =============== S U B	R O U T	I N E =======================================


sub_16CB8	proc near		; CODE XREF: sub_16C69+Cp
		push	cx
		push	di
		mov	cx, 6

loc_16CBD:				; CODE XREF: sub_16CB8+11j
		mov	al, [si]
		inc	si
		mov	ah, [di]
		inc	di
		cmp	al, ah
		jl	short loc_16CCF
		jg	short loc_16CD3
		loop	loc_16CBD
		pop	di
		pop	cx
		stc
		retn
; ---------------------------------------------------------------------------

loc_16CCF:				; CODE XREF: sub_16CB8+Dj
		pop	di
		pop	cx
		clc
		retn
; ---------------------------------------------------------------------------

loc_16CD3:				; CODE XREF: sub_16CB8+Fj
		pop	di
		pop	cx
		stc
		retn
sub_16CB8	endp


; =============== S U B	R O U T	I N E =======================================


sub_16CD7	proc near		; CODE XREF: sub_194C4+A6Dp
					; sub_194C4+A95p ...
		call	word ptr ds:26h
		mov	ax, 8
		mov	si, 9401h
		call	word ptr ds:46h
		mov	ax, 108h
		mov	si, 9421h
		call	word ptr ds:46h
		mov	ax, 208h
		mov	si, 9441h
		call	word ptr ds:46h
		mov	si, 668Dh
		mov	ax, 617h
		mov	cx, 8

loc_16D02:				; CODE XREF: sub_16CD7+3Cj
		push	si
		push	ax
		push	cx
		call	word ptr ds:0Ch
		pop	cx
		pop	ax
		pop	si
		add	si, 0Bh
		inc	ah
		inc	ah
		loop	loc_16D02
		mov	si, 6632h
		mov	ax, 607h
		mov	cx, 8

loc_16D1E:				; CODE XREF: sub_16CD7+58j
		push	si
		push	ax
		push	cx
		call	word ptr ds:0Ch
		pop	cx
		pop	ax
		pop	si
		add	si, 7
		inc	ah
		inc	ah
		loop	loc_16D1E
		mov	si, 6682h
		mov	ax, 60Dh
		mov	cx, 8

loc_16D3A:				; CODE XREF: sub_16CD7+71j
		push	si
		push	ax
		push	cx
		call	word ptr ds:0Ch
		pop	cx
		pop	ax
		pop	si
		inc	ah
		inc	ah
		loop	loc_16D3A
		call	word ptr ds:1Ch
		mov	byte ptr ds:97DAh, 1
		nop
		mov	cx, 1E0h

loc_16D57:				; CODE XREF: sub_16CD7+8Cj
		push	cx
		call	sub_19B1C
		call	sub_19BDC
		test	al, 10h
		jnz	short loc_16D66
		pop	cx
		loop	loc_16D57
		retn
; ---------------------------------------------------------------------------

loc_16D66:				; CODE XREF: sub_16CD7+89j
		jmp	loc_1C3B0
sub_16CD7	endp


; =============== S U B	R O U T	I N E =======================================


sub_16D69	proc near		; CODE XREF: sub_194C4+A67p
					; sub_194C4+A8Fp
		call	sub_16C69
		jnb	short locret_16D7D
		push	bx
		call	sub_16EB2
		pop	bx
		mov	cx, 0Ah
		mov	si, 6671h
		mov	di, bx
		rep movsb

locret_16D7D:				; CODE XREF: sub_16D69+3j
		retn
sub_16D69	endp

; ---------------------------------------------------------------------------
		db 0Eh,	8, 41h,	20h, 42h, 20h, 43h, 20h, 44h, 20h, 45h
		db 20h,	46h, 0FFh, 0Eh,	0Ah, 47h, 20h, 48h, 20h, 49h, 20h
		db 4Ah,	20h, 4Bh, 20h, 4Ch, 0FFh, 0Eh, 0Ch, 4Dh, 20h, 4Eh
		db 20h,	4Fh, 20h, 50h, 20h, 51h, 20h, 52h, 0FFh, 2 dup(0Eh)
		db 53h,	20h, 54h, 20h, 55h, 20h, 56h, 20h, 57h,	20h, 58h
		db 0FFh, 0Eh, 10h, 59h,	20h, 5Ah, 20h, 2Eh, 3 dup(20h)
		db 10h,	11h, 12h, 13h, 0FFh, 9,	5, 50h,	4Ch, 45h, 41h
		db 53h,	45h, 20h, 45h, 4Eh, 54h, 45h, 52h, 20h,	59h, 4Fh
		db 55h,	52h, 20h, 4Eh, 41h, 4Dh, 45h, 0FFh, 7Eh, 69h, 8Ch
		db 69h,	9Ah, 69h, 0A8h,	69h, 0B6h, 69h,	0C5h, 69h, 2 dup(0)
		db 0Fh,	0FFh, 20h, 0FFh
word_16DF0	dw 90Eh			; DATA XREF: sub_199C8+Cw
					; sub_199C8+9Ar ...
word_16DF2	dw 90Eh			; DATA XREF: sub_199C8+Fw
		db 0Eh,	9, 0Eh,	9, 41h,	42h, 43h, 44h, 45h, 46h, 47h, 48h
		db 49h,	4Ah, 4Bh, 4Ch, 4Dh, 4Eh, 4Fh, 50h, 51h,	52h, 53h
		db 54h,	55h, 56h, 57h, 58h, 59h, 5Ah, 2Eh, 20h,	10h, 11h

; =============== S U B	R O U T	I N E =======================================


sub_16E16	proc near		; CODE XREF: sub_16EB2:loc_16FC6p
		xor	ax, ax
		mov	dx, ds:69F0h
		mov	al, dh
		sub	al, 8
		and	ax, 0FFFEh
		mov	bx, ax
		shl	ax, 1
		add	bx, ax
		xor	dh, dh
		sub	dx, 0Eh
		shr	dx, 1
		add	bx, dx
		add	bx, 69F8h
		mov	al, [bx]
		retn
sub_16E16	endp


; =============== S U B	R O U T	I N E =======================================


sub_16E39	proc near		; CODE XREF: sub_16E66+Ap
					; sub_16EB2+86p ...
		mov	ax, ds:69F2h
		mov	si, 69EEh
		call	word ptr ds:0Ch
		mov	ax, ds:69F0h
		mov	si, 69ECh
		call	word ptr ds:0Ch
		call	word ptr ds:1Ch
		mov	ax, ds:69F2h
		mov	si, 69EEh
		call	word ptr ds:0Ch
		mov	ax, ds:69F0h
		mov	si, 69ECh
		call	word ptr ds:0Ch
		retn
sub_16E39	endp


; =============== S U B	R O U T	I N E =======================================


sub_16E66	proc near		; CODE XREF: sub_16EB2:loc_16FB7p
					; sub_199C8+B7p ...
		mov	ax, ds:69F0h
		mov	ds:69F2h, ax
		mov	ds:69F0h, dx
		call	sub_16E39
		retn
sub_16E66	endp


; =============== S U B	R O U T	I N E =======================================


sub_16E74	proc near		; CODE XREF: sub_16EA1+Ap
					; sub_16EB2+89p
		mov	ax, ds:69F6h
		mov	si, 69EEh
		call	word ptr ds:0Ch
		mov	ax, ds:69F4h
		mov	si, 69ECh
		call	word ptr ds:0Ch
		call	word ptr ds:1Ch
		mov	ax, ds:69F6h
		mov	si, 69EEh
		call	word ptr ds:0Ch
		mov	ax, ds:69F4h
		mov	si, 69ECh
		call	word ptr ds:0Ch
		retn
sub_16E74	endp


; =============== S U B	R O U T	I N E =======================================


sub_16EA1	proc near		; CODE XREF: sub_16FF5+1Fp
					; sub_17018+26p
		mov	ax, ds:69F4h
		mov	ds:69F6h, ax
		mov	ds:69F4h, dx
		call	sub_16E74
		retn
sub_16EA1	endp

; ---------------------------------------------------------------------------
		db 3 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_16EB2	proc near		; CODE XREF: sub_16D69+6p
		mov	ax, 90Eh
		mov	ds:69F0h, ax
		mov	ds:69F2h, ax
		mov	ax, 150Eh
		mov	ds:69F4h, ax
		mov	ds:69F6h, ax
		mov	di, 6671h
		mov	cx, 0Ah
		mov	al, 0Eh
		rep stosb
		mov	word ptr ds:6AB0h, 6671h
		call	word ptr ds:26h
		mov	ax, 5
		mov	si, 93A1h
		call	word ptr ds:46h
		mov	ax, 105h
		mov	si, 93C1h
		call	word ptr ds:46h
		mov	ax, 205h
		mov	si, 93E1h
		call	word ptr ds:46h
		mov	bx, 69DEh
		call	sub_19C43
		mov	ax, 140Eh
		mov	si, 6671h
		call	word ptr ds:0Ch
		call	word ptr ds:1Ch
		mov	ax, 5
		mov	si, 93A1h
		call	word ptr ds:46h
		mov	ax, 105h
		mov	si, 93C1h
		call	word ptr ds:46h
		mov	ax, 205h
		mov	si, 93E1h
		call	word ptr ds:46h
		mov	bx, 69DEh
		call	sub_19C43
		mov	ax, 140Eh
		mov	si, 6671h
		call	word ptr ds:0Ch
		call	sub_16E39
		call	sub_16E74

loc_16F3E:				; CODE XREF: sub_16EB2+108j
					; sub_16EB2+111j ...
		mov	ax, 140Eh
		mov	si, 6671h
		call	word ptr ds:0Ch
		call	word ptr ds:1Ch
		mov	ax, 140Eh
		mov	si, 6671h
		call	word ptr ds:0Ch
		mov	cx, 6

loc_16F59:				; CODE XREF: sub_16EB2+AAj
		call	sub_19B1C
		loop	loc_16F59
		call	sub_1C4CA
		cmp	byte ptr ds:6AAFh, 1
		jnz	short loc_16F71
		test	al, 10h
		jnz	short loc_16F71
		mov	byte ptr ds:6AAFh, 0

loc_16F71:				; CODE XREF: sub_16EB2+B4j
					; sub_16EB2+B8j
		mov	dx, ds:69F0h
		test	al, 8
		jz	short loc_16F7C
		sub	dh, 2

loc_16F7C:				; CODE XREF: sub_16EB2+C5j
		test	al, 4
		jz	short loc_16F83
		add	dh, 2

loc_16F83:				; CODE XREF: sub_16EB2+CCj
		test	al, 1
		jz	short loc_16F8A
		add	dl, 2

loc_16F8A:				; CODE XREF: sub_16EB2+D3j
		test	al, 2
		jz	short loc_16F91
		sub	dl, 2

loc_16F91:				; CODE XREF: sub_16EB2+DAj
		test	al, 10h
		jnz	short loc_16FBC
		cmp	dl, 0Ch
		jnz	short loc_16F9F
		mov	dl, 0Eh
		jmp	short loc_16FA6
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_16F9F:				; CODE XREF: sub_16EB2+E6j
		cmp	dl, 1Ah
		jnz	short loc_16FA6
		mov	dl, 18h

loc_16FA6:				; CODE XREF: sub_16EB2+EAj
					; sub_16EB2+F0j
		cmp	dh, 7
		jnz	short loc_16FB0
		mov	dh, 9
		jmp	short loc_16FB7
; ---------------------------------------------------------------------------
		align 2

loc_16FB0:				; CODE XREF: sub_16EB2+F7j
		cmp	dh, 13h
		jnz	short loc_16FB7
		mov	dh, 11h

loc_16FB7:				; CODE XREF: sub_16EB2+FBj
					; sub_16EB2+101j
		call	sub_16E66
		jmp	short loc_16F3E
; ---------------------------------------------------------------------------

loc_16FBC:				; CODE XREF: sub_16EB2+E1j
		cmp	byte ptr ds:6AAFh, 1
		jnz	short loc_16FC6
		jmp	loc_16F3E
; ---------------------------------------------------------------------------

loc_16FC6:				; CODE XREF: sub_16EB2+10Fj
		call	sub_16E16
		mov	byte ptr ds:6AAFh, 1
		cmp	al, 11h
		jz	short loc_16FE2
		cmp	al, 10h
		jnz	short loc_16FDC
		call	sub_16FF5
		jmp	loc_16F3E
; ---------------------------------------------------------------------------

loc_16FDC:				; CODE XREF: sub_16EB2+122j
		call	sub_17018
		jmp	loc_16F3E
; ---------------------------------------------------------------------------

loc_16FE2:				; CODE XREF: sub_16EB2+11Ej
		mov	si, 6671h
		mov	cx, 0Ah

loc_16FE8:				; CODE XREF: sub_16EB2+140j
		mov	al, [si]
		cmp	al, 0Eh
		jnz	short loc_16FF1
		mov	byte ptr [si], 20h ; ' '

loc_16FF1:				; CODE XREF: sub_16EB2+13Aj
		inc	si
		loop	loc_16FE8
		retn
sub_16EB2	endp


; =============== S U B	R O U T	I N E =======================================


sub_16FF5	proc near		; CODE XREF: sub_16EB2+124p
		mov	di, ds:6AB0h
		dec	di
		cmp	di, 6670h
		jz	short locret_17017
		mov	byte ptr [di], 0Eh
		mov	ds:6AB0h, di
		mov	dx, ds:6AB0h
		sub	dx, 6671h
		mov	dh, 15h
		add	dl, 0Eh
		call	sub_16EA1

locret_17017:				; CODE XREF: sub_16FF5+9j
		retn
sub_16FF5	endp


; =============== S U B	R O U T	I N E =======================================


sub_17018	proc near		; CODE XREF: sub_16EB2:loc_16FDCp
		mov	di, ds:6AB0h
		cmp	di, 667Bh
		jz	short loc_17029
		mov	[di], al
		inc	di
		mov	ds:6AB0h, di

loc_17029:				; CODE XREF: sub_17018+8j
		mov	dx, ds:6AB0h
		sub	dx, 6671h
		mov	dh, 15h
		cmp	dl, 0Ah
		jnz	short loc_1703A
		mov	dl, 9

loc_1703A:				; CODE XREF: sub_17018+1Ej
		add	dl, 0Eh
		push	ax
		call	sub_16EA1
		pop	ax
		retn
sub_17018	endp

; ---------------------------------------------------------------------------
		db 4 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_17047	proc near		; CODE XREF: sub_10BC4+61p
					; sub_10C2E+61p ...
		mov	word ptr ds:6C43h, 0
		mov	ax, ds:8BF0h
		mov	ds:6C45h, ax
		and	word ptr ds:6C45h, 7
		call	word ptr ds:12h
		retn
sub_17047	endp


; =============== S U B	R O U T	I N E =======================================


sub_1705D	proc near		; CODE XREF: sub_16B9B+58E9p
		cmp	word ptr ds:7E16h, 1
		jnz	short loc_17065
		retn
; ---------------------------------------------------------------------------

loc_17065:				; CODE XREF: sub_1705D+5j
		mov	ax, ds:8BF0h
		and	ax, 7
		mov	dx, ds:0B20h
		sub	dx, ax
		cmp	dx, 9Bh	; 'õ'
		jge	short loc_17082
		mov	bx, ds:6C43h
		or	bx, bx
		js	short loc_17099
		jmp	short locret_1709C
; ---------------------------------------------------------------------------
		align 2

loc_17082:				; CODE XREF: sub_1705D+18j
		cmp	dx, 86h	; 'Ü'
		jl	short locret_1709C
		mov	bx, ds:6C43h
		or	bx, bx
		jz	short locret_1709C
		jns	short loc_17095
		jmp	short locret_1709C
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17095:				; CODE XREF: sub_1705D+33j
		call	sub_170E6
		retn
; ---------------------------------------------------------------------------

loc_17099:				; CODE XREF: sub_1705D+20j
		call	sub_1709D

locret_1709C:				; CODE XREF: sub_1705D+22j
					; sub_1705D+29j ...
		retn
sub_1705D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1709D	proc near		; CODE XREF: sub_1705D:loc_17099p
		mov	ax, ds:8BF0h
		mov	dx, ax
		add	ax, ds:6C43h
		cmp	ax, ds:8BF2h
		jge	short loc_170BB
		mov	cx, ds:8BF2h
		sub	cx, ds:8BF0h
		mov	ds:6C43h, cx
		mov	ax, ds:8BF2h

loc_170BB:				; CODE XREF: sub_1709D+Dj
		mov	ds:8BF0h, ax
		cmp	dx, ax
		jz	short locret_170E1
		and	dx, 7
		add	dx, ds:6C43h
		jns	short loc_170E2
		call	sub_195EA
		call	sub_1930A
		call	word ptr ds:14h
		call	sub_17180
		mov	dx, 8
		call	sub_17132
		call	sub_15FE4

locret_170E1:				; CODE XREF: sub_1709D+23j
		retn
; ---------------------------------------------------------------------------

loc_170E2:				; CODE XREF: sub_1709D+2Cj
		call	sub_17180
		retn
sub_1709D	endp


; =============== S U B	R O U T	I N E =======================================


sub_170E6	proc near		; CODE XREF: sub_1705D:loc_17095p
		mov	ax, ds:8BF0h
		mov	dx, ax
		add	ax, ds:6C43h
		cmp	ax, ds:8BF4h
		jle	short loc_17104
		mov	cx, ds:8BF4h
		sub	cx, ds:8BF0h
		mov	ds:6C43h, cx
		mov	ax, ds:8BF4h

loc_17104:				; CODE XREF: sub_170E6+Dj
		mov	ds:8BF0h, ax
		cmp	dx, ax
		jz	short locret_1712D
		and	dx, 7
		add	dx, ds:6C43h
		cmp	dx, 7
		jle	short loc_1712E
		call	sub_1961D
		call	sub_192DA
		call	word ptr ds:16h
		call	sub_17180
		mov	dx, 0FFF8h
		call	sub_17132
		call	sub_15FE4

locret_1712D:				; CODE XREF: sub_170E6+23j
		retn
; ---------------------------------------------------------------------------

loc_1712E:				; CODE XREF: sub_170E6+2Fj
		call	sub_17180
		retn
sub_170E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_17132	proc near		; CODE XREF: sub_1709D+3Ep
					; sub_170E6+41p
		mov	si, 0B00h

loc_17135:				; CODE XREF: sub_17132+11j
		mov	ax, [si]
		or	ax, ax
		js	short loc_17145
		jz	short loc_17140
		add	[si+4],	dx

loc_17140:				; CODE XREF: sub_17132+9j
		add	si, 1Ch
		jmp	short loc_17135
; ---------------------------------------------------------------------------

loc_17145:				; CODE XREF: sub_17132+7j
		mov	si, 0C28h

loc_17148:				; CODE XREF: sub_17132+2Ej
		mov	ax, [si]
		or	ax, ax
		js	short loc_17162
		test	al, 1
		jz	short loc_1715D
		add	[si+4],	dx
		call	sub_1613C
		jnb	short loc_1715D
		call	sub_1615F

loc_1715D:				; CODE XREF: sub_17132+1Ej
					; sub_17132+26j
		add	si, 34h	; '4'
		jmp	short loc_17148
; ---------------------------------------------------------------------------

loc_17162:				; CODE XREF: sub_17132+1Aj
		mov	si, 0B56h

loc_17165:				; CODE XREF: sub_17132+4Bj
		mov	ax, [si]
		or	ax, ax
		js	short locret_1717F
		test	al, 1
		jz	short loc_1717A
		add	[si+4],	dx
		call	sub_1613C
		jnb	short loc_1717A
		call	sub_1615F

loc_1717A:				; CODE XREF: sub_17132+3Bj
					; sub_17132+43j
		add	si, 34h	; '4'
		jmp	short loc_17165
; ---------------------------------------------------------------------------

locret_1717F:				; CODE XREF: sub_17132+37j
		retn
sub_17132	endp


; =============== S U B	R O U T	I N E =======================================


sub_17180	proc near		; CODE XREF: sub_1709D+38p
					; sub_1709D:loc_170E2p	...
		mov	ax, ds:6C45h
		add	ax, ds:6C43h
		and	ax, 0FFh
		mov	ds:6C45h, ax
		retn
sub_17180	endp


; =============== S U B	R O U T	I N E =======================================


sub_1718E	proc near		; CODE XREF: sub_16022+F5p
					; sub_16591:loc_16673p	...
		test	word ptr [si], 0FFFFh
		jnz	short loc_17196
		clc
		retn
; ---------------------------------------------------------------------------

loc_17196:				; CODE XREF: sub_1718E+4j
		test	word ptr [si+18h], 0FFFFh
		jz	short loc_171A2
		dec	word ptr [si+18h]
		clc
		retn
; ---------------------------------------------------------------------------

loc_171A2:				; CODE XREF: sub_1718E+Dj
		push	ax
		push	bx
		push	dx
		xor	dx, dx
		mov	bx, [si+16h]

loc_171AA:				; CODE XREF: sub_1718E+3Dj
					; sub_1718E+50j
		mov	ax, [bx]
		or	ax, ax
		js	short loc_171BB
		mov	[si+0Ah], ax
		inc	bx
		inc	bx
		mov	[si+16h], bx
		jmp	short loc_171F5
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_171BB:				; CODE XREF: sub_1718E+20j
		cmp	ax, 0FFFFh
		jnz	short loc_171CD
		mov	ax, [bx+2]
		add	bx, ax
		mov	[si+16h], si
		mov	dx, 0FFFFh
		jmp	short loc_171AA
; ---------------------------------------------------------------------------

loc_171CD:				; CODE XREF: sub_1718E+30j
		cmp	ax, 0FFFDh
		jnz	short loc_171E0
		mov	ax, [bx+2]
		call	sub_1AECD
		add	bx, 4
		mov	[si+16h], bx
		jmp	short loc_171AA
; ---------------------------------------------------------------------------

loc_171E0:				; CODE XREF: sub_1718E+42j
		mov	ax, [bx+2]
		mov	[si+18h], ax
		dec	word ptr [si+18h]
		mov	ax, [bx+4]
		mov	[si+0Ah], ax
		add	bx, 6
		mov	[si+16h], bx

loc_171F5:				; CODE XREF: sub_1718E+2Aj
		or	dx, dx
		jnz	short loc_171FE
		pop	dx
		pop	bx
		pop	ax
		clc
		retn
; ---------------------------------------------------------------------------

loc_171FE:				; CODE XREF: sub_1718E+69j
		pop	dx
		pop	bx
		pop	ax
		stc
		retn
sub_1718E	endp

; ---------------------------------------------------------------------------
		db 2 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_17205	proc near		; CODE XREF: sub_16B9B+58DDp
		call	sub_177FB
		mov	si, 0B56h

loc_1720B:				; CODE XREF: sub_17205+18j
		mov	ax, [si]
		or	ax, ax
		js	short locret_1721F
		test	al, 1
		jz	short loc_1721A
		push	si
		call	sub_17222
		pop	si

loc_1721A:				; CODE XREF: sub_17205+Ej
		add	si, 34h	; '4'
		jmp	short loc_1720B
; ---------------------------------------------------------------------------

locret_1721F:				; CODE XREF: sub_17205+Aj
		retn
sub_17205	endp

; ---------------------------------------------------------------------------
		db 2 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_17222	proc near		; CODE XREF: sub_17205+11p

; FUNCTION CHUNK AT 72A0 SIZE 00000012 BYTES
; FUNCTION CHUNK AT 72B3 SIZE 00000033 BYTES

		mov	word ptr ds:6E20h, 0
		mov	word ptr ds:6E03h, 0
		cmp	word ptr [si+18h], 0
		jz	short loc_17246
		dec	word ptr [si+18h]
		cmp	word ptr [si+16h], 1
		jnz	short loc_17240
		jmp	loc_176A0
; ---------------------------------------------------------------------------

loc_17240:				; CODE XREF: sub_17222+19j
		mov	word ptr ds:6E20h, 1

loc_17246:				; CODE XREF: sub_17222+10j
		mov	word ptr [si+2Ch], 0
		mov	word ptr [si+2Eh], 0
		cmp	word ptr [si+16h], 1
		jnz	short loc_17259
		jmp	loc_176A0
; ---------------------------------------------------------------------------

loc_17259:				; CODE XREF: sub_17222+32j
		cmp	word ptr [si+2Ah], 1
		jnz	short loc_17262
		jmp	loc_17644
; ---------------------------------------------------------------------------

loc_17262:				; CODE XREF: sub_17222+3Bj
		mov	word ptr [si+2Ch], 0
		mov	word ptr [si+2Eh], 0
		mov	word ptr [si+22h], 0
		mov	word ptr [si+24h], 0
		mov	word ptr [si+26h], 0
		mov	word ptr [si+28h], 0
		mov	byte ptr ds:796Bh, 1
		nop
		mov	word ptr ds:6E03h, 0
		mov	dx, [si+8]
		add	dx, 80h	; 'Ä'
		cmp	dx, 800h
		jle	short loc_1729C
		mov	dx, 800h

loc_1729C:				; CODE XREF: sub_17222+75j
		mov	[si+8],	dx
		mov	ds:7961h, dx
		or	dx, dx
		js	short loc_172AC
		xor	ch, ch
		jmp	short loc_172AE
; ---------------------------------------------------------------------------
		align 2

loc_172AC:				; CODE XREF: sub_17222+83j
		mov	ch, 0FFh

loc_172AE:				; CODE XREF: sub_17222+87j
		mov	ax, [si+4]
		mov	cl, [si+6]
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		mov	ds:795Fh, ax
		mov	dx, [si+2]
		mov	ds:795Dh, dx
		mov	byte ptr ds:796Bh, 1
		nop
		call	sub_17DFB

loc_172CD:				; CODE XREF: sub_17222+44Fj
		mov	ch, ds:7963h
		test	ch, 20h
		nop
		jz	short loc_172DA
		jmp	sub_17674
; ---------------------------------------------------------------------------

loc_172DA:				; CODE XREF: sub_17222+B3j
		test	ch, 40h
		nop
		jz	short loc_1733D
		mov	ax, ds:7964h
		xor	cl, cl
		sub	ax, 15h
		mov	ds:795Fh, ax
		mov	[si+4],	ax
		mov	byte ptr [si+6], 0
		mov	word ptr [si+22h], 1
		push	ax
		mov	ax, ds:7966h
		mov	[si+2Ch], ax
		pop	ax
		mov	byte ptr ds:796Bh, 0
		nop
		call	sub_17DFB
		mov	ch, ds:7963h
		test	ch, 20h
		nop
		jz	short loc_17315
		jmp	sub_17674
; ---------------------------------------------------------------------------

loc_17315:				; CODE XREF: sub_17222+EEj
		and	ch, 6
		jz	short loc_17321
		mov	ch, ds:7963h
		jmp	short loc_1735C
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17321:				; CODE XREF: sub_17222+F6j
		mov	bp, cs:[si+2Ch]
		or	bp, cs:[si+2Eh]
		or	bp, bp
		jz	short loc_17333
		mov	word ptr ds:6E03h, 1

loc_17333:				; CODE XREF: sub_17222+109j
		mov	ch, ds:7963h
		mov	dx, 100h
		jmp	loc_173E4
; ---------------------------------------------------------------------------

loc_1733D:				; CODE XREF: sub_17222+BCj
		test	ch, 20h
		nop
		jz	short loc_17346
		jmp	sub_17674
; ---------------------------------------------------------------------------

loc_17346:				; CODE XREF: sub_17222+11Fj
		test	ch, 4
		nop
		jnz	short loc_1736D
		test	ch, 2
		nop
		jnz	short loc_17355
		jmp	loc_1740E
; ---------------------------------------------------------------------------

loc_17355:				; CODE XREF: sub_17222+12Ej
		mov	bp, [si+8]
		or	bp, bp
		jns	short loc_1736D

loc_1735C:				; CODE XREF: sub_17222+FCj
		or	ax, 7
		inc	ax
		xor	cl, cl
		mov	word ptr [si+8], 100h
		mov	dx, 100h
		jmp	loc_1740E
; ---------------------------------------------------------------------------

loc_1736D:				; CODE XREF: sub_17222+128j
					; sub_17222+138j
		cmp	word ptr [si+30h], 3
		jnz	short loc_17394
		test	ch, 10h
		nop
		jz	short loc_17394
		call	sub_176F4
		jb	short loc_17394
		nop
		nop
		nop
		mov	bx, [si+2]
		and	bx, 1Fh
		cmp	bx, 4
		jnz	short loc_17394
		mov	word ptr [si+2Ah], 1
		jmp	short loc_1740E
; ---------------------------------------------------------------------------
		align 2

loc_17394:				; CODE XREF: sub_17222+14Fj
					; sub_17222+155j ...
		mov	word ptr [si+2Ah], 0
		mov	word ptr [si+22h], 1
		add	ax, 0Ch
		or	ax, 7
		sub	ax, 14h
		xor	cl, cl
		mov	[si+4],	ax
		mov	[si+6],	cl
		mov	dx, 100h
		test	ch, 1
		nop
		jz	short loc_173E4
		cmp	word ptr ds:8BECh, 3
		jnz	short loc_173E4
		mov	dx, [si+8]
		cmp	dx, 200h
		jl	short loc_173D8
		neg	dx
		add	dx, 60h	; '`'
		nop
		mov	[si+8],	dx
		mov	dx, 0F781h
		nop
		jmp	short loc_1740E
; ---------------------------------------------------------------------------
		align 2

loc_173D8:				; CODE XREF: sub_17222+1A4j
		mov	word ptr [si+8], 100h
		mov	dx, 0FA00h
		nop
		jmp	short loc_1740E
; ---------------------------------------------------------------------------
		align 2

loc_173E4:				; CODE XREF: sub_17222+118j
					; sub_17222+194j ...
		mov	[si+8],	dx
		mov	dx, 0FA00h
		nop
		test	ch, 1
		nop
		jz	short loc_1740E
		cmp	word ptr ds:8BECh, 1
		jnz	short loc_173FF
		mov	dx, 0FE00h
		nop
		jmp	short loc_1740E
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_173FF:				; CODE XREF: sub_17222+1D4j
		cmp	word ptr ds:8BECh, 5
		jnz	short loc_1740E
		mov	word ptr [si+8], 0F781h
		jmp	short loc_1743B
; ---------------------------------------------------------------------------
		align 2

loc_1740E:				; CODE XREF: sub_17222+130j
					; sub_17222+148j ...
		mov	[si+4],	ax
		mov	[si+6],	cl
		cmp	word ptr [si+30h], 3
		jnz	short loc_1743B
		test	ch, 8
		nop
		jz	short loc_1743B
		test	ch, 10h
		nop
		jnz	short loc_1743B
		call	sub_176F4
		jnb	short loc_1743B
		mov	bx, [si+2]
		and	bx, 1Fh
		cmp	bx, 4
		jnz	short loc_1743B
		mov	word ptr [si+2Ah], 1

loc_1743B:				; CODE XREF: sub_17222+1E9j
					; sub_17222+1F6j ...
		cmp	word ptr ds:6E03h, 1
		jnz	short loc_1744D
		mov	dx, [si+2Ch]
		mov	bx, [si+2]
		add	bx, dx
		jmp	loc_17573
; ---------------------------------------------------------------------------

loc_1744D:				; CODE XREF: sub_17222+21Ej
		mov	bp, cs:[si+8]
		or	bp, bp
		js	short loc_1745E
		cmp	word ptr [si+22h], 1
		jz	short loc_1745E
		jmp	short loc_1746A
; ---------------------------------------------------------------------------
		align 2

loc_1745E:				; CODE XREF: sub_17222+231j
					; sub_17222+237j
		cmp	word ptr [si+30h], 3
		jnz	short loc_17473
		cmp	word ptr [si+2Ah], 1
		jnz	short loc_17473

loc_1746A:				; CODE XREF: sub_17222+239j
		mov	dx, 0
		mov	bx, [si+2]
		jmp	loc_17573
; ---------------------------------------------------------------------------

loc_17473:				; CODE XREF: sub_17222+240j
					; sub_17222+246j
		mov	dx, [si+10h]
		test	ch, 1
		nop
		jz	short loc_174A3
		cmp	word ptr ds:8BECh, 2
		jz	short loc_1749E
		cmp	word ptr ds:8BECh, 4
		jnz	short loc_174A3
		mov	word ptr [si+26h], 1
		mov	dx, 1
		test	word ptr [si+10h], 8000h
		jz	short loc_174A3
		neg	dx
		jmp	short loc_174A3
; ---------------------------------------------------------------------------
		align 2

loc_1749E:				; CODE XREF: sub_17222+25Fj
		mov	word ptr [si+28h], 1

loc_174A3:				; CODE XREF: sub_17222+258j
					; sub_17222+266j ...
		cmp	word ptr [si+30h], 1
		jnz	short loc_174BE
		inc	word ptr [si+14h]
		mov	ax, [si+12h]
		cmp	ax, [si+14h]
		jnz	short loc_174F8
		xor	ax, ax
		mov	[si+14h], ax
		neg	dx
		jmp	short loc_174F8
; ---------------------------------------------------------------------------
		align 2

loc_174BE:				; CODE XREF: sub_17222+285j
		cmp	word ptr [si+30h], 2
		jnz	short loc_174E0
		mov	ax, [si+2]
		and	ax, 0Fh
		cmp	ax, 4
		jnz	short loc_174F8
		call	sub_19B40
		test	byte ptr ds:973Fh, 1
		nop
		jnz	short loc_174F8
		call	sub_176E6
		jmp	short loc_174F8
; ---------------------------------------------------------------------------
		align 2

loc_174E0:				; CODE XREF: sub_17222+2A0j
		mov	ax, [si+2]
		and	ax, 0Fh
		cmp	ax, 4
		jnz	short loc_174F8
		call	sub_19B40
		test	byte ptr ds:973Fh, 1
		nop
		jnz	short loc_174F8
		neg	dx

loc_174F8:				; CODE XREF: sub_17222+290j
					; sub_17222+299j ...
		add	dx, [si+2Ch]
		mov	bx, [si+2]
		add	bx, dx
		or	dx, dx
		jz	short loc_1751E
		jns	short loc_17513
		cmp	bx, 0
		jge	short loc_1751E
		mov	bx, 0
		neg	dx
		jmp	short loc_1751E
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17513:				; CODE XREF: sub_17222+2E2j
		cmp	bx, 0E8h ; 'Ë'
		jl	short loc_1751E
		mov	bx, 0E8h ; 'Ë'
		neg	dx

loc_1751E:				; CODE XREF: sub_17222+2E0j
					; sub_17222+2E7j ...
		mov	ax, [si+4]
		mov	ds:795Fh, ax
		mov	word ptr ds:7961h, 0FFFFh
		mov	ds:795Dh, bx
		mov	byte ptr ds:796Bh, 1
		nop
		call	sub_17DFB
		mov	ch, ds:7963h
		test	ch, 20h
		nop
		jz	short loc_17544
		jmp	sub_17674
; ---------------------------------------------------------------------------

loc_17544:				; CODE XREF: sub_17222+31Dj
		test	ch, 2
		nop
		jz	short loc_17573
		or	dx, dx
		jns	short loc_17562
		add	bx, 0Ch
		and	bx, 0F8h
		sub	bx, 4
		neg	dx
		mov	word ptr [si+14h], 0
		jmp	short loc_17573
; ---------------------------------------------------------------------------
		align 2

loc_17562:				; CODE XREF: sub_17222+32Aj
		add	bx, 3
		and	bx, 0F8h
		sub	bx, 4
		neg	dx
		mov	word ptr [si+14h], 0

loc_17573:				; CODE XREF: sub_17222+228j
					; sub_17222+24Ej ...
		cmp	word ptr ds:6E20h, 1
		jz	short loc_17584
		mov	[si+2],	bx
		or	dx, dx
		jz	short loc_17584
		mov	[si+10h], dx

loc_17584:				; CODE XREF: sub_17222+356j
					; sub_17222+35Dj
		cmp	word ptr [si+30h], 3
		jnz	short loc_17595
		test	ch, 8
		nop
		jnz	short loc_17595
		mov	word ptr [si+2Ah], 0

loc_17595:				; CODE XREF: sub_17222+366j
					; sub_17222+36Cj
		cmp	word ptr ds:6E03h, 1
		jz	short loc_175A6
		cmp	word ptr ds:6E20h, 1
		jz	short loc_175A6
		call	sub_17723

loc_175A6:				; CODE XREF: sub_17222+378j
					; sub_17222+37Fj
		cmp	word ptr ds:7ECCh, 1
		jnz	short loc_175C6
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		call	sub_1646E
		jnb	short loc_175C6
		mov	word ptr [si+18h], 28h ; '('
		jmp	short loc_175DE
; ---------------------------------------------------------------------------
		align 2

loc_175C6:				; CODE XREF: sub_17222+389j
					; sub_17222+39Aj
		mov	bx, [si+4]
		add	bx, 4
		mov	dh, [si+2]
		add	dh, 4
		mov	dl, 10h
		mov	ah, 15h
		call	sub_16407
		jnb	short loc_175DE
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_175DE:				; CODE XREF: sub_17222+3A1j
					; sub_17222+3B7j
		cmp	word ptr ds:0B00h, 1
		jnz	short loc_175FF
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		call	sub_164A0
		jnb	short loc_175FF
		mov	word ptr ds:0B00h, 0
		jmp	short sub_17674
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_175FF:				; CODE XREF: sub_17222+3C1j
					; sub_17222+3D2j
		cmp	word ptr ds:0B38h, 2
		jnz	short locret_17643
		mov	al, ds:0B4Ah
		cmp	al, 1
		jle	short locret_17643
		cmp	al, 4
		jg	short locret_17643
		mov	bx, [si+4]
		mov	dh, [si+2]
		mov	dl, [si+1Eh]
		mov	ah, [si+20h]
		cmp	dh, 0Fh
		jnb	short loc_17627
		xor	dh, dh
		jmp	short loc_1762A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17627:				; CODE XREF: sub_17222+3FEj
		sub	dh, 10h

loc_1762A:				; CODE XREF: sub_17222+402j
		sub	bx, 0Eh
		add	dl, 20h	; ' '
		add	ah, 1Dh
		call	sub_164E1
		jnb	short locret_17643
		push	si
		mov	si, 670Bh
		call	sub_16BC7
		pop	si
		jmp	short sub_17674
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

locret_17643:				; CODE XREF: sub_17222+3E2j
					; sub_17222+3E9j ...
		retn
; ---------------------------------------------------------------------------

loc_17644:				; CODE XREF: sub_17222+3Dj
		mov	ax, [si+4]
		xor	cl, cl
		mov	bp, ds:0B20h
		inc	bp
		and	bp, 0FEh
		and	ax, 0FEh
		call	sub_17702
		mov	ds:7961h, bp
		mov	ax, [si+4]
		add	ax, bp
		mov	[si+8],	bp
		mov	ds:795Fh, ax
		mov	bx, [si+2]
		mov	ds:795Dh, bx
		call	sub_17DFB
		jmp	loc_172CD
sub_17222	endp


; =============== S U B	R O U T	I N E =======================================


sub_17674	proc near		; CODE XREF: sub_16591+17Cp
					; sub_17222+B5j ...
		push	si
		mov	si, 670Bh
		call	sub_16BC7
		pop	si
		mov	word ptr [si+16h], 1
		mov	word ptr [si+8], 0FB00h
		mov	ax, 0Ch
		call	sub_1AECD
		mov	ax, [si+2]
		cmp	ax, 80h	; 'Ä'
		jl	short loc_1769A
		mov	word ptr [si+10h], 0FFFEh
		retn
; ---------------------------------------------------------------------------

loc_1769A:				; CODE XREF: sub_17674+1Ej
		mov	word ptr [si+10h], 2
		retn
sub_17674	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_17222

loc_176A0:				; CODE XREF: sub_17222+1Bj
					; sub_17222+34j
		mov	dx, [si+8]
		add	dx, 80h	; 'Ä'
		mov	[si+8],	dx
		or	dx, dx
		js	short loc_176B3
		xor	ch, ch
		jmp	short loc_176B5
; END OF FUNCTION CHUNK	FOR sub_17222
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_17222

loc_176B3:				; CODE XREF: sub_17222+48Aj
		mov	ch, 0FFh

loc_176B5:				; CODE XREF: sub_17222+48Ej
		mov	ax, [si+4]
		mov	cl, [si+6]
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		cmp	ax, 110h
		jle	short loc_176CA
		call	sub_16174
		retn
; ---------------------------------------------------------------------------

loc_176CA:				; CODE XREF: sub_17222+4A2j
		mov	[si+4],	ax
		mov	[si+6],	cl
		mov	ax, ds:73EFh
		add	ax, 6
		add	ax, [si+32h]
		mov	[si+0Ah], ax
		mov	ax, [si+10h]
		add	ax, [si+2]
		mov	[si+2],	ax
		retn
; END OF FUNCTION CHUNK	FOR sub_17222

; =============== S U B	R O U T	I N E =======================================


sub_176E6	proc near		; CODE XREF: sub_17222+2B8p
		cmp	bx, ds:0B1Eh
		jle	short loc_176F0
		mov	dx, 0FFFEh
		retn
; ---------------------------------------------------------------------------

loc_176F0:				; CODE XREF: sub_176E6+4j
		mov	dx, 2
		retn
sub_176E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_176F4	proc near		; CODE XREF: sub_17222+157p
					; sub_17222+204p
		cmp	ax, ds:0B20h
		jl	short loc_176FE
		jz	short loc_17700
		stc
		retn
; ---------------------------------------------------------------------------

loc_176FE:				; CODE XREF: sub_176F4+4j
		clc
		retn
; ---------------------------------------------------------------------------

loc_17700:				; CODE XREF: sub_176F4+6j
		clc
		retn
sub_176F4	endp


; =============== S U B	R O U T	I N E =======================================


sub_17702	proc near		; CODE XREF: sub_17222+433p
		cmp	word ptr ds:6E20h, 1
		jnz	short loc_1770E
		clc
		mov	bp, 0
		retn
; ---------------------------------------------------------------------------

loc_1770E:				; CODE XREF: sub_17702+5j
		cmp	ax, bp
		jl	short loc_17719
		jz	short loc_1771E
		mov	bp, 0FFFEh
		stc
		retn
; ---------------------------------------------------------------------------

loc_17719:				; CODE XREF: sub_17702+Ej
		mov	bp, 2
		clc
		retn
; ---------------------------------------------------------------------------

loc_1771E:				; CODE XREF: sub_17702+10j
		mov	bp, 0
		clc
		retn
sub_17702	endp


; =============== S U B	R O U T	I N E =======================================


sub_17723	proc near		; CODE XREF: sub_17222+381p
		cmp	word ptr [si+2Ah], 1
		jz	short loc_17756
		cmp	word ptr [si+26h], 1
		jz	short loc_17770
		cmp	word ptr [si+28h], 1
		jz	short loc_1778B
		cmp	word ptr [si+22h], 1
		jnz	short locret_177A6
		mov	ax, [si+10h]
		or	ax, ax
		js	short loc_17748
		mov	ax, 0
		jmp	short loc_1774B
; ---------------------------------------------------------------------------
		align 2

loc_17748:				; CODE XREF: sub_17723+1Dj
		mov	ax, 3

loc_1774B:				; CODE XREF: sub_17723+22j
		add	ax, ds:73E7h
		add	ax, [si+32h]
		mov	[si+0Ah], ax
		retn
; ---------------------------------------------------------------------------

loc_17756:				; CODE XREF: sub_17723+4j
		cmp	word ptr [si+2Ah], 1
		jnz	short loc_17770
		mov	ax, 8
		cmp	word ptr [si+8], 0
		jz	short loc_17769
		add	ax, ds:73EDh

loc_17769:				; CODE XREF: sub_17723+40j
		add	ax, [si+32h]
		mov	[si+0Ah], ax
		retn
; ---------------------------------------------------------------------------

loc_17770:				; CODE XREF: sub_17723+Aj
					; sub_17723+37j
		mov	ax, [si+10h]
		or	ax, ax
		js	short loc_1777D
		mov	ax, 0
		jmp	short loc_17780
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1777D:				; CODE XREF: sub_17723+52j
		mov	ax, 3

loc_17780:				; CODE XREF: sub_17723+57j
		add	ax, ds:73E9h
		add	ax, [si+32h]
		mov	[si+0Ah], ax
		retn
; ---------------------------------------------------------------------------

loc_1778B:				; CODE XREF: sub_17723+10j
		mov	ax, [si+10h]
		or	ax, ax
		js	short loc_17798
		mov	ax, 0
		jmp	short loc_1779B
; ---------------------------------------------------------------------------
		align 2

loc_17798:				; CODE XREF: sub_17723+6Dj
		mov	ax, 3

loc_1779B:				; CODE XREF: sub_17723+72j
		add	ax, ds:73EBh
		add	ax, [si+32h]
		mov	[si+0Ah], ax
		retn
; ---------------------------------------------------------------------------

locret_177A6:				; CODE XREF: sub_17723+16j
		retn
sub_17723	endp

; ---------------------------------------------------------------------------
		db 4 dup(0), 1,	0, 1, 0, 2, 0, 2, 0, 0FFh, 9 dup(0), 1
		db 0, 1, 0, 1, 0, 1, 0,	2, 0, 2, 0, 2, 0, 2, 0,	0FFh, 3	dup(0)
		db 1, 0, 2, 0, 0FFh, 5 dup(0), 1, 0, 1,	0, 0FFh, 3 dup(0)
		db 1, 0, 0FFh, 15h dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_177FB	proc near		; CODE XREF: sub_17205p
		mov	ax, ds:73F1h

loc_177FE:				; CODE XREF: sub_177FB+13j
		mov	bx, 73A7h
		add	bx, ax
		mov	dx, [bx]
		cmp	dx, 0FFh
		jnz	short loc_17810
		mov	ax, 0
		jmp	short loc_177FE
; ---------------------------------------------------------------------------

loc_17810:				; CODE XREF: sub_177FB+Ej
		mov	ds:73E7h, dx
		inc	ax
		inc	ax
		mov	ds:73F1h, ax
		mov	ax, ds:73F3h

loc_1781C:				; CODE XREF: sub_177FB+31j
		mov	bx, 73B5h
		add	bx, ax
		mov	dx, [bx]
		cmp	dx, 0FFh
		jnz	short loc_1782E
		mov	ax, 0
		jmp	short loc_1781C
; ---------------------------------------------------------------------------

loc_1782E:				; CODE XREF: sub_177FB+2Cj
		mov	ds:73E9h, dx
		inc	ax
		inc	ax
		mov	ds:73F3h, ax
		mov	ax, ds:73F5h

loc_1783A:				; CODE XREF: sub_177FB+4Fj
		mov	bx, 73CFh
		add	bx, ax
		mov	dx, [bx]
		cmp	dx, 0FFh
		jnz	short loc_1784C
		mov	ax, 0
		jmp	short loc_1783A
; ---------------------------------------------------------------------------

loc_1784C:				; CODE XREF: sub_177FB+4Aj
		mov	ds:73EBh, dx
		inc	ax
		inc	ax
		mov	ds:73F5h, ax
		mov	ax, ds:73F7h

loc_17858:				; CODE XREF: sub_177FB+6Dj
		mov	bx, 73D7h
		add	bx, ax
		mov	dx, [bx]
		cmp	dx, 0FFh
		jnz	short loc_1786A
		mov	ax, 0
		jmp	short loc_17858
; ---------------------------------------------------------------------------

loc_1786A:				; CODE XREF: sub_177FB+68j
		mov	ds:73EDh, dx
		inc	ax
		inc	ax
		mov	ds:73F7h, ax
		mov	ax, ds:73F9h

loc_17876:				; CODE XREF: sub_177FB+8Bj
		mov	bx, 73E1h
		add	bx, ax
		mov	dx, [bx]
		cmp	dx, 0FFh
		jnz	short loc_17888
		mov	ax, 0
		jmp	short loc_17876
; ---------------------------------------------------------------------------

loc_17888:				; CODE XREF: sub_177FB+86j
		mov	ds:73EFh, dx
		inc	ax
		inc	ax
		mov	ds:73F9h, ax
		retn
sub_177FB	endp

; ---------------------------------------------------------------------------
		db 4 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_17896	proc near		; CODE XREF: sub_17A8B+15p
		mov	bx, [si+10h]
		mov	al, [bx]
		cmp	al, 0
		jnz	short loc_178A5
		inc	bx
		mov	bx, [bx]
		mov	[si+10h], bx

loc_178A5:				; CODE XREF: sub_17896+7j
		inc	bx
		mov	al, [bx]
		sar	al, 1
		sar	al, 1
		sar	al, 1
		sar	al, 1
		cmp	al, 7
		jnz	short loc_178B6
		inc	al

loc_178B6:				; CODE XREF: sub_17896+1Cj
		cbw
		mov	ds:7492h, ax
		mov	al, [bx]
		and	al, 0Fh
		test	al, 8
		jz	short loc_178C4
		or	al, 0F0h

loc_178C4:				; CODE XREF: sub_17896+2Aj
		cmp	al, 7
		jnz	short loc_178CA
		inc	al

loc_178CA:				; CODE XREF: sub_17896+30j
		cbw
		mov	ds:7494h, ax
		dec	bx
		mov	al, [bx]
		cbw
		inc	word ptr [si+12h]
		cmp	ax, [si+12h]
		jz	short loc_178DC
		jnb	short loc_178E6

loc_178DC:				; CODE XREF: sub_17896+42j
		mov	word ptr [si+12h], 0
		inc	bx
		inc	bx
		mov	[si+10h], bx

loc_178E6:				; CODE XREF: sub_17896+44j
		mov	ax, ds:7492h
		mov	dx, ds:7494h
		retn
sub_17896	endp

; ---------------------------------------------------------------------------
		db 0B0h, 0, 90h, 0, 55h, 75h, 16h, 75h,	9Ch, 0,	0A5h, 0
		db 5Bh,	75h, 16h, 75h, 0B4h, 0,	0A5h, 0, 61h, 75h, 16h
		db 75h,	9Ch, 0,	0BAh, 0, 7Dh, 75h, 16h,	75h, 0B4h, 0, 0BAh
		db 0, 83h, 75h,	16h, 75h, 18h, 0, 1, 1Fh, 2, 2Eh, 1, 1Dh
		db 1, 1Ch, 6, 0Ch, 1, 0FCh, 1, 0FDh, 2,	0EEh, 1, 0FFh
		db 18h,	0, 1, 0F0h, 1, 0E0h, 1,	0D1h, 3, 0E1h, 5, 0F1h
		db 3, 0F2h, 1, 0F3h, 3 dup(2), 1, 18h, 0, 2, 1,	2 dup(2)
		db 1, 13h, 3, 12h, 5, 11h, 3, 21h, 1, 31h, 1, 20h, 1, 10h
		db 0, 16h, 75h,	44h, 0,	2 dup(0FFh), 0FEh, 0FFh, 3Fh, 0
		db 2 dup(0FFh),	0FEh, 0FFh, 0FEh, 0FFh,	2, 0, 40h, 0, 0FEh
		db 0FFh, 2, 0, 40h, 0, 0FEh, 0FFh, 2, 0, 40h, 0, 0FEh
		db 0FFh, 2, 0, 40h, 0, 2 dup(0FFh), 0E8h, 0FFh,	41h, 0
		db 2 dup(0FFh),	0FEh, 0FFh, 42h, 0, 43h, 0, 2 dup(0FFh)
		db 0FCh, 0FFh, 9Fh, 75h, 0BFh, 75h, 0A5h, 75h, 0D2h, 75h
		db 0A7h, 75h, 0EAh, 75h, 0A9h, 75h, 2, 76h, 0B9h, 75h
		db 1Ah,	76h, 0FEh, 0, 0FDh, 0FFh, 10h, 0, 22h, 0, 22h
		db 0, 23h, 0, 23h, 0, 24h, 0, 24h, 0, 25h, 0, 25h, 0, 26h
		db 0, 26h, 0, 0FEh, 0, 2 dup(0FFh), 0E4h, 0FFh,	1, 87h
		db 0Bh,	0, 1, 8Ch, 0Bh,	0, 1, 84h, 0Bh,	0, 1, 0C6h, 0Bh
		db 2 dup(0), 0BFh, 75h,	0FFh, 10h, 0, 0Bh, 0, 1, 0C4h
		db 0Bh,	0, 1, 88h, 0Bh,	0, 1, 6, 0Bh, 0, 1, 0C6h, 0Bh
		db 2 dup(0), 0D2h, 75h,	0FFh, 10h, 0, 0Ah, 0, 1, 0ACh
		db 0Bh,	0, 1, 0EAh, 0Bh, 0, 1, 0Eh, 0Bh, 0, 1, 95h, 0Bh
		db 2 dup(0), 0EAh, 75h,	0FFh, 10h, 0, 9, 0, 1, 2Ah, 0Bh
		db 0, 1, 7Ch, 0Bh, 0, 1, 36h, 0Bh, 0, 1, 0E9h, 0Bh, 2 dup(0)
		db 2, 76h, 2, 0CCh, 0Bh, 0, 1, 47h, 0Bh, 0, 1, 99h, 0Bh
		db 2 dup(0), 1Ah, 76h, 4 dup(0)
word_17A2D	dw 0			; DATA XREF: sub_16B9B+5834w
word_17A2F	dw 0			; DATA XREF: sub_16B9B+583Aw
					; sub_16B9B+58B4w

; =============== S U B	R O U T	I N E =======================================


sub_17A31	proc near		; CODE XREF: sub_15F40+Ep
		mov	word ptr ds:7629h, 14h
		mov	di, 0C28h
		mov	si, 74EEh
		mov	cx, 5

loc_17A40:				; CODE XREF: sub_17A31+4Bj
		mov	word ptr [di], 1
		lodsw
		mov	[di+2],	ax
		lodsw
		mov	[di+4],	ax
		xor	ax, ax
		mov	[di+0Eh], ax
		mov	[di+0Ch], ax
		lodsw
		mov	[di+16h], ax
		xor	ax, ax
		mov	[di+18h], ax
		push	si
		push	di
		push	cx
		mov	si, di
		call	sub_1718E
		pop	cx
		pop	di
		pop	si
		xor	ax, ax
		mov	[di+18h], ax
		lodsw
		mov	[di+10h], ax
		xor	ax, ax
		mov	[di+12h], ax
		mov	[di+14h], ax
		add	di, 34h	; '4'
		loop	loc_17A40
		mov	ds:0D2Ch, ax
		mov	ds:762Bh, ax
		mov	word ptr ds:762Fh, 1
		retn
sub_17A31	endp


; =============== S U B	R O U T	I N E =======================================


sub_17A8B	proc near		; CODE XREF: sub_168E4+7p
		cmp	word ptr ds:762Dh, 1
		jnz	short locret_17A9C
		nop
		nop
		nop
		cmp	word ptr ds:762Fh, 1
		jz	short loc_17A9D

locret_17A9C:				; CODE XREF: sub_17A8B+5j
		retn
; ---------------------------------------------------------------------------

loc_17A9D:				; CODE XREF: sub_17A8B+Fj
		mov	si, 0C28h
		call	sub_17896
		mov	cx, 5

loc_17AA6:				; CODE XREF: sub_17A8B+2Dj
		push	cx
		add	[si+2],	ax
		add	[si+4],	dx
		push	ax
		push	dx
		call	sub_1718E
		pop	dx
		pop	ax
		add	si, 34h	; '4'
		pop	cx
		loop	loc_17AA6
		mov	dh, ds:0C2Ah
		mov	bx, ds:0C2Ch
		mov	dl, 1Ch
		mov	ah, 40h	; '@'
		call	sub_16407
		jnb	short loc_17AD1
		call	sub_168A8
		jmp	short loc_17AEB
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17AD1:				; CODE XREF: sub_17A8B+3Ej
		mov	dh, ds:0C2Ah
		add	dh, 0ECh ; 'Ï'
		mov	bx, ds:0C2Ch
		add	bx, 18h
		mov	dl, 14h
		mov	ah, 20h	; ' '
		call	sub_16407
		jnb	short loc_17AEB
		call	sub_168A8

loc_17AEB:				; CODE XREF: sub_17A8B+43j
					; sub_17A8B+5Bj
		mov	dh, ds:0C2Ah
		mov	bx, ds:0C2Ch
		mov	dl, 1Ch
		mov	ah, 40h	; '@'
		call	sub_164A0
		jnb	short loc_17B0D
		mov	word ptr ds:0B00h, 0
		call	sub_17D53
		jnb	short loc_17B0A
		jmp	loc_17BA5
; ---------------------------------------------------------------------------

loc_17B0A:				; CODE XREF: sub_17A8B+7Aj
		jmp	short loc_17B2F
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17B0D:				; CODE XREF: sub_17A8B+6Fj
		mov	dh, ds:0C2Ah
		add	dh, 0ECh ; 'Ï'
		mov	bx, ds:0C2Ch
		add	bx, 18h
		mov	dl, 14h
		mov	ah, 20h	; ' '
		call	sub_164A0
		jnb	short loc_17B2F
		mov	word ptr ds:0B00h, 0
		call	sub_17D53
		jb	short loc_17BA5

loc_17B2F:				; CODE XREF: sub_17A8B:loc_17B0Aj
					; sub_17A8B+97j
		mov	dh, ds:0C2Ah
		mov	bx, ds:0C2Ch
		mov	dl, 1Ch
		mov	ah, 40h	; '@'
		sub	dh, 10h
		sub	bx, 0Eh
		add	dl, 20h	; ' '
		add	ah, 1Dh
		cmp	word ptr ds:0B38h, 2
		jnz	short loc_17B96
		cmp	word ptr ds:0B4Ah, 4
		jg	short loc_17B96
		cmp	word ptr ds:0B4Ah, 1
		jle	short loc_17B96
		call	sub_164E1
		jnb	short loc_17B6E
		call	sub_17D53
		jb	short loc_17BA5
		call	sub_17D53
		jb	short loc_17BA5
		jmp	short loc_17B96
; ---------------------------------------------------------------------------
		align 2

loc_17B6E:				; CODE XREF: sub_17A8B+D4j
		mov	dh, ds:0C2Ah
		add	dh, 0ECh ; 'Ï'
		mov	bx, ds:0C2Ch
		add	bx, 18h
		mov	dl, 14h
		mov	ah, 20h	; ' '
		sub	dh, 10h
		sub	bx, 0Eh
		add	dl, 20h	; ' '
		add	ah, 1Dh
		call	sub_164E1
		jnb	short loc_17B96
		call	sub_17D53
		jb	short loc_17BA5

loc_17B96:				; CODE XREF: sub_17A8B+C1j
					; sub_17A8B+C8j ...
		cmp	word ptr ds:0D2Ch, 1
		jz	short loc_17BA1
		call	sub_17C64
		retn
; ---------------------------------------------------------------------------

loc_17BA1:				; CODE XREF: sub_17A8B+110j
		call	sub_17CF4
		retn
; ---------------------------------------------------------------------------

loc_17BA5:				; CODE XREF: sub_17A8B+7Cj
					; sub_17A8B+A2j ...
		mov	word ptr ds:762Dh, 0
		mov	word ptr ds:762Fh, 0
		mov	byte ptr ds:5B3Eh, 1
		mov	cx, 5
		mov	si, 758Bh
		mov	di, 0C28h

loc_17BBF:				; CODE XREF: sub_17A8B+15Cj
		mov	word ptr [di], 11h
		mov	word ptr [di+32h], 60h ; '`'
		mov	word ptr [di+1Ch], 0
		mov	word ptr [di+18h], 0
		lodsw
		mov	[di+16h], ax
		mov	word ptr [di+12h], 0
		mov	word ptr [di+14h], 0
		lodsw
		mov	[di+10h], ax
		add	di, 34h	; '4'
		loop	loc_17BBF
		mov	di, 0B56h
		mov	word ptr [di], 1
		mov	ax, ds:0C2Ah
		mov	[di+2],	ax
		mov	ax, ds:0C2Ch
		mov	[di+4],	ax
		mov	word ptr [di+32h], 34h ; '4'
		mov	word ptr [di+16h], 1
		mov	word ptr [di+18h], 0
		mov	word ptr [di+6], 0
		mov	word ptr [di+8], 0FB00h
		mov	word ptr [di+10h], 0FFFEh
		mov	word ptr [di+1Ch], 0
		mov	word ptr ds:0D2Ch, 0
		cmp	word ptr ds:8BEEh, 1
		jnz	short locret_17C63
		mov	cx, ds:6610h
		or	cx, cx
		jz	short loc_17C3E

loc_17C34:				; CODE XREF: sub_17A8B+1B1j
		mov	si, 6729h
		push	cx
		call	sub_16BC7
		pop	cx
		loop	loc_17C34

loc_17C3E:				; CODE XREF: sub_17A8B+1A7j
		mov	cx, ds:6612h
		or	cx, cx
		jz	short loc_17C50

loc_17C46:				; CODE XREF: sub_17A8B+1C3j
		mov	si, 672Fh
		push	cx
		call	sub_16BC7
		pop	cx
		loop	loc_17C46

loc_17C50:				; CODE XREF: sub_17A8B+1B9j
		mov	cx, ds:6614h
		inc	cx
		or	cx, cx
		jz	short locret_17C63

loc_17C59:				; CODE XREF: sub_17A8B+1D6j
		mov	si, 6735h
		push	cx
		call	sub_16BC7
		pop	cx
		loop	loc_17C59

locret_17C63:				; CODE XREF: sub_17A8B+19Fj
					; sub_17A8B+1CCj
		retn
sub_17A8B	endp


; =============== S U B	R O U T	I N E =======================================


sub_17C64	proc near		; CODE XREF: sub_17A8B+112p
		test	word ptr ds:762Bh, 0FFFFh
		jz	short loc_17C71
		dec	word ptr ds:762Bh
		retn
; ---------------------------------------------------------------------------

loc_17C71:				; CODE XREF: sub_17C64+6j
		mov	ax, 0Dh
		call	sub_1AECD
		mov	word ptr ds:762Bh, 32h ; '2'
		mov	word ptr ds:0D2Ch, 1
		mov	word ptr ds:0D36h, 55h ; 'U'
		mov	ax, ds:0B1Eh
		add	ax, 0Ch
		mov	bx, ds:0B20h
		add	bx, 0Ah
		mov	cx, ds:0C2Ah
		add	cx, 0FFE4h
		mov	ds:0D2Eh, cx
		mov	dx, ds:0C2Ch
		add	dx, 2Ch	; ','
		mov	ds:0D30h, dx
		sub	ax, cx
		mov	cx, ax
		sub	bx, dx
		mov	dx, bx

loc_17CB4:				; CODE XREF: sub_17C64+6Ej
					; sub_17C64+73j
		cmp	ax, 4
		jg	short loc_17CCB
		cmp	ax, 0FFFCh
		jl	short loc_17CCB
		cmp	bx, 4
		jg	short loc_17CCB
		cmp	bx, 0FFFCh
		jl	short loc_17CCB
		jmp	short loc_17CEC
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17CCB:				; CODE XREF: sub_17C64+53j
					; sub_17C64+58j ...
		sar	ax, 1
		sar	bx, 1
		cmp	ax, 0
		jnz	short loc_17CB4
		cmp	bx, 0
		jnz	short loc_17CB4
		mov	ax, 4
		mov	bx, ax
		cmp	cx, 0
		jge	short loc_17CE5
		neg	ax

loc_17CE5:				; CODE XREF: sub_17C64+7Dj
					; sub_17C64+84j
		cmp	dx, 0
		jge	short loc_17CE5
		neg	bx

loc_17CEC:				; CODE XREF: sub_17C64+64j
		mov	ds:0D3Ch, ax
		mov	ds:0D34h, bx
		retn
sub_17C64	endp


; =============== S U B	R O U T	I N E =======================================


sub_17CF4	proc near		; CODE XREF: sub_17A8B:loc_17BA1p
		dec	word ptr ds:762Bh
		jns	short loc_17D00
		mov	word ptr ds:762Bh, 0

loc_17D00:				; CODE XREF: sub_17CF4+4j
		mov	ax, ds:0D2Eh
		add	ax, ds:0D3Ch
		mov	ds:0D2Eh, ax
		mov	dx, ds:0D30h
		add	dx, ds:0D34h
		mov	ds:0D30h, dx
		add	ax, 4
		cmp	ax, 4
		jle	short loc_17D4C
		cmp	ax, 0FCh ; '¸'
		jge	short loc_17D4C
		add	dx, 4
		mov	ds:795Dh, ax
		mov	ds:795Fh, dx
		call	sub_18014
		mov	ch, ds:7963h
		test	ch, 2
		nop
		jnz	short loc_17D4C
		dec	ax
		dec	ax
		mov	bx, dx
		mov	dh, al
		mov	dl, 4
		mov	ah, 4
		call	sub_16407
		jnb	short locret_17D52
		call	sub_168A8

loc_17D4C:				; CODE XREF: sub_17CF4+28j
					; sub_17CF4+2Dj ...
		mov	word ptr ds:0D2Ch, 0

locret_17D52:				; CODE XREF: sub_17CF4+53j
		retn
sub_17CF4	endp


; =============== S U B	R O U T	I N E =======================================


sub_17D53	proc near		; CODE XREF: sub_17A8B+77p
					; sub_17A8B+9Fp ...
		dec	word ptr ds:7629h
		jz	short loc_17D5B
		clc
		retn
; ---------------------------------------------------------------------------

loc_17D5B:				; CODE XREF: sub_17D53+4j
		stc
		retn
sub_17D53	endp

; ---------------------------------------------------------------------------
		db 13h dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_17D70	proc near		; CODE XREF: sub_18351+CAp
					; sub_18351+109p ...
		push	si
		push	ax
		push	bx
		push	cx
		push	dx
		mov	word ptr ds:796Ch, 5
		mov	word ptr ds:796Eh, 10h
		mov	word ptr ds:7964h, 7FFFh
		mov	word ptr ds:7E02h, 0
		mov	cx, 3
		mov	dx, ds:795Fh
		and	dx, 7
		cmp	dx, 4
		jge	short loc_17D9F
		mov	cx, 2

loc_17D9F:				; CODE XREF: sub_17D70+2Aj
		mov	byte ptr ds:796Ah, 0
		mov	bp, 4
		call	sub_17FF3
		and	dx, 7
		jz	short loc_17DD7
		xor	ax, ax
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Dh
		and	bl, 2
		jz	short loc_17E2F
		mov	word ptr ds:7E02h, 1
		jmp	short loc_17E2F
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17DD7:				; CODE XREF: sub_17D70+3Dj
		xor	ax, ax
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Eh
		and	bl, 2
		jnz	short loc_17DF2
		jmp	loc_17E8A
; ---------------------------------------------------------------------------

loc_17DF2:				; CODE XREF: sub_17D70+7Dj
		mov	word ptr ds:7E02h, 1
		jmp	loc_17E8A
sub_17D70	endp


; =============== S U B	R O U T	I N E =======================================


sub_17DFB	proc near		; CODE XREF: sub_17222+A8p
					; sub_17222+E3p ...
		push	si
		push	ax
		push	bx
		push	cx
		push	dx
		mov	word ptr ds:796Ch, 0
		mov	word ptr ds:796Eh, 15h
		mov	word ptr ds:7964h, 7FFFh
		mov	cx, 4
		mov	dx, ds:795Fh
		and	dx, 7
		cmp	dx, 4
		jge	short loc_17E24
		mov	cx, 3

loc_17E24:				; CODE XREF: sub_17DFB+24j
		mov	bp, 4
		call	sub_17FF3
		and	dx, 7
		jz	short loc_17E8A

loc_17E2F:				; CODE XREF: sub_17D70+5Cj
					; sub_17D70+64j
		xor	bx, bx
		xor	ax, ax
		jmp	short loc_17E4E
; ---------------------------------------------------------------------------
		align 2

loc_17E36:				; CODE XREF: sub_17DFB:loc_17E4Ej
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bh, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Dh

loc_17E4E:				; CODE XREF: sub_17DFB+38j
		loop	loc_17E36
		and	bl, 22h
		and	bh, 2Ah
		mov	ds:796Ah, bl
		or	ds:796Ah, bh
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		lodsb
		mov	di, ax
		mov	bh, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		and	bl, 27h
		and	bh, 7Fh
		or	ds:796Ah, bl
		or	ds:796Ah, bh
		mov	al, ds:796Ah
		mov	ds:7963h, al
		jmp	short loc_17EC9
; ---------------------------------------------------------------------------
		align 2

loc_17E8A:				; CODE XREF: sub_17D70+7Fj
					; sub_17D70+88j ...
		xor	bx, bx
		xor	ax, ax
		jmp	short loc_17EA2
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17E91:				; CODE XREF: sub_17DFB:loc_17EA2j
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Eh

loc_17EA2:				; CODE XREF: sub_17DFB+93j
		loop	loc_17E91
		and	bl, 2Ah
		mov	ds:796Ah, bl
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		and	bl, 7Fh
		or	ds:796Ah, bl
		mov	al, ds:796Ah
		mov	ds:7963h, al
		jmp	short loc_17EC9
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_17EC9:				; CODE XREF: sub_17DFB+8Cj
					; sub_17DFB+CBj
		mov	ax, ds:7961h
		or	ax, ax
		jns	short loc_17ED8
		mov	al, ds:7963h
		and	al, 0FBh
		mov	ds:7963h, al

loc_17ED8:				; CODE XREF: sub_17DFB+D3j
		cmp	byte ptr ds:796Bh, 1
		jz	short loc_17EE2
		jmp	loc_17FB9
; ---------------------------------------------------------------------------

loc_17EE2:				; CODE XREF: sub_17DFB+E2j
		mov	si, 0C28h

loc_17EE5:				; CODE XREF: sub_17DFB+1BBj
		mov	ax, [si]
		cmp	ax, 0FFFFh
		jnz	short loc_17EEF
		jmp	loc_17FB9
; ---------------------------------------------------------------------------

loc_17EEF:				; CODE XREF: sub_17DFB+EFj
		or	al, al
		jnz	short loc_17EF6
		jmp	loc_17FB3
; ---------------------------------------------------------------------------

loc_17EF6:				; CODE XREF: sub_17DFB+F6j
		test	al, 80h
		jnz	short loc_17EFD
		jmp	loc_17FB3
; ---------------------------------------------------------------------------

loc_17EFD:				; CODE XREF: sub_17DFB+FDj
		test	al, 40h
		jz	short loc_17F68
		nop
		nop
		nop
		mov	cl, [si+2]
		mov	di, [si+4]
		mov	dl, [si+1Eh]
		mov	bl, [si+20h]
		mov	ch, ds:795Dh
		add	ch, 4
		mov	bp, ds:795Fh
		add	bp, ds:796Ch
		mov	dh, 10h
		mov	bh, ds:796Eh
		push	si
		call	sub_17FBF
		pop	si
		jb	short loc_17F2F
		jmp	loc_17FB3
; ---------------------------------------------------------------------------

loc_17F2F:				; CODE XREF: sub_17DFB+12Fj
		or	byte ptr ds:7963h, 2
		cmp	di, ds:7964h
		jg	short loc_17F65
		mov	bx, ds:795Fh
		add	bx, 14h
		xor	ax, ax
		mov	al, ds:7962h
		cbw
		add	ax, 8
		add	ax, di
		cmp	bx, ax
		jg	short loc_17F65
		mov	ds:7964h, di
		mov	word ptr ds:7966h, 0
		mov	word ptr ds:7968h, 0
		or	byte ptr ds:7963h, 40h

loc_17F65:				; CODE XREF: sub_17DFB+13Dj
					; sub_17DFB+153j
		jmp	short loc_17FB3
; ---------------------------------------------------------------------------
		align 2

loc_17F68:				; CODE XREF: sub_17DFB+104j
		mov	ax, ds:7961h
		or	ax, ax
		js	short loc_17FB3
		mov	cl, [si+2]
		mov	di, [si+4]
		mov	dl, [si+1Eh]
		mov	bl, ds:7962h
		add	bl, 8
		mov	ch, ds:795Dh
		add	ch, 4
		mov	bp, ds:795Fh
		add	bp, 14h
		mov	dh, 10h
		mov	bh, 1
		push	si
		call	sub_17FBF
		pop	si
		jnb	short loc_17FB3
		cmp	di, ds:7964h
		jg	short loc_17FB3
		or	byte ptr ds:7963h, 40h
		mov	ds:7964h, di
		mov	ax, [si+2Eh]
		mov	ds:7966h, ax
		mov	ax, [si+30h]
		mov	ds:7968h, ax

loc_17FB3:				; CODE XREF: sub_17DFB+F8j
					; sub_17DFB+FFj ...
		add	si, 34h	; '4'
		jmp	loc_17EE5
; ---------------------------------------------------------------------------

loc_17FB9:				; CODE XREF: sub_17DFB+E4j
					; sub_17DFB+F1j
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		pop	si
		retn
sub_17DFB	endp


; =============== S U B	R O U T	I N E =======================================


sub_17FBF	proc near		; CODE XREF: sub_17DFB+12Bp
					; sub_17DFB+197p ...
		xor	ax, ax
		mov	al, ch
		mov	si, ax
		mov	al, dh
		add	si, ax
		mov	al, cl
		cmp	si, ax
		jle	short loc_17FF1
		mov	si, ax
		mov	al, dl
		add	si, ax
		mov	al, ch
		cmp	si, ax
		jle	short loc_17FF1
		xor	cx, cx
		mov	cl, bh
		add	cx, bp
		cmp	cx, di
		jle	short loc_17FF1
		xor	ax, ax
		mov	al, bl
		add	ax, di
		cmp	ax, bp
		jle	short loc_17FF1
		stc
		retn
; ---------------------------------------------------------------------------

loc_17FF1:				; CODE XREF: sub_17FBF+Ej
					; sub_17FBF+1Aj ...
		clc
		retn
sub_17FBF	endp


; =============== S U B	R O U T	I N E =======================================


sub_17FF3	proc near		; CODE XREF: sub_17D70+37p
					; sub_17DFB+2Cp ...
		mov	si, 563Ch
		mov	dx, ds:795Fh
		and	dx, 0FFF8h
		shl	dx, 1
		shl	dx, 1
		add	si, dx
		mov	dx, ds:795Dh
		add	dx, bp
		mov	bp, dx
		shr	bp, 1
		shr	bp, 1
		shr	bp, 1
		add	si, bp
		retn
sub_17FF3	endp


; =============== S U B	R O U T	I N E =======================================


sub_18014	proc near		; CODE XREF: sub_17CF4+39p
					; sub_18CBE+43p
		push	ax
		push	dx
		xor	bp, bp
		call	sub_17FF3
		xor	ax, ax
		lodsb
		mov	di, ax
		mov	al, [di+53F4h]
		mov	ds:7963h, al
		call	sub_181C6
		pop	dx
		pop	ax
		retn
sub_18014	endp


; =============== S U B	R O U T	I N E =======================================


sub_1802D	proc near		; CODE XREF: sub_18D28+74p
					; sub_18D28+A2p ...
		push	ax
		push	bx
		push	cx
		push	dx
		mov	cx, 2
		mov	ax, ds:795Fh
		and	ax, 7
		jz	short loc_1803F
		mov	cx, 3

loc_1803F:				; CODE XREF: sub_1802D+Dj
		mov	bp, 8
		call	sub_17FF3
		and	dx, 7
		jz	short loc_18083
		xor	bx, bx
		xor	ax, ax
		jmp	short loc_18062
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18051:				; CODE XREF: sub_1802D:loc_18062j
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Eh

loc_18062:				; CODE XREF: sub_1802D+21j
		loop	loc_18051
		and	bl, 23h
		mov	bh, bl
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		and	bl, 27h
		or	bh, bl
		mov	ds:7963h, bh
		jmp	short loc_180AE
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18083:				; CODE XREF: sub_1802D+1Bj
		xor	bx, bx
		xor	ax, ax
		jmp	short loc_18094
; ---------------------------------------------------------------------------
		align 2

loc_1808A:				; CODE XREF: sub_1802D:loc_18094j
		lodsb
		mov	di, ax
		or	bl, [di+53F4h]
		add	si, 1Fh

loc_18094:				; CODE XREF: sub_1802D+5Aj
		loop	loc_1808A
		and	bl, 2Bh
		mov	bh, bl
		lodsb
		mov	di, ax
		mov	bl, [di+53F4h]
		and	bl, 27h
		or	bh, bl
		mov	ds:7963h, bh
		jmp	short loc_180AE
; ---------------------------------------------------------------------------
		align 2

loc_180AE:				; CODE XREF: sub_1802D+53j
					; sub_1802D+7Ej
		mov	ax, ds:7961h
		or	ax, ax
		jns	short loc_180C0
		mov	bh, ds:7963h
		and	bh, 0FBh
		mov	ds:7963h, bh

loc_180C0:				; CODE XREF: sub_1802D+86j
		cmp	byte ptr ds:796Bh, 1
		jz	short loc_180CA
		jmp	loc_1819F
; ---------------------------------------------------------------------------

loc_180CA:				; CODE XREF: sub_1802D+98j
		mov	si, 0C28h

loc_180CD:				; CODE XREF: sub_1802D+16Fj
		mov	ax, [si]
		cmp	ax, 0FFFFh
		jnz	short loc_180D7
		jmp	loc_1819F
; ---------------------------------------------------------------------------

loc_180D7:				; CODE XREF: sub_1802D+A5j
		or	al, al
		jnz	short loc_180DE
		jmp	loc_18199
; ---------------------------------------------------------------------------

loc_180DE:				; CODE XREF: sub_1802D+ACj
		test	al, 80h
		jnz	short loc_180E5
		jmp	loc_18199
; ---------------------------------------------------------------------------

loc_180E5:				; CODE XREF: sub_1802D+B3j
		test	al, 40h
		jz	short loc_1814E
		nop
		nop
		nop
		mov	cl, [si+2]
		mov	di, [si+4]
		mov	dl, [si+1Eh]
		mov	bl, [si+20h]
		mov	ch, ds:795Dh
		add	ch, 8
		mov	bp, ds:795Fh
		add	bp, ds:796Ch
		mov	dh, 8
		mov	bh, 10h
		push	si
		call	sub_17FBF
		pop	si
		jb	short loc_18115
		jmp	loc_18199
; ---------------------------------------------------------------------------

loc_18115:				; CODE XREF: sub_1802D+E3j
		or	byte ptr ds:7963h, 2
		cmp	di, ds:7964h
		jg	short loc_1814B
		mov	bx, ds:795Fh
		add	bx, 10h
		xor	ax, ax
		mov	al, ds:7962h
		cbw
		add	ax, 8
		add	ax, di
		cmp	bx, ax
		jg	short loc_1814B
		mov	ds:7964h, di
		mov	word ptr ds:7966h, 0
		mov	word ptr ds:7968h, 0
		or	byte ptr ds:7963h, 40h

loc_1814B:				; CODE XREF: sub_1802D+F1j
					; sub_1802D+107j
		jmp	short loc_18199
; ---------------------------------------------------------------------------
		align 2

loc_1814E:				; CODE XREF: sub_1802D+BAj
		mov	ax, ds:7961h
		or	ax, ax
		js	short loc_18199
		mov	cl, [si+2]
		mov	di, [si+4]
		mov	dl, [si+1Eh]
		mov	bl, ds:7962h
		add	bl, 8
		mov	ch, ds:795Dh
		add	ch, 8
		mov	bp, ds:795Fh
		add	bp, 0Fh
		mov	dh, 8
		mov	bh, 1
		push	si
		call	sub_17FBF
		pop	si
		jnb	short loc_18199
		cmp	di, ds:7964h
		jg	short loc_18199
		or	byte ptr ds:7963h, 40h
		mov	ds:7964h, di
		mov	ax, [si+2Eh]
		mov	ds:7966h, ax
		mov	ax, [si+30h]
		mov	ds:7968h, ax

loc_18199:				; CODE XREF: sub_1802D+AEj
					; sub_1802D+B5j ...
		add	si, 34h	; '4'
		jmp	loc_180CD
; ---------------------------------------------------------------------------

loc_1819F:				; CODE XREF: sub_1802D+9Aj
					; sub_1802D+A7j
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		retn
sub_1802D	endp


; =============== S U B	R O U T	I N E =======================================


sub_181A4	proc near		; CODE XREF: sub_181C6+28p
		mov	al, ch
		xor	ah, ah
		xor	ch, ch
		cmp	ax, cx
		jl	short loc_181C4
		xor	dh, dh
		add	cx, dx
		cmp	ax, cx
		jg	short loc_181C4
		cmp	bp, di
		jl	short loc_181C4
		xor	bh, bh
		add	di, bx
		cmp	bp, di
		jg	short loc_181C4
		stc
		retn
; ---------------------------------------------------------------------------

loc_181C4:				; CODE XREF: sub_181A4+8j
					; sub_181A4+10j ...
		clc
		retn
sub_181A4	endp


; =============== S U B	R O U T	I N E =======================================


sub_181C6	proc near		; CODE XREF: sub_18014+13p
					; sub_18CBE+47p
		mov	si, 0C28h

loc_181C9:				; CODE XREF: sub_181C6+35j
		mov	ax, [si]
		cmp	ax, 0FFFFh
		jz	short locret_181FD
		or	al, al
		jz	short loc_181F8
		test	al, 80h
		jz	short loc_181F8
		test	al, 40h
		jz	short loc_181F8
		mov	ch, ds:795Dh
		mov	bp, ds:795Fh
		mov	cl, [si+2]
		mov	di, [si+4]
		mov	dl, 18h
		mov	bl, 15h
		call	sub_181A4
		jnb	short loc_181F8
		or	byte ptr ds:7963h, 40h

loc_181F8:				; CODE XREF: sub_181C6+Cj
					; sub_181C6+10j ...
		add	si, 34h	; '4'
		jmp	short loc_181C9
; ---------------------------------------------------------------------------

locret_181FD:				; CODE XREF: sub_181C6+8j
		retn
sub_181C6	endp

; ---------------------------------------------------------------------------
		align 4
word_18200	dw 0			; DATA XREF: sub_1A592+4Bw
					; sub_16B9B+582Ew
		db 14h dup(0)
word_18216	dw 0			; DATA XREF: sub_1A592+3Fw
					; sub_16B9B:loc_1C439w
word_18218	dw 0			; DATA XREF: sub_1A592+45w
					; sub_16B9B+58A4w ...
		db 8 dup(0), 1,	2, 3, 4, 5, 1, 2, 3, 4,	5, 6, 7, 6, 7
		db 6, 7, 6, 7, 6, 7, 20h, 0, 20h, 0, 20h, 0, 20h, 0, 0FDh
		db 0FFh, 24h, 0, 20h, 0, 20h, 0, 20h, 0, 20h, 0, 0FDh
		db 0FFh, 24h, 0, 20h, 0, 20h, 0, 20h, 0, 20h, 0, 0FDh
		db 0FFh, 24h, 0, 20h, 0, 20h, 0, 20h, 0, 20h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 24h, 0, 21h, 0, 21h, 0, 21h, 0, 21h, 0, 0FDh
		db 0FFh, 10h, 0, 2 dup(0FFh), 88h, 0FFh, 22h, 0, 22h, 0
		db 23h,	0, 23h,	0, 24h,	0, 24h,	0, 25h,	0, 25h,	0, 26h
		db 0, 26h, 0, 2	dup(0FFh), 0ECh, 0FFh, 0, 90h, 8 dup(0)
		db 0C7h, 6, 0, 7Eh, 2 dup(0), 0C7h, 6, 2, 7Eh, 2 dup(0)
		db 0C7h, 6, 4, 7Eh, 2 dup(0), 0C7h, 2 dup(6), 7Eh, 2 dup(0)
		db 0C7h, 6, 8, 7Eh, 2 dup(0), 0C7h, 6, 0Ah, 7Eh, 2 dup(0)
		db 0C7h, 6, 0Ch, 7Eh, 2	dup(0),	0C7h, 6, 0Eh, 7Eh, 2 dup(0)
		db 0C7h, 6, 10h, 7Eh, 2	dup(0),	0C7h, 6, 12h, 7Eh, 2 dup(0)
		db 0C7h, 6, 14h, 7Eh, 2	dup(0),	0C6h, 6, 0C2h, 90h, 0
		db 90h,	0C7h, 6, 1Ch, 0Bh, 1, 0, 0C7h, 6, 2Ah, 0Bh, 1
		db 0, 0C7h, 6, 28h, 0Bh, 2 dup(0), 0C6h, 6, 22h, 0Bh, 0
		db 0C7h, 6, 34h, 0Bh, 2	dup(0),	0C7h, 6, 1Ah, 7Eh, 2 dup(0)
		db 0C7h, 6, 36h, 0Bh, 2	dup(0),	0C7h, 6, 0CCh, 7Eh, 2 dup(0)
		db 0C6h, 6, 0CAh, 7Eh, 0, 0C3h

; =============== S U B	R O U T	I N E =======================================


sub_18351	proc near		; CODE XREF: sub_16B9B+58E0p

; FUNCTION CHUNK AT 8703 SIZE 0000005A BYTES
; FUNCTION CHUNK AT 875E SIZE 0000002E BYTES
; FUNCTION CHUNK AT 878D SIZE 0000005D BYTES
; FUNCTION CHUNK AT 87EB SIZE 00000031 BYTES
; FUNCTION CHUNK AT 881D SIZE 00000039 BYTES
; FUNCTION CHUNK AT 8857 SIZE 0000002C BYTES
; FUNCTION CHUNK AT 8B9A SIZE 00000014 BYTES
; FUNCTION CHUNK AT 8BAF SIZE 0000003D BYTES

		cmp	word ptr ds:7E16h, 1
		jnz	short loc_1835B
		jmp	loc_18F9A
; ---------------------------------------------------------------------------

loc_1835B:				; CODE XREF: sub_18351+5j
		call	sub_19C05
		mov	ax, ds:0B20h
		mov	ds:7DFEh, ax
		mov	byte ptr ds:90C2h, 0
		nop
		mov	word ptr ds:7E1Ah, 0
		call	sub_1C4CA
		test	word ptr ds:7ED2h, 0FFh
		jz	short loc_1837F
		dec	word ptr ds:7ED2h

loc_1837F:				; CODE XREF: sub_18351+28j
		cmp	al, ds:7ECAh
		jz	short loc_18396
		mov	byte ptr ds:7ECAh, 0
		mov	word ptr ds:7ECCh, 0
		mov	word ptr ds:7ED2h, 0

loc_18396:				; CODE XREF: sub_18351+32j
		cmp	word ptr ds:7E00h, 1
		jnz	short loc_183A0
		jmp	loc_18B03
; ---------------------------------------------------------------------------

loc_183A0:				; CODE XREF: sub_18351+4Aj
		mov	ax, ds:7E06h
		or	ax, ax
		jz	short loc_183AA
		jmp	loc_18987
; ---------------------------------------------------------------------------

loc_183AA:				; CODE XREF: sub_18351+54j
		mov	word ptr ds:7E08h, 0
		mov	word ptr ds:7E0Ah, 0
		mov	word ptr ds:7E0Ch, 0
		mov	word ptr ds:7E0Eh, 0
		mov	word ptr ds:7E10h, 0
		mov	word ptr ds:7E14h, 0
		mov	byte ptr ds:796Bh, 1
		mov	dx, ds:0B24h
		add	dx, 80h	; 'Ä'
		cmp	dx, 800h
		jle	short loc_183E4
		mov	dx, 800h

loc_183E4:				; CODE XREF: sub_18351+8Ej
		mov	ds:0B24h, dx
		mov	ds:7961h, dx
		or	dx, dx
		js	short loc_183F5
		xor	ch, ch
		jmp	short loc_183F7
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_183F5:				; CODE XREF: sub_18351+9Dj
		mov	ch, 0FFh

loc_183F7:				; CODE XREF: sub_18351+A1j
		mov	ax, ds:0B20h
		mov	cl, ds:0B22h
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		mov	ds:795Fh, ax
		mov	dx, ds:0B1Eh
		mov	ds:795Dh, dx
		mov	byte ptr ds:796Bh, 1
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_18421
		call	sub_17D70
		jmp	short loc_18424
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18421:				; CODE XREF: sub_18351+C8j
		call	sub_17DFB

loc_18424:				; CODE XREF: sub_18351+CDj
					; sub_18351+66Ej
		mov	ch, ds:7963h
		test	ch, 40h
		jz	short loc_18485
		mov	ax, ds:7964h
		xor	cl, cl
		sub	ax, 15h
		mov	ds:795Fh, ax
		mov	ds:0B20h, ax
		mov	byte ptr ds:0B22h, 0
		mov	word ptr ds:7E08h, 1
		push	ax
		mov	ax, ds:7966h
		mov	ds:7E1Ah, ax
		pop	ax
		mov	byte ptr ds:796Bh, 0
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_18460
		call	sub_17D70
		jmp	short loc_18463
; ---------------------------------------------------------------------------
		align 2

loc_18460:				; CODE XREF: sub_18351+107j
		call	sub_17DFB

loc_18463:				; CODE XREF: sub_18351+10Cj
		mov	ch, ds:7963h
		test	ch, 20h
		jz	short loc_1846F
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_1846F:				; CODE XREF: sub_18351+119j
		and	ch, 6
		jz	short loc_1847B
		mov	ch, ds:7963h
		jmp	short loc_184A3
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1847B:				; CODE XREF: sub_18351+121j
		mov	ch, ds:7963h
		mov	dx, 100h
		jmp	loc_1857C
; ---------------------------------------------------------------------------

loc_18485:				; CODE XREF: sub_18351+DAj
		test	ch, 20h
		jz	short loc_1848D
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_1848D:				; CODE XREF: sub_18351+137j
		test	ch, 4
		jnz	short loc_184DA
		test	ch, 2
		jnz	short loc_1849A
		jmp	loc_186A8
; ---------------------------------------------------------------------------

loc_1849A:				; CODE XREF: sub_18351+144j
		mov	bp, cs:word_10F24
		or	bp, bp
		jns	short loc_184DA

loc_184A3:				; CODE XREF: sub_18351+127j
		cmp	word ptr ds:7E06h, 1
		jnz	short loc_184C8
		mov	bp, cs:word_10F1E
		and	bp, 1Fh
		cmp	bp, 0Ah
		jge	short loc_184C8
		mov	bp, cs:word_10F1E
		and	bp, 0F0h
		or	bp, 4
		mov	cs:word_10F1E, bp

loc_184C8:				; CODE XREF: sub_18351+157j
					; sub_18351+164j
		or	ax, 7
		inc	ax
		xor	cl, cl
		mov	word ptr ds:0B24h, 100h
		mov	dx, 100h
		jmp	loc_186A8
; ---------------------------------------------------------------------------

loc_184DA:				; CODE XREF: sub_18351+13Fj
					; sub_18351+150j
		test	ch, 10h
		jz	short loc_18524
		test	byte ptr ds:0B884h, 10h
		nop
		jnz	short loc_18524
		cmp	word ptr ds:7E04h, 1
		jz	short loc_18524
		cmp	word ptr ds:7E06h, 1
		jnz	short loc_184F8
		jmp	loc_186A8
; ---------------------------------------------------------------------------

loc_184F8:				; CODE XREF: sub_18351+1A2j
		test	byte ptr ds:0B884h, 4
		nop
		jz	short loc_18524
		mov	bx, ds:0B1Eh
		and	bx, 1Fh
		cmp	bx, 0Ah
		jge	short loc_18524
		mov	bx, ds:0B1Eh
		and	bx, 0F0h
		or	bx, 4
		mov	ds:0B1Eh, bx
		mov	word ptr ds:7E06h, 1
		jmp	loc_186A8
; ---------------------------------------------------------------------------

loc_18524:				; CODE XREF: sub_18351+18Cj
					; sub_18351+194j ...
		mov	word ptr ds:7E06h, 0
		mov	word ptr ds:7E08h, 1
		add	ax, 0Ch
		or	ax, 7
		sub	ax, 14h
		xor	cl, cl
		mov	ds:0B20h, ax
		mov	ds:0B22h, cl
		mov	dx, 100h
		test	ch, 1
		jz	short loc_1857C
		cmp	word ptr ds:8BECh, 3
		jnz	short loc_1857C
		mov	dx, ds:0B24h
		cmp	dx, 200h
		jl	short loc_18570
		neg	dx
		add	dx, 60h	; '`'
		mov	ds:0B24h, dx
		mov	dx, 0F781h
		mov	ax, 16h
		call	sub_1AECD
		jmp	short loc_185AB
; ---------------------------------------------------------------------------
		align 2

loc_18570:				; CODE XREF: sub_18351+208j
		mov	word ptr ds:0B24h, 100h
		mov	dx, 0FA00h
		jmp	short loc_185AB
; ---------------------------------------------------------------------------
		align 2

loc_1857C:				; CODE XREF: sub_18351+131j
					; sub_18351+1F7j ...
		mov	ds:0B24h, dx
		mov	dx, 0FA00h
		test	ch, 1
		jz	short loc_185AB
		cmp	word ptr ds:8BECh, 1
		jnz	short loc_18595
		mov	dx, 0FE00h
		jmp	short loc_185AB
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18595:				; CODE XREF: sub_18351+23Cj
		cmp	word ptr ds:8BECh, 5
		jnz	short loc_185AB
		mov	ax, 17h
		call	sub_1AECD
		mov	word ptr ds:0B24h, 0F781h
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185AB:				; CODE XREF: sub_18351+21Cj
					; sub_18351+228j ...
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_185C5
		cmp	word ptr ds:7E02h, 1
		jnz	short loc_185BC
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185BC:				; CODE XREF: sub_18351+266j
		mov	word ptr ds:7E04h, 0
		jmp	short loc_185F2
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_185C5:				; CODE XREF: sub_18351+25Fj
		test	byte ptr ds:0B884h, 10h
		nop
		jnz	short loc_18606
		test	byte ptr ds:0B884h, 8
		nop
		jz	short loc_185F2
		mov	ds:0B24h, dx
		test	ch, 10h
		jz	short loc_185E1
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185E1:				; CODE XREF: sub_18351+28Bj
		test	ch, 8
		jnz	short loc_185E9
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185E9:				; CODE XREF: sub_18351+293j
		mov	word ptr ds:7E06h, 1
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185F2:				; CODE XREF: sub_18351+271j
					; sub_18351+282j
		test	byte ptr ds:0B884h, 4
		nop
		jnz	short loc_185FD
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_185FD:				; CODE XREF: sub_18351+2A7j
		mov	word ptr ds:7E04h, 1
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_18606:				; CODE XREF: sub_18351+27Aj
		test	byte ptr ds:0B884h, 8
		nop
		jz	short loc_18611
		jmp	loc_189C2
; ---------------------------------------------------------------------------

loc_18611:				; CODE XREF: sub_18351+2BBj
		mov	word ptr ds:7E12h, 1
		test	byte ptr ds:0B884h, 4
		nop
		jz	short loc_18622
		jmp	loc_189FF
; ---------------------------------------------------------------------------

loc_18622:				; CODE XREF: sub_18351+2CCj
		push	ax
		mov	al, ds:0B884h
		cmp	al, ds:7ECAh
		jnz	short loc_18630
		pop	ax
		jmp	loc_189DE
; ---------------------------------------------------------------------------

loc_18630:				; CODE XREF: sub_18351+2D9j
		pop	ax
		test	byte ptr ds:0B884h, 2
		nop
		jz	short loc_1866A
		mov	word ptr ds:0B36h, 1
		mov	bx, ds:0B1Eh
		mov	ds:7ECEh, bx
		mov	ds:7ED0h, ax
		add	word ptr ds:7ED0h, 8
		mov	word ptr ds:7ECCh, 1
		mov	word ptr ds:7ED2h, 0Ah
		mov	al, ds:0B884h
		mov	ds:7ECAh, al
		mov	ax, 22h	; '"'
		call	sub_1AECD
		jmp	loc_189DE
; ---------------------------------------------------------------------------

loc_1866A:				; CODE XREF: sub_18351+2E6j
		test	byte ptr ds:0B884h, 1
		nop
		jz	short loc_186C1
		mov	word ptr ds:0B36h, 0
		mov	bx, ds:0B1Eh
		mov	ds:7ECEh, bx
		add	word ptr ds:7ECEh, 18h
		mov	ds:7ED0h, ax
		add	word ptr ds:7ED0h, 8
		mov	word ptr ds:7ECCh, 1
		mov	word ptr ds:7ED2h, 0Ah
		mov	al, ds:0B884h
		mov	ds:7ECAh, al
		mov	ax, 22h	; '"'
		call	sub_1AECD
		jmp	loc_189DE
; ---------------------------------------------------------------------------

loc_186A8:				; CODE XREF: sub_18351+146j
					; sub_18351+186j ...
		mov	ds:0B20h, ax
		mov	ds:0B22h, cl
		mov	al, ds:0B884h
		and	al, 0Ch
		jz	short loc_186C1
		test	ch, 8
		jz	short loc_186C1
		mov	word ptr ds:7E06h, 1

loc_186C1:				; CODE XREF: sub_18351+257j
					; sub_18351+268j ...
		cmp	word ptr ds:7E06h, 1
		jnz	short loc_186E2
		test	ch, 8
		jnz	short loc_186E2
		mov	word ptr ds:7E06h, 0
		mov	bp, cs:word_10F24
		or	bp, bp
		jns	short loc_186E2
		mov	word ptr ds:0B24h, 0FE00h

loc_186E2:				; CODE XREF: sub_18351+375j
					; sub_18351+37Aj ...
		test	byte ptr ds:0B884h, 2
		nop
		jz	short loc_1871E
		mov	word ptr ds:0B36h, 1
		mov	dx, 0FFFEh
		test	ch, 1
		jnz	short loc_186FB
		jmp	loc_1878A
; ---------------------------------------------------------------------------

loc_186FB:				; CODE XREF: sub_18351+3A5j
		cmp	word ptr ds:8BECh, 4
		jnz	short loc_1870E
		mov	dx, 0FFFFh
		mov	word ptr ds:7E0Ch, 1
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		align 2

loc_1870E:				; CODE XREF: sub_18351+3AFj
		cmp	word ptr ds:8BECh, 2
		jnz	short loc_1878A
		mov	word ptr ds:7E0Eh, 1
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		align 2

loc_1871E:				; CODE XREF: sub_18351+397j
		test	byte ptr ds:0B884h, 1
		nop
		jz	short loc_18757
		mov	word ptr ds:0B36h, 0
		mov	dx, 2
		test	ch, 1
		jz	short loc_1878A
		cmp	word ptr ds:8BECh, 4
		jnz	short loc_18747
		mov	dx, 1
		mov	word ptr ds:7E0Ch, 1
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18747:				; CODE XREF: sub_18351+3E8j
		cmp	word ptr ds:8BECh, 2
		jnz	short loc_1878A
		mov	word ptr ds:7E0Eh, 1
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18757:				; CODE XREF: sub_18351+3D3j
		xor	dx, dx
		test	ch, 1
		jnz	short loc_18767
		mov	word ptr ds:0B34h, 0FFFFh
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18767:				; CODE XREF: sub_18351+40Bj
		cmp	word ptr ds:8BECh, 2
		jz	short loc_18777
		mov	word ptr ds:0B34h, 0FFFFh
		jmp	short loc_1878A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18777:				; CODE XREF: sub_18351+41Bj
		mov	word ptr ds:7E0Ah, 1
		mov	dx, 2
		cmp	word ptr ds:0B36h, 0
		jz	short loc_1878A
		mov	dx, 0FFFEh

loc_1878A:				; CODE XREF: sub_18351+3A7j
					; sub_18351+3BAj ...
		add	dx, ds:7E1Ah
		mov	bx, ds:0B1Eh
		add	bx, dx
		or	dx, dx
		jz	short loc_187B9
		jns	short loc_187AA
		cmp	bx, 0
		jge	short loc_187B9
		xor	bx, bx
		mov	byte ptr ds:90C2h, 1
		nop
		jmp	short loc_187B9
; ---------------------------------------------------------------------------
		align 2

loc_187AA:				; CODE XREF: sub_18351+447j
		cmp	bx, 0E8h ; 'Ë'
		jl	short loc_187B9
		mov	bx, 0E8h ; 'Ë'
		mov	byte ptr ds:90C2h, 2
		nop

loc_187B9:				; CODE XREF: sub_18351+445j
					; sub_18351+44Cj ...
		mov	ax, ds:0B20h
		mov	ds:795Fh, ax
		mov	word ptr ds:7961h, 0FFFFh
		mov	ds:795Dh, bx
		mov	byte ptr ds:796Bh, 1
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_187DB
		call	sub_17D70
		jmp	short loc_187DE
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_187DB:				; CODE XREF: sub_18351+482j
					; sub_18351+92Fj
		call	sub_17DFB

loc_187DE:				; CODE XREF: sub_18351+487j
		mov	ch, ds:7963h
		test	ch, 20h
		jz	short loc_187EA
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_187EA:				; CODE XREF: sub_18351+494j
		test	ch, 2
		jz	short loc_18815
		or	dx, dx
		jns	short loc_18804
		add	bx, 0Ch
		and	bx, 0F8h
		sub	bx, 4
		mov	ds:0B1Eh, bx
		jmp	short loc_1882B
; ---------------------------------------------------------------------------
		align 2

loc_18804:				; CODE XREF: sub_18351+4A0j
		add	bx, 3
		and	bx, 0F8h
		sub	bx, 4
		mov	ds:0B1Eh, bx
		jmp	short loc_1882B
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18815:				; CODE XREF: sub_18351+49Cj
		mov	ds:0B1Eh, bx
		cmp	word ptr ds:7E06h, 1
		jnz	short loc_1882B
		test	ch, 8
		jnz	short loc_1882B
		mov	word ptr ds:7E06h, 0

loc_1882B:				; CODE XREF: sub_18351+4B0j
					; sub_18351+4C1j ...
		cmp	word ptr ds:7E00h, 1
		jnz	short loc_1883E
		mov	word ptr ds:0B26h, 0Ch
		call	sub_18C83
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_1883E:				; CODE XREF: sub_18351+4DFj
		cmp	word ptr ds:7E06h, 1
		jnz	short loc_18865
		mov	word ptr ds:0B26h, 1Ah
		mov	bx, ds:0B1Eh
		mov	ax, ds:0B20h
		xor	ax, bx
		and	ax, 4
		jnz	short loc_1885C
		jmp	loc_18A8F
; ---------------------------------------------------------------------------

loc_1885C:				; CODE XREF: sub_18351+506j
		mov	word ptr ds:0B26h, 1Bh
		jmp	loc_18A8F
; ---------------------------------------------------------------------------

loc_18865:				; CODE XREF: sub_18351+4F2j
		cmp	word ptr ds:7E08h, 1
		jz	short loc_18875
		mov	word ptr ds:0B26h, 8
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_18875:				; CODE XREF: sub_18351+519j
		test	word ptr ds:7ED2h, 0FFh
		jz	short loc_18886
		mov	word ptr ds:0B26h, 0Ah
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_18886:				; CODE XREF: sub_18351+52Aj
		cmp	word ptr ds:7E10h, 1
		jnz	short loc_18896
		mov	word ptr ds:0B26h, 9
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_18896:				; CODE XREF: sub_18351+53Aj
		cmp	word ptr ds:7E14h, 1
		jnz	short loc_188B6
		mov	word ptr ds:0B26h, 0
		cmp	word ptr ds:0B52h, 0
		jnz	short loc_188AD
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_188AD:				; CODE XREF: sub_18351+557j
		mov	word ptr ds:0B26h, 0Bh
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_188B6:				; CODE XREF: sub_18351+54Aj
		cmp	word ptr ds:7E0Ah, 1
		jnz	short loc_188D6
		mov	word ptr ds:0B26h, 6
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_188CD
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_188CD:				; CODE XREF: sub_18351+577j
		mov	word ptr ds:0B26h, 0
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_188D6:				; CODE XREF: sub_18351+56Aj
		test	byte ptr ds:7ECAh, 0FFh
		jz	short loc_188E6
		mov	word ptr ds:0B26h, 0
		jmp	loc_18975
; ---------------------------------------------------------------------------

loc_188E6:				; CODE XREF: sub_18351+58Aj
		mov	si, 7E2Ch
		mov	word ptr ds:0B26h, 6
		cmp	word ptr ds:7E04h, 1
		jz	short loc_188FF
		mov	si, 7E22h
		mov	word ptr ds:0B26h, 0

loc_188FF:				; CODE XREF: sub_18351+5A3j
		cmp	word ptr ds:0B34h, 0FFFFh
		jnz	short loc_1890F
		mov	word ptr ds:0B34h, 0
		jmp	short loc_18975
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1890F:				; CODE XREF: sub_18351+5B3j
		mov	ax, 1
		cmp	word ptr ds:7E0Ch, 1
		jz	short loc_18926
		mov	ax, 4
		cmp	word ptr ds:7E0Eh, 1
		jz	short loc_18926
		mov	ax, 2

loc_18926:				; CODE XREF: sub_18351+5C6j
					; sub_18351+5D0j
		add	ax, ds:0B34h
		cmp	ax, 28h	; '('
		jl	short loc_18932
		sub	ax, 28h	; '('

loc_18932:				; CODE XREF: sub_18351+5DCj
		mov	ds:0B34h, ax
		shr	ax, 1
		shr	ax, 1
		cmp	word ptr ds:7E04h, 1
		jnz	short loc_18950
		test	ax, 1
		jz	short loc_1896C
		push	ax
		mov	ax, 26h	; '&'
		call	sub_1AECD
		pop	ax
		jmp	short loc_1896C
; ---------------------------------------------------------------------------
		align 2

loc_18950:				; CODE XREF: sub_18351+5EDj
		cmp	ax, 2
		jz	short loc_18964
		cmp	ax, 5
		jz	short loc_18964
		cmp	ax, 7
		jz	short loc_18964
		cmp	ax, 0
		jnz	short loc_1896C

loc_18964:				; CODE XREF: sub_18351+602j
					; sub_18351+607j ...
		push	ax
		mov	ax, 25h	; '%'
		call	sub_1AECD
		pop	ax

loc_1896C:				; CODE XREF: sub_18351+5F2j
					; sub_18351+5FCj ...
		add	si, ax
		xor	ax, ax
		mov	al, [si]
		mov	ds:0B26h, ax

loc_18975:				; CODE XREF: sub_18351+4EAj
					; sub_18351+521j ...
		cmp	word ptr ds:0B36h, 0
		jnz	short loc_1897F
		jmp	loc_18A8F
; ---------------------------------------------------------------------------

loc_1897F:				; CODE XREF: sub_18351+629j
		add	word ptr ds:0B26h, 0Dh
		jmp	loc_18A8F
; ---------------------------------------------------------------------------

loc_18987:				; CODE XREF: sub_18351+56j
		mov	ax, ds:0B20h
		xor	cl, cl
		xor	dx, dx
		test	byte ptr ds:0B884h, 8
		nop
		jz	short loc_1899C
		mov	dx, 0FFFEh
		jmp	short loc_189A7
; ---------------------------------------------------------------------------
		align 2

loc_1899C:				; CODE XREF: sub_18351+643j
		test	byte ptr ds:0B884h, 4
		nop
		jz	short loc_189A7
		mov	dx, 2

loc_189A7:				; CODE XREF: sub_18351+648j
					; sub_18351+651j
		mov	ds:0B24h, dx
		add	ax, dx
		mov	ds:7961h, dx
		mov	ds:795Fh, ax
		mov	bx, ds:0B1Eh
		mov	ds:795Dh, bx
		call	sub_17DFB
		jmp	loc_18424
; ---------------------------------------------------------------------------

loc_189C2:				; CODE XREF: sub_18351+2BDj
		mov	word ptr ds:7E10h, 1
		cmp	word ptr ds:7E12h, 0
		jz	short loc_189DE
		test	word ptr ds:6610h, 0FFh
		jz	short loc_189DE
		cmp	word ptr ds:0B00h, 1
		jnz	short loc_189F9

loc_189DE:				; CODE XREF: sub_18351+2DCj
					; sub_18351+316j ...
		test	ch, 1
		jnz	short loc_189E6
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_189E6:				; CODE XREF: sub_18351+690j
		cmp	word ptr ds:8BECh, 2
		jz	short loc_189F0
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_189F0:				; CODE XREF: sub_18351+69Aj
		mov	word ptr ds:7E0Ah, 1
		jmp	loc_186C1
; ---------------------------------------------------------------------------

loc_189F9:				; CODE XREF: sub_18351+68Bj
		call	sub_18A9A
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_189FF:				; CODE XREF: sub_18351+2CEj
		mov	word ptr ds:7E14h, 1
		cmp	word ptr ds:0B38h, 1
		jge	short loc_189DE
		mov	ax, ds:6612h
		or	ax, ax
		jnz	short loc_18A16
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_18A16:				; CODE XREF: sub_18351+6C0j
		cmp	byte ptr ds:9804h, 1
		jz	short loc_18A21
		dec	word ptr ds:6612h

loc_18A21:				; CODE XREF: sub_18351+6CAj
		mov	word ptr ds:0B38h, 1
		mov	ax, ds:0B1Eh
		mov	ds:0B3Ah, ax
		mov	byte ptr ds:0B3Fh, 0
		mov	ax, ds:0B20h
		add	ax, 5
		mov	ds:0B3Ch, ax
		mov	byte ptr ds:0B3Eh, 0
		mov	word ptr ds:0B4Ah, 0
		mov	word ptr ds:0B50h, 0
		mov	word ptr ds:0B52h, 0
		mov	word ptr ds:0B40h, 100h
		mov	word ptr ds:0B4Eh, 7E36h
		test	byte ptr ds:0B884h, 2
		nop
		jz	short loc_18A75
		mov	word ptr ds:0B36h, 1
		mov	word ptr ds:0B52h, 0FE00h
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_18A75:				; CODE XREF: sub_18351+713j
		test	byte ptr ds:0B884h, 1
		nop
		jnz	short loc_18A80
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_18A80:				; CODE XREF: sub_18351+72Aj
		mov	word ptr ds:0B36h, 0
		mov	word ptr ds:0B52h, 200h
		jmp	loc_1882B
; ---------------------------------------------------------------------------

loc_18A8F:				; CODE XREF: sub_18351+508j
					; sub_18351+511j ...
		mov	ax, ds:0B20h
		sub	ax, ds:7DFEh
		mov	ds:6C43h, ax
		retn
sub_18351	endp


; =============== S U B	R O U T	I N E =======================================


sub_18A9A	proc near		; CODE XREF: sub_18351:loc_189F9p
					; sub_18C83+37j
		mov	ax, ds:6610h
		or	ax, ax
		jz	short locret_18AE9
		nop
		nop
		nop
		cmp	byte ptr ds:9804h, 1
		jz	short loc_18AB2
		nop
		nop
		nop
		dec	word ptr ds:6610h

loc_18AB2:				; CODE XREF: sub_18A9A+Fj
		mov	ax, 0Dh
		call	sub_1AECD
		mov	word ptr ds:0B00h, 1
		mov	ax, ds:0B20h
		add	ax, 7
		mov	ds:0B04h, ax
		cmp	word ptr ds:0B36h, 0
		jnz	short loc_18AEA
		nop
		nop
		nop
		mov	word ptr ds:0B1Ah, 8
		mov	ax, ds:0B1Eh
		mov	ds:0B02h, ax
		mov	word ptr ds:0B0Ah, 1Fh
		mov	word ptr ds:7E12h, 0

locret_18AE9:				; CODE XREF: sub_18A9A+5j
		retn
; ---------------------------------------------------------------------------

loc_18AEA:				; CODE XREF: sub_18A9A+32j
		mov	word ptr ds:0B1Ah, 0FFF8h
		mov	ax, ds:0B1Eh
		mov	ds:0B02h, ax
		mov	word ptr ds:0B0Ah, 1Eh
		mov	word ptr ds:7E12h, 0
		retn
sub_18A9A	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18B03:				; CODE XREF: sub_18351+4Cj
		mov	word ptr ds:7E08h, 0
		mov	word ptr ds:7E0Ah, 0
		mov	word ptr ds:7E0Ch, 0
		mov	word ptr ds:7E0Eh, 0
		mov	word ptr ds:7E10h, 0
		mov	word ptr ds:7E14h, 0
		mov	word ptr ds:7E06h, 0
		mov	dx, ds:0B24h
		add	dx, 40h	; '@'
		cmp	dx, 400h
		jle	short loc_18B40
		nop
		nop
		nop
		mov	dx, 400h

loc_18B40:				; CODE XREF: sub_18351+7E7j
		test	byte ptr ds:0B884h, 8
		nop
		jz	short loc_18B5E
		nop
		nop
		nop
		add	dx, 0FF40h
		cmp	dx, 0FC00h
		jge	short loc_18B79
		nop
		nop
		nop
		mov	dx, 0FC00h
		jmp	short loc_18B79
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		align 2
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18B5E:				; CODE XREF: sub_18351+7F5j
		test	byte ptr ds:0B884h, 4
		nop
		jz	short loc_18B79
		nop
		nop
		nop
		add	dx, 80h	; 'Ä'
		cmp	dx, 400h
		jle	short loc_18B79
		nop
		nop
		nop
		mov	dx, 400h

loc_18B79:				; CODE XREF: sub_18351+802j
					; sub_18351+80Aj ...
		mov	ds:0B24h, dx
		mov	ds:7961h, dx
		or	dx, dx
		js	short loc_18B8D
		nop
		nop
		nop
		xor	ch, ch
		jmp	short loc_18B8F
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18B8D:				; CODE XREF: sub_18351+832j
		mov	ch, 0FFh

loc_18B8F:				; CODE XREF: sub_18351+839j
		mov	ax, ds:0B20h
		mov	cl, ds:0B22h
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		mov	ds:795Fh, ax
		mov	dx, ds:0B1Eh
		mov	ds:795Dh, dx
		mov	byte ptr ds:796Bh, 1
		call	sub_17DFB
		mov	ch, ds:7963h
		test	ch, 20h
		jz	short loc_18BBE
		nop
		nop
		nop
		jmp	sub_168A8
; ---------------------------------------------------------------------------

loc_18BBE:				; CODE XREF: sub_18351+865j
		test	ch, 4
		jnz	short loc_18BEB
		nop
		nop
		nop
		test	ch, 2
		jz	short loc_18C00
		nop
		nop
		nop
		mov	bp, cs:word_10F24
		or	bp, bp
		jns	short loc_18BEB
		nop
		nop
		nop
		or	ax, 7
		inc	ax
		xor	dx, dx
		xor	cl, cl
		mov	word ptr ds:0B24h, 0
		jmp	short loc_18C00
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18BEB:				; CODE XREF: sub_18351+870j
					; sub_18351+884j
		add	ax, 0Ch
		or	ax, 7
		sub	ax, 14h
		xor	cl, cl
		xor	dx, dx
		xor	cl, cl
		mov	word ptr ds:0B24h, 0

loc_18C00:				; CODE XREF: sub_18351+878j
					; sub_18351+897j
		mov	ds:0B20h, ax
		mov	bp, 0
		test	byte ptr ds:0B884h, 2
		nop
		jz	short loc_18C1D
		nop
		nop
		nop
		mov	bp, 0FFFCh
		mov	word ptr ds:0B36h, 1
		jmp	short loc_18C31
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18C1D:				; CODE XREF: sub_18351+8BBj
		test	byte ptr ds:0B884h, 1
		nop
		jz	short loc_18C31
		nop
		nop
		nop
		mov	bp, 4
		mov	word ptr ds:0B36h, 0

loc_18C31:				; CODE XREF: sub_18351+8C9j
					; sub_18351+8D2j
		mov	bx, ds:0B1Eh
		add	bx, bp
		or	bp, bp
		jz	short loc_18C69
		nop
		nop
		nop
		jns	short loc_18C57
		nop
		nop
		nop
		cmp	bx, 0
		jge	short loc_18C69
		nop
		nop
		nop
		mov	bx, 0
		mov	byte ptr ds:90C2h, 1
		nop
		jmp	short loc_18C69
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18C57:				; CODE XREF: sub_18351+8EDj
		cmp	bx, 0E8h ; 'Ë'
		jl	short loc_18C69
		nop
		nop
		nop
		mov	bx, 0E8h ; 'Ë'
		mov	byte ptr ds:90C2h, 2
		nop

loc_18C69:				; CODE XREF: sub_18351+8E8j
					; sub_18351+8F5j ...
		mov	ax, ds:0B20h
		mov	ds:795Fh, ax
		mov	word ptr ds:7961h, 0FFFFh
		mov	byte ptr ds:796Bh, 1
		mov	ds:795Dh, bx
		mov	dx, bp
		jmp	loc_187DB
; END OF FUNCTION CHUNK	FOR sub_18351

; =============== S U B	R O U T	I N E =======================================


sub_18C83	proc near		; CODE XREF: sub_18351+4E7p
		test	byte ptr ds:0B884h, 10h
		nop
		jnz	short loc_18C95
		nop
		nop
		nop
		mov	word ptr ds:7E12h, 1
		retn
; ---------------------------------------------------------------------------

loc_18C95:				; CODE XREF: sub_18C83+6j
		mov	word ptr ds:7E10h, 1
		cmp	word ptr ds:7E12h, 0
		jz	short locret_18CBD
		nop
		nop
		nop
		test	word ptr ds:6610h, 0FFh
		jz	short locret_18CBD
		nop
		nop
		nop
		cmp	word ptr ds:0B00h, 1
		jz	short locret_18CBD
		nop
		nop
		nop
		jmp	sub_18A9A
; ---------------------------------------------------------------------------

locret_18CBD:				; CODE XREF: sub_18C83+1Dj
					; sub_18C83+28j ...
		retn
sub_18C83	endp


; =============== S U B	R O U T	I N E =======================================


sub_18CBE	proc near		; CODE XREF: sub_16B9B+58E3p
		cmp	word ptr ds:0B00h, 1
		jz	short loc_18CC9
		nop
		nop
		nop
		retn
; ---------------------------------------------------------------------------

loc_18CC9:				; CODE XREF: sub_18CBE+5j
		mov	dx, 4
		mov	ax, ds:0B1Ah
		or	ax, ax
		js	short loc_18CD9
		nop
		nop
		nop
		mov	dx, 14h

loc_18CD9:				; CODE XREF: sub_18CBE+13j
		add	ax, ds:0B02h
		add	dx, ax
		cmp	dx, 3
		jl	short loc_18D21
		nop
		nop
		nop
		cmp	dx, 0FCh ; '¸'
		jg	short loc_18D21
		nop
		nop
		nop
		mov	ds:795Dh, dx
		mov	cx, ds:0B04h
		mov	ds:795Fh, cx
		add	word ptr ds:795Fh, 4
		call	sub_18014
		push	ax
		call	sub_181C6
		pop	ax
		mov	ch, ds:7963h
		test	ch, 2
		jnz	short loc_18D21
		nop
		nop
		nop
		test	ch, 40h
		jnz	short loc_18D21
		nop
		nop
		nop
		mov	ds:0B02h, ax
		retn
; ---------------------------------------------------------------------------

loc_18D21:				; CODE XREF: sub_18CBE+24j
					; sub_18CBE+2Dj ...
		mov	word ptr ds:0B00h, 0
		retn
sub_18CBE	endp


; =============== S U B	R O U T	I N E =======================================


sub_18D28	proc near		; CODE XREF: sub_16B9B+58E6p
		mov	word ptr ds:7E1Eh, 0
		cmp	word ptr ds:0B38h, 1
		jge	short loc_18D39
		nop
		nop
		nop
		retn
; ---------------------------------------------------------------------------

loc_18D39:				; CODE XREF: sub_18D28+Bj
		jle	short loc_18D3E
		jmp	loc_18F57
; ---------------------------------------------------------------------------

loc_18D3E:				; CODE XREF: sub_18D28:loc_18D39j
		mov	si, 0B38h
		call	sub_1718E
		jnb	short loc_18D49
		jmp	loc_18F3A
; ---------------------------------------------------------------------------

loc_18D49:				; CODE XREF: sub_18D28+1Cj
		mov	dx, ds:0B40h
		add	dx, 80h	; 'Ä'
		cmp	dx, 800h
		jle	short loc_18D5A
		mov	dx, 800h

loc_18D5A:				; CODE XREF: sub_18D28+2Dj
		mov	ds:0B40h, dx
		mov	ds:7961h, dx
		or	dx, dx
		js	short loc_18D6B
		xor	ch, ch
		jmp	short loc_18D6D
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18D6B:				; CODE XREF: sub_18D28+3Cj
		mov	ch, 0FFh

loc_18D6D:				; CODE XREF: sub_18D28+40j
		mov	ax, ds:0B3Ch
		mov	cl, ds:0B3Eh
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		mov	dx, ax
		cmp	dx, 171h
		jle	short loc_18D85
		jmp	loc_18F91
; ---------------------------------------------------------------------------

loc_18D85:				; CODE XREF: sub_18D28+58j
		cmp	dx, 0
		jge	short loc_18D8D
		jmp	loc_18F91
; ---------------------------------------------------------------------------

loc_18D8D:				; CODE XREF: sub_18D28+60j
		mov	ds:795Fh, dx
		mov	ax, ds:0B3Ah
		mov	ds:795Dh, ax
		mov	byte ptr ds:796Bh, 1
		call	sub_1802D
		mov	ch, ds:7963h
		test	ch, 40h
		jz	short loc_18DEC
		xor	dx, dx
		mov	ax, ds:7964h
		xor	cl, cl
		sub	ax, 10h
		mov	ds:795Fh, ax
		mov	ds:0B3Ch, ax
		mov	byte ptr ds:0B3Eh, 0
		push	ax
		mov	ax, ds:7966h
		mov	ds:7E1Eh, ax
		pop	ax
		mov	byte ptr ds:796Bh, 0
		call	sub_1802D
		mov	ch, ds:7963h
		test	ch, 20h
		jnz	short loc_18DE4
		test	ch, 6
		jnz	short loc_18E08
		mov	word ptr ds:0B40h, 100h
		jmp	short loc_18E5A
; ---------------------------------------------------------------------------
		align 2

loc_18DE4:				; CODE XREF: sub_18D28+ACj
		test	ch, 20h
		jz	short loc_18DEC
		jmp	loc_18F3A
; ---------------------------------------------------------------------------

loc_18DEC:				; CODE XREF: sub_18D28+7Ej
					; sub_18D28+BFj
		test	ch, 4
		jnz	short loc_18E11
		test	ch, 2
		jnz	short loc_18E01
		mov	ds:0B3Ch, dx
		mov	ds:0B3Eh, cl
		jmp	short loc_18E5A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18E01:				; CODE XREF: sub_18D28+CCj
		mov	ax, ds:0B40h
		or	ax, ax
		jns	short loc_18E11

loc_18E08:				; CODE XREF: sub_18D28+B1j
		or	dx, 7
		inc	dx
		xor	cl, cl
		jmp	short loc_18E18
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18E11:				; CODE XREF: sub_18D28+C7j
					; sub_18D28+DEj
		dec	dx
		and	dx, 0FF8h
		xor	cl, cl

loc_18E18:				; CODE XREF: sub_18D28+E6j
		mov	ds:0B3Ch, dx
		mov	ds:0B3Eh, cl
		test	ch, 20h
		jz	short loc_18E28
		jmp	loc_18F3A
; ---------------------------------------------------------------------------

loc_18E28:				; CODE XREF: sub_18D28+FBj
		test	ch, 1
		jz	short loc_18E54
		cmp	word ptr ds:8BECh, 3
		jnz	short loc_18E47
		mov	ax, ds:0B40h
		cmp	ax, 200h
		jl	short loc_18E54
		neg	ax
		add	ax, 60h	; '`'
		mov	ds:0B40h, ax
		jmp	short loc_18E5A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18E47:				; CODE XREF: sub_18D28+10Aj
		cmp	word ptr ds:8BECh, 5
		jnz	short loc_18E54
		mov	ax, 0F781h
		jmp	short loc_18E57
; ---------------------------------------------------------------------------
		align 2

loc_18E54:				; CODE XREF: sub_18D28+103j
					; sub_18D28+112j ...
		mov	ax, 100h

loc_18E57:				; CODE XREF: sub_18D28+129j
		mov	ds:0B40h, ax

loc_18E5A:				; CODE XREF: sub_18D28+B9j
					; sub_18D28+D6j ...
		mov	dx, ds:0B52h
		mov	bx, 8
		test	ch, 1
		jz	short loc_18E7E
		cmp	word ptr ds:8BECh, 1
		jz	short loc_18E92
		cmp	word ptr ds:8BECh, 2
		jz	short loc_18EAD
		cmp	word ptr ds:8BECh, 4
		jnz	short loc_18E7E
		mov	bx, 10h

loc_18E7E:				; CODE XREF: sub_18D28+13Cj
					; sub_18D28+151j
		mov	bp, cs:word_10F52
		or	bp, bp
		js	short loc_18E8E
		sub	dx, bx
		jns	short loc_18E94
		jmp	short loc_18E92
; ---------------------------------------------------------------------------
		align 2

loc_18E8E:				; CODE XREF: sub_18D28+15Dj
		add	dx, bx
		js	short loc_18E94

loc_18E92:				; CODE XREF: sub_18D28+143j
					; sub_18D28+163j
		xor	dx, dx

loc_18E94:				; CODE XREF: sub_18D28+161j
					; sub_18D28+168j
		mov	ds:0B52h, dx
		mov	ax, ds:7E1Eh
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	dx, ax

loc_18EAD:				; CODE XREF: sub_18D28+14Aj
		mov	bx, ds:0B3Ah
		mov	cl, ds:0B3Fh
		mov	ax, ds:0B3Ch
		mov	ds:795Fh, ax
		mov	word ptr ds:7961h, 0FFFFh
		or	dx, dx
		js	short loc_18ECA
		xor	ch, ch
		jmp	short loc_18ECC
; ---------------------------------------------------------------------------
		align 2

loc_18ECA:				; CODE XREF: sub_18D28+19Bj
		mov	ch, 0FFh

loc_18ECC:				; CODE XREF: sub_18D28+19Fj
		mov	bx, ds:0B3Ah
		mov	cl, ds:0B3Fh
		add	cl, dl
		adc	bl, dh
		adc	bh, ch
		cmp	bx, 0E8h ; 'Ë'
		jl	short loc_18EEE
		xor	cl, cl
		mov	bx, 0E8h ; 'Ë'
		mov	word ptr ds:0B52h, 0
		jmp	short loc_18EFD
; ---------------------------------------------------------------------------
		align 2

loc_18EEE:				; CODE XREF: sub_18D28+1B6j
		cmp	bx, 0
		jge	short loc_18EFD
		xor	cl, cl
		xor	bx, bx
		mov	word ptr ds:0B52h, 0

loc_18EFD:				; CODE XREF: sub_18D28+1C3j
					; sub_18D28+1C9j
		mov	ds:795Dh, bx
		mov	byte ptr ds:796Bh, 1
		call	sub_1802D
		mov	ch, ds:7963h
		test	ch, 2
		jz	short loc_18F2C
		xor	cl, cl
		mov	bp, ds:0B52h
		add	bp, ds:7E1Eh
		or	bp, bp
		jns	short loc_18F27
		or	bx, 7
		inc	bx
		jmp	short loc_18F2C
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_18F27:				; CODE XREF: sub_18D28+1F6j
		dec	bx
		and	bx, 0F8h

loc_18F2C:				; CODE XREF: sub_18D28+1E8j
					; sub_18D28+1FCj
		mov	ds:0B3Ah, bx
		mov	ds:0B3Fh, cl
		test	ch, 20h
		jnz	short loc_18F3A
		retn
; ---------------------------------------------------------------------------

loc_18F3A:				; CODE XREF: sub_18D28+1Ej
					; sub_18D28+C1j ...
		mov	word ptr ds:0B38h, 2
		mov	word ptr ds:0B50h, 0
		mov	word ptr ds:0B4Eh, 7EB2h
		sub	word ptr ds:0B3Ch, 5
		mov	word ptr ds:0B4Ah, 0

loc_18F57:				; CODE XREF: sub_18D28+13j
		mov	si, 0B38h
		inc	word ptr ds:0B4Ah
		cmp	byte ptr ds:0B4Ah, 1
		jle	short loc_18F8C
		cmp	byte ptr ds:0B4Ah, 4
		jg	short loc_18F8C
		mov	dx, ds:0B3Ah
		sub	dx, 4
		jns	short loc_18F77
		xor	dx, dx

loc_18F77:				; CODE XREF: sub_18D28+24Bj
		xchg	dl, dh
		mov	bx, ds:0B3Ch
		sub	bx, 4
		mov	dl, 20h	; ' '
		mov	ah, 1Ch
		call	sub_16407
		jnb	short loc_18F8C
		call	sub_168A8

loc_18F8C:				; CODE XREF: sub_18D28+23Bj
					; sub_18D28+242j ...
		call	sub_1718E
		jnb	short locret_18F97

loc_18F91:				; CODE XREF: sub_18D28+5Aj
					; sub_18D28+62j
		mov	word ptr ds:0B38h, 0

locret_18F97:				; CODE XREF: sub_18D28+267j
		retn
sub_18D28	endp

; ---------------------------------------------------------------------------
		db 0, 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18F9A:				; CODE XREF: sub_18351+7j
		mov	dx, ds:0B24h
		add	dx, 80h	; 'Ä'
		mov	ds:0B24h, dx
		or	dx, dx
		js	short loc_18FAF
		xor	ch, ch
		jmp	short loc_18FB1
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_18351

loc_18FAF:				; CODE XREF: sub_18351+C57j
		mov	ch, 0FFh

loc_18FB1:				; CODE XREF: sub_18351+C5Bj
		mov	ax, ds:0B20h
		mov	cl, ds:0B22h
		add	cl, dl
		adc	al, dh
		adc	ah, ch
		cmp	ax, 110h
		jle	short loc_18FCA
		mov	word ptr ds:7E18h, 1
		retn
; ---------------------------------------------------------------------------

loc_18FCA:				; CODE XREF: sub_18351+C70j
		mov	ds:0B20h, ax
		mov	ds:0B22h, cl
		mov	al, ds:8B98h
		not	al
		mov	ds:8B98h, al
		and	al, 1
		add	ax, 1Ch
		mov	ds:0B26h, ax
		mov	ax, ds:7E1Ch
		add	ax, ds:0B1Eh
		mov	ds:0B1Eh, ax
		retn
; END OF FUNCTION CHUNK	FOR sub_18351
; ---------------------------------------------------------------------------
word_18FEC	dw 1			; DATA XREF: sub_199C8+125w
					; sub_1A592+39w ...
word_18FEE	dw 0			; DATA XREF: sub_199C8+128w
word_18FF0	dw 0			; DATA XREF: sub_10AE7+14r
					; sub_10AE7+9Br
		db 3 dup(0), 1,	74h, 33h, 1Bh dup(0), 90h, 200h	dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_19214	proc near		; CODE XREF: sub_10BC4+26p
					; sub_10C2E+26p ...
		mov	bx, ds:8BF6h
		mov	di, 563Ch
		mov	cx, 0Ah
		mov	dx, ds:8BF0h
		and	dx, 0FFF8h
		shr	dx, 1
		shr	dx, 1
		shr	dx, 1
		mov	ax, dx
		and	dx, 0FFFCh
		shr	dx, 1
		shr	dx, 1
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		add	bx, dx
		mov	ds:8BF8h, bx
		and	ax, 3
		mov	ds:8BFAh, ax
		or	ax, ax
		jz	short loc_19257
		mov	dx, 4
		sub	dx, ax
		push	cx
		call	sub_1926D
		pop	cx
		jmp	short loc_1925C
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_19257:				; CODE XREF: sub_19214+34j
					; sub_19214:loc_1925Cj
		push	cx
		call	sub_192AE
		pop	cx

loc_1925C:				; CODE XREF: sub_19214+40j
		loop	loc_19257
		mov	dx, ds:8BFAh
		or	dx, dx
		jz	short locret_1926C
		mov	ax, 0
		call	sub_1926D

locret_1926C:				; CODE XREF: sub_19214+50j
		retn
sub_19214	endp


; =============== S U B	R O U T	I N E =======================================


sub_1926D	proc near		; CODE XREF: sub_19214+3Cp
					; sub_19214+55p ...
		push	di
		push	dx
		shl	ax, 1
		shl	ax, 1
		mov	cx, 8

loc_19276:				; CODE XREF: sub_1926D+31j
		push	cx
		push	ax
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		shl	ax, 1
		mov	si, 8C14h
		add	si, ax
		pop	ax
		mov	si, [si]
		add	si, ax
		mov	bp, di
		push	dx

loc_1928C:				; CODE XREF: sub_1926D+28j
		mov	cx, 4
		rep movsb
		add	di, 1Ch
		dec	dx
		jnz	short loc_1928C
		pop	dx
		mov	di, bp
		add	di, 4
		pop	cx
		loop	loc_19276
		pop	dx
		pop	di
		dec	dx
		and	dx, 3
		inc	dx
		mov	cl, 5
		shl	dx, cl
		add	di, dx
		retn
sub_1926D	endp


; =============== S U B	R O U T	I N E =======================================


sub_192AE	proc near		; CODE XREF: sub_19214+44p
		mov	cx, 8

loc_192B1:				; CODE XREF: sub_192AE+26j
		mov	bp, cx
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		shl	ax, 1
		mov	si, 8C14h
		add	si, ax
		mov	si, [si]
		mov	dx, 4

loc_192C4:				; CODE XREF: sub_192AE+1Fj
		mov	cx, 4
		rep movsb
		add	di, 1Ch
		dec	dx
		jnz	short loc_192C4
		add	di, 0FF84h
		mov	cx, bp
		loop	loc_192B1
		add	di, 60h	; '`'
		retn
sub_192AE	endp


; =============== S U B	R O U T	I N E =======================================


sub_192DA	proc near		; CODE XREF: sub_170E6+34p
		mov	di, 563Ch
		mov	si, 565Ch
		mov	cx, 270h
		rep movsw
		mov	ax, ds:8BFAh
		mov	dx, 1
		mov	bx, ds:8BF8h
		add	bx, 50h	; 'P'
		mov	di, 5B1Ch
		call	sub_1926D
		add	word ptr ds:8BFAh, 1
		and	word ptr ds:8BFAh, 3
		jnz	short locret_19309
		add	word ptr ds:8BF8h, 8

locret_19309:				; CODE XREF: sub_192DA+28j
		retn
sub_192DA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1930A	proc near		; CODE XREF: sub_1709D+31p
		mov	si, 5B1Ah
		mov	di, 5B3Ah
		std
		mov	cx, 270h
		rep movsw
		cld
		mov	bx, ds:8BF8h
		dec	word ptr ds:8BFAh
		and	word ptr ds:8BFAh, 3
		cmp	word ptr ds:8BFAh, 3
		jnz	short loc_19332
		sub	bx, 8
		mov	ds:8BF8h, bx

loc_19332:				; CODE XREF: sub_1930A+1Fj
		mov	di, 563Ch
		mov	ax, ds:8BFAh
		mov	dx, 1
		call	sub_1926D
		retn
sub_1930A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1933F	proc near		; CODE XREF: sub_196DD+4p
		mov	ax, 3C74h
		mov	di, 8C14h
		mov	dx, 10h
		mov	cx, 100h

loc_1934B:				; CODE XREF: sub_1933F+Fj
		stosw
		add	ax, dx
		loop	loc_1934B
		retn
sub_1933F	endp


; =============== S U B	R O U T	I N E =======================================


sub_19351	proc near		; CODE XREF: sub_10BC4+23p
					; sub_10C2E+23p ...
		mov	word ptr ds:0B00h, 0
		mov	word ptr ds:0B38h, 0
		push	ax
		mov	ax, ds:0B1Eh
		mov	ds:8C00h, ax
		mov	ax, ds:0B20h
		mov	ds:8C02h, ax
		mov	ax, ds:0B24h
		mov	ds:8C08h, ax
		mov	al, ds:0B22h
		mov	ds:8C12h, al
		mov	ax, ds:7E02h
		mov	ds:8C0Ah, ax
		mov	ax, ds:7E04h
		mov	ds:8C0Ch, ax
		mov	ax, ds:0B36h
		mov	ds:8C0Eh, ax
		mov	ax, ds:7E00h
		mov	ds:8C10h, ax
		pop	ax
		mov	ds:8C04h, ax
		mov	ds:8C06h, dx
		mov	si, 4C74h
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		add	si, ax
		xor	ax, ax
		add	ax, [si]
		inc	si
		inc	si
		xchg	al, ah
		add	ax, 3374h
		mov	ds:8BF6h, ax
		mov	word ptr ds:8BF2h, 0
		mov	ax, [si]
		inc	si
		inc	si
		xchg	al, ah
		shl	ax, 1
		shl	ax, 1
		shl	ax, 1
		mov	ds:8BF4h, ax
		mov	ax, [si]
		inc	si
		inc	si
		xchg	al, ah
		add	ax, 4C74h
		mov	ds:8BFEh, ax
		mov	ax, [si]
		inc	si
		inc	si
		xchg	al, ah
		add	ax, 4C74h
		mov	ds:8BFCh, ax
		mov	ds:8BF0h, dx
		call	sub_19577
		retn
sub_19351	endp

; ---------------------------------------------------------------------------
		db 0EEh, 8Fh, 0F8h, 8Fh, 2, 90h, 0Ch, 90h, 16h,	90h, 2 dup(0)
		db 0E3h, 9 dup(0), 0CBh, 9 dup(0), 0ABh, 0, 1, 0, 80h
		db 4, 4	dup(0),	0CBh, 9	dup(0),	0ABh, 4	dup(0),	3, 2 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_19420	proc near		; CODE XREF: sub_16B9B+588Fp
		mov	si, 8FE4h
		mov	ax, ds:8BECh
		dec	ax
		shl	ax, 1
		add	si, ax
		mov	si, [si]
		mov	ax, [si]
		mov	ds:0B1Eh, ax
		mov	ax, [si+2]
		mov	ds:0B20h, ax
		mov	ax, [si+4]
		mov	dx, [si+6]
		mov	cx, [si+8]
		mov	ds:0B36h, cx
		call	sub_19351
		call	sub_19214
		call	sub_19577
		call	sub_17047
		call	sub_15FE4
		mov	byte ptr ds:5B3Eh, 1
		call	sub_15F40
		mov	byte ptr ds:5B3Eh, 0
		retn
sub_19420	endp


; =============== S U B	R O U T	I N E =======================================


sub_19462	proc near		; CODE XREF: sub_16B9B+58BDp
		mov	ax, ds:8C00h
		mov	ds:0B1Eh, ax
		mov	ax, ds:8C02h
		mov	ds:0B20h, ax
		mov	ax, ds:8C08h
		mov	ds:0B24h, ax
		mov	al, ds:8C12h
		mov	ds:0B22h, al
		mov	ax, ds:8C0Ah
		mov	ds:7E02h, ax
		mov	ax, ds:8C0Ch
		mov	ds:7E04h, ax
		mov	ax, ds:8C0Eh
		mov	ds:0B36h, ax
		mov	ax, ds:8C10h
		mov	ds:7E00h, ax
		mov	ax, ds:8C04h
		mov	dx, ds:8C06h
		call	sub_19351
		call	sub_19214
		call	sub_19577
		call	sub_17047
		mov	word ptr ds:6612h, 6
		mov	word ptr ds:6610h, 6
		call	sub_15FE4
		mov	byte ptr ds:5B3Eh, 1
		call	sub_15F40
		mov	byte ptr ds:5B3Eh, 0
		retn
sub_19462	endp

; ---------------------------------------------------------------------------
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_194C4	proc near		; CODE XREF: sub_16B9B+5903p

; FUNCTION CHUNK AT 9250 SIZE 0000005E BYTES
; FUNCTION CHUNK AT 9B12 SIZE 0000004D BYTES

		mov	al, ds:90C2h
		or	al, al
		jnz	short loc_194CC
		retn
; ---------------------------------------------------------------------------

loc_194CC:				; CODE XREF: sub_194C4+5j
		mov	si, ds:8BFEh

loc_194D0:				; CODE XREF: sub_194C4+35j
		mov	al, [si]
		or	al, al
		jz	short locret_19552
		and	al, 3
		cmp	al, ds:90C2h
		jnz	short loc_194F6
		mov	ax, ds:8BF0h
		and	ax, 0FFF8h
		add	ax, ds:0B20h
		add	ax, 14h
		shr	ax, 1
		shr	ax, 1
		shr	ax, 1
		cmp	al, [si+1]
		jz	short loc_194FB

loc_194F6:				; CODE XREF: sub_194C4+18j
		add	si, 4
		jmp	short loc_194D0
; ---------------------------------------------------------------------------

loc_194FB:				; CODE XREF: sub_194C4+30j
		mov	al, [si]
		mov	ah, al
		and	ah, 90h
		cmp	ah, 90h	; 'ê'
		jnz	short loc_1950A
		jmp	loc_19650
; ---------------------------------------------------------------------------

loc_1950A:				; CODE XREF: sub_194C4+41j
		test	al, 40h
		jz	short loc_19514
		mov	word ptr ds:762Dh, 1

loc_19514:				; CODE XREF: sub_194C4+48j
		test	al, 20h
		jz	short loc_19521
		mov	word ptr ds:7E00h, 1
		jmp	short loc_19527
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_19521:				; CODE XREF: sub_194C4+52j
		mov	word ptr ds:7E00h, 0

loc_19527:				; CODE XREF: sub_194C4+5Aj
		xor	cx, cx
		mov	al, [si+2]
		xor	dx, dx
		mov	dl, [si+3]
		shl	dx, 1
		shl	dx, 1
		shl	dx, 1
		mov	cx, ds:0B20h
		add	cx, 14h
		and	cx, 0FFF8h
		sub	dx, cx
		mov	cx, ds:8BF0h
		and	cx, 7
		and	dx, 0FFF8h
		or	dx, cx
		call	sub_19553

locret_19552:				; CODE XREF: sub_194C4+10j
		retn
sub_194C4	endp


; =============== S U B	R O U T	I N E =======================================


sub_19553	proc near		; CODE XREF: sub_194C4+8Bp
		mov	bx, ds:0B1Eh
		or	bx, bx
		jnz	short loc_19568
		mov	word ptr ds:0B1Eh, 0E8h	; 'Ë'
		call	word ptr ds:20h
		jmp	short locret_19572
; ---------------------------------------------------------------------------
		align 2

loc_19568:				; CODE XREF: sub_19553+6j
		mov	word ptr ds:0B1Eh, 0
		call	word ptr ds:22h

locret_19572:				; CODE XREF: sub_19553+12j
		retn
sub_19553	endp

; ---------------------------------------------------------------------------
word_19573	dw 0			; DATA XREF: sub_19593+6r
		db 2 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_19577	proc near		; CODE XREF: sub_19351+8Fp
					; sub_19420+2Bp ...
		mov	word ptr ds:9173h, 0
		mov	si, 54FAh
		mov	ds:9175h, si

loc_19584:				; CODE XREF: sub_19577+19j
		mov	al, [si]
		or	al, al
		js	short locret_19592
		mov	byte ptr [si], 0
		add	si, 8
		jmp	short loc_19584
; ---------------------------------------------------------------------------

locret_19592:				; CODE XREF: sub_19577+11j
		retn
sub_19577	endp


; =============== S U B	R O U T	I N E =======================================


sub_19593	proc near		; CODE XREF: sub_1088D+1Ap
		push	ds
		push	es
		push	di
		push	ax
		push	cs
		pop	ds
		assume ds:seg001
		cmp	word_19573, 28h	; '('
		jl	short loc_195A5
		pop	ax
		pop	di
		pop	es
		pop	ds
		assume ds:nothing
		retn
; ---------------------------------------------------------------------------

loc_195A5:				; CODE XREF: sub_19593+Bj
		xor	dx, dx
		mov	dl, al
		sub	dx, 0F8h ; '¯'
		add	dx, dx
		add	dx, dx
		xor	ax, ax
		call	sub_19B40
		mov	al, ds:973Fh
		cbw
		and	al, 3
		add	dx, ax
		xor	ax, ax
		mov	si, 54FAh

loc_195C3:				; CODE XREF: sub_19593+55j
		mov	al, [si]
		or	al, al
		js	short loc_195E0
		jnz	short loc_195E5
		mov	byte ptr [si], 1
		inc	si
		mov	[si], dl
		inc	si
		mov	[si], bx
		inc	si
		inc	si
		mov	[si], di
		inc	si
		inc	si
		mov	[si], bp
		inc	word ptr ds:9173h

loc_195E0:				; CODE XREF: sub_19593+34j
		pop	ax
		pop	di
		pop	es
		pop	ds
		retn
; ---------------------------------------------------------------------------

loc_195E5:				; CODE XREF: sub_19593+36j
		add	si, 8
		jmp	short loc_195C3
sub_19593	endp


; =============== S U B	R O U T	I N E =======================================


sub_195EA	proc near		; CODE XREF: sub_1709D+2Ep
		cmp	word ptr ds:9173h, 0
		jnz	short loc_195F2
		retn
; ---------------------------------------------------------------------------

loc_195F2:				; CODE XREF: sub_195EA+5j
		mov	si, 54FAh

loc_195F5:				; CODE XREF: sub_195EA+28j
					; sub_195EA+30j
		mov	al, [si]
		or	al, al
		jz	short loc_19617
		js	short locret_1961C
		mov	ax, [si+2]
		add	ax, 20h	; ' '
		cmp	ax, 5A7Ch
		jl	short loc_19614
		mov	byte ptr [si], 0
		dec	word ptr ds:9173h
		add	si, 8
		jmp	short loc_195F5
; ---------------------------------------------------------------------------

loc_19614:				; CODE XREF: sub_195EA+1Cj
		mov	[si+2],	ax

loc_19617:				; CODE XREF: sub_195EA+Fj
		add	si, 8
		jmp	short loc_195F5
; ---------------------------------------------------------------------------

locret_1961C:				; CODE XREF: sub_195EA+11j
		retn
sub_195EA	endp


; =============== S U B	R O U T	I N E =======================================


sub_1961D	proc near		; CODE XREF: sub_170E6+31p
		cmp	word ptr ds:9173h, 0
		jnz	short loc_19625
		retn
; ---------------------------------------------------------------------------

loc_19625:				; CODE XREF: sub_1961D+5j
		mov	si, 54FAh

loc_19628:				; CODE XREF: sub_1961D+28j
					; sub_1961D+30j
		mov	al, [si]
		or	al, al
		jz	short loc_1964A
		js	short locret_1964F
		mov	ax, [si+2]
		sub	ax, 20h	; ' '
		cmp	ax, 573Ch
		jge	short loc_19647
		mov	byte ptr [si], 0
		dec	word ptr ds:9173h
		add	si, 8
		jmp	short loc_19628
; ---------------------------------------------------------------------------

loc_19647:				; CODE XREF: sub_1961D+1Cj
		mov	[si+2],	ax

loc_1964A:				; CODE XREF: sub_1961D+Fj
		add	si, 8
		jmp	short loc_19628
; ---------------------------------------------------------------------------

locret_1964F:				; CODE XREF: sub_1961D+11j
		retn
sub_1961D	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_194C4

loc_19650:				; CODE XREF: sub_194C4+43j
		call	word ptr ds:3Ch
		mov	ax, ds:8BECh
		cmp	ax, 4
		jnz	short loc_19687
		cmp	word ptr ds:95C4h, 1
		jz	short loc_19673
		cmp	word ptr ds:8BEEh, 1
		jz	short loc_19673
		mov	ax, 1
		call	sub_1A257
		jmp	loc_19F12
; ---------------------------------------------------------------------------

loc_19673:				; CODE XREF: sub_194C4+19Dj
					; sub_194C4+1A4j
		inc	word ptr ds:8BECh
		cmp	word ptr ds:8BECh, 5
		jnz	short loc_19684
		mov	word ptr ds:95C4h, 1

loc_19684:				; CODE XREF: sub_194C4+1B8j
		jmp	loc_1C3B9
; ---------------------------------------------------------------------------

loc_19687:				; CODE XREF: sub_194C4+196j
		cmp	word ptr ds:8BECh, 5
		jnz	short loc_196A7
		cmp	word ptr ds:8BEEh, 1
		jnz	short loc_19698
		jmp	loc_19F37
; ---------------------------------------------------------------------------

loc_19698:				; CODE XREF: sub_194C4+1CFj
		mov	word ptr ds:95C4h, 1
		mov	ax, 1
		call	sub_1A257
		jmp	loc_19F12
; ---------------------------------------------------------------------------

loc_196A7:				; CODE XREF: sub_194C4+1C8j
		inc	word ptr ds:8BECh
		jmp	loc_1C3B9
; END OF FUNCTION CHUNK	FOR sub_194C4
; ---------------------------------------------------------------------------
		jmp	loc_19F12
; ---------------------------------------------------------------------------
		db 4Dh,	65h, 6Dh, 6Fh, 72h, 79h, 20h, 41h, 2 dup(6Ch)
		db 6Fh,	63h, 61h, 74h, 69h, 6Fh, 6Eh, 20h, 65h,	2 dup(72h)
		db 6Fh,	72h, 3Ah, 20h, 43h, 61h, 2 dup(6Eh), 6Fh, 74h
		db 20h,	72h, 75h, 6Eh, 20h, 52h, 49h, 43h, 4Bh,	32h, 0Ah
		db 0Dh,	24h

; =============== S U B	R O U T	I N E =======================================


sub_196DD	proc near		; CODE XREF: start:loc_1C31Fp
		call	word ptr ds:0
		call	sub_1933F
		call	word ptr ds:10h
		call	word ptr ds:18h
		call	sub_1ADCB
		call	sub_1BC92
		retn
sub_196DD	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_16B9B

loc_196F3:				; CODE XREF: sub_1A69D+83j
					; sub_16B9B+591Fj
		cli
		call	sub_1AE03
		call	sub_1BCB7
		sti
		mov	al, ds:6Ah
		xor	ah, ah
		int	10h		; - VIDEO - SET	VIDEO MODE
					; AL = mode
		cmp	word ptr ds:0AB2Bh, 1
		jz	short loc_1970F
		call	sub_1ADB0
		jmp	short loc_1972D
; END OF FUNCTION CHUNK	FOR sub_16B9B
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_16B9B

loc_1970F:				; CODE XREF: sub_16B9B+2B6Cj
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 0
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax

loc_1972D:				; CODE XREF: sub_16B9B+2B71j
		mov	ah, 4Ch
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
; END OF FUNCTION CHUNK	FOR sub_16B9B	; AL = exit code
; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_10533

loc_19731:				; CODE XREF: sub_10533+9j
					; sub_10533+18j ...
		mov	ah, 9
		mov	dx, seg	seg001
		mov	ds, dx
		assume ds:seg001
		mov	dx, 92B1h
		int	21h		; DOS -	PRINT STRING
					; DS:DX	-> string terminated by	"$"
		mov	ah, 4Ch
		int	21h		; DOS -	2+ - QUIT WITH EXIT CODE (EXIT)
; END OF FUNCTION CHUNK	FOR sub_10533	; AL = exit code
; ---------------------------------------------------------------------------
		db 1, 2, 7, 0Ah, 0Bh, 0Fh, 10h,	2 dup(0), 1, 12h, 17h
		db 12h,	1Ch, 1Dh, 0Ah, 0Bh, 1, 27h, 1, 2, 17h, 12h, 2Ch
		db 2Dh,	2Eh, 2Fh, 2 dup(0), 2 dup(7), 0FFh, 3, 4, 8, 0Ch
		db 0, 3, 11h, 2	dup(0),	13h, 14h, 18h, 19h, 1Eh, 1Fh, 0Ch
		db 21h,	28h, 29h, 3, 4,	13h, 14h, 13h, 14h, 30h, 31h, 2	dup(0)
		db 2 dup(8), 0FFh, 5, 6, 9, 0Dh, 0Eh, 5, 6, 2 dup(0), 15h
		db 16h,	1Ah, 1Bh, 5, 20h, 0Dh, 22h, 15h, 2Ah, 5, 6, 2Bh
		db 16h,	2Bh, 16h, 32h, 16h, 2 dup(0), 2	dup(9),	0FFh, 0Ah
		db 0Bh,	0Ah, 12h, 1Ch, 1Dh, 0Ah, 0Bh, 1, 2, 17h, 12h, 33h
		db 34h,	2Ch, 2Dh, 2Ch, 0, 17h, 12h, 33h, 34h, 7, 0Ah, 12h
		db 1Ch,	1Dh, 2Eh, 2Fh, 3Ah, 3Bh, 0FFh, 0Ch, 0, 0Ch, 14h
		db 1Eh,	1Fh, 0Ch, 21h, 3, 4, 18h, 19h, 35h, 36h, 13h, 14h
		db 13h,	0, 18h,	19h, 35h, 36h, 8, 0Ch, 14h, 1Eh, 1Fh, 30h
		db 31h,	3Ch, 3Dh, 0FFh,	0Dh, 0Eh, 0Dh, 16h, 5, 20h, 0Dh
		db 22h,	5, 6, 1Ah, 1Bh,	37h, 38h, 2Bh, 16h, 15h, 2Ah, 1Ah
		db 1Bh,	37h, 38h, 9, 0Dh, 16h, 5, 20h, 32h, 16h, 3Eh, 3Fh
		db 0FFh, 39h, 1Dh, 17h,	12h, 2Ch, 0, 2Ch, 3 dup(0), 0Ah
		db 12h,	1, 27h,	2 dup(0), 1, 27h, 17h, 12h, 1Ch, 23h, 1
		db 27h,	7 dup(0), 0FFh,	18h, 19h, 18h, 19h, 13h, 0, 13h
		db 3 dup(0), 0Ch, 14h, 28h, 29h, 2 dup(0), 28h,	29h, 18h
		db 19h,	24h, 25h, 28h, 29h, 7 dup(0), 0FFh, 5, 26h, 1Ah
		db 1Bh,	15h, 2Ah, 15h, 2Ah, 2 dup(0), 0Dh, 16h,	1Ah, 3 dup(0)
		db 1Ah,	0, 1Ah,	1Bh, 5,	26h, 15h, 2Ah, 7 dup(0), 0FFh
		db 2Eh,	2Fh, 1,	27h, 2Ch, 0, 1,	27h, 0Ah, 0Bh, 33h, 34h
		db 2 dup(0), 2Ch, 0, 1,	27h, 2Ch, 2Dh, 1, 27h, 2Ch, 8 dup(0)
		db 0FFh, 30h, 31h, 28h,	29h, 13h, 0, 28h, 29h, 0Ch, 0
		db 35h,	36h, 2 dup(0), 13h, 0, 28h, 29h, 40h, 41h, 28h
		db 29h,	13h, 8 dup(0), 0FFh, 32h, 16h, 15h, 2Ah, 15h, 2Ah
		db 15h,	2Ah, 0Dh, 0Eh, 37h, 38h, 2 dup(0), 15h,	2Ah, 15h
		db 2Ah,	42h, 43h, 15h, 2Ah, 15h, 2Ah, 7	dup(0),	0FFh, 2Ch
		db 0, 0Ah, 12h,	17h, 12h, 1, 12h, 7, 1Ch, 1Dh, 0Ah, 0Bh
		db 12h dup(0), 0FFh, 13h, 0, 0Ch, 14h, 18h, 19h, 13h, 14h
		db 8, 1Eh, 1Fh,	0Ch, 21h, 12h dup(0), 0FFh, 15h, 2Ah, 0Dh
		db 16h,	1Ah, 1Bh, 15h, 16h, 9, 5, 20h, 0Dh, 22h, 3Eh, 3Fh
		db 3Eh,	3Fh, 3Eh, 3Fh, 0Ch dup(0), 0FFh, 0, 2 dup(6), 1
		db 20h,	48h, 59h, 44h, 45h, 20h, 50h, 41h, 52h,	4Bh, 2Ch
		db 20h,	4Ch, 4Fh, 4Eh, 44h, 4Fh, 4Eh, 0FFh, 6, 9, 2, 20h
		db 54h,	48h, 45h, 20h, 49h, 43h, 45h, 20h, 43h,	41h, 56h
		db 45h,	52h, 4Eh, 53h, 20h, 4Fh, 46h, 20h, 46h,	52h, 2 dup(45h)
		db 5Ah,	49h, 41h, 0FFh,	6, 0Ch,	3, 20h,	54h, 48h, 45h
		db 20h,	46h, 4Fh, 52h, 45h, 53h, 54h, 53h, 20h,	4Fh, 46h
		db 20h,	56h, 45h, 47h, 45h, 54h, 41h, 42h, 4Ch,	49h, 41h
		db 0FFh, 6, 0Fh, 4, 20h, 54h, 48h, 45h,	20h, 41h, 54h
		db 4Fh,	4Dh, 49h, 43h, 20h, 4Dh, 55h, 44h, 20h,	4Dh, 49h
		db 4Eh,	45h, 53h, 0FFh,	6, 12h,	5, 20h,	54h, 48h, 45h
		db 20h,	46h, 41h, 54h, 20h, 47h, 55h, 59h, 27h,	53h, 20h
		db 48h,	45h, 41h, 44h, 51h, 55h, 41h, 52h, 54h,	45h, 52h
		db 53h,	0FFh
byte_199AD	db 1			; DATA XREF: sub_199C8w sub_199C8+B2w	...
; ---------------------------------------------------------------------------
		inc	word ptr [bx+di]
		add	al, [bp+di]
		add	al, 5
		jmp	word ptr [bp+si]
; ---------------------------------------------------------------------------
aX8xwxux	db 'ï8ïWïuï',0
		db 0, 8Eh, 95h,	2 dup(0)
byte_199C3	db 0			; DATA XREF: sub_199C8:loc_19A55r
					; sub_199C8+93w
word_199C4	dw 0			; DATA XREF: sub_199C8+3Br
					; sub_199C8+70r ...
		align 4

; =============== S U B	R O U T	I N E =======================================


sub_199C8	proc near		; CODE XREF: sub_16B9B+581Bp
		mov	byte_199AD, 1
		call	off_10426
		mov	ax, 706h
		mov	word_16DF0, ax
		mov	word_16DF2, ax
		call	sub_16E39
		mov	ax, 8
		mov	si, 9461h
		call	off_10446
		mov	ax, 108h
		mov	si, 9481h
		call	off_10446
		mov	ax, 208h
		mov	si, 94A1h
		call	off_10446
		mov	bx, 95B5h
		call	sub_19C43
		push	cs
		pop	ds
		cmp	word_199C4, 1
		jnz	short loc_19A10
		mov	bx, 95BFh
		call	sub_19C43

loc_19A10:				; CODE XREF: sub_199C8+40j
		call	off_1041C
		mov	ax, 8
		mov	si, 9461h
		call	off_10446
		mov	ax, 108h
		mov	si, 9481h
		call	off_10446
		mov	ax, 208h
		mov	si, 94A1h
		call	off_10446
		mov	bx, 95B5h
		call	sub_19C43
		cmp	word_199C4, 1
		jnz	short loc_19A45
		mov	bx, 95BFh
		call	sub_19C43

loc_19A45:				; CODE XREF: sub_199C8+75j
		mov	byte_19BDA, 1
		nop

loc_19A4B:				; CODE XREF: sub_199C8+91j
					; sub_199C8+BAj ...
		call	sub_19BDC
		test	al, 10h
		jz	short loc_19A55
		jmp	loc_19AE0
; ---------------------------------------------------------------------------

loc_19A55:				; CODE XREF: sub_199C8+88j
		cmp	al, byte_199C3
		jz	short loc_19A4B
		mov	byte_199C3, al
		test	al, 8
		jz	short loc_19A9E
		mov	dx, word_16DF0
		dec	dh
		dec	dh
		dec	dh
		cmp	word_199C4, 1
		jz	short loc_19A84
		cmp	dh, 4
		jnz	short loc_19A95
		mov	dh, 10h
		mov	byte_199AD, 4
		call	sub_16E66
		jmp	short loc_19A4B
; ---------------------------------------------------------------------------

loc_19A84:				; CODE XREF: sub_199C8+A9j
		cmp	dh, 4
		jnz	short loc_19A95
		mov	dh, 13h
		mov	byte_199AD, 5
		call	sub_16E66
		jmp	short loc_19A4B
; ---------------------------------------------------------------------------

loc_19A95:				; CODE XREF: sub_199C8+AEj
					; sub_199C8+BFj
		dec	byte_199AD
		call	sub_16E66
		jmp	short loc_19A4B
; ---------------------------------------------------------------------------

loc_19A9E:				; CODE XREF: sub_199C8+98j
		test	al, 4
		jz	short loc_19A4B
		mov	dx, word_16DF0
		inc	dh
		inc	dh
		inc	dh
		cmp	word_199C4, 1
		jz	short loc_19AC4
		cmp	dh, 13h
		jnz	short loc_19AD6
		mov	dh, 7
		mov	byte_199AD, 1
		call	sub_16E66
		jmp	short loc_19A4B
; ---------------------------------------------------------------------------

loc_19AC4:				; CODE XREF: sub_199C8+E9j
		cmp	dh, 16h
		jnz	short loc_19AD6
		mov	dh, 7
		mov	byte_199AD, 1
		call	sub_16E66
		jmp	loc_19A4B
; ---------------------------------------------------------------------------

loc_19AD6:				; CODE XREF: sub_199C8+EEj
					; sub_199C8+FFj
		inc	byte_199AD
		call	sub_16E66
		jmp	loc_19A4B
; ---------------------------------------------------------------------------

loc_19AE0:				; CODE XREF: sub_199C8+8Aj
		mov	al, byte_199AD
		cbw
		dec	ax
		mov	si, 95AFh
		add	si, ax
		mov	al, [si]
		cbw
		mov	word_18FEC, ax
		mov	word_18FEE, ax
		retn
sub_199C8	endp

; ---------------------------------------------------------------------------
word_19AF4	dw 0			; DATA XREF: sub_10EE8r sub_10EE8+Aw ...

; =============== S U B	R O U T	I N E =======================================


sub_19AF6	proc near		; CODE XREF: sub_10BC4+44p
					; sub_10C2E+44p ...
		push	dx
		push	ax
		mov	ax, word_19AF4

loc_19AFB:				; CODE XREF: sub_19AF6+21j
		push	ax
		push	es
		mov	dx, 40h	; '@'
		mov	es, dx
		assume es:nothing
		mov	dx, es:63h
		pop	es
		assume es:nothing
		add	dl, 6

loc_19B0B:				; CODE XREF: sub_19AF6+18j
		in	al, dx
		and	al, 8
		jnz	short loc_19B0B

loc_19B10:				; CODE XREF: sub_19AF6+1Dj
		in	al, dx
		and	al, 8
		jz	short loc_19B10
		pop	ax
		dec	ax
		jnz	short loc_19AFB
		pop	ax
		pop	dx
		retn
sub_19AF6	endp


; =============== S U B	R O U T	I N E =======================================


sub_19B1C	proc near		; CODE XREF: sub_10D03+19p
					; sub_16B9B+12p ...
		push	dx
		push	ax
		push	ax
		push	es
		mov	dx, 40h	; '@'
		mov	es, dx
		assume es:nothing
		mov	dx, es:63h
		pop	es
		assume es:nothing
		add	dl, 6

loc_19B2E:				; CODE XREF: sub_19B1C+15j
		in	al, dx
		and	al, 8
		jnz	short loc_19B2E

loc_19B33:				; CODE XREF: sub_19B1C+1Aj
		in	al, dx
		and	al, 8
		jz	short loc_19B33
		pop	ax
		pop	ax
		pop	dx
		retn
sub_19B1C	endp

; ---------------------------------------------------------------------------
word_19B3C	dw 0			; DATA XREF: sub_19B40+2r
					; sub_19B40+15w ...
word_19B3E	dw 0			; DATA XREF: sub_19B40+5r
					; sub_19B40+18w ...

; =============== S U B	R O U T	I N E =======================================


sub_19B40	proc near		; CODE XREF: sub_17222+2ADp
					; sub_17222+2C9p ...
		push	ax
		push	dx
		mov	ax, word_19B3C
		mov	dx, word_19B3E
		xchg	ax, dx
		rol	dx, 1
		rol	dx, 1
		rol	dx, 1
		sub	dx, 7
		xor	dx, ax
		mov	word_19B3C, ax
		mov	word_19B3E, dx
		pop	dx
		pop	ax
		retn
sub_19B40	endp

; ---------------------------------------------------------------------------
		align 2
		db 1, 2, 3, 4, 5, 6, 7,	8, 9, 41h, 42h,	43h, 44h, 45h
		db 46h,	6 dup(0), 0FFh,	0A3h, 6Fh, 97h,	8Bh, 0C2h, 0BFh
		db 71h,	97h, 0B9h, 4, 0, 0BEh, 5Fh, 97h, 33h, 0D2h, 0F8h
		db 0D1h, 2 dup(0D0h), 0D2h, 0D1h, 2 dup(0D0h), 0D2h, 0D1h
		db 2 dup(0D0h),	0D2h, 0D1h, 2 dup(0D0h), 0D2h, 3, 0F2h
		db 8Ah,	14h, 88h, 15h, 47h, 0E2h, 0E1h,	0A1h, 6Fh, 97h
		db 0BEh, 71h, 97h, 0FFh, 16h, 0Ch, 0, 0C3h
byte_19BAB	db 0			; DATA XREF: sub_19BAC+2r
					; sub_19BAC+1Cw ...

; =============== S U B	R O U T	I N E =======================================


sub_19BAC	proc near		; CODE XREF: sub_16B9B:loc_1C467p
		mov	al, 11h
		cmp	byte_19BAB, 1
		jz	short loc_19BCE
		cmp	byte_1BC88, al
		jz	short loc_19BBC
		retn
; ---------------------------------------------------------------------------

loc_19BBC:				; CODE XREF: sub_19BAC+Dj
					; sub_19BAC+14j
		cmp	byte_1BC88, al
		jz	short loc_19BBC

loc_19BC2:				; CODE XREF: sub_19BAC+1Aj
		cmp	byte_1BC88, al
		jnz	short loc_19BC2
		mov	byte_19BAB, 1
		retn
; ---------------------------------------------------------------------------

loc_19BCE:				; CODE XREF: sub_19BAC+7j
		cmp	al, byte_1BC88
		jz	short locret_19BD9
		mov	byte_19BAB, 0

locret_19BD9:				; CODE XREF: sub_19BAC+26j
		retn
sub_19BAC	endp

; ---------------------------------------------------------------------------
byte_19BDA	db 0			; DATA XREF: sub_199C8:loc_19A45w
					; sub_19BDC+7r	...
		align 2

; =============== S U B	R O U T	I N E =======================================


sub_19BDC	proc near		; CODE XREF: sub_16B9B+15p
					; sub_16CD7+84p ...
		call	sub_1C4CA
		test	al, 10h
		jz	short loc_19BF0
		cmp	byte_19BDA, 1
		jz	short loc_19BF5
		mov	byte_19BDA, 1
		retn
; ---------------------------------------------------------------------------

loc_19BF0:				; CODE XREF: sub_19BDC+5j
		mov	byte_19BDA, 0

loc_19BF5:				; CODE XREF: sub_19BDC+Cj
		and	al, 0EFh
		retn
sub_19BDC	endp

; ---------------------------------------------------------------------------
word_19BF8	dw 97FAh		; DATA XREF: sub_19C05+Ar
					; sub_19C05+20w ...
		db 14h,	13h, 16h, 12h, 21h, 1Eh, 17h, 14h, 23h,	0FFh
byte_19C04	db 0			; DATA XREF: sub_19C05+3r
					; sub_19C05+29w

; =============== S U B	R O U T	I N E =======================================


sub_19C05	proc near		; CODE XREF: sub_18351:loc_1835Bp
		pushf
		push	si
		push	ax
		cmp	byte_19C04, 1
		jz	short loc_19C3F
		mov	si, word_19BF8
		mov	al, byte_1BC88
		test	al, 80h
		jnz	short loc_19C39
		or	al, al
		jz	short loc_19C39
		mov	ah, [si]
		cmp	al, ah
		jnz	short loc_19C33
		inc	si
		mov	word_19BF8, si
		cmp	byte ptr [si], 0FFh
		jnz	short loc_19C39
		mov	byte_19C04, 1

loc_19C33:				; CODE XREF: sub_19C05+1Dj
		mov	word_19BF8, 97FAh

loc_19C39:				; CODE XREF: sub_19C05+13j
					; sub_19C05+17j ...
		mov	byte_1BC88, 0
		nop

loc_19C3F:				; CODE XREF: sub_19C05+8j
		pop	ax
		pop	si
		popf
		retn
sub_19C05	endp


; =============== S U B	R O U T	I N E =======================================


sub_19C43	proc near		; CODE XREF: sub_16EB2+47p
					; sub_16EB2+79p ...
		mov	si, [bx]
		or	si, si
		jz	short locret_19C59
		mov	al, [si]
		inc	si
		mov	ah, [si]
		inc	si
		push	bx
		call	off_1040C
		pop	bx
		inc	bx
		inc	bx
		jmp	short sub_19C43
; ---------------------------------------------------------------------------

locret_19C59:				; CODE XREF: sub_19C43+4j
		retn
sub_19C43	endp

; ---------------------------------------------------------------------------
		db 9, 1, 52h, 49h, 43h,	4Bh, 20h, 2 dup(49h), 20h, 4Bh
		db 45h,	59h, 20h, 44h, 45h, 46h, 49h, 4Eh, 49h,	54h, 49h
		db 4Fh,	4Eh, 0FFh, 0Fh,	4, 55h,	50h, 4 dup(20h), 4Fh, 5	dup(20h)
		db 0FFh, 0Fh, 6, 44h, 4Fh, 57h,	4Eh, 2 dup(20h), 4Bh, 5	dup(20h)
		db 0FFh, 0Fh, 8, 4Ch, 45h, 46h,	54h, 2 dup(20h), 5Ah, 5	dup(20h)
		db 0FFh, 0Fh, 0Ah, 52h,	49h, 47h, 48h, 54h, 20h, 58h, 5	dup(20h)
		db 0FFh, 0Fh, 0Ch, 46h,	49h, 52h, 45h, 2 dup(20h), 50h
		db 5 dup(20h), 0FFh, 8,	12h, 50h, 52h, 45h, 2 dup(53h)
		db 20h,	45h, 53h, 43h, 20h, 57h, 48h, 45h, 4Eh,	20h, 46h
		db 49h,	4Eh, 49h, 53h, 48h, 45h, 44h, 0FFh, 0, 13h, 50h
		db 52h,	45h, 2 dup(53h), 20h, 46h, 49h,	52h, 45h, 20h
		db 49h,	46h, 20h, 55h, 53h, 49h, 4Eh, 47h, 20h,	41h, 4Eh
		db 20h,	41h, 4Eh, 41h, 4Ch, 4Fh, 47h, 55h, 45h,	20h, 4Ah
		db 4Fh,	59h, 53h, 54h, 49h, 43h, 4Bh, 0FFh, 5, 14h, 54h
		db 48h,	45h, 20h, 4Eh, 55h, 4Dh, 42h, 45h, 52h,	20h, 4Bh
		db 45h,	59h, 50h, 41h, 44h, 20h, 45h, 4Dh, 55h,	4Ch, 41h
		db 54h,	45h, 53h, 20h, 54h, 48h, 45h, 0FFh, 4, 15h, 45h
		db 49h,	47h, 48h, 54h, 20h, 50h, 4Fh, 2	dup(53h), 49h
		db 42h,	4Ch, 45h, 20h, 4Ah, 4Fh, 59h, 53h, 54h,	49h, 43h
		db 4Bh,	20h, 50h, 4Fh, 53h, 49h, 54h, 49h, 4Fh,	4Eh, 53h
		db 0FFh, 0Ah, 10h, 50h,	52h, 45h, 2 dup(53h), 20h, 4Bh
		db 45h,	59h, 20h, 46h, 4Fh, 52h, 20h, 55h, 50h,	3 dup(20h)
		db 0FFh, 55h, 50h, 3 dup(20h), 44h, 4Fh, 57h, 4Eh, 20h
		db 4Ch,	45h, 46h, 54h, 20h, 52h, 49h, 47h, 48h,	54h, 46h
		db 49h,	52h, 45h, 20h, 49h, 4Eh, 56h, 41h, 4Ch,	49h, 44h
		db 20h,	4Bh, 45h, 59h, 2Dh, 20h, 55h, 53h, 45h,	20h, 41h
		db 4Eh,	4Fh, 54h, 48h, 45h, 52h, 0FFh, 18h dup(20h), 0FFh
		db 5Eh,	99h, 63h, 99h, 68h, 99h, 6Dh, 99h, 72h,	99h, 5Ah
		db 98h,	73h, 98h, 82h, 98h, 0A0h, 98h, 91h, 98h, 0AFh
		db 98h,	48h, 99h, 0BEh,	98h, 0D8h, 98h,	3, 99h,	24h, 99h
		db 2 dup(0), 45h, 52h, 54h, 59h, 55h, 49h, 4Fh,	50h, 41h
		db 53h,	44h, 46h, 47h, 48h, 4Ah, 4Bh, 4Ch, 5Ah,	58h, 43h
		db 56h,	42h, 4Eh, 4Dh, 2Ch, 2Eh, 12h, 13h, 14h,	15h, 16h
		db 17h,	18h, 19h, 1Eh, 1Fh, 20h, 21h, 22h, 23h,	24h, 25h
		db 26h,	2Ch, 2Dh, 2Eh, 2Fh, 30h, 31h, 32h, 33h,	34h, 0FFh
byte_19E00	db 20h			; DATA XREF: sub_19E18+7Aw
		db 5 dup(20h), 52h, 45h, 54h, 55h, 52h,	4Eh, 7Bh, 98h
		db 8Ah,	98h, 99h, 98h, 0A8h, 98h, 0B7h,	98h
word_19E16	dw 0			; DATA XREF: sub_19E18w sub_19E18+27r	...

; =============== S U B	R O U T	I N E =======================================


sub_19E18	proc near		; CODE XREF: start+CDp
		mov	word_19E16, 0
		call	off_10426

loc_19E22:				; CODE XREF: sub_19E18+94j
					; sub_19E18:loc_19EAFj	...
		call	sub_19EBB
		mov	bx, 99B3h
		call	sub_19C43
		call	off_1041C
		mov	bx, 99B3h
		call	sub_19C43
		call	off_1041C
		mov	byte_1BC88, 0
		nop
		mov	ax, word_19E16
		shl	ax, 1
		mov	di, 9A0Ch
		add	di, ax
		mov	di, [di]

loc_19E4B:				; CODE XREF: sub_19E18+41j
					; sub_19E18+43j
		call	sub_1BF7C
		and	bx, 3
		jnz	short loc_19E6A
		mov	ah, byte_1BC88
		or	ah, ah
		js	short loc_19E4B
		jz	short loc_19E4B
		cmp	ah, 1
		jnz	short loc_19E6C
		mov	byte ptr cs:loc_1C1A2, 0C3h ; '√'
		clc
		retn
; ---------------------------------------------------------------------------

loc_19E6A:				; CODE XREF: sub_19E18+39j
		stc
		retn
; ---------------------------------------------------------------------------

loc_19E6C:				; CODE XREF: sub_19E18+48j
		cmp	ah, 1Ch
		jnz	short loc_19E7D
		call	sub_19ED0
		mov	si, 9A06h
		call	sub_19EB5
		jmp	short loc_19E9B
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_19E7D:				; CODE XREF: sub_19E18+57j
		mov	si, 99E5h

loc_19E80:				; CODE XREF: sub_19E18+6Fj
		lodsb
		cmp	al, 0FFh
		jz	short loc_19EB2
		cmp	al, ah
		jnz	short loc_19E80
		call	sub_19ED0
		dec	si
		sub	si, 1Ah
		mov	al, [si]
		mov	byte_19E00, al
		mov	si, 9A00h
		call	sub_19EB5

loc_19E9B:				; CODE XREF: sub_19E18+62j
		inc	word_19E16
		cmp	word_19E16, 5
		jnz	short loc_19EAF
		mov	word_19E16, 0
		jmp	loc_19E22
; ---------------------------------------------------------------------------

loc_19EAF:				; CODE XREF: sub_19E18+8Cj
		jmp	loc_19E22
; ---------------------------------------------------------------------------

loc_19EB2:				; CODE XREF: sub_19E18+6Bj
		jmp	loc_19E22
sub_19E18	endp


; =============== S U B	R O U T	I N E =======================================


sub_19EB5	proc near		; CODE XREF: sub_19E18+5Fp
					; sub_19E18+80p
		mov	cx, 6
		rep movsb
		retn
sub_19EB5	endp


; =============== S U B	R O U T	I N E =======================================


sub_19EBB	proc near		; CODE XREF: sub_19E18:loc_19E22p
		mov	ax, word_19E16
		shl	ax, 1
		mov	si, 99A9h
		add	si, ax
		mov	si, [si]
		mov	di, 9958h
		mov	cx, 5
		rep movsb
		retn
sub_19EBB	endp


; =============== S U B	R O U T	I N E =======================================


sub_19ED0	proc near		; CODE XREF: sub_19E18+59p
					; sub_19E18+71p
		mov	bx, 0B874h
		mov	cx, word_19E16
		add	bx, cx
		mov	[bx], ah
		retn
sub_19ED0	endp

; ---------------------------------------------------------------------------
		inc	di
		inc	cx
		dec	bp
		inc	bp
		and	[bx+56h], cl
		inc	bp
		push	dx

; =============== S U B	R O U T	I N E =======================================


sub_19EE5	proc near		; CODE XREF: sub_194C4+A64p
		call	off_1043A
		call	off_10426
		call	sub_16B3B
		mov	ax, 0C0Fh
		mov	si, 9ADCh
		call	off_1040C
		call	off_1041C
		mov	cx, 1E0h

loc_19F01:				; CODE XREF: sub_19EE5+28j
		push	cx
		call	sub_19B1C
		call	sub_19BDC
		test	al, 10h
		jnz	short loc_19F10
		pop	cx
		loop	loc_19F01
		retn
; ---------------------------------------------------------------------------

loc_19F10:				; CODE XREF: sub_19EE5+25j
		pop	cx
		retn
sub_19EE5	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_194C4

loc_19F12:				; CODE XREF: sub_194C4+1ACj
					; sub_194C4+1E0j ...
		call	off_1043A
		mov	ax, 4
		mov	word_1C1F2, ax
		call	sub_1AECD
		mov	ax, 2
		mov	word_1C1F2, ax
		call	sub_1AECD
		call	sub_19EE5
		call	sub_16D69
		call	sub_1A5E3
		call	sub_16CD7
		jmp	loc_1C359
; ---------------------------------------------------------------------------

loc_19F37:				; CODE XREF: sub_194C4+1D1j
		call	off_1043A
		mov	ax, 4
		mov	word_1C1F2, ax
		call	sub_1AECD
		mov	ax, 6
		mov	word_1C1F2, ax
		call	sub_1AECD
		mov	ax, 2
		call	sub_1A257
		call	sub_16D69
		call	sub_1A5E3
		call	sub_16CD7
		jmp	loc_1C359
; END OF FUNCTION CHUNK	FOR sub_194C4
; ---------------------------------------------------------------------------
		db 44h,	4Fh, 20h, 59h, 4Fh, 55h, 20h, 57h, 49h,	53h, 48h
		db 20h,	54h, 4Fh, 20h, 51h, 55h, 49h, 54h, 20h,	54h, 48h
		db 49h,	53h, 20h, 47h, 41h, 4Dh, 45h, 0FFh, 50h, 52h, 45h
		db 2 dup(53h), 20h, 59h, 20h, 4Fh, 52h,	20h, 4Eh, 0FFh

; =============== S U B	R O U T	I N E =======================================


sub_19F8A	proc near		; CODE XREF: sub_16B9B+5910p
		push	ds
		push	es
		mov	ax, 0C05h
		mov	si, 9B5Fh
		call	off_1040E
		mov	ax, 0D0Eh
		mov	si, 9B7Dh
		call	off_1040E
		call	off_10438

loc_19FA4:				; CODE XREF: sub_19F8A+28j
		mov	al, cs:byte_1BC88
		cmp	al, 15h
		jnz	short loc_19FB0
		stc
		jmp	short loc_19FB5
; ---------------------------------------------------------------------------
		align 2

loc_19FB0:				; CODE XREF: sub_19F8A+20j
		cmp	al, 31h	; '1'
		jnz	short loc_19FA4
		clc

loc_19FB5:				; CODE XREF: sub_19F8A+23j
		pop	es
		assume ss:seg001
		pop	ds
		assume ds:nothing
		retn
sub_19F8A	endp

; ---------------------------------------------------------------------------
		db  20h
		db  9Dh	; ù
		db  21h	; !
		db  9Dh	; ù
		db  37h	; 7
		db  9Dh	; ù
		db  3Fh	; ?
		db  9Dh	; ù
		db  55h	; U
		db  9Dh	; ù
		db  68h	; h
		db  9Dh	; ù
		db 0BCh	; º
		db  9Dh	; ù
		db 0D7h	; ◊
		db  9Dh	; ù
		db 0E4h	; ‰
		db  9Dh	; ù
		db 0F6h	; ˆ
		db  9Eh	; û
		db 0E6h	; Ê
		db  9Dh	; ù
		db 0FDh	; ˝
		db  9Dh	; ù
		db  34h	; 4
		db  9Eh	; û
		db  3Eh	; >
		db  9Eh	; û
		db  4Ch	; L
		db  9Eh	; û
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0FFh
		db 0FFh
		db 0D6h	; ÷
		db  9Bh	; õ
		db 0F0h	; 
		db  9Bh	; õ
		db  0Ah
		db  9Ch	; ú
		db  24h	; $
		db  9Ch	; ú
		db  3Eh	; >
		db  9Ch	; ú
		db  58h	; X
		db  9Ch	; ú
		db  72h	; r
		db  9Ch	; ú
		db  8Ch	; å
		db  9Ch	; ú
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db    0
		db 0FFh
		db 0FFh
		db 0B8h	; ∏
		db  9Ch	; ú
		db 0C8h	; »
		db  9Ch	; ú
		db 0D8h	; ÿ
		db  9Ch	; ú
		db 0E8h	; Ë
		db  9Ch	; ú

; =============== S U B	R O U T	I N E =======================================


sub_1A102	proc near		; CODE XREF: sub_1A121p sub_1A137p ...
		mov	di, 9CA8h
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		shl	ax, 1
		add	di, ax
		mov	di, [di]
		retn
sub_1A102	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A111	proc near		; CODE XREF: sub_1A1FDp sub_1A234p
		mov	di, 9CFAh
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		shl	ax, 1
		add	di, ax
		mov	di, [di]
		retn
sub_1A111	endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_8. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_1A121	proc near
		call	sub_1A102
		mov	word ptr [di], 1
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		mov	[di+2],	ax
		mov	al, [bx]
		inc	bx
		mov	[di+4],	ax
		retn
sub_1A121	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A137	proc near
		call	sub_1A102
		mov	word ptr [di], 0
		retn
sub_1A137	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A13F	proc near
		call	sub_1A102
		mov	word ptr [di], 2
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		mov	[di+12h], ax
		mov	al, [bx]
		inc	bx
		mov	[di+14h], ax
		retn
sub_1A13F	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A155	proc near
		call	sub_1A102
		mov	ax, [bx]
		inc	bx
		inc	bx
		add	ax, 2314h
		mov	[di+16h], ax
		xor	ax, ax
		mov	[di+18h], ax
		retn
sub_1A155	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A168	proc near
		mov	al, [bx]
		inc	bx
sub_1A168	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_1A16B	proc near
		or	al, al
		jnz	short loc_1A174
		call	word ptr ds:30h
		retn
; ---------------------------------------------------------------------------

loc_1A174:				; CODE XREF: sub_1A16B+2j
		xor	ah, ah
		dec	ax
		shl	ax, 1
		mov	si, 2314h
		mov	si, [si]
		add	si, 2314h
		add	si, ax
		mov	si, [si]
		add	si, 2314h
		add	si, 8
		mov	al, [bx]
		inc	bx
		mov	ah, [bx]
		inc	bx
		call	word ptr ds:2Ch
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		add	si, ax
		mov	al, [bx]
		inc	bx
		mov	cl, 5
		shl	ax, cl
		add	si, ax
		mov	cl, [bx]
		inc	bx
		mov	ch, [bx]
		inc	bx
		push	ax
		push	bx
		push	cx
		push	di
		push	si
		call	word ptr ds:2Eh
		pop	si
		pop	di
		pop	cx
		pop	bx
		pop	ax
		retn
sub_1A16B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A1BC	proc near
		mov	al, [bx]
		inc	bx
		mov	ah, [bx]
		inc	bx
		mov	si, bx
		push	ax
		push	bx
		push	si
		call	word ptr ds:32h
		pop	si
		pop	bx
		pop	ax

loc_1A1CE:				; CODE XREF: sub_1A1BC+17j
		mov	al, [bx]
		inc	bx
		cmp	al, 0FFh
		jnz	short loc_1A1CE
		retn
sub_1A1BC	endp

; [00000001 BYTES: COLLAPSED FUNCTION nullsub_7. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_1A1D7	proc near
		mov	al, [bx]
		cbw
		inc	bx
		push	bx
		mov	ds:0BDF2h, ax
		call	sub_1AECD
		pop	bx
		retn
sub_1A1D7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A1E4	proc near
		inc	bx
		retn
sub_1A1E4	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A1E6	proc near
		call	sub_1A102
		mov	word ptr [di], 3
		mov	ax, [bx]
		inc	bx
		inc	bx
		add	ax, 2314h
		mov	[di+6],	ax
		xor	ax, ax
		mov	[di+8],	ax
		retn
sub_1A1E6	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A1FD	proc near
		call	sub_1A111
		mov	word ptr [di], 1
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		mov	[di+2],	ax
		mov	al, [bx]
		inc	bx
		mov	[di+4],	ax
		mov	al, [bx]
		inc	bx
		mov	[di+6],	ax
		mov	al, [bx]
		inc	bx
		mov	[di+8],	ax
		mov	al, [bx]
		inc	bx
		mov	[di+0Ah], ax
		mov	word ptr [di+0Ch], 0
		mov	ax, [bx]
		inc	bx
		inc	bx
		add	ax, 2314h
		mov	[di+0Eh], ax
		retn
sub_1A1FD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A234	proc near
		call	sub_1A111
		mov	word ptr [di], 0
		retn
sub_1A234	endp

; ---------------------------------------------------------------------------
		db    0
		db    0
		db  8Bh	; ã
		db    7
		db  43h	; C
		db  43h	; C
		db    5
		db  14h
		db  23h	; #
		db  89h	; â
		db  1Eh
		db  3Ch	; <
		db  9Eh	; û
		db  8Bh	; ã
		db 0D8h	; ÿ
		db 0C3h	; √
		db  8Bh	; ã
		db  1Eh
		db  3Ch	; <
		db  9Eh	; û
		db 0C3h	; √
		dw 0
		dw 0
		dw 0

; =============== S U B	R O U T	I N E =======================================


sub_1A257	proc near		; CODE XREF: sub_194C4+1A9p
					; sub_194C4+1DDp ...
		mov	ds:9E51h, sp
		mov	word ptr ds:8BF0h, 0
		mov	ds:9E55h, ax
		mov	word ptr ds:9E53h, 0
		call	sub_1C4CA
		test	al, 10h
		jz	short loc_1A277
		mov	word ptr ds:9E53h, 1

loc_1A277:				; CODE XREF: sub_1A257+18j
		call	sub_16B3B
		call	word ptr ds:1Ch
		call	sub_16B3B
		mov	ax, ds:9E55h
		shl	ax, 1
		mov	bx, 2316h
		add	bx, ax
		mov	bx, [bx]
		add	bx, 2314h
		mov	di, 9BD6h
		mov	cx, 8

loc_1A297:				; CODE XREF: sub_1A257+47j
		mov	word ptr [di], 0
		add	di, 1Ah
		loop	loc_1A297
		mov	di, 9CB8h
		mov	cx, 4

loc_1A2A6:				; CODE XREF: sub_1A257+56j
		mov	word ptr [di], 0
		add	di, 10h
		loop	loc_1A2A6

loc_1A2AF:				; CODE XREF: sub_1A257+6Aj
		xor	ax, ax
		mov	al, [bx]
		inc	bx
		cmp	al, 0
		jz	short locret_1A2C3
		shl	ax, 1
		mov	si, 9BB8h
		add	si, ax
		call	word ptr [si]
		jmp	short loc_1A2AF
; ---------------------------------------------------------------------------

locret_1A2C3:				; CODE XREF: sub_1A257+5Fj
		retn
sub_1A257	endp

; ---------------------------------------------------------------------------
		push	bx
		call	sub_1C4CA
		pop	bx
		mov	dx, ds:9E55h
		cmp	dx, 0
		jnz	short loc_1A2D3
		retn
; ---------------------------------------------------------------------------

loc_1A2D3:				; CODE XREF: seg001:9ED0j
		cmp	dx, 1
		jnz	short loc_1A2F1
		test	al, 10h
		jz	short loc_1A2E8
		cmp	word ptr ds:9E53h, 1
		jz	short loc_1A2EE
		mov	sp, ds:9E51h
		retn
; ---------------------------------------------------------------------------

loc_1A2E8:				; CODE XREF: seg001:9EDAj
		mov	word ptr ds:9E53h, 0

loc_1A2EE:				; CODE XREF: seg001:9EE1j
		and	al, 0EFh
		retn
; ---------------------------------------------------------------------------

loc_1A2F1:				; CODE XREF: seg001:9ED6j
		and	al, 0EFh
		retn
; ---------------------------------------------------------------------------
		db 2 dup(0), 0E8h, 42h,	0C8h, 0C7h, 6, 0F4h, 9Eh, 2 dup(0)
		db 33h,	0C9h, 8Ah, 0Fh,	43h, 51h, 0FFh,	6, 0F4h, 9Eh, 83h
		db 3Eh,	0F4h, 9Eh, 7, 75h, 6, 0C7h, 6, 0F4h, 9Eh, 2 dup(0)
		db 0E8h, 70h, 0, 0E8h, 1Bh, 1, 0E8h, 0A5h, 0FFh, 0A8h
		db 10h,	74h, 7,	83h, 3Eh, 0F4h,	9Eh, 0,	75h, 13h, 0FFh
		db 16h,	34h, 0,	0FFh, 16h, 44h,	0, 0E8h, 0E7h, 0F7h, 0FFh
		db 16h,	1Ch, 0,	0FFh, 16h, 38h,	0, 59h,	0E2h, 0C4h, 0C3h
		db 0BEh, 0B8h, 9Ch, 8Bh, 4, 0Bh, 0C0h, 78h, 0Eh, 74h, 7
		db 56h,	53h, 0E8h, 8, 0, 5Bh, 5Eh, 83h,	0C6h, 10h, 0EBh
		db 0ECh, 0C3h, 8Ah, 44h, 2, 8Ah, 64h, 4, 50h, 53h, 56h
		db 8Bh,	74h, 0Eh, 0FFh,	16h, 32h, 0, 5Eh, 5Bh, 58h, 0FFh
		db 44h,	0Ch, 8Bh, 44h, 0Ah, 3Bh, 44h, 0Ch, 75h,	11h, 8Bh
		db 44h,	6, 1, 44h, 2, 8Bh, 44h,	8, 1, 44h, 4, 33h, 0C0h
		db 89h,	44h, 0Ch, 0C3h,	0BEh, 0D6h, 9Bh, 8Bh, 4, 0Bh, 0C0h
		db 78h,	3Ch, 74h, 35h, 3Dh, 1, 0, 74h, 30h, 3Dh, 2, 0
		db 75h,	24h, 8Bh, 44h, 12h, 1, 44h, 2, 81h, 7Ch, 2, 0E8h
		db 0, 7Ch, 4, 0C7h, 4, 2 dup(0), 83h, 7Ch, 2, 0, 7Dh, 4
		db 0C7h, 4, 2 dup(0), 8Bh, 44h,	14h, 1,	44h, 4,	0EBh, 8
		db 90h,	53h, 56h, 0E8h,	8, 0, 5Eh, 5Bh,	83h, 0C6h, 1Ah
		db 0EBh, 0BEh, 0C3h, 53h, 8Bh, 5Ch, 6, 8Ah, 7, 3Ch, 0
		db 75h,	6, 43h,	8Bh, 1Fh, 89h, 5Ch, 6, 43h, 8Ah, 7, 0D0h
		db 0F8h, 0D0h, 0F8h, 0D0h, 0F8h, 0D0h, 0F8h, 3Ch, 7, 75h
		db 2, 0FEh, 0C0h, 98h, 1, 44h, 2, 81h, 7Ch, 2, 0E8h, 0
		db 7Ch,	4, 0C7h, 4, 2 dup(0), 83h, 7Ch,	2, 0, 7Dh, 4, 0C7h
		db 4, 2	dup(0),	8Ah, 7,	24h, 0Fh, 0A8h,	8, 74h,	2, 0Ch
		db 0F0h, 3Ch, 7, 75h, 2, 0FEh, 0C0h, 98h, 1, 44h, 4, 4Bh
		db 8Ah,	7, 98h,	0FFh, 44h, 8, 3Bh, 44h,	8, 74h,	2, 73h
		db 0Ah,	0C7h, 44h, 8, 2	dup(0),	2 dup(43h), 89h, 5Ch, 6
		db 5Bh,	0C3h, 0BEh, 0D6h, 9Bh, 8Bh, 4, 0Bh, 0C0h, 78h
		db 0Eh,	74h, 7,	53h, 56h, 0E8h,	47h, 0CDh, 5Eh,	5Bh, 83h
		db 0C6h, 1Ah, 0EBh, 0ECh, 0C3h

; =============== S U B	R O U T	I N E =======================================


sub_1A44F	proc near		; CODE XREF: start+BFp
		mov	ax, ds:62h
		mov	cx, 0
		mov	dx, 0C1h ; '¡'
		call	sub_1A65B
		retn
sub_1A44F	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A45C	proc near		; CODE XREF: sub_16B9B+5850p
		mov	ax, seg	seg001
		mov	cx, 3374h
		mov	dx, 6Bh	; 'k'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 3974h
		mov	dx, 77h	; 'w'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 3C74h
		mov	dx, 84h	; 'Ñ'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 4C74h
		mov	dx, 91h	; 'ë'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 53F4h
		mov	dx, 9Dh	; 'ù'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 1180h
		mov	dx, 0AAh ; '™'
		call	sub_1A65B
		mov	ax, seg	seg001
		mov	cx, 2314h
		mov	dx, 0B6h ; '∂'
		call	sub_1A65B
		retn
sub_1A45C	endp

; ---------------------------------------------------------------------------
		db 50h,	4Ch, 45h, 41h, 53h, 45h, 20h, 45h, 4Eh,	53h, 55h
		db 52h,	45h, 20h, 44h, 49h, 53h, 4Bh, 20h, 1, 20h, 49h
		db 53h,	20h, 49h, 4Eh, 20h, 44h, 52h, 49h, 56h,	45h, 20h
		db 41h,	0FFh, 50h, 4Ch,	45h, 41h, 53h, 45h, 20h, 45h, 4Eh
		db 53h,	55h, 52h, 45h, 20h, 44h, 49h, 53h, 4Bh,	20h, 2
		db 20h,	49h, 53h, 20h, 49h, 4Eh, 20h, 44h, 52h,	49h, 56h
		db 45h,	20h, 41h, 0FFh,	50h, 52h, 45h, 2 dup(53h), 20h
		db 46h,	49h, 52h, 45h, 20h, 54h, 4Fh, 20h, 43h,	4Fh, 4Eh
		db 54h,	49h, 4Eh, 55h, 45h, 2 dup(0FFh), 16h, 26h, 0, 0B8h
		db 3, 0Ch, 8Bh,	16h, 0ECh, 8Bh,	83h, 0FAh, 3, 7Ch, 0Ah
		db 0BEh, 0D4h, 0A0h, 0FFh, 16h,	0Ch, 0,	0EBh, 8, 90h, 0BEh
		db 0B1h, 0A0h, 0FFh, 16h, 0Ch, 0, 0B8h,	9, 0Dh,	0BEh, 0F7h
		db 0A0h, 0FFh, 16h, 0Ch, 0, 0FFh, 16h, 1Ch, 0, 0C6h, 6
		db 0DAh, 97h, 1, 0E8h, 97h, 0F6h, 0A8h,	10h, 74h, 0F9h
		db 0C3h

; =============== S U B	R O U T	I N E =======================================


sub_1A54A	proc near		; CODE XREF: sub_16B9B+5840p
		mov	si, 6Bh	; 'k'
		mov	ax, ds:8BECh
		dec	ax
		add	ax, 31h	; '1'

loc_1A554:				; CODE XREF: sub_1A54A+1Ej
		mov	ah, [si]
		cmp	ah, 0FFh
		jz	short locret_1A56A
		cmp	ah, 31h	; '1'
		jl	short loc_1A567
		cmp	ah, 35h	; '5'
		jg	short loc_1A567
		mov	[si], al

loc_1A567:				; CODE XREF: sub_1A54A+14j
					; sub_1A54A+19j
		inc	si
		jmp	short loc_1A554
; ---------------------------------------------------------------------------

locret_1A56A:				; CODE XREF: sub_1A54A+Fj
		retn
sub_1A54A	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A56B	proc near		; CODE XREF: sub_16B9B+5845p
		call	word ptr ds:26h
		mov	ax, 0A0Ch
		mov	si, 94C1h
		call	word ptr ds:46h
		mov	ax, 0B0Ch
		mov	si, 94E1h
		call	word ptr ds:46h
		mov	ax, 0C0Ch
		mov	si, 9501h
		call	word ptr ds:46h
		call	word ptr ds:1Ch
		retn
sub_1A56B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A592	proc near		; CODE XREF: start+CAp	start+EBp
		push	cs
		pop	ds
		assume ds:seg001
		mov	di, 66F6h
		mov	cx, 6
		mov	al, 0Ah
		rep stosb
		mov	word_16A10, 6
		mov	di, 66FDh
		mov	cx, 6
		mov	al, 0Bh
		rep stosb
		mov	word_16A12, 6
		mov	di, 6704h
		mov	cx, 6
		mov	al, 0Ch
		rep stosb
		mov	word_16A14, 6
		call	sub_1A5F0
		call	off_1041A
		mov	word_18FEC, 1
		mov	word_18216, 0
		mov	word_18218, 0
		mov	word_18200, 0
sub_1A592	endp ; sp-analysis failed


; =============== S U B	R O U T	I N E =======================================


sub_1A5E3	proc near		; CODE XREF: sub_194C4+A6Ap
					; sub_194C4+A92p
		push	cs
		pop	ds
		mov	di, 6616h
		mov	cx, 6
		xor	al, al
		rep stosb
		retn
sub_1A5E3	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A5F0	proc near		; CODE XREF: sub_1A592+32p
					; sub_16B9B+5888p
		xor	ax, ax
		mov	word_10F00, ax
		mov	word_10F38, ax
		inc	ax
		mov	word_10F1C, ax
		dec	ax
		mov	di, 0B56h

loc_1A600:				; CODE XREF: sub_1A5F0+1Aj
		mov	dx, [di]
		or	dx, dx
		js	short loc_1A60C
		stosw
		add	di, 32h	; '2'
		jmp	short loc_1A600
; ---------------------------------------------------------------------------

loc_1A60C:				; CODE XREF: sub_1A5F0+14j
		mov	di, 0C28h

loc_1A60F:				; CODE XREF: sub_1A5F0+29j
		mov	dx, [di]
		or	dx, dx
		js	short locret_1A61B
		stosw
		add	di, 32h	; '2'
		jmp	short loc_1A60F
; ---------------------------------------------------------------------------

locret_1A61B:				; CODE XREF: sub_1A5F0+23j
		retn
sub_1A5F0	endp

; ---------------------------------------------------------------------------
aADiskErrorHapp	db 'A DISK ERROR HAPPENED!',0Dh,0Ah
		db 0Dh,0Ah
		db 'Press a key to exit...',0Dh,0Ah
		db '$',0
		db 5 dup(0)
word_1A655	dw 0			; DATA XREF: sub_1A65Bw sub_1A65B+Fr
word_1A657	dw 0			; DATA XREF: sub_1A65B+3w
					; sub_1A65B+12r
word_1A659	dw 0			; DATA XREF: sub_1A65B+Br
					; sub_1A67B+13w ...

; =============== S U B	R O U T	I N E =======================================


sub_1A65B	proc near		; CODE XREF: sub_10594+9p sub_105A1+9p ...
		mov	word_1A655, ax
		mov	word_1A657, cx
		call	sub_1A67B
		push	ds
		mov	bx, word_1A659
		mov	ax, word_1A655
		mov	dx, word_1A657
		mov	ds, ax
		assume ds:nothing
		call	sub_1A693
		pop	ds
		call	sub_1A69D
		retn
sub_1A65B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A67B	proc near		; CODE XREF: sub_1A65B+7p
		mov	ah, 3Dh	; '='
		mov	al, 0
		int	21h		; DOS -	2+ - OPEN DISK FILE WITH HANDLE
					; DS:DX	-> ASCIZ filename
					; AL = access mode
					; 0 - read
		jb	short loc_1A6FB
		nop
		nop
		nop
		push	ds
		push	ax
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		pop	ax
		mov	word_1A659, ax
		pop	ds
		assume ds:nothing
		retn
sub_1A67B	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A693	proc near		; CODE XREF: sub_1A65B+18p
		mov	ah, 3Fh	; '?'
		mov	cx, 0FFFFh
		int	21h		; DOS -	2+ - READ FROM FILE WITH HANDLE
					; BX = file handle, CX = number	of bytes to read
					; DS:DX	-> buffer
		jb	short loc_1A6FB
		retn
sub_1A693	endp


; =============== S U B	R O U T	I N E =======================================


sub_1A69D	proc near		; CODE XREF: sub_1A65B+1Cp
					; sub_1A69D+2Dp
		mov	ah, 3Eh	; '>'
		mov	bx, ds:0A259h
		int	21h		; DOS -	2+ - CLOSE A FILE WITH HANDLE
					; BX = file handle
		jb	short loc_1A6FB
		retn
; ---------------------------------------------------------------------------

loc_1A6A8:				; CODE XREF: seg001:C0DBp
		mov	ds:0A24Fh, ax
		mov	ds:0A251h, bx
		mov	ds:0A253h, cx
		call	loc_1A6E0
		mov	ax, ds:0A24Fh
		mov	bx, ds:0A251h
		mov	cx, ds:0A253h
		push	ds
		mov	ds, ax
		mov	dx, bx
		call	loc_1A6CE
		pop	ds
		call	sub_1A69D
		retn
; ---------------------------------------------------------------------------

loc_1A6CE:				; CODE XREF: sub_1A69D+29p
		push	ds
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	bx, word_1A659
		pop	ds
		assume ds:nothing
		mov	ah, 40h
		int	21h		; DOS -	2+ - WRITE TO FILE WITH	HANDLE
					; BX = file handle, CX = number	of bytes to write, DS:DX -> buffer
		jb	short loc_1A6FB
		retn
; ---------------------------------------------------------------------------

loc_1A6E0:				; CODE XREF: sub_1A69D+16p
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	cx, 0
		mov	ah, 3Ch
		int	21h		; DOS -	2+ - CREATE A FILE WITH	HANDLE (CREAT)
					; CX = attributes for file
					; DS:DX	-> ASCIZ filename (may include drive and path)
		jb	short loc_1A6FB
		push	ds
		push	ax
		mov	ax, seg	seg001
		mov	ds, ax
		pop	ax
		mov	word_1A659, ax
		pop	ds
		assume ds:nothing
		retn
; ---------------------------------------------------------------------------

loc_1A6FB:				; CODE XREF: sub_1A67B+6j sub_1A693+7j ...
		push	ds
		mov	ax, 3
		int	10h		; - VIDEO - SET	VIDEO MODE
					; AL = mode
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	dx, 0A21Ch
		mov	ah, 9
		int	21h		; DOS -	PRINT STRING
					; DS:DX	-> string terminated by	"$"
		pop	ds
		assume ds:nothing
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	byte_1BC88, 0
		nop

loc_1A719:				; CODE XREF: sub_1A69D+81j
		mov	al, byte_1BC88
		cmp	al, 0
		jz	short loc_1A719
		jmp	loc_196F3
sub_1A69D	endp

; ---------------------------------------------------------------------------
		align 2
		and	word ptr [si], 1D18h
		or	al, 1Dh
		dec	ax
		pop	ds
		assume ds:nothing
		or	al, 21h
		or	al, 22h
		or	al, 24h
		sbb	[bx+di], ch
		or	al, 29h
		dec	ax
		db	26h
		or	al, 24h
		or	al, 22h
		or	al, 24h
		sbb	[di], bl
		or	al, 1Dh
		dec	ax
		pop	ds
		or	al, 21h
		or	al, 22h
		or	al, 24h
		nop
		inc	word ptr [bx+di+1821h]
		sbb	[si], cl
		sbb	[bx+si+1Dh], cl
		or	al, 1Dh
		or	al, 1Dh
		or	al, 21h
		sbb	[si], ah
		or	al, 24h
		dec	ax
		and	cl, [si]
		and	cl, [si]
		and	cl, [si]
		and	[bx+si], bx
		sbb	[si], cl
		sbb	[bx+si+1Dh], cl
		or	al, 1Dh
		or	al, 1Dh
		or	al, 0FFh
		pop	ds
		nop
		inc	word ptr [bp+si+241Dh]
		sbb	ax, 1D0Ch
		or	al, 1Dh
		or	al, 1Dh
		and	al, 22h
		and	al, 1Dh
		and	al, 1Dh
		or	al, 1Dh
		or	al, 1Dh
		or	al, 1Dh
		and	al, 22h
		and	al, 1Dh
		and	al, 1Dh
		or	al, 1Dh
		or	al, 1Dh
		or	al, 1Dh
		and	al, 22h
		and	al, 0FFh
		and	al, 24h
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		and	al, 0Ch
		inc	word ptr [di+2C81h]
		sbb	[di], ah
		or	al, 25h
		dec	ax
		sub	al, 24h	; '$'
		sub	bl, [bx+si]
		and	cx, [si]
		and	cx, [bx+si+27h]
		adc	ch, [bp+si]
		adc	ch, [si]
		sbb	[di], ah
		or	al, 25h
		dec	ax
		sub	al, 24h	; '$'
		jmp	dword ptr [bp+si]
; ---------------------------------------------------------------------------
		db 90h
		db 0FFh, 84h, 25h, 90h,	23h, 90h, 25h, 90h, 23h, 90h, 23h
		db 90h,	21h, 90h, 23h, 90h, 27h, 90h, 0FFh, 83h, 20h, 12h
		db 19h,	12h, 1Dh, 12h, 19h, 12h, 20h, 12h, 1Dh,	12h, 25h
		db 12h,	20h, 12h, 0FFh,	2 dup(81h), 1Dh, 0Ch, 1Dh, 24h
		db 29h,	2 dup(24h), 48h, 0FFh, 81h, 3Dh, 54h, 1Dh, 48h
		db 0FFh, 81h, 3Dh, 54h,	21h, 48h, 0FFh,	81h, 24h, 18h
		db 1Dh,	0Ch, 1Dh, 48h, 1Fh, 0Ch, 20h, 0Ch, 22h,	0Ch, 24h
		db 18h,	29h, 0Ch, 29h, 48h, 0FFh, 81h, 20h, 2 dup(18h)
		db 0Ch,	18h, 48h, 1Dh, 0Ch, 3Dh, 18h, 20h, 18h,	24h, 0Ch
		db 24h,	48h, 0FFh, 83h,	1Dh, 6Ch, 22h, 24h, 1Dh, 6Ch, 0FFh
		db 82h,	24h, 18h, 21h, 0Ch, 29h, 48h, 0FFh, 82h, 21h, 18h
		db 1Dh,	0Ch, 24h, 48h, 0FFh, 82h, 1Dh, 2 dup(18h), 0Ch
		db 21h,	48h, 0FFh, 85h,	2Ch, 18h, 27h, 0Ch, 23h, 0Ch, 2Ch
		db 18h,	27h, 0Ch, 23h, 0Ch, 2Ch, 0Ch, 27h, 0Ch,	2Dh, 0Ch
		db 27h,	0Ch, 2Ch, 0Ch, 27h, 0Ch, 2Dh, 0Ch, 27h,	0Ch, 0FFh
		db 3Dh,	0Ch, 86h, 0FFh,	87h, 3Dh, 0C0h,	3Dh, 0C0h, 14h
		db 60h,	17h, 60h, 14h, 60h, 17h, 60h, 13h, 60h,	17h, 60h
		db 14h,	60h, 13h, 60h, 0FFh, 85h, 29h, 0Ch, 28h, 0Ch, 29h
		db 0Ch,	28h, 0Ch, 26h, 0Ch, 28h, 0Ch, 29h, 0Ch,	28h, 0Ch
		db 26h,	0Ch, 28h, 0Ch, 29h, 0Ch, 26h, 0Ch, 0FFh, 87h, 1Ah
		db 60h,	1Dh, 60h, 19h, 60h, 1Dh, 60h, 0FFh, 3Dh, 0Ch, 86h
		db 0FFh, 81h, 25h, 12h,	22h, 12h, 22h, 12h, 25h, 12h, 22h
		db 12h,	22h, 12h, 0FFh,	81h, 22h, 36h, 2Eh, 24h, 2Ch, 12h
		db 28h,	6Ch, 0FFh, 87h,	16h, 6Ch, 19h, 6Ch, 0FFh, 86h
		db 18h,	12h, 11h, 12h, 18h, 12h, 11h, 12h, 18h,	12h, 10h
		db 12h,	18h, 12h, 10h, 12h, 18h, 12h, 0Fh, 12h,	18h, 12h
		db 0Fh,	12h, 18h, 12h, 10h, 12h, 18h, 12h, 10h,	12h, 0FFh
		db 86h,	11h, 48h, 10h, 48h, 0Fh, 48h, 10h, 48h,	0FFh, 86h
		db 3Dh,	9, 20h,	12h, 20h, 12h, 20h, 12h, 20h, 12h, 20h
		db 12h,	20h, 12h, 20h, 12h, 20h, 12h, 0FFh, 87h, 20h, 24h
		db 1Fh,	24h, 20h, 3 dup(24h), 20h, 24h,	1Fh, 24h, 20h
		db 24h,	1Dh, 24h, 0FFh,	3Dh, 90h, 0FFh,	86h, 20h, 18h
		db 1Fh,	0Ch, 1Dh, 0Ch, 20h, 18h, 1Fh, 0Ch, 1Dh,	0Ch, 20h
		db 18h,	1Fh, 0Ch, 1Dh, 0Ch, 20h, 18h, 1Fh, 0Ch,	1Dh, 0Ch
		db 0FFh, 85h, 3Dh, 6Ch,	1Dh, 0Ch, 20h, 0Ch, 24h, 0Ch, 29h
		db 0Ch,	24h, 0Ch, 1Dh, 0Ch, 20h, 0Ch, 0FFh, 86h, 23h, 0Ch
		db 20h,	0Ch, 22h, 0Ch, 20h, 0Ch, 0FFh, 81h, 1Dh, 48h, 1Ch
		db 48h,	1Ah, 48h, 18h, 48h, 20h, 48h, 22h, 48h,	1Dh, 90h
		db 0FFh, 81h, 18h, 48h,	21h, 48h, 24h, 48h, 29h, 48h, 27h
		db 48h,	29h, 48h, 18h, 90h, 0FFh, 85h, 1Dh, 24h, 1Dh, 0Ch
		db 1Dh,	0Ch, 1Dh, 0Ch, 1Dh, 24h, 1Dh, 0Ch, 1Dh,	0Ch, 1Dh
		db 0Ch,	1Dh, 24h, 1Dh, 0Ch, 1Dh, 0Ch, 1Dh, 0Ch,	1Dh, 24h
		db 1Dh,	0Ch, 1Dh, 0Ch, 1Dh, 0Ch, 20h, 24h, 20h,	0Ch, 20h
		db 0Ch,	20h, 0Ch, 22h, 24h, 22h, 12h, 22h, 12h,	0FFh, 1Dh
		db 24h,	1Dh, 0Ch, 1Dh, 0Ch, 1Dh, 0Ch, 1Dh, 0Ch,	1Dh, 0Ch
		db 1Dh,	0Ch, 1Dh, 0Ch, 1Dh, 0Ch, 1Dh, 0Ch, 0FFh, 20h, 48h
		db 22h,	48h, 22h, 90h, 0FFh, 87h, 33h, 36h, 33h, 12h, 32h
		db 12h,	30h, 12h, 2Eh, 1Eh, 32h, 6, 0FFh, 30h
		db 6Ch,	29h, 24h, 0FFh,	32h, 6Ch, 29h, 24h, 0FFh, 29h
		db 90h,	0FFh, 24h, 0A3h, 75h, 0A3h, 4Ch, 0A3h, 0B0h, 0A3h
		db 0B1h, 0A3h, 0CDh, 0A3h, 0D0h, 0A3h, 0E2h, 0A3h, 72h
		db 0A3h, 9Bh, 0A3h, 0F4h, 0A3h,	0F5h, 0A3h, 0FFh, 0A3h
		db 5, 0A4h, 0Bh, 0A4h, 1Fh, 0A4h, 31h, 0A4h, 39h, 0A4h
		db 39h,	0A4h, 41h, 0A4h, 49h, 0A4h, 51h, 0A4h, 52h, 0A4h
		db 6Fh,	0A4h, 73h, 0A4h, 89h, 0A4h, 0A3h, 0A4h,	8Ah, 0A4h
		db 0ADh, 0A4h, 0B1h, 0A4h, 0BFh, 0A4h, 0C9h, 0A4h, 0C9h
		db 0A4h, 0CFh, 0A4h, 0F1h, 0A4h, 0FBh, 0A4h, 0FEh, 0A4h
		db 0Fh,	0A5h, 21h, 0A5h, 24h, 0A5h, 3Eh, 0A5h, 3Eh, 0A5h
		db 50h,	0A5h, 5Ah, 0A5h, 6Ah, 0A5h, 7Ah, 0A5h, 9Bh, 0A5h
		db 0AAh, 0A5h, 63h, 0A5h, 0BFh,	0A5h, 0C6h, 0A5h, 0D4h
		db 0A5h, 0D9h, 0A5h, 0DEh, 0A5h, 90h, 0A6h, 0A5h, 0A6h
		db 0BBh, 0A6h, 0F9h, 0A6h, 0FBh, 0A6h, 0FDh, 0A6h, 0F3h
		db 0A6h, 0F5h, 0A6h, 0F7h, 0A6h, 0E4h, 0A6h, 0E9h, 0A6h
		db 0EEh, 0A6h, 8Fh, 0A6h, 8Fh, 0A6h, 8Fh, 0A6h,	0FFh, 0A6h
		db 2, 0A7h, 7, 0A7h, 4Dh, 0A7h,	55h, 0A7h, 5Eh,	0A7h, 18h
		db 0A7h, 37h, 0A7h, 42h, 0A7h, 75h, 0A7h, 7Dh, 0A7h, 85h
		db 0A7h, 0Bh, 0A7h, 0Fh, 0A7h, 13h, 0A7h, 88h, 0A7h, 95h
		db 0A7h, 0B0h, 0A7h, 0FFh, 2 dup(0), 0C0h, 3, 2	dup(0)
		db 0C0h, 0F4h, 4, 5, 0C0h, 0F2h, 4, 0C0h, 0F8h,	5, 0C0h
		db 3 dup(0), 0FFh, 1, 9, 1, 9, 0C0h, 3,	1, 9, 1, 9, 0C0h
		db 0, 6, 0C0h, 0, 1, 9,	1, 0C0h, 0F9h, 9, 0FFh,	2, 8, 2
		db 8, 0C0h, 3, 2, 8, 2,	8, 0C0h, 0, 7, 0C0h, 0FEh, 7, 0C0h
		db 0, 7, 0C0h, 0FEh, 2 dup(7), 0C0h, 0FCh, 7, 0C0h, 0FEh
		db 7, 0C0h, 2, 7, 0C0h,	0, 2, 8, 2, 0C0h, 2, 8,	0FFh, 0Bh
		db 0C0h, 3, 0Bh, 0FFh, 0Ch, 0C0h, 3, 0Ch, 0FFh,	0Dh, 0C0h
		db 3, 0Dh, 0FFh, 0Eh, 0FFh, 0Fh, 0FFh, 10h, 0FFh, 12h
		db 0FFh, 13h, 0FFh, 14h, 0FFh, 8Ch, 15h, 0FFh, 18h, 0C0h
		db 5, 18h, 0FFh, 17h, 8Ch, 16h,	0FFh, 8Bh, 19h,	2 dup(0FFh)
		db 84h,	1Ah, 2 dup(0FFh), 1Ch, 8Bh, 1Bh, 2 dup(0FFh), 1Dh
		db 0C0h, 3, 1Dh, 0C0h, 0, 1Dh, 0C0h, 3,	2 dup(1Dh), 0C0h
		db 6, 1Dh, 0C0h, 3, 1Dh, 0C0h, 6, 2 dup(1Dh), 0C0h, 3
		db 1Dh,	0C0h, 0, 1Dh, 0C0h, 3, 1Dh, 0FFh, 2 dup(1Eh), 0C0h
		db 3, 2	dup(1Eh), 0C0h,	0, 2 dup(1Eh), 0FFh, 2 dup(20h)
		db 0C0h, 3, 2 dup(20h),	0C0h, 0, 2 dup(20h), 0FFh, 88h
		db 21h,	0FFh, 0C0h, 7, 84h, 21h, 0FFh, 23h, 8Eh, 24h, 0FFh
		db 0C0h, 7, 88h, 24h, 0FFh, 84h, 26h, 25h, 84h,	26h, 25h
		db 2 dup(26h), 0FFh, 0C0h, 0FBh, 25h, 2	dup(26h), 0C0h
		db 7, 25h, 84h,	26h, 0C0h, 0, 25h, 0FFh, 27h, 0C0h, 3
		db 27h,	0C0h, 0, 27h, 0FFh, 29h, 0C0h, 3, 29h, 0C0h, 0
		db 29h,	0FFh, 90h, 2Ah,	0FFh, 2	dup(2Bh), 30h, 31h, 2 dup(30h)
		db 2 dup(2Bh), 30h, 31h, 2 dup(30h), 0FFh, 2 dup(2Ch)
		db 0C0h, 0F4h, 32h, 33h, 32h, 34h, 32h,	33h, 32h, 35h
		db 0C0h, 0, 2 dup(2Ch),	0C0h, 0F4h, 32h, 33h, 32h, 34h
		db 32h,	33h, 32h, 35h, 0FFh, 2Dh, 2Fh, 2Dh, 2Fh, 2Eh, 2Fh
		db 2Eh,	0C0h, 5, 2Fh, 0C0h, 0, 2Eh, 2Fh, 2Eh, 2Fh, 2Dh
		db 2Fh,	2Dh, 2Fh, 2Eh, 2Fh, 2Eh, 0C0h, 5, 2Fh, 0C0h, 0
		db 2Eh,	2Fh, 2Eh, 2Fh, 0FFh, 90h, 1Fh, 5Fh, 0CAh, 59h
		db 0BEh, 54h, 0FDh, 4Fh, 7Eh, 4Bh, 42h,	47h, 42h, 43h
		db 7Bh,	3Fh, 0ECh, 3Bh,	8Fh, 38h, 62h, 35h, 63h, 32h, 8Fh
		db 2Fh,	0E4h
		db 2Ch,	5Fh, 2Ah, 0FEh,	27h, 0C0h, 25h,	0A1h, 23h, 0A1h
		db 21h,	0BEh, 1Fh, 0F6h, 1Dh, 48h, 1Ch,	0B1h, 1Ah, 32h
		db 19h,	0C8h, 17h, 72h,	16h, 30h, 15h, 0FFh, 13h, 0E0h
		db 12h,	0D1h, 11h, 0D1h, 10h, 0DFh, 0Fh, 0FBh, 0Eh, 24h
		db 0Eh,	59h, 0Dh, 99h, 0Ch, 0E4h, 0Bh, 39h, 0Bh, 98h, 0Ah
		db 0, 0Ah, 70h,	9, 0E8h, 8, 68h, 8, 0F0h, 7, 7Eh, 7, 12h
		db 7, 0ACh, 6, 4Ch, 6, 0F2h, 5,	9Dh, 5,	4Ch, 5,	0, 5, 0B8h
		db 4, 74h, 4, 34h, 4, 0F8h, 3, 0BFh, 3,	82h, 3,	56h, 3
		db 26h,	3, 0F9h, 2, 2 dup(0)
byte_1AC4E	db 0			; DATA XREF: sub_1AC6D+6Cw
					; sub_1AC6D:loc_1AD48r	...
		align 2
word_1AC50	dw 0			; DATA XREF: sub_1AC6D:loc_1AC94w
					; sub_1AC6D:loc_1AD0Fw	...
byte_1AC52	db 0			; DATA XREF: sub_1AC6D+32w
					; sub_1AC6D:loc_1ACB5w	...
		align 2
word_1AC54	dw 0			; DATA XREF: sub_1AC6D+4Dr
					; sub_1AC6D+95w ...
word_1AC56	dw 0			; DATA XREF: sub_1AC6D+3Cw
					; sub_1AC6D+91w ...
word_1AC58	dw 0			; DATA XREF: sub_1AC6D+38r
					; sub_1AC6D+99w ...
byte_1AC5A	db 0			; DATA XREF: sub_1AC6D:loc_1AC8Ar
					; sub_1AC6D+40w ...
		align 2
word_1AC5C	dw 0			; DATA XREF: sub_1AD6E+36w
byte_1AC5E	db 0			; DATA XREF: sub_1AC6D+5r
					; sub_1AC6D+17w ...
		align 2
byte_1AC60	db 0			; DATA XREF: sub_1AC6D:loc_1AC7Dr
					; start+AFw
		align 2
		dd loc_1BC4F+1
; ---------------------------------------------------------------------------
		mov	ds, ax
		pop	ax
		call	sub_1AD6E
		retn

; =============== S U B	R O U T	I N E =======================================


sub_1AC6D	proc near		; CODE XREF: sub_1AC6D+CCj
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		cmp	byte_1AC5E, 0FFh
		jz	short loc_1AC7D
		call	sub_1AEE6
		retn
; ---------------------------------------------------------------------------

loc_1AC7D:				; CODE XREF: sub_1AC6D+Aj
		cmp	byte_1AC60, 1
		jz	short loc_1AC8A
		mov	byte_1AC5E, 0
		retn
; ---------------------------------------------------------------------------

loc_1AC8A:				; CODE XREF: sub_1AC6D+15j
		test	byte_1AC5A, 0FFh
		jz	short loc_1AC94
		jmp	short loc_1AD0F
; ---------------------------------------------------------------------------
		align 2

loc_1AC94:				; CODE XREF: sub_1AC6D+22j
		mov	word_1AC50, 0
		mov	byte_1AC5E, 0FFh
		dec	byte_1AC52
		jz	short loc_1ACB5
		mov	si, word_1AC58
		mov	word_1AC56, si
		mov	byte_1AC5A, 0FFh
		jmp	short loc_1AD0F
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1ACB5:				; CODE XREF: sub_1AC6D+36j
		mov	byte_1AC52, 1
		mov	si, word_1AC54

loc_1ACBE:				; CODE XREF: sub_1AC6D+78j
		mov	al, [si]
		lodsb
		xor	ah, ah
		cmp	ax, 0FFh
		jnz	short loc_1ACD1
		call	sub_1ADB0
		mov	byte_1AC5E, 0
		retn
; ---------------------------------------------------------------------------

loc_1ACD1:				; CODE XREF: sub_1AC6D+59j
		cmp	ax, 0C0h ; '¿'
		jl	short loc_1ACE0
		lodsb
		xor	ah, ah
		mov	byte_1AC4E, al
		lodsb
		jmp	short loc_1ACF3
; ---------------------------------------------------------------------------
		align 2

loc_1ACE0:				; CODE XREF: sub_1AC6D+67j
		cmp	ax, 81h	; 'Å'
		jl	short loc_1ACE7
		jmp	short loc_1ACBE
; ---------------------------------------------------------------------------

loc_1ACE7:				; CODE XREF: sub_1AC6D+76j
		cmp	ax, 80h	; 'Ä'
		jl	short loc_1ACF3
		sub	ax, 80h	; 'Ä'
		mov	byte_1AC52, al
		lodsb

loc_1ACF3:				; CODE XREF: sub_1AC6D+70j
					; sub_1AC6D+7Dj
		mov	bx, 0A5E1h
		xor	ah, ah
		shl	ax, 1
		add	bx, ax
		mov	bx, [bx]
		mov	word_1AC56, bx
		mov	word_1AC54, si
		mov	word_1AC58, bx
		mov	byte_1AC5A, 0FFh

loc_1AD0F:				; CODE XREF: sub_1AC6D+24j
					; sub_1AC6D+45j
		dec	word_1AC50
		cmp	word_1AC50, 3
		jle	short loc_1AD1B
		retn
; ---------------------------------------------------------------------------

loc_1AD1B:				; CODE XREF: sub_1AC6D+ABj
		cmp	word_1AC50, 0FFFFh
		jz	short loc_1AD25
		jmp	short loc_1AD6A
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1AD25:				; CODE XREF: sub_1AC6D+B3j
		mov	si, word_1AC56
		mov	bx, 0A7D2h

loc_1AD2C:				; CODE XREF: sub_1AC6D+D9j
		lodsb
		xor	ah, ah
		cmp	ax, 0FFh
		jnz	short loc_1AD3C
		mov	byte_1AC5A, 0
		jmp	sub_1AC6D
; ---------------------------------------------------------------------------

loc_1AD3C:				; CODE XREF: sub_1AC6D+C5j
		cmp	ax, 3Dh	; '='
		jz	short loc_1AD60
		cmp	ax, 81h	; 'Å'
		jl	short loc_1AD48
		jmp	short loc_1AD2C
; ---------------------------------------------------------------------------

loc_1AD48:				; CODE XREF: sub_1AC6D+D7j
		add	al, byte_1AC4E
		shl	ax, 1
		add	bx, ax
		mov	cx, [bx]
		lodsb
		xor	ah, ah
		mov	word_1AC56, si
		mov	word_1AC50, ax
		call	sub_1ADB7
		retn
; ---------------------------------------------------------------------------

loc_1AD60:				; CODE XREF: sub_1AC6D+D2j
		lodsb
		xor	ah, ah
		mov	word_1AC56, si
		mov	word_1AC50, ax

loc_1AD6A:				; CODE XREF: sub_1AC6D+B5j
		call	sub_1ADB0
		retn
sub_1AC6D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1AD6E	proc near		; CODE XREF: seg001:A869p sub_1AECD+Fp
		xor	ah, ah
		shl	ax, 1
		mov	bx, ax
		shl	ax, 1
		add	ax, bx
		mov	bx, 0A64Dh
		add	bx, ax
		mov	bx, [bx]
		mov	word_1AC54, bx
		mov	byte_1AC52, 1
		mov	byte_1AC4E, 0
		mov	word_1AC50, 1
		mov	word_1AC56, 0
		mov	word_1AC58, 0
		mov	byte_1AC5A, 0
		mov	word_1AC5C, 0
		mov	byte_1AC5E, 0FFh
		retn
sub_1AD6E	endp


; =============== S U B	R O U T	I N E =======================================


sub_1ADB0	proc near		; CODE XREF: sub_16B9B+2B6Ep
					; sub_1AC6D+5Bp ...
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	al, 0FDh
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		retn
sub_1ADB0	endp


; =============== S U B	R O U T	I N E =======================================


sub_1ADB7	proc near		; CODE XREF: sub_1AC6D+EFp
					; sub_1AEE6+32p
		mov	dx, 43h	; 'C'
		mov	al, 0B6h ; '∂'
		out	dx, al		; Timer	8253-5 (AT: 8254.2).
		dec	dx
		mov	al, cl
		out	dx, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, ch
		out	dx, al		; Timer	8253-5 (AT: 8254.2).
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 3
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		retn
sub_1ADB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1ADCB	proc near		; CODE XREF: sub_196DD+Fp
		push	ds
		push	es
		mov	ah, 35h	; '5'
		mov	al, 8
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		push	ax
		mov	ax, seg	seg001
		mov	ds, ax
		assume ss:nothing
		pop	ax
		mov	word_1BC8E, es
		mov	cs:seg_1AE7B, es
		mov	word_1BC90, bx
		mov	cs:word_1AE79, bx
		mov	ah, 25h	; '%'
		mov	al, 8
		push	cs
		pop	ds
		mov	dx, 0AA28h
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		mov	ax, 4000h
		out	40h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, ah
		out	40h, al		; Timer	8253-5 (AT: 8254.2).
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_1ADCB	endp


; =============== S U B	R O U T	I N E =======================================


sub_1AE03	proc near		; CODE XREF: sub_16B9B+2B59p
		push	ds
		push	ax
		mov	ax, 0
		out	40h, al		; Timer	8253-5 (AT: 8254.2).
		mov	al, ah
		out	40h, al		; Timer	8253-5 (AT: 8254.2).
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	dx, word_1BC90
		mov	ds, word_1BC8E
		assume ds:nothing
		mov	ah, 25h	; '%'
		mov	al, 8
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ax
		pop	ds
		retn
sub_1AE03	endp

; ---------------------------------------------------------------------------
		db 3, 90h, 0, 90h, 1Eh,	6, 9Ch,	50h, 53h, 51h, 52h, 56h
		db 57h,	55h, 0B8h
		dw seg seg001
		db 8Eh,	0D8h, 0F6h, 16h, 26h, 0AAh, 83h, 3Eh, 2Bh, 0ABh
		db 1, 75h, 0Dh,	83h, 3Eh, 5Bh, 0B5h, 1,	74h, 9,	0E8h, 0CCh
		db 0Bh,	0EBh, 4, 90h, 0E8h, 1Bh, 2 dup(0FEh), 6, 24h, 0AAh
		db 80h,	26h, 24h, 0AAh,	3, 74h,	11h, 5Dh, 5Fh, 5Eh, 5Ah
		db 59h,	5Bh, 58h, 9Dh, 7, 1Fh, 50h, 0B0h, 20h, 0E6h, 20h
		db 58h,	0CFh, 5Dh, 5Fh,	5Eh, 5Ah, 59h, 5Bh, 58h, 9Dh, 7
		db 1Fh,	0EAh
word_1AE79	dw 0AA78h		; DATA XREF: sub_1ADCB+1Cw
seg_1AE7B	dw seg seg001		; DATA XREF: sub_1ADCB+13w
		db 4 dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_1AE81	proc near		; CODE XREF: start+ACp
		mov	al, ds:0AA26h

loc_1AE84:				; CODE XREF: sub_1AE81+7j
		cmp	al, ds:0AA26h
		jz	short loc_1AE84
		mov	al, ds:0AA26h

loc_1AE8D:				; CODE XREF: sub_1AE81+24j
		add	byte ptr ds:0AA7Dh, 1
		adc	byte ptr ds:0AA7Eh, 0
		adc	byte ptr ds:0AA7Fh, 0
		adc	byte ptr ds:0AA80h, 0
		cmp	al, ds:0AA26h
		jz	short loc_1AE8D
		mov	ax, ds:0AA7Dh
		cmp	ax, 0B00h
		jl	short loc_1AEB6
		mov	word ptr ds:96F4h, 3
		retn
; ---------------------------------------------------------------------------

loc_1AEB6:				; CODE XREF: sub_1AE81+2Cj
		cmp	ax, 700h
		jl	short loc_1AEC2
		mov	word ptr ds:96F4h, 2
		retn
; ---------------------------------------------------------------------------

loc_1AEC2:				; CODE XREF: sub_1AE81+38j
		mov	word ptr ds:96F4h, 1
		call	word ptr ds:4Ah
		retn
sub_1AE81	endp


; =============== S U B	R O U T	I N E =======================================


sub_1AECD	proc near		; CODE XREF: sub_16205-1Ap
					; sub_16205-4p	...

; FUNCTION CHUNK AT B782 SIZE 000000F2 BYTES

		cmp	ax, 0Bh
		jl	short loc_1AED5
		jmp	loc_1BB82
; ---------------------------------------------------------------------------

loc_1AED5:				; CODE XREF: sub_1AECD+3j
		cmp	word ptr ds:0AB2Bh, 1
		jz	short loc_1AEE0
		call	sub_1AD6E
		retn
; ---------------------------------------------------------------------------

loc_1AEE0:				; CODE XREF: sub_1AECD+Dj
		mov	bx, ax
		call	sub_1B95D
		retn
sub_1AECD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1AEE6	proc near		; CODE XREF: sub_1AC6D+Cp
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		cmp	word_1AF2B, 1
		jz	short locret_1AF25
		cmp	byte_1AC5E, 0FFh
		jz	short locret_1AF25
		mov	si, word_1AF29
		or	si, si
		jnz	short loc_1AF02
		retn
; ---------------------------------------------------------------------------

loc_1AF02:				; CODE XREF: sub_1AEE6+19j
		mov	cl, [si]
		xor	ch, ch
		inc	si
		mov	word_1AF29, si
		or	cx, cx
		jz	short loc_1AF1C
		add	cx, cx
		mov	bx, 0A7D2h
		add	bx, cx
		mov	cx, [bx]
		call	sub_1ADB7
		retn
; ---------------------------------------------------------------------------

loc_1AF1C:				; CODE XREF: sub_1AEE6+27j
		mov	word_1AF29, 0
		call	sub_1ADB0

locret_1AF25:				; CODE XREF: sub_1AEE6+Aj
					; sub_1AEE6+11j
		retn
sub_1AEE6	endp

; ---------------------------------------------------------------------------
		retn
; ---------------------------------------------------------------------------
word_1AF27	dw 0			; DATA XREF: sub_1AECD+CE4r
					; sub_1AECD:loc_1BBBAw	...
word_1AF29	dw 0			; DATA XREF: sub_1AEE6+13r
					; sub_1AEE6+21w ...
word_1AF2B	dw 0			; DATA XREF: sub_1AEE6+5r
					; sub_1AECD+CC7r ...
		align 2
		db 6, 2	dup(0),	3, 0, 4, 0, 3, 0, 8, 3 dup(0), 2, 0, 2
		db 0, 18h, 0, 1, 0, 1, 3 dup(0), 1, 3 dup(0), 1, 0, 5
		db 0, 7, 0, 4, 3 dup(0), 1, 0, 3, 5 dup(0), 1, 0, 1, 0
		db 1, 0, 1, 3 dup(0), 3, 0, 7, 0, 3, 0,	8, 0, 1, 0, 2
		db 0, 2, 0, 18h, 0, 1, 0, 1, 3 dup(0), 1, 3 dup(0), 1
		db 0, 5, 0, 7, 0, 4, 3 dup(0), 1, 0, 3,	5 dup(0), 1, 0
		db 1, 0, 1, 5 dup(0), 6, 0, 7, 0, 0Fh, 0, 0Eh, 3 dup(0)
		db 5, 0, 5, 3 dup(0), 1, 0, 1, 0, 1, 0,	1, 3 dup(0), 6
		db 0, 0Ch, 0, 0Bh, 0, 3, 3 dup(0), 4, 0, 0Fh, 5	dup(0)
		db 1, 3	dup(0),	1, 5 dup(0), 6,	0, 7, 0, 0Fh, 0, 0Eh, 3	dup(0)
		db 5, 0, 5, 3 dup(0), 1, 0, 1, 0, 1, 0,	1, 3 dup(0), 6
		db 0, 0Ch, 0, 0Bh, 0, 3, 3 dup(0), 4, 0, 0Fh, 5	dup(0)
		db 1, 3	dup(0),	1, 0, 1, 9, 2 dup(0), 6, 0, 7, 0, 0Bh
		db 0, 0Eh, 3 dup(0), 5,	0, 5, 3	dup(0),	1, 0, 1, 3 dup(0)
		db 1, 3	dup(0),	6, 0, 0Ch, 0, 0Ah, 0, 5, 3 dup(0), 4, 0
		db 0Bh,	5 dup(0), 1, 3 dup(0), 1, 3 dup(0), 1, 3 dup(0)
		db 7, 0, 0Fh, 5	dup(0),	3, 0, 1, 3 dup(0), 1, 3	dup(0)
		db 1, 0, 1, 5 dup(0), 3, 0, 0Fh, 0, 2, 3 dup(0), 2, 0
		db 5, 7	dup(0),	1, 0, 1, 3 dup(0), 1, 0, 4, 0, 7, 0, 0Fh
		db 0, 7, 0, 1, 5 dup(0), 10h, 3	dup(0),	1, 0, 1, 0, 1
		db 3 dup(0), 1,	0, 0Ch,	0, 0Bh,	0, 7, 3	dup(0),	2, 0, 8
		db 7 dup(0), 1,	0, 1, 3	dup(0),	1, 3 dup(0), 7,	0, 0Fh
		db 0, 7, 0, 1, 5 dup(0), 5, 5 dup(0), 1, 0, 1, 0, 2, 0
		db 2, 0, 2, 0, 6, 0, 7,	3 dup(0), 2, 0,	7, 5 dup(0), 1
		db 0, 1, 5 dup(0), 2, 3	dup(0),	6, 0, 0Fh, 0, 9, 3 dup(0)
		db 5, 0, 2, 0, 10h, 7 dup(0), 1, 3 dup(0), 1, 0, 0Ch, 0
		db 0Fh,	0, 5, 3	dup(0),	2, 0, 0Bh, 7 dup(0), 1,	0, 1, 3	dup(0)
		db 2, 3	dup(0),	7, 0, 0Fh, 0, 9, 0, 1, 0, 5, 0,	0Eh, 0
		db 10h,	7 dup(0), 1, 3 dup(0), 1, 0, 0Ch, 0, 0Fh, 0, 5
		db 3 dup(0), 4,	0, 0Bh,	7 dup(0), 1, 0,	1, 3 dup(0), 2
		db 3 dup(0), 5,	0, 6, 0, 9, 3 dup(0), 5, 3 dup(0), 0Ah
		db 7 dup(0), 1,	3 dup(0), 1, 0,	8, 0, 0Fh, 0, 2, 3 dup(0)
		db 3, 0, 0Bh, 7	dup(0),	1, 0, 1, 0, 1, 6, 4 dup(0), 3
		db 0, 0Eh, 0, 0Eh, 3 dup(0), 5,	0, 5, 3	dup(0),	1, 5 dup(0)
		db 1, 3	dup(0),	6, 0, 0Ch, 0, 0Ah, 0, 5, 3 dup(0), 4, 0
		db 0Bh,	5 dup(0), 1, 3 dup(0), 1, 0, 1,	6, 2 dup(0), 1
		db 3 dup(0), 0Eh, 0, 0Eh, 3 dup(0), 5, 0, 5, 0,	1, 3 dup(0)
		db 1, 3	dup(0),	1, 0, 2, 0, 3, 0, 9, 0,	0Ah, 0,	6, 3 dup(0)
		db 5, 0, 0Ch, 5	dup(0),	1, 7 dup(0), 2,	3 dup(0), 6, 0
		db 0Fh,	0, 9, 0, 1, 0, 5, 0, 0Eh, 0, 10h, 7 dup(0), 1
		db 3 dup(0), 3,	0, 0Ch,	0, 0Eh,	0, 5, 3	dup(0),	6, 0, 4
		db 7 dup(0), 1,	0, 1, 3	dup(0),	1, 0, 6, 0, 7, 0, 0Eh
		db 0, 0Ah, 3 dup(0), 5,	0, 8, 3	dup(0),	1, 5 dup(0), 1
		db 5 dup(0), 5,	0, 0Eh,	0, 2
		db 3 dup(0), 4,	0, 0Fh,	3 dup(0), 1, 0,	1, 0, 1, 5 dup(0)
		db 1, 0, 3, 0, 7, 0, 9,	0, 0Ah,	3 dup(0), 5, 0,	8, 9 dup(0)
		db 1, 7	dup(0),	4, 0, 0Fh, 3 dup(0), 3,	0, 7, 5	dup(0)
		db 1, 0, 1, 0, 1, 3 dup(0), 2, 3 dup(0), 7, 0, 0Fh, 0
		db 9, 3	dup(0),	5, 0, 0Eh, 0, 0Fh, 3 dup(0), 1,	3 dup(0)
		db 1, 3	dup(0),	1, 0, 0Ch, 0, 0Ah, 0, 3, 3 dup(0), 3, 0
		db 5, 7	dup(0),	1, 0, 1, 5 dup(0), 1, 0, 7, 0, 0Fh, 0
		db 9, 0, 1, 0, 5, 0, 0Eh, 0, 10h, 0, 1,	5 dup(0), 1, 3 dup(0)
		db 4, 0, 0Ch, 0, 5, 0, 5, 3 dup(0), 5, 0, 5, 3 dup(0)
		db 1, 3	dup(0),	1, 0, 1, 7 dup(0), 6, 0, 0Fh, 0, 9, 3 dup(0)
		db 5, 0, 0Eh, 0, 0Ch, 3	dup(0),	1, 0, 1, 0, 1, 5 dup(0)
		db 0Ch,	0, 5, 0, 4, 3 dup(0), 3, 0, 0Dh, 7 dup(0), 1, 0
		db 1, 3	dup(0),	1, 3 dup(0), 7,	0, 0Fh,	5 dup(0), 3, 0
		db 1, 3	dup(0),	1, 3 dup(0), 1,	0, 1, 5	dup(0),	7, 0, 0Fh
		db 0, 2, 3 dup(0), 1, 0, 6, 5 dup(0), 1, 0, 1, 0, 1, 3 dup(0)
		db 2, 3	dup(0),	4, 0, 0Bh, 0, 9, 0, 1, 0, 5, 0,	0Eh, 0
		db 10h,	7 dup(0), 1, 3 dup(0), 1, 0, 0Ch, 0, 7,	0, 5, 3	dup(0)
		db 4, 0, 0Bh, 7	dup(0),	1, 0, 1, 3 dup(0), 2, 5	dup(0)
		db 0Fh,	0, 9, 3	dup(0),	5, 0, 0Dh, 0, 4, 0, 1, 0, 1, 3 dup(0)
		db 1, 5	dup(0),	0Ah, 0,	7, 0, 1, 3 dup(0), 3, 0, 8, 0
		db 2, 7	dup(0),	1, 3 dup(0), 2,	3 dup(0), 5, 0,	6, 0, 9
		db 3 dup(0), 5,	3 dup(0), 0Ah, 7 dup(0), 1, 3 dup(0), 1
		db 0, 8, 0, 0Fh, 0, 2, 3 dup(0), 5, 0, 0Bh, 7 dup(0), 1
		db 0, 1, 3 dup(0), 2, 3	dup(0),	5, 0, 0Fh, 0, 9, 3 dup(0)
		db 5, 3	dup(0),	0Ah, 7 dup(0), 1, 3 dup(0), 1, 0, 8, 0
		db 0Fh,	0, 2, 3	dup(0),	5, 0, 0Bh, 7 dup(0), 1,	0, 1, 3	dup(0)
		db 2, 3	dup(0),	7, 0, 0Fh, 0, 9, 0, 1, 0, 5, 0,	0Eh, 0
		db 8, 7	dup(0),	1, 3 dup(0), 1,	3 dup(0), 0Fh, 0, 4, 3 dup(0)
		db 4, 0, 6, 5 dup(0), 1, 0, 1, 0, 1, 3 dup(0), 2, 0, 6
		db 0, 6, 0, 0Fh, 5 dup(0), 0Fh,	0, 1, 0, 10h, 5	dup(0)
		db 1, 0, 1, 3 dup(0), 1, 0, 0Ch, 0, 0Fh, 0, 5, 3 dup(0)
		db 6, 0, 0Bh, 7	dup(0),	1, 0, 1, 3 dup(0), 2, 0, 1, 0
		db 7, 0, 0Fh, 0, 0Fh, 3	dup(0),	0Fh, 3 dup(0), 0Ah, 3 dup(0)
		db 1, 3	dup(0),	1, 5 dup(0), 0Ch, 0, 0Fh, 0, 5,	3 dup(0)
		db 0Ah,	0, 0Bh,	7 dup(0), 1, 0,	1, 7 dup(0), 7,	0, 0Ah
		db 0, 5, 0, 1, 0, 5, 0,	5, 5 dup(0), 1,	0, 1, 0, 1, 5 dup(0)
		db 0Ch,	0, 8, 0, 9, 3 dup(0), 8, 0, 0Dh, 5 dup(0), 1, 3	dup(0)
		db 1, 0Fh dup(0), 0Fh, 3 dup(0), 3Fh, 0Bh dup(0), 1, 0
		db 0Ch,	3 dup(0), 5, 3 dup(0), 4, 0, 0Bh, 7 dup(0), 1
		db 0, 1, 3 dup(0), 2, 3	dup(0),	5, 0, 0Fh, 0, 9, 0, 1
		db 0, 5, 0, 0Eh, 9 dup(0), 1, 3	dup(0),	1, 0, 0Ch, 0, 0Fh
		db 0, 5, 3 dup(0), 4, 0, 0Bh, 7	dup(0),	1, 0, 1, 0, 2Dh
		db 0ABh, 0Ch, 0, 63h, 0ABh, 0Ch, 0, 99h, 0ABh, 2 dup(0)
		db 0CFh, 0ABh, 2 dup(0), 5, 0ACh, 2 dup(0), 3Bh, 0ACh
		db 0F0h, 0, 71h, 0ACh, 14h, 0, 0A7h, 0ACh
		db 15h,	0, 0DDh, 0ACh, 16h, 0, 13h, 0ADh, 2, 0,	49h, 0ADh
		db 0EBh, 0, 7Fh, 0ADh, 8, 0, 0B5h, 0ADh, 0FEh, 0, 0EBh
		db 0ADh, 2, 0, 21h, 0AEh, 2, 0,	57h, 0AEh, 2, 0, 8Dh, 0AEh
		db 0E9h, 0, 0C3h, 0AEh,	2, 0, 0F9h, 0AEh, 0Ch, 0, 2Fh
		db 0AFh, 0F6h, 0, 65h, 0AFh, 0E9h, 0, 9Bh, 0AFh, 2, 0
		db 0D1h, 0AFh, 0F8h, 0,	7, 0B0h, 2, 0, 3Dh, 0B0h, 2 dup(0)
		db 73h,	0B0h, 2, 0, 0A9h, 0B0h,	2, 0, 0DFh, 0B0h, 2, 0
		db 15h,	0B1h, 2	dup(0),	4Bh, 0B1h, 0E9h, 0, 23h, 22h, 21h
		db 20h,	1Fh, 1Eh, 1Dh, 1Ch, 1Bh, 1Ah, 19h, 18h,	17h, 16h
		db 15h,	14h, 0,	23h, 22h, 21h, 20h, 1Fh, 1Eh, 1Dh, 1Fh
		db 1Eh,	1Dh, 1Ch, 1Bh, 1Ah, 19h, 18h, 17h, 0, 18h, 19h
		db 1Ah,	1Bh, 1Ch, 1Dh, 0, 28h, 14h, 22h, 1Ah, 26h, 22h
		db 21h,	20h, 28h, 27h, 26h, 0, 0Ah, 6, 5, 3, 7,	5, 1, 3
		db 1, 0Ah, 4, 7, 5, 3, 2, 6, 9,	3, 2, 6, 4, 7, 3, 0, 8 dup(14h)
		db 8 dup(0Fh), 0, 0Ah, 0Bh, 0Ch, 0Dh, 0Eh, 0Fh,	10h, 11h
		db 12h,	13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah,	1Bh, 1Ch
		db 1Dh,	1Eh, 2 dup(0Fh), 2 dup(0Eh), 2 dup(0Dh), 2 dup(0Ch)
		db 2 dup(0Bh), 2 dup(0Ah), 2 dup(9), 2 dup(8), 2 dup(7)
		db 2 dup(6), 0,	0Ah, 0Bh, 0Ch, 0Dh, 0Eh, 0Bh, 0Ch, 0Dh
		db 0Eh,	0Fh, 0Ch, 0Dh, 0Eh, 0Fh, 10h, 0, 2 dup(0Ah), 2 dup(0Ch)
		db 2 dup(0Fh), 2 dup(14h), 2 dup(1Ah), 2 dup(25h), 2 dup(30h)
		db 0, 0Ch, 0Ah,	0Dh, 0Bh, 0Eh, 0Ch, 0, 0Ah, 14h, 5, 0Ch
		db 0Eh,	13h, 0,	14h, 13h, 12h, 11h, 10h, 2 dup(0Fh), 0Eh
		db 0Dh,	0, 3 dup(0Ah), 0Bh, 0Ch, 0Bh, 0Ah, 0, 0Fh, 14h
		db 19h,	1Eh, 23h, 28h, 2Dh, 0, 28h, 25h, 22h, 1Fh, 1Ch
		db 19h,	16h, 13h, 10h, 0Dh, 0Ah, 0, 0Ah, 6, 5, 3, 7, 5
		db 1, 3, 1, 0Ah, 4, 7, 5, 3, 2,	6, 9, 3, 2, 6, 4, 7, 3
		db 0, 0Ah, 9, 8, 0Ah, 9, 8, 0Ah, 9, 8, 0Ah, 9, 8, 0, 1Eh
		db 1Dh,	1Ch, 1Eh, 2 dup(1Dh), 0, 4, 5, 4, 5, 4,	5, 4, 3
		db 2, 1, 0, 0Ah, 9, 8, 7, 6, 9,	8, 7, 0, 0Ah, 5, 2, 5
		db 6, 2, 8, 5, 1, 5, 0Ah, 0Bh, 2, 4, 8,	5, 1, 0, 8, 0
		db 0Ah,	0, 0Ch,	2 dup(0), 0F9h,	0B1h, 0Ah, 0B2h, 1Bh, 0B2h
		db 1Bh,	0B2h, 22h, 0B2h, 2Eh, 0B2h, 46h, 0B2h, 57h, 0B2h
		db 57h,	0B2h, 6Ch, 0B2h, 81h, 0B2h, 91h, 0B2h, 91h, 0B2h
		db 0A0h, 0B2h, 0A7h, 0B2h, 0AEh, 0B2h, 0B8h, 0B2h, 0C0h
		db 0B2h, 0C8h, 0B2h, 2Eh, 0B2h,	0ECh, 0B2h, 0F9h, 0B2h
		db 0, 0B3h, 14h, 0B3h, 2Ch, 0B3h, 26h, 0B3h, 28h, 0B3h
		db 2Ah,	0B3h, 2Ch, 0B3h, 2Ch, 0B3h
word_1B769	dw 0			; DATA XREF: sub_1B93B+5r
		db 12h dup(0)
word_1B77D	dw 0			; DATA XREF: sub_1B93B+8r
		db 0Ah dup(0), 1, 7 dup(0)
word_1B791	dw 0			; DATA XREF: sub_1B93B+Cr
		db 0Ah dup(0), 2, 9 dup(0)
word_1B7A7	dw 0			; DATA XREF: sub_1BB3F-A0w
					; sub_1AECD+CFAw
word_1B7A9	dw 0			; DATA XREF: sub_1BB3F-ACw
					; sub_1AECD+CFFw
word_1B7AB	dw 0			; DATA XREF: sub_1BB3F-A6w
					; sub_1AECD+D03w
		db 6 dup(0), 0C1h, 0B3h, 0F7h, 0B3h, 2Dh, 0B4h,	63h, 0B4h
		db 99h,	0B4h, 0CFh, 0B4h, 5, 0B5h, 4 dup(0), 1,	0, 7, 0
		db 7, 0, 0Ah, 0, 1, 0, 1, 0, 0Eh, 0, 16h, 7 dup(0), 1
		db 3 dup(0), 1,	0, 7, 0, 8, 0, 9, 3 dup(0), 1, 0, 0Eh
		db 9 dup(0), 1,	5 dup(0), 1, 0,	7, 0, 5, 3 dup(0), 1, 0
		db 1, 0, 3, 0, 1Ch, 5 dup(0), 1, 0, 1, 0, 2, 0,	1, 3 dup(0)
		db 5, 0, 6, 3 dup(0), 4, 0, 3, 5 dup(0), 1, 3 dup(0), 1
		db 5 dup(0), 1,	0, 6, 0, 4, 0, 1, 0, 1,	0, 3, 0, 0Dh, 0
		db 1Ch,	7 dup(0), 1, 0,	2, 0, 1, 3 dup(0), 5, 0, 3, 3 dup(0)
		db 2, 0, 4, 5 dup(0), 1, 3 dup(0), 1, 3	dup(0),	3, 0, 5
		db 0, 1, 0, 8, 5 dup(0), 1, 0, 3, 0, 12h, 3 dup(0), 1
		db 3 dup(0), 1,	0, 2, 0, 1, 3 dup(0), 0Fh, 5 dup(0), 1
		db 0, 1, 5 dup(0), 1, 0, 1, 0, 1, 3 dup(0), 1, 0, 1, 0
		db 3, 0, 0Fh, 0, 5, 3 dup(0), 1, 0, 3, 0, 0Fh, 7 dup(0)
		db 1, 3	dup(0),	1, 0, 0F6h, 0FFh, 0Dh, 0, 7, 3 dup(0)
		db 2, 0, 4, 7 dup(0), 1, 0, 1, 3 dup(0), 2, 0, 1, 0, 3
		db 0, 0Fh, 0, 5, 3 dup(0), 2, 0, 1, 0, 1Dh, 3 dup(0), 1
		db 3 dup(0), 1,	3 dup(0), 3, 0,	0F6h, 0FFh, 0Fh, 0, 0Fh
		db 3 dup(0), 2,	0, 1, 9	dup(0),	1, 5 dup(0), 1,	0, 7, 0
		db 7, 0, 0Ah, 0, 1, 0, 1, 0, 0Eh, 0, 16h, 7 dup(0), 1
		db 3 dup(0), 1,	0, 7, 0, 8, 0, 9, 3 dup(0), 1, 0, 0Eh
		db 9 dup(0), 1,	0

; =============== S U B	R O U T	I N E =======================================


sub_1B93B	proc near		; CODE XREF: sub_1BA18+1Ep
		mov	ax, seg	seg001
		mov	ds, ax
		mov	ax, word_1B769
		or	ax, word_1B77D
		or	ax, word_1B791
		or	ax, ax
		jz	short loc_1B955
		mov	byte_1AC5E, 0FFh
		retn
; ---------------------------------------------------------------------------

loc_1B955:				; CODE XREF: sub_1B93B+12j
		mov	byte_1AC5E, 0
		retn
sub_1B93B	endp

; ---------------------------------------------------------------------------
word_1B95B	dw 0			; DATA XREF: sub_1B95D+4w

; =============== S U B	R O U T	I N E =======================================


sub_1B95D	proc near		; CODE XREF: sub_1AECD+15p
		mov	ax, cs
		mov	ds, ax
		mov	word_1B95B, 1
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 0
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		mov	word ptr ds:0B3A7h, 1
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 6
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		add	bx, bx
		mov	ax, bx
		add	bx, bx
		add	bx, ax
		add	bx, 0A64Dh
		mov	di, 0B369h
		mov	word ptr [di], 0FFh
		mov	ax, [bx]
		mov	[di+2],	ax
		xor	ax, ax
		mov	[di+10h], ax
		mov	[di+0Ch], ax
		mov	[di+12h], ax
		push	bx
		call	sub_1BB3F
		pop	bx
		inc	bx
		inc	bx
		mov	di, 0B37Dh
		mov	word ptr [di], 0FFh
		mov	ax, [bx]
		mov	[di+2],	ax
		xor	ax, ax
		mov	[di+10h], ax
		mov	ax, 1
		mov	[di+0Ch], ax
		mov	[di+12h], ax
		push	bx
		call	sub_1BB3F
		pop	bx
		inc	bx
		inc	bx
		mov	di, 0B391h
		mov	word ptr [di], 0FFh
		mov	ax, [bx]
		mov	[di+2],	ax
		xor	ax, ax
		mov	[di+10h], ax
		mov	ax, 2
		mov	[di+0Ch], ax
		mov	[di+12h], ax
		call	sub_1BB3F
		mov	word ptr ds:0B55Bh, 0
		retn
sub_1B95D	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BA18	proc near
		cmp	byte ptr ds:0A860h, 1
		jz	short loc_1BA20
		retn
; ---------------------------------------------------------------------------

loc_1BA20:				; CODE XREF: sub_1BA18+5j
		mov	ax, cs
		mov	ds, ax
		assume ds:seg001
		mov	di, 0B369h
		call	sub_1BA3A
		mov	di, 0B37Dh
		call	sub_1BA3A
		mov	di, 0B391h
		call	sub_1BA3A
		call	sub_1B93B
		retn
sub_1BA18	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BA3A	proc near		; CODE XREF: sub_1BA18+Fp
					; sub_1BA18+15p ...
		mov	ax, [di]
		or	ax, ax
		jnz	short loc_1BA41
		retn
; ---------------------------------------------------------------------------

loc_1BA41:				; CODE XREF: sub_1BA3A+4j
		mov	ax, [di+0Ch]
		mov	[di+12h], ax
		mov	si, [di+6]
		inc	byte ptr [di+8]
		mov	al, [si+1]
		cmp	al, [di+8]
		jz	short loc_1BA56
		retn
; ---------------------------------------------------------------------------

loc_1BA56:				; CODE XREF: sub_1BA3A+19j
		inc	si
		inc	si
sub_1BA3A	endp ; sp-analysis failed

; START	OF FUNCTION CHUNK FOR sub_1BB3F

loc_1BA58:				; CODE XREF: sub_1BB3F-CFj
					; sub_1BB3F-7Aj ...
		mov	al, [si]
		or	al, al
		jns	short loc_1BAC7
		cmp	al, 0FFh
		jnz	short loc_1BA72
		dec	word ptr [di+0Ah]
		jnz	short loc_1BA6A
		jmp	sub_1BB3F
; ---------------------------------------------------------------------------

loc_1BA6A:				; CODE XREF: sub_1BB3F-DAj
		mov	si, [di+4]
		mov	[di+6],	si
		jmp	short loc_1BA58
; ---------------------------------------------------------------------------

loc_1BA72:				; CODE XREF: sub_1BB3F-DFj
		and	al, 7Fh
		dec	al
		add	al, al
		xor	ah, ah
		mov	bx, ax
		add	bx, 0B3B3h
		mov	bx, [bx]
		mov	al, [bx]
		or	al, al
		jz	short loc_1BA90
		mov	al, [bx+1]
		xor	ah, ah
		mov	[di+12h], ax

loc_1BA90:				; CODE XREF: sub_1BB3F-B9j
		add	bx, 2
		mov	word_1B7A9, bx
		mov	ax, cs
		mov	word_1B7AB, ax
		mov	ax, [di+12h]
		mov	word_1B7A7, ax
		push	di
		push	si
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 15h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		pop	si
		pop	di
		inc	si
		jmp	short loc_1BA58
; ---------------------------------------------------------------------------

loc_1BAC7:				; CODE XREF: sub_1BB3F-E3j
		mov	word ptr [di+8], 0
		mov	[di+6],	si
		sub	al, 20h	; ' '
		cbw
		add	ax, [di+10h]
		mov	ds:0B3A9h, ax
		mov	ax, [di+0Eh]
		mov	ds:0B3A7h, ax
		mov	ax, cs
		mov	es, ax
		assume es:seg001
		mov	bx, 0B3A7h
		push	di
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		mov	si, 14h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		pop	di
		mov	ax, ds:0B3A9h
		sub	ax, [di+10h]
		cmp	ax, 1Dh
		jz	short locret_1BB3E
		mov	ax, [di+12h]
		mov	[di+0Eh], ax
		mov	ds:0B3A7h, ax
		mov	ax, cs
		mov	es, ax
		assume es:seg001
		mov	bx, 0B3A7h
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		mov	si, 13h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax

locret_1BB3E:				; CODE XREF: sub_1BB3F-31j
		retn
; END OF FUNCTION CHUNK	FOR sub_1BB3F

; =============== S U B	R O U T	I N E =======================================


sub_1BB3F	proc near		; CODE XREF: sub_1B95D+70p
					; sub_1B95D+91p ...

; FUNCTION CHUNK AT B658 SIZE 000000E7 BYTES

		mov	word ptr [di+0Ah], 1
		mov	si, [di+2]

loc_1BB47:				; CODE XREF: sub_1BB3F+23j
					; sub_1BB3F+2Bj
		mov	al, [si]
		cmp	al, 0FFh
		jnz	short loc_1BB52
		mov	word ptr [di], 0
		retn
; ---------------------------------------------------------------------------

loc_1BB52:				; CODE XREF: sub_1BB3F+Cj
		or	al, al
		jns	short loc_1BB6C
		cmp	al, 0C0h ; '¿'
		jnz	short loc_1BB64
		inc	si
		mov	al, [si]
		cbw
		mov	[di+10h], ax
		inc	si
		jmp	short loc_1BB47
; ---------------------------------------------------------------------------

loc_1BB64:				; CODE XREF: sub_1BB3F+19j
		and	al, 7Fh
		mov	[di+0Ah], al
		inc	si
		jmp	short loc_1BB47
; ---------------------------------------------------------------------------

loc_1BB6C:				; CODE XREF: sub_1BB3F+15j
		inc	si
		mov	[di+2],	si
		xor	ah, ah
		add	ax, ax
		mov	bx, ax
		add	bx, 0A5E1h
		mov	si, [bx]
		mov	[di+4],	si
		jmp	loc_1BA58
sub_1BB3F	endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_1AECD

loc_1BB82:				; CODE XREF: sub_1AECD+5j
		push	si
		push	di
		push	ax
		push	bx
		push	cx
		push	dx
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	ds, bx
		assume ds:seg001
		mov	es, bx
		assume es:seg001
		sub	ax, 0Bh
		cmp	word_1AF2B, 1
		jz	short loc_1BB9E
		jmp	loc_1BC4A
; ---------------------------------------------------------------------------

loc_1BB9E:				; CODE XREF: sub_1AECD+CCCj
		cmp	byte_1AC5E, 0FFh
		jnz	short loc_1BBA8
		jmp	loc_1BC40
; ---------------------------------------------------------------------------

loc_1BBA8:				; CODE XREF: sub_1AECD+CD6j
		add	ax, ax
		add	ax, ax
		mov	si, 0B181h
		add	si, ax
		mov	ax, word_1AF27
		dec	ax
		jns	short loc_1BBBA
		mov	ax, 5

loc_1BBBA:				; CODE XREF: sub_1AECD+CE8j
		mov	word_1AF27, ax
		mov	ax, [si+2]
		push	ax
		mov	si, [si]
		push	si
		mov	ax, word_1AF27
		mov	word_1B7A7, ax
		inc	si
		inc	si
		mov	word_1B7A9, si
		mov	word_1B7AB, ds
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		mov	si, 15h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		assume ds:nothing
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		mov	ax, ds:0AB27h
		mov	ds:0B3A7h, ax
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 14h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		mov	ax, ds:0AB27h
		mov	ds:0B3A7h, ax
		pop	si
		pop	ax
		cbw
		mov	ds:0B3A9h, ax
		push	ax
		push	bx
		push	cx
		push	dx
		push	si
		push	di
		push	bp
		push	ds
		push	es
		mov	bx, cs
		mov	es, bx
		assume es:seg001
		mov	si, 13h
		mov	bx, 0B3A7h
		int	65h		; reserved for user interrupt
		pop	es
		assume es:nothing
		pop	ds
		pop	bp
		pop	di
		pop	si
		pop	dx
		pop	cx
		pop	bx
		pop	ax

loc_1BC40:				; CODE XREF: sub_1AECD+CD8j
					; sub_1AECD+D84j ...
		pop	es
		pop	ds
		pop	bp
		pop	dx
		pop	cx
		pop	bx
		pop	ax
		pop	di
		pop	si
		retn
; ---------------------------------------------------------------------------

loc_1BC4A:				; CODE XREF: sub_1AECD+CCEj
		cmp	byte ptr ds:0A85Eh, 0FFh

loc_1BC4F:				; DATA XREF: seg001:A862o
		jnz	short loc_1BC53
		jmp	short loc_1BC40
; ---------------------------------------------------------------------------

loc_1BC53:				; CODE XREF: sub_1AECD:loc_1BC4Fj
		mov	dx, ds:0AB29h
		or	dx, dx
		jz	short loc_1BC65
		cmp	ax, 1Ah
		jz	short loc_1BC40
		cmp	ax, 1Bh
		jz	short loc_1BC40

loc_1BC65:				; CODE XREF: sub_1AECD+D8Cj
		add	ax, ax
		mov	si, 0B32Dh
		add	si, ax
		mov	si, [si]
		mov	ds:0AB29h, si
		jmp	short loc_1BC40
; END OF FUNCTION CHUNK	FOR sub_1AECD
; ---------------------------------------------------------------------------
byte_1BC74	db 18h,	25h, 2Ch, 2Dh, 19h, 0Ah	dup(0),	90h
					; DATA XREF: sub_1BCCD:loc_1BD06r
					; sub_1BCCD:loc_1BE38r	...
byte_1BC84	db 0			; DATA XREF: sub_1BCCD+293w
					; sub_1C1A5+48w ...
		db 90h
byte_1BC86	db 0			; DATA XREF: sub_1BCCD:loc_1BCF3r
					; sub_1BCCD:loc_1BE27r	...
		db  90h	; ê
byte_1BC88	db 0			; DATA XREF: sub_19BAC+9r
					; sub_19BAC:loc_19BBCr	...
		align 2
word_1BC8A	dw 0			; DATA XREF: sub_1BC92+Dw sub_1BCB7+Ar
word_1BC8C	dw 0			; DATA XREF: sub_1BC92+11w
					; sub_1BCB7+6r
word_1BC8E	dw 0			; DATA XREF: sub_1ADCB+Fw
					; sub_1AE03+14r
word_1BC90	dw 0			; DATA XREF: sub_1ADCB+18w
					; sub_1AE03+10r

; =============== S U B	R O U T	I N E =======================================


sub_1BC92	proc near		; CODE XREF: sub_196DD+12p
		push	ds
		push	es
		mov	ah, 35h	; '5'
		mov	al, 9
		int	21h		; DOS -	2+ - GET INTERRUPT VECTOR
					; AL = interrupt number
					; Return: ES:BX	= value	of interrupt vector
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	word_1BC8A, es
		mov	word_1BC8C, bx
		mov	ah, 25h	; '%'
		mov	al, 9
		mov	dx, cs
		mov	ds, dx
		mov	dx, 0B8CDh
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	es
		pop	ds
		assume ds:nothing
		retn
sub_1BC92	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BCB7	proc near		; CODE XREF: sub_16B9B+2B5Cp
		push	ds
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	dx, word_1BC8C
		mov	ds, word_1BC8A
		assume ds:nothing
		mov	ah, 25h	; '%'
		mov	al, 9
		int	21h		; DOS -	SET INTERRUPT VECTOR
					; AL = interrupt number
					; DS:DX	= new vector to	be used	for specified interrupt
		pop	ds
		retn
sub_1BCB7	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BCCD	proc far
		pushf
		cli
		push	ax
		push	ds
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		in	al, 60h		; 8042 keyboard	controller data	register
		mov	byte_1BC88, al
		in	al, 61h		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		or	al, 80h
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		and	al, 7Fh
		out	61h, al		; PC/XT	PPI port B bits:
					; 0: Tmr 2 gate	ÕÀÕ OR	03H=spkr ON
					; 1: Tmr 2 data	Õº  AND	0fcH=spkr OFF
					; 3: 1=read high switches
					; 4: 0=enable RAM parity checking
					; 5: 0=enable I/O channel check
					; 6: 0=hold keyboard clock low
					; 7: 0=enable kbrd
		push	bx
		mov	al, byte_1BC88
		mov	ah, al
		and	ah, 80h
		jnz	short loc_1BCF3
		jmp	loc_1BE27
; ---------------------------------------------------------------------------

loc_1BCF3:				; CODE XREF: sub_1BCCD+21j
		mov	bl, byte_1BC86
		and	al, 7Fh
		cmp	al, 39h	; '9'
		jnz	short loc_1BD06
		nop
		nop
		nop
		and	bl, 0EFh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD06:				; CODE XREF: sub_1BCCD+2Ej
		cmp	al, byte_1BC74
		jnz	short loc_1BD15
		nop
		nop
		nop
		and	bl, 0F7h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD15:				; CODE XREF: sub_1BCCD+3Dj
		cmp	al, byte_1BC74+1
		jnz	short loc_1BD24
		nop
		nop
		nop
		and	bl, 0FBh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD24:				; CODE XREF: sub_1BCCD+4Cj
		cmp	al, byte_1BC74+2
		jnz	short loc_1BD33
		nop
		nop
		nop
		and	bl, 0FDh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD33:				; CODE XREF: sub_1BCCD+5Bj
		cmp	al, byte_1BC74+3
		jnz	short loc_1BD42
		nop
		nop
		nop
		and	bl, 0FEh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD42:				; CODE XREF: sub_1BCCD+6Aj
		cmp	al, byte_1BC74+4
		jnz	short loc_1BD51
		nop
		nop
		nop
		and	bl, 0EFh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD51:				; CODE XREF: sub_1BCCD+79j
		cmp	al, 7Ch	; '|'
		jnz	short loc_1BD5E
		nop
		nop
		nop
		and	bl, 0F7h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD5E:				; CODE XREF: sub_1BCCD+86j
		cmp	al, 7Bh	; '{'
		jnz	short loc_1BD6B
		nop
		nop
		nop
		and	bl, 0FBh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD6B:				; CODE XREF: sub_1BCCD+93j
		cmp	al, 7Ah	; 'z'
		jnz	short loc_1BD78
		nop
		nop
		nop
		and	bl, 0FDh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD78:				; CODE XREF: sub_1BCCD+A0j
		cmp	al, 79h	; 'y'
		jnz	short loc_1BD85
		nop
		nop
		nop
		and	bl, 0FEh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD85:				; CODE XREF: sub_1BCCD+ADj
		cmp	al, 77h	; 'w'
		jnz	short loc_1BD92
		nop
		nop
		nop
		and	bl, 0EFh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD92:				; CODE XREF: sub_1BCCD+BAj
		cmp	al, 48h	; 'H'
		jnz	short loc_1BD9F
		nop
		nop
		nop
		and	bl, 0F7h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BD9F:				; CODE XREF: sub_1BCCD+C7j
		cmp	al, 50h	; 'P'
		jnz	short loc_1BDAC
		nop
		nop
		nop
		and	bl, 0FBh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDAC:				; CODE XREF: sub_1BCCD+D4j
		cmp	al, 4Dh	; 'M'
		jnz	short loc_1BDB9
		nop
		nop
		nop
		and	bl, 0FEh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDB9:				; CODE XREF: sub_1BCCD+E1j
		cmp	al, 4Bh	; 'K'
		jnz	short loc_1BDC6
		nop
		nop
		nop
		and	bl, 0FDh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDC6:				; CODE XREF: sub_1BCCD+EEj
		cmp	al, 1Dh
		jnz	short loc_1BDD5
		nop
		nop
		nop
		and	byte_1BC74+5, 0FEh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDD5:				; CODE XREF: sub_1BCCD+FBj
		cmp	al, 38h	; '8'
		jnz	short loc_1BDE4
		nop
		nop
		nop
		and	byte_1BC74+5, 0FDh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDE4:				; CODE XREF: sub_1BCCD+10Aj
		cmp	al, 53h	; 'S'
		jnz	short loc_1BDF3
		nop
		nop
		nop
		and	byte_1BC74+5, 0FBh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BDF3:				; CODE XREF: sub_1BCCD+119j
		cmp	al, 47h	; 'G'
		jnz	short loc_1BE00
		nop
		nop
		nop
		and	bl, 0F5h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE00:				; CODE XREF: sub_1BCCD+128j
		cmp	al, 49h	; 'I'
		jnz	short loc_1BE0D
		nop
		nop
		nop
		and	bl, 0F6h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE0D:				; CODE XREF: sub_1BCCD+135j
		cmp	al, 4Fh	; 'O'
		jnz	short loc_1BE1A
		nop
		nop
		nop
		and	bl, 0F9h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE1A:				; CODE XREF: sub_1BCCD+142j
		cmp	al, 51h	; 'Q'
		jz	short loc_1BE21
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE21:				; CODE XREF: sub_1BCCD+14Fj
		and	bl, 0FAh
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE27:				; CODE XREF: sub_1BCCD+23j
		mov	bl, byte_1BC86
		cmp	al, 39h	; '9'
		jnz	short loc_1BE38
		nop
		nop
		nop
		or	bl, 10h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE38:				; CODE XREF: sub_1BCCD+160j
		cmp	al, byte_1BC74
		jnz	short loc_1BE47
		nop
		nop
		nop
		or	bl, 8
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE47:				; CODE XREF: sub_1BCCD+16Fj
		cmp	al, byte_1BC74+1
		jnz	short loc_1BE56
		nop
		nop
		nop
		or	bl, 4
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE56:				; CODE XREF: sub_1BCCD+17Ej
		cmp	al, byte_1BC74+2
		jnz	short loc_1BE65
		nop
		nop
		nop
		or	bl, 2
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE65:				; CODE XREF: sub_1BCCD+18Dj
		cmp	al, byte_1BC74+3
		jnz	short loc_1BE74
		nop
		nop
		nop
		or	bl, 1
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE74:				; CODE XREF: sub_1BCCD+19Cj
		cmp	al, byte_1BC74+4
		jnz	short loc_1BE83
		nop
		nop
		nop
		or	bl, 10h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE83:				; CODE XREF: sub_1BCCD+1ABj
		cmp	al, 7Ch	; '|'
		jnz	short loc_1BE90
		nop
		nop
		nop
		or	bl, 8
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE90:				; CODE XREF: sub_1BCCD+1B8j
		cmp	al, 7Bh	; '{'
		jnz	short loc_1BE9D
		nop
		nop
		nop
		or	bl, 4
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BE9D:				; CODE XREF: sub_1BCCD+1C5j
		cmp	al, 7Ah	; 'z'
		jnz	short loc_1BEAA
		nop
		nop
		nop
		or	bl, 2
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BEAA:				; CODE XREF: sub_1BCCD+1D2j
		cmp	al, 79h	; 'y'
		jnz	short loc_1BEB7
		nop
		nop
		nop
		or	bl, 1
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BEB7:				; CODE XREF: sub_1BCCD+1DFj
		cmp	al, 77h	; 'w'
		jnz	short loc_1BEC4
		nop
		nop
		nop
		or	bl, 10h
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BEC4:				; CODE XREF: sub_1BCCD+1ECj
		cmp	al, 48h	; 'H'
		jnz	short loc_1BED1
		nop
		nop
		nop
		or	bl, 8
		jmp	loc_1BF56
; ---------------------------------------------------------------------------

loc_1BED1:				; CODE XREF: sub_1BCCD+1F9j
		cmp	al, 50h	; 'P'
		jnz	short loc_1BEDE
		nop
		nop
		nop
		or	bl, 4
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BEDE:				; CODE XREF: sub_1BCCD+206j
		cmp	al, 4Dh	; 'M'
		jnz	short loc_1BEEB
		nop
		nop
		nop
		or	bl, 1
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BEEB:				; CODE XREF: sub_1BCCD+213j
		cmp	al, 4Bh	; 'K'
		jnz	short loc_1BEF8
		nop
		nop
		nop
		or	bl, 2
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BEF8:				; CODE XREF: sub_1BCCD+220j
		cmp	al, 47h	; 'G'
		jnz	short loc_1BF05
		nop
		nop
		nop
		or	bl, 0Ah
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF05:				; CODE XREF: sub_1BCCD+22Dj
		cmp	al, 49h	; 'I'
		jnz	short loc_1BF12
		nop
		nop
		nop
		or	bl, 9
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF12:				; CODE XREF: sub_1BCCD+23Aj
		cmp	al, 4Fh	; 'O'
		jnz	short loc_1BF1F
		nop
		nop
		nop
		or	bl, 6
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF1F:				; CODE XREF: sub_1BCCD+247j
		cmp	al, 51h	; 'Q'
		jnz	short loc_1BF2C
		nop
		nop
		nop
		or	bl, 5
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF2C:				; CODE XREF: sub_1BCCD+254j
		cmp	al, 1Dh
		jnz	short loc_1BF3B
		nop
		nop
		nop
		or	byte_1BC74+5, 1
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF3B:				; CODE XREF: sub_1BCCD+261j
		cmp	al, 38h	; '8'
		jnz	short loc_1BF4A
		nop
		nop
		nop
		or	byte_1BC74+5, 2
		jmp	short loc_1BF56
; ---------------------------------------------------------------------------
		db  90h	; ê
; ---------------------------------------------------------------------------

loc_1BF4A:				; CODE XREF: sub_1BCCD+270j
		cmp	al, 53h	; 'S'
		jnz	short loc_1BF56
		nop
		nop
		nop
		or	byte_1BC74+5, 4

loc_1BF56:				; CODE XREF: sub_1BCCD+36j
					; sub_1BCCD+45j ...
		mov	byte_1BC86, bl
		mov	bh, byte_1BC74+0Eh
		or	bl, bh
		mov	byte_1BC84, bl
		cmp	byte_1BC74+5, 7
		jnz	short loc_1BF73
		nop
		nop
		nop
		jmp	far ptr	0FFFFh:0
; ---------------------------------------------------------------------------

loc_1BF73:				; CODE XREF: sub_1BCCD+29Cj
		pop	bx
		pop	ds
		assume ds:nothing
		mov	al, 61h	; 'a'
		out	20h, al		; Interrupt controller,	8259A.
		pop	ax
		popf
		iret
sub_1BCCD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BF7C	proc near		; CODE XREF: sub_19E18:loc_19E4Bp
					; sub_1C0A8:loc_1C0C0p	...
		mov	dx, 201h
		xor	ax, ax
		xor	cx, cx
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		and	ax, 30h
		cmp	ax, 30h	; '0'
		jz	short loc_1BF8F
		mov	cx, 0FFFFh

loc_1BF8F:				; CODE XREF: sub_1BF7C+Ej
		push	cx
		mov	bl, 1
		call	sub_1BFA0
		push	cx
		mov	bl, 2
		call	sub_1BFA0
		mov	dx, cx
		pop	cx
		pop	bx
		retn
sub_1BF7C	endp


; =============== S U B	R O U T	I N E =======================================


sub_1BFA0	proc near		; CODE XREF: sub_1BF7C+16p
					; sub_1BF7C+1Cp
		push	dx
		cli
		mov	al, 0
		out	43h, al		; Timer	8253-5 (AT: 8254.2).
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1BFA8:				; CODE XREF: sub_1BFA0+6j
		in	al, 40h		; Timer	8253-5 (AT: 8254.2).
		mov	ah, al
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1BFAE:				; CODE XREF: sub_1BFA0+Cj
		in	al, 40h		; Timer	8253-5 (AT: 8254.2).
		xchg	ah, al
		push	ax
		mov	cx, 4FFh
		out	dx, al
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1BFB9:				; CODE XREF: sub_1BFA0+17j
					; sub_1BFA0+1Cj
		in	al, dx
		test	al, bl
		loopne	loc_1BFB9
		cmp	cx, 0
		pop	cx
		jnz	short loc_1BFC9
		xor	cx, cx
		jmp	short loc_1BFF7
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1BFC9:				; CODE XREF: sub_1BFA0+22j
		mov	al, 0
		out	43h, al		; Timer	8253-5 (AT: 8254.2).
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1BFCF:				; CODE XREF: sub_1BFA0+2Dj
		in	al, 40h		; Timer	8253-5 (AT: 8254.2).
		mov	ah, al
		jmp	short $+2
; ---------------------------------------------------------------------------

loc_1BFD5:				; CODE XREF: sub_1BFA0+33j
		in	al, 40h		; Timer	8253-5 (AT: 8254.2).
		xchg	ah, al
		cmp	cx, ax
		jnb	short loc_1BFE9
		push	dx
		mov	dx, 0FFFFh
		sub	dx, ax
		add	cx, dx
		pop	dx
		jmp	short loc_1BFEB
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1BFE9:				; CODE XREF: sub_1BFA0+3Bj
		sub	cx, ax

loc_1BFEB:				; CODE XREF: sub_1BFA0+46j
		and	cx, 1FF0h
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1
		shr	cx, 1

loc_1BFF7:				; CODE XREF: sub_1BFA0+26j
		sti
		mov	dx, 201h
		push	cx
		push	ax
		mov	cx, 4FFh

loc_1C000:				; CODE XREF: sub_1BFA0+63j
		in	al, dx		; Game I/O port
					; bits 0-3: Coordinates	(resistive, time-dependent inputs)
					; bits 4-7: Buttons/Triggers (digital inputs)
		test	al, 0Fh
		loopne	loc_1C000
		pop	ax
		pop	cx
		pop	dx
		retn
sub_1BFA0	endp

; ---------------------------------------------------------------------------
		db 0Ah,	1, 4Ah,	4Fh, 59h, 53h, 54h, 49h, 43h, 4Bh, 20h
		db 43h,	41h, 4Ch, 49h, 42h, 52h, 41h, 54h, 49h,	4Fh, 4Eh
		db 0FFh, 7, 4, 50h, 55h, 53h, 48h, 20h,	4Ah, 4Fh, 59h
		db 53h,	54h, 49h, 43h, 4Bh, 20h, 54h, 4Fh, 20h,	54h, 4Fh
		db 50h,	20h, 4Ch, 45h, 46h, 54h, 0FFh, 0Ch, 5, 54h, 48h
		db 45h,	4Eh, 20h, 50h, 52h, 45h, 2 dup(53h), 20h, 46h
		db 49h,	52h, 45h, 0FFh,	5, 4, 50h, 55h,	53h, 48h, 20h
		db 4Ah,	4Fh, 59h, 53h, 54h, 49h, 43h, 4Bh, 20h,	54h, 4Fh
		db 20h,	42h, 4Fh, 2 dup(54h), 4Fh, 4Dh,	20h, 52h, 49h
		db 47h,	48h, 54h, 0FFh,	0Ch, 4,	43h, 45h, 4Eh, 54h, 52h
		db 45h,	20h, 4Ah, 4Fh, 59h, 53h, 54h, 49h, 43h,	4Bh, 0FFh
		db 9, 0BCh, 20h, 0BCh, 3Ch, 0BCh, 2 dup(0), 9, 0BCh, 4Eh
		db 0BCh, 3Ch, 0BCh, 2 dup(0), 9, 0BCh, 6Eh, 0BCh, 3Ch
		db 0BCh, 12h dup(0)

; =============== S U B	R O U T	I N E =======================================


sub_1C0A8	proc near		; CODE XREF: sub_1C164p
		call	word ptr ds:26h
		mov	bx, 0BC80h
		call	sub_19C43
		call	word ptr ds:1Ch
		mov	bx, 0BC80h
		call	sub_19C43
		call	word ptr ds:1Ch

loc_1C0C0:				; CODE XREF: sub_1C0A8+1Ej
		call	sub_1BF7C
		and	bx, 3
		jnz	short loc_1C0C0

loc_1C0C8:				; CODE XREF: sub_1C0A8+26j
		call	sub_1BF7C
		and	bx, 3
		jz	short loc_1C0C8
		mov	ds:0BC98h, cx
		mov	ds:0BC9Ah, dx
		call	word ptr ds:26h
		mov	bx, 0BC88h
		call	sub_19C43
		call	word ptr ds:1Ch
		mov	bx, 0BC88h
		call	sub_19C43
		call	word ptr ds:1Ch

loc_1C0F0:				; CODE XREF: sub_1C0A8+4Ej
		call	sub_1BF7C
		and	bx, 3
		jnz	short loc_1C0F0

loc_1C0F8:				; CODE XREF: sub_1C0A8+56j
		call	sub_1BF7C
		and	bx, 3
		jz	short loc_1C0F8
		mov	ds:0BC9Ch, cx
		mov	ds:0BC9Eh, dx
		call	word ptr ds:26h
		mov	bx, 0BC90h
		call	sub_19C43
		call	word ptr ds:1Ch
		mov	bx, 0BC90h
		call	sub_19C43
		call	word ptr ds:1Ch

loc_1C120:				; CODE XREF: sub_1C0A8+7Ej
		call	sub_1BF7C
		and	bx, 3
		jnz	short loc_1C120

loc_1C128:				; CODE XREF: sub_1C0A8+86j
		call	sub_1BF7C
		and	bx, 3
		jz	short loc_1C128
		mov	ds:0BCA0h, cx
		mov	ds:0BCA2h, dx
		mov	ax, ds:0BC9Ch
		sub	ax, ds:0BC98h
		mov	bx, ds:0BC9Eh
		sub	bx, ds:0BC9Ah
		mov	dl, 6
		idiv	dl
		and	ax, 0FFh
		cbw
		push	ax
		mov	ax, bx
		mov	dl, 6
		idiv	dl
		and	al, 0FFh
		cbw
		mov	bx, ax
		pop	ax
		mov	ds:0BCA4h, ax
		mov	ds:0BCA6h, bx
		retn
sub_1C0A8	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C164	proc near		; CODE XREF: start+D2p
		call	sub_1C0A8
		call	sub_1BF7C
		or	cx, dx
		jnz	short loc_1C175
		mov	byte ptr cs:loc_1C1A2, 0C3h ; '√'
		retn
; ---------------------------------------------------------------------------

loc_1C175:				; CODE XREF: sub_1C164+8j
		mov	ax, ds:0BCA0h
		mov	dx, ds:0BCA4h
		add	ax, dx
		mov	ds:0B87Eh, ax
		mov	ax, ds:0BCA0h
		neg	dx
		add	ax, dx
		mov	ds:0B880h, ax
		mov	ax, ds:0BCA2h
		mov	dx, ds:0BCA6h
		add	ax, dx
		mov	ds:0B87Ch, ax
		mov	ax, ds:0BCA2h
		neg	dx
		add	ax, dx
		mov	ds:0B87Ah, ax
		retn
sub_1C164	endp

; ---------------------------------------------------------------------------

loc_1C1A2:				; CODE XREF: sub_1C4CAp
					; DATA XREF: sub_19E18+4Aw ...
		mov	ax, seg	seg001

; =============== S U B	R O U T	I N E =======================================


sub_1C1A5	proc near
		mov	ds, ax
		assume ds:seg001
		call	sub_1BF7C
		and	bx, 3
		jz	short loc_1C1B7
		xor	bx, bx
		or	bl, 10h
		jmp	short loc_1C1B9
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1C1B7:				; CODE XREF: sub_1C1A5+8j
		xor	bx, bx

loc_1C1B9:				; CODE XREF: sub_1C1A5+Fj
		cmp	cx, word ptr byte_1BC74+0Ah
		jb	short loc_1C1C5
		or	bl, 1
		jmp	short loc_1C1CE
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1C1C5:				; CODE XREF: sub_1C1A5+18j
		cmp	cx, word ptr byte_1BC74+0Ch
		jnb	short loc_1C1CE
		or	bl, 2

loc_1C1CE:				; CODE XREF: sub_1C1A5+1Dj
					; sub_1C1A5+24j
		cmp	dx, word ptr byte_1BC74+6
		jnb	short loc_1C1DA
		or	bl, 8
		jmp	short loc_1C1E3
; ---------------------------------------------------------------------------
		align 2

loc_1C1DA:				; CODE XREF: sub_1C1A5+2Dj
		cmp	dx, word ptr byte_1BC74+8
		jb	short loc_1C1E3
		or	bl, 4

loc_1C1E3:				; CODE XREF: sub_1C1A5+32j
					; sub_1C1A5+39j
		mov	byte_1BC74+0Eh,	bl
		mov	bh, byte_1BC86
		or	bl, bh
		mov	byte_1BC84, bl
		retn
sub_1C1A5	endp

; ---------------------------------------------------------------------------
word_1C1F2	dw 0			; DATA XREF: sub_194C4+A55w
					; sub_194C4+A5Ew ...
		db 82h dup(0)
		assume ss:seg000, ds:nothing

; =============== S U B	R O U T	I N E =======================================


		public start
start		proc near
		cld
		mov	ah, 4Ah	; 'J'
		mov	bx, 0E00h
		int	21h		; DOS -	2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
					; ES = segment address of block	to change
					; BX = new size	in paragraphs
		jnb	short loc_1C283
		jmp	loc_19731
; ---------------------------------------------------------------------------

loc_1C283:				; CODE XREF: start+8j
		mov	ax, cs
		mov	es, ax
		assume es:seg001
		mov	si, 80h	; 'Ä'
		mov	di, seg	seg001
		mov	es, di
		mov	di, 0BDF6h
		mov	cl, [si]
		xor	ch, ch
		inc	cx
		cld
		rep movsb
		push	es
		pop	ds
		assume ds:seg001
		mov	si, 0BDF6h
		mov	cx, 80h	; 'Ä'

loc_1C2A2:				; CODE XREF: start:loc_1C2A9j
		mov	al, [si]
		inc	si
		cmp	al, 2Fh	; '/'
		jz	short loc_1C2AE

loc_1C2A9:				; CODE XREF: start+52j
		loop	loc_1C2A2
		jmp	short loc_1C2E2
; ---------------------------------------------------------------------------
		align 2

loc_1C2AE:				; CODE XREF: start+31j
		mov	al, [si]
		cmp	al, 63h	; 'c'
		jz	short loc_1C2D3
		cmp	al, 43h	; 'C'
		jz	short loc_1C2D3
		cmp	al, 65h	; 'e'
		jz	short loc_1C2CA
		cmp	al, 45h	; 'E'
		jz	short loc_1C2CA
		cmp	al, 74h	; 't'
		jz	short loc_1C2E5
		cmp	al, 54h	; 'T'
		jz	short loc_1C2E5
		jmp	short loc_1C2A9
; ---------------------------------------------------------------------------

loc_1C2CA:				; CODE XREF: start+44j	start+48j
		mov	word_13367, 2F4Fh
		jmp	short loc_1C2E2
; ---------------------------------------------------------------------------
		db 90h
; ---------------------------------------------------------------------------

loc_1C2D3:				; CODE XREF: start+3Cj	start+40j
		mov	word_13367, 2F57h
		jmp	short loc_1C2E2
; ---------------------------------------------------------------------------
		align 2
		mov	word_13367, 2F5Fh

loc_1C2E2:				; CODE XREF: start+35j	start+5Aj ...
		call	sub_1C4BD

loc_1C2E5:				; CODE XREF: start+4Cj	start+50j
		call	off_10402
		mov	si, 0BDF6h
		mov	cx, 80h	; 'Ä'

loc_1C2EF:				; CODE XREF: start+80j
		mov	al, [si]
		inc	si
		cmp	al, 2Fh	; '/'
		jz	short loc_1C308
		loop	loc_1C2EF
		push	ds
		mov	ax, seg	seg001
		mov	ds, ax
		mov	word_1AF2B, 0
		pop	ds
		assume ds:nothing
		jmp	short loc_1C31F
; ---------------------------------------------------------------------------
		align 2

loc_1C308:				; CODE XREF: start+7Ej
		mov	al, [si]
		cmp	al, 61h	; 'a'
		jz	short loc_1C312
		cmp	al, 41h	; 'A'
		jnz	short loc_1C31F

loc_1C312:				; CODE XREF: start+96j
		mov	ax, seg	seg001
		mov	ds, ax
		assume ds:seg001
		mov	es, ax
		mov	word_1AF2B, 1

loc_1C31F:				; CODE XREF: start+8Fj	start+9Aj
		call	sub_196DD
		call	sub_1AE81
		mov	byte_1AC60, 1
		call	nullsub_5
		call	off_1042A
		call	off_10408
		call	sub_1A44F
		call	off_1040A
		call	off_1043A
		call	sub_1A592
		call	sub_19E18
		jnb	short loc_1C34B
		call	sub_1C164

loc_1C34B:				; CODE XREF: start+D0j
		mov	word_199C4, 0
		call	off_1043C
		mov	word_1C4DF, sp

loc_1C359:				; CODE XREF: sub_194C4+A70j
					; sub_194C4+A98j ...
		mov	sp, word_1C4DF
		call	off_1040A
		call	sub_1A592
		call	off_1043A
		mov	word_1C1F2, 3
		mov	ax, word_1C1F2
		call	sub_1AECD
		call	off_10428

loc_1C378:				; CODE XREF: start+107j
		cmp	byte_1AC5E, 0FFh
		jz	short loc_1C378
		jmp	short loc_1C398
; ---------------------------------------------------------------------------
		align 2

loc_1C382:				; CODE XREF: start+138j
		cmp	byte_1AC5E, 0FFh
		jz	short loc_1C395
		mov	word_1C1F2, 0
		mov	ax, word_1C1F2
		call	sub_1AECD

loc_1C395:				; CODE XREF: start+111j
		call	sub_16B9B

loc_1C398:				; CODE XREF: start+109j
		cmp	byte_1AC5E, 0FFh
		jz	short loc_1C3AB
		mov	word_1C1F2, 0
		mov	ax, word_1C1F2
		call	sub_1AECD

loc_1C3AB:				; CODE XREF: start+127j
		call	sub_16CD7
		jmp	short loc_1C382
start		endp

; ---------------------------------------------------------------------------
; START	OF FUNCTION CHUNK FOR sub_16B9B

loc_1C3B0:				; CODE XREF: sub_16B9B:loc_16BC4j
					; sub_16CD7:loc_16D66j
		mov	word_16A14, 6
		call	sub_199C8

loc_1C3B9:				; CODE XREF: sub_194C4:loc_19684j
					; sub_194C4+1E7j
		mov	sp, word_1C4DF
		mov	word_16A10, 6
		mov	word_16A12, 6
		mov	word_18200, 0
		mov	word_17A2D, 0
		mov	word_17A2F, 0
		call	sub_1A54A
		push	cs
		pop	ds
		call	sub_1A56B
		call	off_10404
		call	off_10406
		call	sub_1A45C
		call	sub_1C4E2
		call	off_10442
		call	off_10426
		call	off_1043C
		call	off_10448
		mov	ax, 4
		mov	word_1C1F2, ax
		call	sub_1AECD
		mov	ax, word_18FEC
		dec	ax
		add	ax, ax
		mov	si, 2F69h
		add	si, ax
		mov	ax, [si]
		mov	word_1C1F2, ax
		call	sub_1AECD
		mov	ax, 0
		call	sub_1A257
		call	sub_1A5F0
		call	off_10426
		call	sub_19420
		mov	word_19B3C, 3245h
		mov	word_19B3E, 5432h

loc_1C439:				; CODE XREF: sub_16B9B:loc_1C465j
		mov	word_18216, 0
		mov	word_18218, 0

loc_1C445:				; CODE XREF: sub_16B9B+591Dj
		call	sub_16B3B
		cmp	word_18218, 1
		jnz	short loc_1C467
		mov	word_17A2F, 0
		call	sub_1618F
		call	sub_19462
		cmp	word_16A14, 0
		jnz	short loc_1C465
		jmp	loc_19F12
; ---------------------------------------------------------------------------

loc_1C465:				; CODE XREF: sub_16B9B+58C5j
		jmp	short loc_1C439
; ---------------------------------------------------------------------------

loc_1C467:				; CODE XREF: sub_16B9B+58B2j
		call	sub_19BAC
		call	sub_15F40
		mov	byte_15F3E, 0
		call	sub_169E3
		call	sub_168E4
		call	sub_17205
		call	sub_18351
		call	sub_18CBE
		call	sub_18D28
		call	sub_1705D
		call	off_1041E
		call	off_10424
		call	off_1043E
		call	off_1041C
		call	sub_19AF6
		call	off_10438
		call	sub_194C4
		cmp	byte_1BC88, 10h
		jnz	short loc_1C4B3
		nop
		nop
		nop
		call	sub_19F8A
		jnb	short loc_1C4B3
		jmp	loc_1C359
; ---------------------------------------------------------------------------

loc_1C4B3:				; CODE XREF: sub_16B9B+590Bj
					; sub_16B9B+5913j
		cmp	byte_1BC88, 1
		jnz	short loc_1C445
		jmp	loc_196F3
; END OF FUNCTION CHUNK	FOR sub_16B9B

; =============== S U B	R O U T	I N E =======================================


sub_1C4BD	proc near		; CODE XREF: start:loc_1C2E2p
		mov	ax, cs
		mov	cx, 0
		mov	dx, word_13367
		call	sub_1A65B
		retn
sub_1C4BD	endp


; =============== S U B	R O U T	I N E =======================================


sub_1C4CA	proc near		; CODE XREF: sub_16EB2+ACp
					; sub_18351+1Fp ...
		call	loc_1C1A2
		mov	al, byte_1BC84
		retn
sub_1C4CA	endp

; ---------------------------------------------------------------------------
		mov	dx, 2F47h
		mov	ax, cs
		xor	bx, bx
		mov	cx, 1180h
		call	loc_1A6A8
		retn
; ---------------------------------------------------------------------------
word_1C4DF	dw 0			; DATA XREF: start+DFw
					; start:loc_1C359r ...
; [00000001 BYTES: COLLAPSED FUNCTION nullsub_5. PRESS KEYPAD CTRL-"+" TO EXPAND]

; =============== S U B	R O U T	I N E =======================================


sub_1C4E2	proc near		; CODE XREF: sub_16B9B+5853p
		mov	ax, word_16A14
		inc	ax
		cmp	ax, 6
		jg	short locret_1C4EE
		mov	word_16A14, ax

locret_1C4EE:				; CODE XREF: sub_1C4E2+7j
		retn
sub_1C4E2	endp

seg001		ends


		end start
